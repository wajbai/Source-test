//#1. Done on 30/06/2017, Modified by Alwar, If we make CR, DR voucher entries in same ledger in one voucher
// In Ledger Report, it sums by ledger (for example TDS ledger , 100Cr , 100Dr, expenses ledger 1000), it shows tds 200 in Debit side 
// so we changed ledger report SQL if ledger count >1, takes its indivual amount.

using System;
using Bosco.Utility;
using Bosco.Utility.ConfigSetting;

namespace Bosco.Report.SQL
{

    public class ReportSQL
    {
        #region SQL Script

        public string GetReportSQL(ReportSQLCommand.Report queryId)
        {

            string query = string.Empty;
            switch (queryId)
            {
                #region Monthly Abstract
                case ReportSQLCommand.Report.AccountYear:
                    {
                        query = "SELECT ACC_YEAR_ID, YEAR_FROM, YEAR_TO FROM ACCOUNTING_YEAR " +
                                "WHERE ?DATE_FROM >= YEAR_FROM AND ?DATE_FROM <= YEAR_TO;";
                        break;
                    }
                case ReportSQLCommand.Report.ACYearSignDetails:
                    {
                        query = "SELECT IFNULL(AC.ACC_YEAR_ID,0) AS ACC_YEAR_ID, CONCAT(CONCAT(MONTHNAME(YEAR_FROM), CONCAT(' ', YEAR(YEAR_FROM))),\n" +
                                    "CONCAT(' - ', CONCAT(MONTHNAME(YEAR_TO), CONCAT(' ', YEAR(YEAR_TO))))) AS ACC_YEAR_NAME, ROLE_NAME, ROLE,\n" +
                                    "IFNULL(MP.PROJECT_ID,0) AS PROJECT_ID, IFNULL(MP.PROJECT,'') AS PROJECT\n" +
                                    "FROM ACCOUNTING_YEAR AC\n" +
                                    "INNER JOIN MASTER_REPORT_SIGN_DETAIL SD ON SD.ACC_YEAR_ID = AC.ACC_YEAR_ID\n" +
                                    "LEFT JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = SD.PROJECT_ID\n" +
                                    "ORDER BY AC.YEAR_FROM DESC, SD.SIGN_ORDER";
                        break;
                    }
                case ReportSQLCommand.Report.CCEnabledLedgerList:
                    {
                        query = "SELECT ML.LEDGER_NAME, MC.COST_CENTRE_NAME, IF(VM.COST_CENTRE_ID IS NULL, 0, 1) AS RECORD_EXISTS\n" +
                                    "FROM MASTER_LEDGER ML\n" +
                                    "LEFT JOIN (SELECT VT.LEDGER_ID, COST_CENTRE_ID FROM VOUCHER_MASTER_TRANS VM\n" +
                                    "INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VM.VOUCHER_ID\n" +
                                    "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                    "INNER JOIN VOUCHER_CC_TRANS VCT ON VCT.VOUCHER_ID = VM.VOUCHER_ID AND\n" +
                                    "    VCT.LEDGER_ID = VT.LEDGER_ID AND VCT.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO\n" +
                                    "WHERE VM.STATUS = 1 AND ML.IS_COST_CENTER = 1 AND ML.GROUP_ID NOT IN (12, 13, 14)) AS VM ON VM.LEDGER_ID = ML.LEDGER_ID\n" +
                                    "LEFT JOIN MASTER_COST_CENTRE MC ON MC.COST_CENTRE_ID = VM.COST_CENTRE_ID\n" +
                                    "WHERE ML.GROUP_ID NOT IN (12, 13, 14) AND ML.IS_COST_CENTER = 1";
                        break;
                    }
                case ReportSQLCommand.Report.MonthlyAbstract:
                    {
                        query = "SELECT MLG.GROUP_ID, ML.LEDGER_ID, VT.VOUCHER_DATE, MLG.GROUP_CODE, MLG.NATURE_ID, MLG.PARENT_GROUP_ID, " +
                                "ML.LEDGER_CODE, MLG.SORT_ORDER, PG.SORT_ORDER AS PARENT_SORT_ORDER, " +
                                "CASE " +
                                "WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN " +
                                "MLG.LEDGER_GROUP " +
                                "ELSE " +
                                "PG.LEDGER_GROUP " +
                                "END AS PARENT_GROUP, " +
                                "       IF(?SHOWGROUPCODE = 1 OR ?SHOWLEDGERCODE = 1,\n" +
                                "       CASE\n" +
                                "         WHEN MLG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                "          CONCAT('    ',MLG.LEDGER_GROUP)\n" + //On 06/04/2020, to have second level group order (CONCAT(MLG.LEDGER_GROUP))
                                "         ELSE\n" +
                                "        CONCAT('   ',MLG.LEDGER_GROUP)\n" +
                                "       END,MLG.LEDGER_GROUP) AS LEDGER_GROUP,\n" +
                                " --      CASE\n" +
                                "     --    WHEN ML.GROUP_ID = MLG.MAIN_GROUP_ID THEN\n" +
                                "    --     CONCAT('   ',ML.LEDGER_NAME)\n" +
                                "    --     ELSE\n" +
                                "     --     CONCAT('      ',ML.LEDGER_NAME)\n" +
                                "    --   END AS LEDGER_NAME,\n" +
                                "       IF(?SHOWGROUPCODE = 1 AND ?SHOWLEDGERCODE = 1,\n" +
                                "          CASE\n" +
                                "            WHEN MLG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                "             CONCAT('   ', ML.LEDGER_NAME)\n" +
                                "            ELSE\n" +
                                "             CONCAT('      ', ML.LEDGER_NAME)\n" +
                                "          END,\n" +
                                "          ML.LEDGER_NAME) AS LEDGER_NAME,\n" +
                                "SUM(IF(VT.VOUCHER_DATE >= ?DATE_FROM, " +
                                "   IF ((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') " +
                                "   OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'), " +
                                "   -IFNULL(VT.AMOUNT, 0), IFNULL(VT.AMOUNT, 0)), 0)) AS AMOUNT_PERIOD, " +
                                "SUM(IF ((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') " +
                                "OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'), " +
                                "-IFNULL(VT.AMOUNT, 0), IFNULL(VT.AMOUNT, 0))) AS AMOUNT_PROGRESSIVE, IFNULL(BL.APPROVED_AMOUNT,0) AS APPROVED_AMOUNT," +
                            //"IF(ISNULL(VT.AMOUNT) = 0, 1,0) AS HAS_TRANS " +
                                "IF(SUM(IF ((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') " +
                                "OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'), " +
                                "-IFNULL(VT.AMOUNT, 0), IFNULL(VT.AMOUNT, 0))) = 0, 0, 1) AS HAS_TRANS, ML.ACCESS_FLAG, " +
                                "?CURRENCY_COUNTRY_ID AS CURRENCY_COUNTRY_ID " +
                                "FROM PROJECT_LEDGER AS PL " +
                                "INNER JOIN MASTER_LEDGER AS ML  ON PL.LEDGER_ID = ML.LEDGER_ID AND PL.PROJECT_ID IN (?PROJECT_ID) " +
                                "INNER JOIN MASTER_LEDGER_GROUP AS MLG  ON ML.GROUP_ID = MLG.GROUP_ID AND MLG.GROUP_ID NOT IN (?GROUP_ID) " +
                                "INNER JOIN MASTER_LEDGER_GROUP PG ON MLG.PARENT_GROUP_ID=PG.GROUP_ID " +
                                "LEFT JOIN (SELECT VMT.PROJECT_ID, VMT.VOUCHER_ID, VMT.CURRENCY_COUNTRY_ID, VMT.VOUCHER_DATE, VT.LEDGER_ID," +
                                " (VT.AMOUNT * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)) AS AMOUNT, VT.TRANS_MODE " +
                                "  FROM VOUCHER_TRANS AS VT " +
                                "  INNER JOIN VOUCHER_MASTER_TRANS AS VMT ON VMT.BRANCH_ID = VT.BRANCH_ID AND VMT.VOUCHER_ID = VT.VOUCHER_ID AND VMT.LOCATION_ID = VT.LOCATION_ID" +
                                "  AND VMT.VOUCHER_DATE BETWEEN ?DATE_PROGRESS_FROM AND ?DATE_TO AND VMT.STATUS = 1 AND " +
                                "  IF(?CURRENCY_COUNTRY_ID > 0, VMT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1) AND " +
                                "  ( (VMT.VOUCHER_TYPE IN ('RC','PY') AND VT.TRANS_MODE =?TRANS_MODE) OR (VMT.VOUCHER_TYPE IN ('JN','CN') AND VMT.VOUCHER_SUB_TYPE = 'FD' AND VT.TRANS_MODE =?TRANS_MODE OR (VMT.VOUCHER_TYPE='JN' AND VMT.IS_CASH_BANK_STATUS=1 AND VT.TRANS_MODE = ?TRANS_MODE)) )" + // 13/02/2025
                                "  AND VMT.PROJECT_ID IN (?PROJECT_ID)) AS VT ON VT.PROJECT_ID = PL.PROJECT_ID AND VT.LEDGER_ID = PL.LEDGER_ID " +
                                "LEFT JOIN (SELECT GROUP_CONCAT(BM.BUDGET_ID) AS BUDGET_ID, PROJECT_ID, ML.GROUP_ID, BL.LEDGER_ID, " +
                                "   ML.LEDGER_NAME, SUM(IFNULL(BL.APPROVED_AMOUNT, 0)/?EXCHANGE_RATE ) AS APPROVED_AMOUNT, BL.TRANS_MODE FROM BUDGET_MASTER BM " +
                                "   INNER JOIN BUDGET_LEDGER BL ON BM.BUDGET_ID = BL.BUDGET_ID " +
                                "   INNER JOIN (SELECT BUDGET_ID, GROUP_CONCAT(PROJECT_ID) AS PROJECT_ID FROM BUDGET_PROJECT  " +
                                "   WHERE PROJECT_ID IN (?PROJECT_ID) GROUP BY BUDGET_ID ) BP ON BP.BUDGET_ID = BM.BUDGET_ID " +
                                "   INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = BL.LEDGER_ID " +
                                "   WHERE DATE_FROM = ?YEAR_FROM AND DATE_TO = ?YEAR_TO AND BUDGET_ACTION = 2 AND IS_ACTIVE = 1 AND BL.TRANS_MODE=?TRANS_MODE " +
                                "   GROUP BY BL.LEDGER_ID, BL.TRANS_MODE) BL ON BL.LEDGER_ID = ML.LEDGER_ID " +
                                " WHERE IF(?INCLUDE_ALL_LEDGER = 1, (ML.ACCESS_FLAG <>2 OR VT.VOUCHER_ID IS NOT NULL) { AND (MLG.NATURE_ID IN (?NATURE_ID) OR VT.VOUCHER_ID IS NOT NULL)}, VT.VOUCHER_ID IS NOT NULL)" +
                                "GROUP BY ML.LEDGER_ID"; //ORDER BY MLG.SORT_ORDER
                        break;
                    }

                case ReportSQLCommand.Report.ApprovedBudgetDetails:
                    {
                        query = @"SELECT GROUP_CONCAT(BM.BUDGET_ID) AS BUDGET_ID, PROJECT_ID, MLG.PARENT_GROUP_ID, ML.GROUP_ID, BL.LEDGER_ID, 
                                PG.LEDGER_GROUP, MLG.LEDGER_GROUP, ML.LEDGER_NAME,
                                SUM(BL.APPROVED_AMOUNT) AS APPROVED_AMOUNT, BL.TRANS_MODE FROM BUDGET_MASTER BM
                                INNER JOIN BUDGET_LEDGER BL ON BM.BUDGET_ID = BL.BUDGET_ID
                                INNER JOIN (SELECT BUDGET_ID, GROUP_CONCAT(PROJECT_ID) AS PROJECT_ID FROM BUDGET_PROJECT 
                                   WHERE PROJECT_ID IN (?PROJECT_ID) GROUP BY BUDGET_ID ) BP ON BP.BUDGET_ID = BM.BUDGET_ID
                                INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = BL.LEDGER_ID
                                WHERE DATE_FROM = ?DATE_FROM AND DATE_TO = ?DATE_TO AND BUDGET_ACTION = 2 AND IS_ACTIVE = 1 AND BL.TRANS_MODE=?TRANS_MODE
                                GROUP BY BL.LEDGER_ID, BL.TRANS_MODE;";
                        break;
                    }
                #endregion

                #region MultiAbstract
                case ReportSQLCommand.Report.MultiAbstract:
                    {
                        query = "SELECT MONTH_YEAR, YEAR(MONTH_YEAR) AS 'YEAR', MONTH(MONTH_YEAR) AS 'MONTH', IFNULL(ML.LEDGER_ID,0) AS LEDGER_ID, " +
                         "CONCAT(LEFT(MONTHNAME(MONTH_YEAR),3), '-', YEAR(MONTH_YEAR)) AS MONTH_NAME, " +
                         "VMT.VOUCHER_DATE, IFNULL(MLG.GROUP_CODE, '') AS GROUP_CODE, IFNULL(MLG.LEDGER_GROUP, '') AS LEDGER_GROUP, " +
                         "IFNULL(ML.LEDGER_CODE,'') AS LEDGER_CODE, IFNULL(ML.LEDGER_NAME,'') AS LEDGER_NAME, " +
                         "NULLIF(IF((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') " +
                         "OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'), " +
                         "-IFNULL(VT.AMOUNT, 0), IFNULL(VT.AMOUNT, 0)), 0) * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)  AS AMOUNT, " +
                         "IFNULL(VT.TRANS_MODE, '') AS TRANS_MODE, " +
                         "IF(ISNULL(VT.AMOUNT) = 0, 1, " +
                         "IF((?VOUCHER_TYPE = 'RC' AND MLG.NATURE_ID IN (1,4)) " +
                         "OR (?VOUCHER_TYPE = 'PY' AND MLG.NATURE_ID IN (2,3)), 1, 0)) AS HAS_TRANS " +
                         "FROM " +
                         " ( " +
                         "  SELECT (?DATE_FROM - INTERVAL DAYOFMONTH(?DATE_FROM) -1 DAY) " +
                         "     + INTERVAL NO_OF_MONTH MONTH AS MONTH_YEAR, NO_OF_MONTH " +
                         "  FROM " +
                         "  ( " +
                         "    SELECT @rownum := @rownum + 1 AS NO_OF_MONTH FROM " +
                         "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T1, " +
                         "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T2, " +
                         "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T3, " +
                         "      (SELECT @rownum := -1) AS T0 " + /* for 64 months */
                         "  ) D1 " +
                         " ) D2 " +
                         "LEFT JOIN MASTER_LEDGER AS ML " +
                         "INNER JOIN MASTER_LEDGER_GROUP AS MLG " +
                         "  ON ML.GROUP_ID = MLG.GROUP_ID AND MLG.GROUP_ID NOT IN (?GROUP_ID) " +
                         "INNER JOIN VOUCHER_MASTER_TRANS AS VMT ON VMT.PROJECT_ID IN (?PROJECT_ID) " +
                         "INNER JOIN VOUCHER_TRANS AS VT ON VMT.VOUCHER_ID = VT.VOUCHER_ID AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO " +
                         "AND VMT.STATUS = 1 AND IF(?CURRENCY_COUNTRY_ID > 0, VMT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1) " +
                         " AND ( (VMT.VOUCHER_TYPE IN ('RC','PY') AND VT.TRANS_MODE =?TRANS_MODE) OR (VMT.VOUCHER_TYPE IN ('JN','CN') AND VMT.VOUCHER_SUB_TYPE ='FD' AND VT.TRANS_MODE =?TRANS_MODE  OR (VMT.VOUCHER_TYPE='JN' AND VMT.IS_CASH_BANK_STATUS=1 AND VT.TRANS_MODE = ?TRANS_MODE)) ) " + // 13/02/2025
                         "ON ML.LEDGER_ID = VT.LEDGER_ID AND YEAR(D2.MONTH_YEAR) = YEAR(VMT.VOUCHER_DATE) " +
                         "AND MONTH(D2.MONTH_YEAR) = MONTH(VMT.VOUCHER_DATE) " +
                         "WHERE D2.MONTH_YEAR <= ?DATE_TO";

                        /*"INNER JOIN MASTER_LEDGER_GROUP AS MLG " +
                        "ON ML.GROUP_ID = MLG.GROUP_ID " +
                        "AND MLG.GROUP_ID NOT IN (?GROUP_ID) " +
                        "LEFT JOIN VOUCHER_TRANS AS VT " +
                        "INNER JOIN VOUCHER_MASTER_TRANS AS VMT " +
                        "ON VT.VOUCHER_ID = VMT.VOUCHER_ID " +
                        "AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO " +
                        "AND VMT.VOUCHER_TYPE = ?VOUCHER_TYPE " +
                        "AND VMT.PROJECT_ID IN (?PROJECT_ID) " +
                        "ON ML.LEDGER_ID = VT.LEDGER_ID " +
                        "ON YEAR(D2.MONTH_YEAR) = YEAR(VMT.VOUCHER_DATE) " +
                        "AND MONTH(D2.MONTH_YEAR) = MONTH(VMT.VOUCHER_DATE) " +
                        "WHERE D2.MONTH_YEAR <= ?DATE_TO ";*/
                        break;
                    }
                case ReportSQLCommand.Report.MultiAbstractQuaterly:
                    {
                        //#16/04/2020 QUARTER(MONTH_YEAR) AS BASE_QUATER_NO
                        query = "SELECT QUARTER(MONTH_YEAR) AS REAL_QUATER_NO,\n" +
                        "CASE WHEN quarter(MONTH_YEAR)=1\n" +
                        "THEN QUARTER(MONTH_YEAR)+3\n" +
                        "ELSE QUARTER(MONTH_YEAR)-1\n" +
                        "END AS QUATER_NO,\n" +
                        "MONTH_YEAR, YEAR(MONTH_YEAR) AS 'YEAR', MONTH(MONTH_YEAR) AS 'MONTH', IFNULL(ML.LEDGER_ID,0) AS LEDGER_ID, " +
                        "CONCAT(LEFT(MONTHNAME(MONTH_YEAR),3), '-', YEAR(MONTH_YEAR)) AS MONTH_NAME, " +
                        "VMT.VOUCHER_DATE, IFNULL(MLG.GROUP_CODE, '') AS GROUP_CODE, IFNULL(MLG.LEDGER_GROUP, '') AS LEDGER_GROUP, " +
                        "IFNULL(ML.LEDGER_CODE,'') AS LEDGER_CODE, IFNULL(ML.LEDGER_NAME,'') AS LEDGER_NAME,  " +
                        "MD.NAME AS DONOR_NAME," +
                        "NULLIF(IF((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') " +
                        "OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'), " +
                        "-IFNULL(VT.AMOUNT, 0), IFNULL(VT.AMOUNT, 0)), 0) * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)  AS AMOUNT, " +
                        "IFNULL(VT.TRANS_MODE, '') AS TRANS_MODE, " +
                        "IF(ISNULL(VT.AMOUNT) = 0, 1, " +
                        "IF((?VOUCHER_TYPE = 'RC' AND MLG.NATURE_ID IN (1,4)) " +
                        "OR (?VOUCHER_TYPE = 'PY' AND MLG.NATURE_ID IN (2,3)), 1, 0)) AS HAS_TRANS " +
                        "FROM " +
                        " ( " +
                        "  SELECT (?DATE_FROM - INTERVAL DAYOFMONTH(?DATE_FROM) -1 DAY) " +
                        "     + INTERVAL NO_OF_MONTH MONTH AS MONTH_YEAR, NO_OF_MONTH " +
                        "  FROM " +
                        "  ( " +
                        "    SELECT @rownum := @rownum + 1 AS NO_OF_MONTH FROM " +
                        "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T1, " +
                        "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T2, " +
                        "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T3, " +
                        "      (SELECT @rownum := -1) AS T0 " + /* for 64 months */
                        "  ) D1 " +
                        " ) D2 " +
                        "LEFT JOIN MASTER_LEDGER AS ML " +
                        "INNER JOIN MASTER_LEDGER_GROUP AS MLG " +
                        "  ON ML.GROUP_ID = MLG.GROUP_ID AND MLG.GROUP_ID NOT IN (?GROUP_ID) " +
                        "INNER JOIN VOUCHER_MASTER_TRANS AS VMT ON VMT.PROJECT_ID IN (?PROJECT_ID) " +
                        "INNER JOIN VOUCHER_TRANS AS VT ON VMT.VOUCHER_ID = VT.VOUCHER_ID AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND " +
                        "VMT.STATUS = 1 AND IF(?CURRENCY_COUNTRY_ID > 0, VMT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1) AND " +
                        " ( (VMT.VOUCHER_TYPE IN ('RC','PY') AND VT.TRANS_MODE =?TRANS_MODE) OR (VMT.VOUCHER_TYPE IN ('JN','CN') AND VMT.VOUCHER_SUB_TYPE ='FD' AND VT.TRANS_MODE =?TRANS_MODE  OR (VMT.VOUCHER_TYPE='JN' AND VMT.IS_CASH_BANK_STATUS=1 AND VT.TRANS_MODE = ?TRANS_MODE)) ) " +
                        "ON ML.LEDGER_ID = VT.LEDGER_ID AND YEAR(D2.MONTH_YEAR) = YEAR(VMT.VOUCHER_DATE) " +
                        "AND MONTH(D2.MONTH_YEAR) = MONTH(VMT.VOUCHER_DATE) " +
                        "LEFT JOIN MASTER_DONAUD MD ON MD.DONAUD_ID = VMT.DONOR_ID " +
                        "WHERE D2.MONTH_YEAR <= ?DATE_TO";
                        break;
                    }
                case ReportSQLCommand.Report.MultiAbstractQuaterlyWithCC:
                    {
                        //#16/04/2020 QUARTER(MONTH_YEAR) AS BASE_QUATER_NO
                        query = "SELECT QUARTER(MONTH_YEAR) AS REAL_QUATER_NO,\n" +
                        "CASE WHEN quarter(MONTH_YEAR)=1\n" +
                        "THEN QUARTER(MONTH_YEAR)+3\n" +
                        "ELSE QUARTER(MONTH_YEAR)-1\n" +
                        "END AS QUATER_NO,\n" +
                        "MONTH_YEAR, YEAR(MONTH_YEAR) AS 'YEAR', MONTH(MONTH_YEAR) AS 'MONTH', IFNULL(ML.LEDGER_ID,0) AS LEDGER_ID, " +
                        "CONCAT(LEFT(MONTHNAME(MONTH_YEAR),3), '-', YEAR(MONTH_YEAR)) AS MONTH_NAME, " +
                        "VMT.VOUCHER_DATE, IFNULL(MLG.GROUP_CODE, '') AS GROUP_CODE, IFNULL(MLG.LEDGER_GROUP, '') AS LEDGER_GROUP, " +
                        "IFNULL(ML.LEDGER_CODE,'') AS LEDGER_CODE, IFNULL(ML.LEDGER_NAME,'') AS LEDGER_NAME,  " +
                        "IFNULL(MC.COST_CENTRE_NAME, NULL) AS COST_CENTRE_NAME, MD.NAME AS DONOR_NAME," +
                            //"NULLIF(IF((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') " +
                            //"OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'), " +
                            //"-IFNULL(VT.AMOUNT, 0), IFNULL(VT.AMOUNT, 0)), 0) AS AMOUNT, " +
                        "(NULLIF(IF((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') " +
                        "OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'), " +
                        "-IFNULL(VCC.AMOUNT, VT.AMOUNT), IFNULL(VCC.AMOUNT, VT.AMOUNT)), 0) * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)) AS AMOUNT, " +
                        "IFNULL(VT.TRANS_MODE, '') AS TRANS_MODE, " +
                        "IF(ISNULL(VT.AMOUNT) = 0, 1, " +
                        "IF((?VOUCHER_TYPE = 'RC' AND MLG.NATURE_ID IN (1,4)) " +
                        "OR (?VOUCHER_TYPE = 'PY' AND MLG.NATURE_ID IN (2,3)), 1, 0)) AS HAS_TRANS " +
                        "FROM " +
                        " ( " +
                        "  SELECT (?DATE_FROM - INTERVAL DAYOFMONTH(?DATE_FROM) -1 DAY) " +
                        "     + INTERVAL NO_OF_MONTH MONTH AS MONTH_YEAR, NO_OF_MONTH " +
                        "  FROM " +
                        "  ( " +
                        "    SELECT @rownum := @rownum + 1 AS NO_OF_MONTH FROM " +
                        "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T1, " +
                        "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T2, " +
                        "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T3, " +
                        "      (SELECT @rownum := -1) AS T0 " + /* for 64 months */
                        "  ) D1 " +
                        " ) D2 " +
                        "LEFT JOIN MASTER_LEDGER AS ML " +
                        "INNER JOIN MASTER_LEDGER_GROUP AS MLG " +
                        "  ON ML.GROUP_ID = MLG.GROUP_ID AND MLG.GROUP_ID NOT IN (?GROUP_ID) " +
                        "INNER JOIN VOUCHER_MASTER_TRANS AS VMT ON VMT.PROJECT_ID IN (?PROJECT_ID) " +
                        "INNER JOIN VOUCHER_TRANS AS VT ON VMT.VOUCHER_ID = VT.VOUCHER_ID AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND " +
                        " VMT.STATUS = 1 AND IF(?CURRENCY_COUNTRY_ID > 0, VMT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1) AND " +
                        " ( (VMT.VOUCHER_TYPE IN ('RC','PY') AND VT.TRANS_MODE =?TRANS_MODE) OR (VMT.VOUCHER_TYPE IN ('JN','CN') AND VMT.VOUCHER_SUB_TYPE ='FD' AND VT.TRANS_MODE =?TRANS_MODE  OR (VMT.VOUCHER_TYPE='JN' AND VMT.IS_CASH_BANK_STATUS=1 AND VT.TRANS_MODE = ?TRANS_MODE)) ) " +
                        "ON ML.LEDGER_ID = VT.LEDGER_ID AND YEAR(D2.MONTH_YEAR) = YEAR(VMT.VOUCHER_DATE) " +
                        "AND MONTH(D2.MONTH_YEAR) = MONTH(VMT.VOUCHER_DATE) " +
                        "LEFT JOIN VOUCHER_CC_TRANS VCC ON VCC.VOUCHER_ID = VT.VOUCHER_ID AND VCC.LEDGER_ID = VT.LEDGER_ID AND VCC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO " +
                        "LEFT JOIN MASTER_COST_CENTRE MC ON MC.COST_CENTRE_ID = VCC.COST_CENTRE_ID " +
                        "LEFT JOIN MASTER_DONAUD MD ON MD.DONAUD_ID = VMT.DONOR_ID " +
                        "WHERE D2.MONTH_YEAR <= ?DATE_TO";
                        break;
                    }

                case ReportSQLCommand.Report.MultiAbstractYear:
                    {
                        query = "SELECT AY.YEAR_FROM, CONCAT(YEAR(AY.YEAR_FROM) , '-' ,  YEAR(AY.YEAR_TO)) AC_YEAR_NAME," +
                                     "MONTH_YEAR, YEAR(MONTH_YEAR) AS 'YEAR', MONTH(MONTH_YEAR) AS 'MONTH', IFNULL(ML.LEDGER_ID,0) AS LEDGER_ID, " +
                                     "CONCAT(LEFT(MONTHNAME(MONTH_YEAR),3), '-', YEAR(MONTH_YEAR)) AS MONTH_NAME, " +
                                     "VMT.VOUCHER_DATE, MLG.GROUP_CODE, IFNULL(MLG.LEDGER_GROUP, '') AS LEDGER_GROUP, ML.LEDGER_CODE, IFNULL(ML.LEDGER_NAME,'') AS LEDGER_NAME, " +
                                     "MD.NAME AS DONOR_NAME," +
                                     "NULLIF(IF((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') " +
                                     "OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'), " +
                                     "-IFNULL(VT.AMOUNT, 0), IFNULL(VT.AMOUNT, 0)), 0) * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1) AS AMOUNT, " +
                                     "IFNULL(VT.TRANS_MODE, '') AS TRANS_MODE, " +
                                     "IF(ISNULL(VT.AMOUNT) = 0, 1, " +
                                     "IF((?VOUCHER_TYPE = 'RC' AND MLG.NATURE_ID IN (1,4)) " +
                                     "OR (?VOUCHER_TYPE = 'PY' AND MLG.NATURE_ID IN (2,3)), 1, 0)) AS HAS_TRANS " +
                                     "FROM " +
                                     " ( " +
                                     "  SELECT (DATE_ADD(?DATE_FROM, INTERVAL -?NO_OF_YEAR YEAR) - INTERVAL DAYOFMONTH(DATE_ADD(?DATE_FROM, INTERVAL -?NO_OF_YEAR YEAR)) -1 DAY) " +
                                     "     + INTERVAL NO_OF_MONTH MONTH AS MONTH_YEAR, NO_OF_MONTH " +
                                     "  FROM " +
                                     "  ( " +
                                     "    SELECT @rownum := @rownum + 1 AS NO_OF_MONTH FROM " +
                                     "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T1, " +
                                     "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T2, " +
                                     "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T3, " +
                                     "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T4, " +
                                     "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T5, " +
                                     "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T6, " +
                                     "      (SELECT @rownum := -1) AS T0 " + /* for 64 months */
                                     "  ) D1 " +
                                     " ) D2 " +
                                     "  LEFT JOIN MASTER_LEDGER AS ML " +
                                     "  INNER JOIN MASTER_LEDGER_GROUP AS MLG ON ML.GROUP_ID = MLG.GROUP_ID AND MLG.GROUP_ID NOT IN (?GROUP_ID) " +
                                     "  INNER JOIN VOUCHER_MASTER_TRANS AS VMT ON VMT.PROJECT_ID IN (?PROJECT_ID) " +
                                     "  INNER JOIN VOUCHER_TRANS AS VT ON VMT.VOUCHER_ID = VT.VOUCHER_ID " +
                                     "    AND VMT.VOUCHER_DATE BETWEEN DATE_ADD(?DATE_FROM, INTERVAL -?NO_OF_YEAR YEAR) AND ?DATE_TO" +
                                     "    AND VMT.STATUS = 1 AND IF(?CURRENCY_COUNTRY_ID > 0, VMT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1) AND " +
                                     "    ( (VMT.VOUCHER_TYPE IN ('RC','PY') AND VT.TRANS_MODE =?TRANS_MODE) OR (VMT.VOUCHER_TYPE IN ('JN','CN') AND VMT.VOUCHER_SUB_TYPE='FD' AND VT.TRANS_MODE =?TRANS_MODE  OR (VMT.VOUCHER_TYPE='JN' AND VMT.IS_CASH_BANK_STATUS=1 AND VT.TRANS_MODE = ?TRANS_MODE)) )" +
                                     "    ON ML.LEDGER_ID = VT.LEDGER_ID  AND YEAR(D2.MONTH_YEAR) = YEAR(VMT.VOUCHER_DATE) AND MONTH(D2.MONTH_YEAR) = MONTH(VMT.VOUCHER_DATE)" +
                                     " LEFT JOIN (SELECT DATE_ADD(YEAR_FROM, INTERVAL -NO_YEAR.SN YEAR) YEAR_FROM, DATE_ADD(YEAR_TO, INTERVAL -NO_YEAR.SN YEAR) YEAR_TO" +
                                         " FROM" +
                                         " (SELECT 0 SN UNION SELECT 1 SN UNION SELECT 2 SN UNION SELECT 3 SN UNION" +
                                         " SELECT 4 SN UNION SELECT 5 SN UNION SELECT 6 SN UNION SELECT 7 SN UNION SELECT 8 SN) NO_YEAR" +
                                         " CROSS JOIN ACCOUNTING_YEAR AY" +
                                         " WHERE YEAR_FROM=?DATE_FROM AND YEAR_TO = ?DATE_TO" +
                                         " ORDER BY NO_YEAR.SN) AY " +
                                     "ON MONTH_YEAR BETWEEN AY.YEAR_FROM AND AY.YEAR_TO " +
                                     "LEFT JOIN MASTER_DONAUD MD ON MD.DONAUD_ID = VMT.DONOR_ID " +
                                     "WHERE D2.MONTH_YEAR <=?DATE_TO";

                        break;
                    }
                case ReportSQLCommand.Report.MultiAbstractYearWithCC:
                    {
                        query = "SELECT AY.YEAR_FROM, CONCAT(YEAR(AY.YEAR_FROM) , '-' ,  YEAR(AY.YEAR_TO)) AC_YEAR_NAME," +
                                     "MONTH_YEAR, YEAR(MONTH_YEAR) AS 'YEAR', MONTH(MONTH_YEAR) AS 'MONTH', IFNULL(ML.LEDGER_ID,0) AS LEDGER_ID, " +
                                     "CONCAT(LEFT(MONTHNAME(MONTH_YEAR),3), '-', YEAR(MONTH_YEAR)) AS MONTH_NAME, " +
                                     "VMT.VOUCHER_DATE, MLG.GROUP_CODE, IFNULL(MLG.LEDGER_GROUP, '') AS LEDGER_GROUP, ML.LEDGER_CODE, IFNULL(ML.LEDGER_NAME,'') AS LEDGER_NAME, " +
                                     "IFNULL(MC.COST_CENTRE_NAME, NULL) AS COST_CENTRE_NAME, MD.NAME AS DONOR_NAME," +
                                     "(NULLIF(IF((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') " +
                                     "OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'), " +
                                     "-IFNULL(VCC.AMOUNT, VT.AMOUNT), IFNULL(VCC.AMOUNT, VT.AMOUNT)), 0) * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)) AS AMOUNT, " +
                                     "IFNULL(VT.TRANS_MODE, '') AS TRANS_MODE, " +
                                     "IF(ISNULL(VCC.AMOUNT) = 0, 1, " +
                                     "IF((?VOUCHER_TYPE = 'RC' AND MLG.NATURE_ID IN (1,4)) " +
                                     "OR (?VOUCHER_TYPE = 'PY' AND MLG.NATURE_ID IN (2,3)), 1, 0)) AS HAS_TRANS " +
                                     "FROM " +
                                     " ( " +
                                     "  SELECT (DATE_ADD(?DATE_FROM, INTERVAL -?NO_OF_YEAR YEAR) - INTERVAL DAYOFMONTH(DATE_ADD(?DATE_FROM, INTERVAL -?NO_OF_YEAR YEAR)) -1 DAY) " +
                                     "     + INTERVAL NO_OF_MONTH MONTH AS MONTH_YEAR, NO_OF_MONTH " +
                                     "  FROM " +
                                     "  ( " +
                                     "    SELECT @rownum := @rownum + 1 AS NO_OF_MONTH FROM " +
                                     "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T1, " +
                                     "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T2, " +
                                     "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T3, " +
                                     "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T4, " +
                                     "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T5, " +
                                     "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T6, " +
                                     "      (SELECT @rownum := -1) AS T0 " + /* for 64 months */
                                     "  ) D1 " +
                                     " ) D2 " +
                                     "  LEFT JOIN MASTER_LEDGER AS ML " +
                                     "  INNER JOIN MASTER_LEDGER_GROUP AS MLG ON ML.GROUP_ID = MLG.GROUP_ID AND MLG.GROUP_ID NOT IN (?GROUP_ID) " +
                                     "  INNER JOIN VOUCHER_MASTER_TRANS AS VMT ON VMT.PROJECT_ID IN (?PROJECT_ID) " +
                                     "  INNER JOIN VOUCHER_TRANS AS VT ON VMT.VOUCHER_ID = VT.VOUCHER_ID " +
                                     "    AND VMT.VOUCHER_DATE BETWEEN DATE_ADD(?DATE_FROM, INTERVAL -?NO_OF_YEAR YEAR) AND ?DATE_TO" +
                                     "    AND VMT.STATUS = 1 AND IF(?CURRENCY_COUNTRY_ID > 0, VMT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1) AND " +
                                     "    ( (VMT.VOUCHER_TYPE IN ('RC','PY') AND VT.TRANS_MODE =?TRANS_MODE) OR (VMT.VOUCHER_TYPE IN ('JN','CN') AND VMT.VOUCHER_SUB_TYPE='FD' AND VT.TRANS_MODE =?TRANS_MODE OR (VMT.VOUCHER_TYPE='JN' AND VMT.IS_CASH_BANK_STATUS=1 AND VT.TRANS_MODE = ?TRANS_MODE)) )" +
                                     "    ON ML.LEDGER_ID = VT.LEDGER_ID  AND YEAR(D2.MONTH_YEAR) = YEAR(VMT.VOUCHER_DATE) AND MONTH(D2.MONTH_YEAR) = MONTH(VMT.VOUCHER_DATE)" +
                                     " LEFT JOIN (SELECT DATE_ADD(YEAR_FROM, INTERVAL -NO_YEAR.SN YEAR) YEAR_FROM, DATE_ADD(YEAR_TO, INTERVAL -NO_YEAR.SN YEAR) YEAR_TO" +
                                         " FROM" +
                                         " (SELECT 0 SN UNION SELECT 1 SN UNION SELECT 2 SN UNION SELECT 3 SN UNION" +
                                         " SELECT 4 SN UNION SELECT 5 SN UNION SELECT 6 SN UNION SELECT 7 SN UNION SELECT 8 SN) NO_YEAR" +
                                         " CROSS JOIN ACCOUNTING_YEAR AY" +
                                         " WHERE YEAR_FROM=?DATE_FROM AND YEAR_TO = ?DATE_TO" +
                                         " ORDER BY NO_YEAR.SN) AY " +
                                     "ON MONTH_YEAR BETWEEN AY.YEAR_FROM AND AY.YEAR_TO " +
                                     "LEFT JOIN VOUCHER_CC_TRANS VCC ON VCC.VOUCHER_ID = VT.VOUCHER_ID AND VCC.LEDGER_ID = VT.LEDGER_ID AND VCC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO " +
                                     "LEFT JOIN MASTER_COST_CENTRE MC ON MC.COST_CENTRE_ID = VCC.COST_CENTRE_ID " +
                                     "LEFT JOIN MASTER_DONAUD MD ON MD.DONAUD_ID = VMT.DONOR_ID " +
                                     "WHERE D2.MONTH_YEAR <=?DATE_TO";

                        break;
                    }
                case ReportSQLCommand.Report.MultiAbstractProject:
                    {
                        query = "SELECT VMT.PROJECT_ID, MLG.GROUP_ID, ML.LEDGER_ID, MLG.GROUP_CODE, MLG.NATURE_ID, MLG.PARENT_GROUP_ID, ML.LEDGER_CODE, MLG.SORT_ORDER,\n" +
                                "PG.SORT_ORDER AS PARENT_SORT_ORDER, MP.PROJECT, CASE WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN MLG.LEDGER_GROUP ELSE PG.LEDGER_GROUP END AS PARENT_GROUP, IF(0 = 1 OR 0 = 1,\n" +
                                "CASE\n" +
                                "  WHEN MLG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                "   CONCAT(MLG.LEDGER_GROUP)\n" +
                                "  ELSE\n" +
                                "CONCAT('   ',MLG.LEDGER_GROUP)\n" +
                                "END,MLG.LEDGER_GROUP) AS LEDGER_GROUP,\n" +
                                "IF(0 = 1 AND 0 = 1,\n" +
                                "CASE\n" +
                                "  WHEN MLG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                "   CONCAT('   ', ML.LEDGER_NAME)\n" +
                                "  ELSE\n" +
                                "   CONCAT('      ', ML.LEDGER_NAME)\n" +
                                "END,\n" +
                                "ML.LEDGER_NAME) AS LEDGER_NAME,\n" +
                                "SUM(IF((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'),\n" +
                                " -IFNULL(VT.AMOUNT, 0), IFNULL(VT.AMOUNT, 0))) * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1) AS AMOUNT , \n" +
                                "IF(SUM(IF((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'),-IFNULL(VT.AMOUNT, 0), IFNULL(VT.AMOUNT, 0))) = 0, 0, 1) AS HAS_TRANS \n" +
                                "FROM MASTER_LEDGER AS ML\n" +
                                "INNER JOIN MASTER_LEDGER_GROUP AS MLG ON ML.GROUP_ID = MLG.GROUP_ID AND MLG.GROUP_ID NOT IN (12,13,14)\n" +
                                "INNER JOIN MASTER_LEDGER_GROUP PG  ON MLG.PARENT_GROUP_ID=PG.GROUP_ID\n" +
                                "INNER JOIN VOUCHER_TRANS AS VT ON VT.LEDGER_ID = ML.LEDGER_ID \n" +
                                "INNER JOIN VOUCHER_MASTER_TRANS AS VMT ON VT.VOUCHER_ID = VMT.VOUCHER_ID AND VMT.PROJECT_ID IN (?PROJECT_ID) AND \n" +
                                "VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND\n" +
                                "( (VMT.VOUCHER_TYPE IN ('RC','PY') AND VT.TRANS_MODE =?TRANS_MODE) OR (VMT.VOUCHER_TYPE IN ('JN','CN') AND VMT.VOUCHER_SUB_TYPE='FD' AND VT.TRANS_MODE =?TRANS_MODE OR (VMT.VOUCHER_TYPE='JN' AND VMT.IS_CASH_BANK_STATUS=1 AND VT.TRANS_MODE = ?TRANS_MODE)) )\n" +
                                "AND VMT.STATUS = 1\n" +
                                "INNER JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = VMT.PROJECT_ID AND MP.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "GROUP BY VMT.PROJECT_ID, ML.LEDGER_ID";
                        //"ORDER BY MLG.SORT_ORDER";
                        break;
                    }
                case ReportSQLCommand.Report.MultiAbstractCurrency:
                    {
                        query = "SELECT VMT.CURRENCY_COUNTRY_ID, MLG.GROUP_ID, ML.LEDGER_ID, MLG.GROUP_CODE, MLG.NATURE_ID, MLG.PARENT_GROUP_ID, ML.LEDGER_CODE, MLG.SORT_ORDER,\n" +
                                "PG.SORT_ORDER AS PARENT_SORT_ORDER, CASE WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN MLG.LEDGER_GROUP ELSE PG.LEDGER_GROUP END AS PARENT_GROUP, IF(0 = 1 OR 0 = 1,\n" +
                                "CASE\n" +
                                "  WHEN MLG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                "   CONCAT(MLG.LEDGER_GROUP)\n" +
                                "  ELSE\n" +
                                "CONCAT('   ',MLG.LEDGER_GROUP)\n" +
                                "END,MLG.LEDGER_GROUP) AS LEDGER_GROUP,\n" +
                                "IF(0 = 1 AND 0 = 1,\n" +
                                "CASE\n" +
                                "  WHEN MLG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                "   CONCAT('   ', ML.LEDGER_NAME)\n" +
                                "  ELSE\n" +
                                "   CONCAT('      ', ML.LEDGER_NAME)\n" +
                                "END,\n" +
                                "ML.LEDGER_NAME) AS LEDGER_NAME,\n" +
                                "SUM(IF((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'),\n" +
                                " -(IFNULL(VT.AMOUNT, 0)), (IFNULL(VT.AMOUNT, 0) ) )) AS AMOUNT, \n" +

                                "SUM(IF((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'),\n" +
                                " -(IFNULL(VT.AMOUNT, 0) *IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), (IFNULL(VT.AMOUNT, 0) *IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)) )) AS AMOUNT_LC, \n" +
                                "IFNULL(MC.CURRENCY_NAME, '') AS CURRENCY_NAME, CB.IS_CASH_BANK, IF(CB.IS_CASH_BANK=1, 'Bank', 'Cash') AS CASH_BANK, IFNULL(BL.APPROVED_AMOUNT,0) AS APPROVED_AMOUNT\n" +
                                "FROM MASTER_LEDGER AS ML\n" +
                                "INNER JOIN MASTER_LEDGER_GROUP AS MLG ON ML.GROUP_ID = MLG.GROUP_ID AND MLG.GROUP_ID NOT IN (12,13,14)\n" +
                                "INNER JOIN MASTER_LEDGER_GROUP PG  ON MLG.PARENT_GROUP_ID=PG.GROUP_ID\n" +
                                "INNER JOIN VOUCHER_TRANS AS VT ON VT.LEDGER_ID = ML.LEDGER_ID \n" +
                                "INNER JOIN VOUCHER_MASTER_TRANS AS VMT ON VT.VOUCHER_ID = VMT.VOUCHER_ID AND VMT.PROJECT_ID IN (?PROJECT_ID) AND \n" +
                                "VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND\n" +
                                "( (VMT.VOUCHER_TYPE IN ('RC','PY') AND VT.TRANS_MODE =?TRANS_MODE) OR (VMT.VOUCHER_TYPE IN ('JN','CN') AND VMT.VOUCHER_SUB_TYPE='FD' AND VT.TRANS_MODE =?TRANS_MODE) )\n" +
                                "AND VMT.STATUS = 1\n" +
                                "INNER JOIN (SELECT VT.VOUCHER_ID, IF(ML.GROUP_ID IN (12, 14), 1, 0) AS IS_CASH_BANK\n" +
                                " FROM VOUCHER_TRANS VT INNER JOIN VOUCHER_MASTER_TRANS VM ON VM.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                " INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID AND ML.GROUP_ID IN (12, 13, 14)\n" +
                                " WHERE VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND VM.STATUS=1 AND VM.PROJECT_ID IN (?PROJECT_ID)\n" +
                                " GROUP BY VT.VOUCHER_ID) CB ON CB.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "LEFT JOIN MASTER_COUNTRY MC ON MC.COUNTRY_ID = VMT.CURRENCY_COUNTRY_ID\n" +
                                "LEFT JOIN (SELECT GROUP_CONCAT(BM.BUDGET_ID) AS BUDGET_ID, PROJECT_ID, ML.GROUP_ID, BL.LEDGER_ID, " +
                                "   ML.LEDGER_NAME, SUM(IFNULL(BL.APPROVED_AMOUNT, 0)) AS APPROVED_AMOUNT, BL.TRANS_MODE FROM BUDGET_MASTER BM " +
                                "   INNER JOIN BUDGET_LEDGER BL ON BM.BUDGET_ID = BL.BUDGET_ID " +
                                "   INNER JOIN (SELECT BUDGET_ID, GROUP_CONCAT(PROJECT_ID) AS PROJECT_ID FROM BUDGET_PROJECT  " +
                                "   WHERE PROJECT_ID IN (?PROJECT_ID) GROUP BY BUDGET_ID ) BP ON BP.BUDGET_ID = BM.BUDGET_ID " +
                                "   INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = BL.LEDGER_ID " +
                                "   WHERE DATE_FROM = ?YEAR_FROM AND DATE_TO = ?YEAR_TO AND BUDGET_ACTION = 2 AND IS_ACTIVE = 1 AND BL.TRANS_MODE=?TRANS_MODE " +
                                "   GROUP BY BL.LEDGER_ID, BL.TRANS_MODE) BL ON BL.LEDGER_ID = ML.LEDGER_ID " +
                                "GROUP BY VMT.CURRENCY_COUNTRY_ID, CB.IS_CASH_BANK, ML.LEDGER_ID";
                        //"ORDER BY MLG.SORT_ORDER";
                        break;
                    }
                case ReportSQLCommand.Report.MultiAbstractProjectCashBank:
                    {
                        query = "SELECT VMT.PROJECT_ID, MLG.GROUP_ID, ML.LEDGER_ID, MLG.GROUP_CODE, MLG.NATURE_ID, MLG.PARENT_GROUP_ID, ML.LEDGER_CODE, MLG.SORT_ORDER,\n" +
                                "PG.SORT_ORDER AS PARENT_SORT_ORDER, MP.PROJECT, CASE WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN MLG.LEDGER_GROUP ELSE PG.LEDGER_GROUP END AS PARENT_GROUP, IF(0 = 1 OR 0 = 1,\n" +
                                "CASE\n" +
                                "  WHEN MLG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                "   CONCAT(MLG.LEDGER_GROUP)\n" +
                                "  ELSE\n" +
                                "CONCAT('   ',MLG.LEDGER_GROUP)\n" +
                                "END,MLG.LEDGER_GROUP) AS LEDGER_GROUP,\n" +
                                "IF(0 = 1 AND 0 = 1,\n" +
                                "CASE\n" +
                                "  WHEN MLG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                "   CONCAT('   ', ML.LEDGER_NAME)\n" +
                                "  ELSE\n" +
                                "   CONCAT('      ', ML.LEDGER_NAME)\n" +
                                "END,\n" +
                                "ML.LEDGER_NAME) AS LEDGER_NAME,\n" +
                                "SUM(IF(CASH_BANK_FLAG=  1,  IF((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'),-IFNULL(VT.AMOUNT, 0), IFNULL(VT.AMOUNT, 0)), 0)) AS AMOUNT_CASH, \n" +
                                "SUM(IF(CASH_BANK_FLAG = 2,  IF((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'),-IFNULL(VT.AMOUNT, 0), IFNULL(VT.AMOUNT, 0)), 0)) AS AMOUNT_BANK, \n" +
                                "IF(SUM(IF((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'),-IFNULL(VT.AMOUNT, 0), IFNULL(VT.AMOUNT, 0))) = 0, 0, 1) AS HAS_TRANS\n" +
                                "FROM MASTER_LEDGER AS ML\n" +
                                "INNER JOIN MASTER_LEDGER_GROUP AS MLG ON ML.GROUP_ID = MLG.GROUP_ID AND MLG.GROUP_ID NOT IN (12,13,14)\n" +
                                "INNER JOIN MASTER_LEDGER_GROUP PG  ON MLG.PARENT_GROUP_ID=PG.GROUP_ID\n" +
                                "INNER JOIN VOUCHER_TRANS AS VT ON VT.LEDGER_ID = ML.LEDGER_ID \n" +
                                "INNER JOIN VOUCHER_MASTER_TRANS AS VMT ON VT.VOUCHER_ID = VMT.VOUCHER_ID AND VMT.PROJECT_ID IN (?PROJECT_ID) AND \n" +
                                "VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND\n" +
                                "( (VMT.VOUCHER_TYPE IN ('RC','PY') AND VT.TRANS_MODE =?TRANS_MODE) OR (VMT.VOUCHER_TYPE IN ('JN','CN') AND VMT.VOUCHER_SUB_TYPE='FD' AND VT.TRANS_MODE =?TRANS_MODE) )\n" +
                                "AND VMT.STATUS = 1\n" +
                                "INNER JOIN (SELECT VOUCHER_ID, IF(ML.GROUP_ID IN (13), 1, 2) AS CASH_BANK_FLAG FROM VOUCHER_TRANS VT\n" +
                                "       INNER JOIN MASTER_LEDGER AS ML ON ML.LEDGER_ID = VT.LEDGER_ID AND ML.GROUP_ID IN (12, 13, 14) GROUP BY VT.VOUCHER_ID) AS VTCB \n" +
                                "ON VTCB.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "INNER JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = VMT.PROJECT_ID AND MP.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "WHERE VMT.PROJECT_ID IN (?PROJECT_ID) AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND\n" +
                                "( (VMT.VOUCHER_TYPE IN ('RC','PY') AND VT.TRANS_MODE =?TRANS_MODE) OR (VMT.VOUCHER_TYPE IN ('JN','CN') AND VMT.VOUCHER_SUB_TYPE='FD' AND VT.TRANS_MODE =?TRANS_MODE) )\n" +
                                "AND VMT.STATUS = 1 GROUP BY MP.PROJECT_CATEGORY_ID, ML.LEDGER_ID";
                        //"ORDER BY MLG.SORT_ORDER";
                        break;
                    }
                case ReportSQLCommand.Report.MonitorMultiAbstractProjectCashBank:
                    {
                        query = "SELECT VMT.PROJECT_ID,MPCITR.PROJECT_CATOGORY_ITRGROUP_ID,MPCITR.PROJECT_CATOGORY_ITRGROUP, MLG.GROUP_ID, ML.LEDGER_ID, MLG.GROUP_CODE, MLG.NATURE_ID, MLG.PARENT_GROUP_ID, ML.LEDGER_CODE, MLG.SORT_ORDER,\n" +
                                "PG.SORT_ORDER AS PARENT_SORT_ORDER, MP.PROJECT, CASE WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN MLG.LEDGER_GROUP ELSE PG.LEDGER_GROUP END AS PARENT_GROUP, IF(0 = 1 OR 0 = 1,\n" +
                                "CASE\n" +
                                "  WHEN MLG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                "   CONCAT(MLG.LEDGER_GROUP)\n" +
                                "  ELSE\n" +
                                "CONCAT('   ',MLG.LEDGER_GROUP)\n" +
                                "END,MLG.LEDGER_GROUP) AS LEDGER_GROUP,\n" +
                                "IF(0 = 1 AND 0 = 1,\n" +
                                "CASE\n" +
                                "  WHEN MLG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                "   CONCAT('   ', ML.LEDGER_NAME)\n" +
                                "  ELSE\n" +
                                "   CONCAT('      ', ML.LEDGER_NAME)\n" +
                                "END,\n" +
                                "ML.LEDGER_NAME) AS LEDGER_NAME,\n" +
                                "SUM(IF(CASH_BANK_FLAG=  1,  IF((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'),-IFNULL(VT.AMOUNT, 0), IFNULL(VT.AMOUNT, 0)), 0)) AS AMOUNT_CASH, \n" +
                                "SUM(IF(CASH_BANK_FLAG = 2,  IF((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'),-IFNULL(VT.AMOUNT, 0), IFNULL(VT.AMOUNT, 0)), 0)) AS AMOUNT_BANK, \n" +
                                "IF(SUM(IF((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'),-IFNULL(VT.AMOUNT, 0), IFNULL(VT.AMOUNT, 0))) = 0, 0, 1) AS HAS_TRANS, MP.PROJECT_CATEGORY_ID\n" +
                                "FROM MASTER_LEDGER AS ML\n" +
                                "INNER JOIN MASTER_LEDGER_GROUP AS MLG ON ML.GROUP_ID = MLG.GROUP_ID AND MLG.GROUP_ID NOT IN (12,13,14)\n" +
                                "INNER JOIN MASTER_LEDGER_GROUP PG  ON MLG.PARENT_GROUP_ID=PG.GROUP_ID\n" +
                                "INNER JOIN VOUCHER_TRANS AS VT ON VT.LEDGER_ID = ML.LEDGER_ID \n" +
                                "INNER JOIN VOUCHER_MASTER_TRANS AS VMT ON VT.VOUCHER_ID = VMT.VOUCHER_ID AND VMT.PROJECT_ID IN (?PROJECT_ID) AND \n" +
                                "VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND\n" +
                                "( (VMT.VOUCHER_TYPE IN ('RC','PY') AND VT.TRANS_MODE =?TRANS_MODE) OR (VMT.VOUCHER_TYPE IN ('JN','CN') AND VMT.VOUCHER_SUB_TYPE='FD' AND VT.TRANS_MODE =?TRANS_MODE) )\n" +
                                "AND VMT.STATUS = 1\n" +
                                "INNER JOIN (SELECT VOUCHER_ID, IF(ML.GROUP_ID IN (13), 1, 2) AS CASH_BANK_FLAG FROM VOUCHER_TRANS VT\n" +
                                "       INNER JOIN MASTER_LEDGER AS ML ON ML.LEDGER_ID = VT.LEDGER_ID AND ML.GROUP_ID IN (12, 13, 14) GROUP BY VT.VOUCHER_ID) AS VTCB \n" +
                                "ON VTCB.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "INNER JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = VMT.PROJECT_ID AND MP.PROJECT_ID IN (?PROJECT_ID)\n" +
                                " LEFT JOIN MASTER_PROJECT_CATOGORY MPC ON MPC.PROJECT_CATOGORY_ID = MP.PROJECT_CATEGORY_ID\n" +
                                " LEFT JOIN MASTER_PROJECT_CATOGORY_ITRGROUP MPCITR ON MPCITR.PROJECT_CATOGORY_ITRGROUP_ID =MPC.PROJECT_CATOGORY_ITRGROUP_ID\n" +
                                "WHERE VMT.PROJECT_ID IN (?PROJECT_ID) AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND\n" +
                                "( (VMT.VOUCHER_TYPE IN ('RC','PY') AND VT.TRANS_MODE =?TRANS_MODE) OR (VMT.VOUCHER_TYPE IN ('JN','CN') AND VMT.VOUCHER_SUB_TYPE='FD' AND VT.TRANS_MODE =?TRANS_MODE) )\n" +
                                "AND VMT.STATUS = 1 GROUP BY MPCITR.PROJECT_CATOGORY_ITRGROUP_ID, ML.LEDGER_ID";
                        //"ORDER BY MLG.SORT_ORDER";
                        break;
                    }
                #endregion

                #region DrillDownReport
                //PARTICULAR_TYPE is used to find out ledger or a group to drill down.
                case ReportSQLCommand.Report.DrillDownReport:
                    {
                        query = "SELECT '" + DrillDownType.GROUP_SUMMARY + "' as PARTICULAR_TYPE, LG.GROUP_ID AS GROUP_ID,\n" +
                        " LG.GROUP_ID AS PARTICULARS_ID, LG.LEDGER_GROUP AS PARTICULARS,\n" +
                        " IF(SUM(IF(VT.TRANS_MODE='CR', VT.AMOUNT, -VT.AMOUNT)) < 0, 0, SUM(IF(VT.TRANS_MODE='CR', VT.AMOUNT, -VT.AMOUNT)))\n" +
                        "        * IF(MT.IS_MULTI_CURRENCY = 1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1) AS CREDIT, \n" +
                        " IF(SUM(IF(VT.TRANS_MODE='CR', -VT.AMOUNT, VT.AMOUNT)) < 0, 0 ,SUM(IF(VT.TRANS_MODE='CR', -VT.AMOUNT, VT.AMOUNT))) \n" +
                        "        * IF(MT.IS_MULTI_CURRENCY = 1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1) AS DEBIT,\n" +
                        " ?CURRENCY_COUNTRY_ID AS CURRENCY_COUNTRY_ID \n" +
                        " FROM MASTER_LEDGER_GROUP LG\n" +
                        " INNER JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        " INNER JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        " INNER JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        " LEFT JOIN VOUCHER_CC_TRANS VCT ON VT.VOUCHER_ID=VCT.VOUCHER_ID\n" +
                        " WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   AND LG.GROUP_ID IN (SELECT GROUP_ID FROM MASTER_LEDGER_GROUP WHERE PARENT_GROUP_ID  IN (?GROUP_ID)) \n" +
                        "   {AND IF( ML.IS_BANK_INTEREST_LEDGER = 1 AND ?VOUCHER_TYPE='RC', ((MT.VOUCHER_TYPE IN (?VOUCHER_TYPE)) OR ( MT.VOUCHER_TYPE = 'JN' AND MT.VOUCHER_SUB_TYPE = 'FD' )),\n" +
                          "   (MT.VOUCHER_TYPE IN (?VOUCHER_TYPE)) )}\n" +  //On 31/05/2019 to show proper amount For IE and R&P (include FD interest)
                        "   {AND IF( ML.LEDGER_ID = ?LEDGER_ID AND ?VOUCHER_TYPE='PY', ((MT.VOUCHER_TYPE IN (?VOUCHER_TYPE)) OR ( MT.VOUCHER_TYPE = 'JN' AND MT.VOUCHER_SUB_TYPE = 'FD' )),\n" +
                          "   (1=1) )}\n" +  //On 31/05/2019 to show proper amount For IE and R&P (TDS on FD Interest)
                        "   AND MT.STATUS = 1 AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)\n" +
                        "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "   AND LG.GROUP_ID NOT IN (12, 13) { AND VCT.COST_CENTER_ID =?COST_CENTER_ID}\n" +
                        " GROUP BY LG.GROUP_ID, MT.VOUCHER_TYPE\n" +
                        "UNION\n" +
                        "SELECT \n" +
                        "IF(SUM(IF(VT.TRANS_MODE='CR', VT.AMOUNT, -VT.AMOUNT)) < 0, '" + DrillDownType.LEDGER_SUMMARY_PAYMENTS + "', '" + DrillDownType.LEDGER_SUMMARY_RECEIPTS + "') as PARTICULAR_TYPE,\n" +
                        "       LG.GROUP_ID AS GROUP_ID,\n" +
                        "       ML.LEDGER_ID AS LEDGER_ID,\n" +
                        "       ML.LEDGER_NAME AS PARTICULARS,\n" +
                            /*"       CASE\n" + On 31/05/2019 to show proper amount For IE and R&P (include FD interest)
                            "         WHEN MT.VOUCHER_TYPE = 'RC' THEN\n" +
                            "          IFNULL(SUM(VT.AMOUNT), 0)\n" +
                            "       END AS CREDIT,\n" +
                            "       CASE\n" +
                            "         WHEN MT.VOUCHER_TYPE = 'PY' THEN\n" +
                            "          IFNULL(SUM(VT.AMOUNT), 0)\n" +
                            "       END AS DEBIT\n" +*/
                        " IF(SUM(IF(VT.TRANS_MODE='CR', VT.AMOUNT, -VT.AMOUNT)) < 0, 0, SUM(IF(VT.TRANS_MODE='CR', VT.AMOUNT, -VT.AMOUNT))) \n" +
                        "           * IF(MT.IS_MULTI_CURRENCY = 1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1) AS CREDIT,  \n" +
                        " IF(SUM(IF(VT.TRANS_MODE='CR', -VT.AMOUNT, VT.AMOUNT)) < 0, 0 ,SUM(IF(VT.TRANS_MODE='CR', -VT.AMOUNT, VT.AMOUNT))) \n" +
                        "           * IF(MT.IS_MULTI_CURRENCY = 1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1) AS DEBIT,\n" +
                        " ?CURRENCY_COUNTRY_ID AS CURRENCY_COUNTRY_ID \n" +
                        " FROM MASTER_LEDGER_GROUP LG\n" +
                        " INNER JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        " INNER JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        " INNER JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        " LEFT JOIN VOUCHER_CC_TRANS VCT ON VT.VOUCHER_ID=VCT.VOUCHER_ID\n" +
                        " WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   {AND IF( ML.IS_BANK_INTEREST_LEDGER = 1 AND ?VOUCHER_TYPE='RC', ((MT.VOUCHER_TYPE IN (?VOUCHER_TYPE)) OR ( MT.VOUCHER_TYPE = 'JN' AND MT.VOUCHER_SUB_TYPE = 'FD' )),\n" +
                          "   (MT.VOUCHER_TYPE IN (?VOUCHER_TYPE)) )}\n" +  //On 31/05/2019 to show proper amount For IE and R&P (include FD interest)
                        "   {AND IF( ML.LEDGER_ID = ?LEDGER_ID AND ?VOUCHER_TYPE='PY', ((MT.VOUCHER_TYPE IN (?VOUCHER_TYPE)) OR ( MT.VOUCHER_TYPE = 'JN' AND MT.VOUCHER_SUB_TYPE = 'FD' )),\n" +
                          "   (1=1) )}\n" +  //On 31/05/2019 to show proper amount For IE and R&P (TDS on FD Interest)
                        "   AND LG.GROUP_ID = (SELECT GROUP_ID FROM MASTER_LEDGER_GROUP WHERE GROUP_ID IN (?GROUP_ID)\n" +
                        "                      UNION SELECT ?GROUP_ID)\n" +
                        "   AND MT.STATUS = 1 AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)\n" +
                        "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "   AND LG.GROUP_ID NOT IN (12, 13, 14) { AND VCT.COST_CENTER_ID =?COST_CENTER_ID}\n" +
                         " GROUP BY VT.LEDGER_ID";
                        //" GROUP BY VT.LEDGER_ID, MT.VOUCHER_TYPE"; On 31/05/2019 to show proper amount For IE and R&P (include FD interest)

                        break;
                    }
                case ReportSQLCommand.Report.DrillDownReportBySummary:
                    {
                        query = "SELECT '" + DrillDownType.GROUP_SUMMARY + "' as PARTICULAR_TYPE,\n" +
                         "       LG.GROUP_ID AS GROUP_ID,\n" +
                         "       LG.GROUP_ID AS PARTICULARS_ID,\n" +
                         "       LG.LEDGER_GROUP AS PARTICULARS,\n" +
                         "       LB.AMOUNT,\n" +
                         "       LB.TRANS_MODE,\n" +
                         "       CASE\n" +
                         "         WHEN IFNULL(SUM(IF(MT.TRANS_MODE = 'DR', MT.AMOUNT, -MT.AMOUNT)), 0) +\n" +
                         "              IF( LB.TRANS_MODE = 'DR' OR LB.TRANS_MODE IS NULL,\n" +
                         "                 IFNULL(LB.AMOUNT, 0),\n" +
                         "                 -IFNULL(LB.AMOUNT, 0)) < 0 THEN\n" +
                         "          ABS(IFNULL(SUM(IF(MT.TRANS_MODE = 'DR',\n" +
                         "                            MT.AMOUNT,\n" +
                         "                            (-MT.AMOUNT))),\n" +
                         "                     0) + IF(LB.TRANS_MODE = 'DR' OR LB.TRANS_MODE IS NULL,\n" +
                         "                             IFNULL(LB.AMOUNT, 0),\n" +
                         "                             -IFNULL(LB.AMOUNT, 0)))\n" +
                         "         ELSE\n" +
                         "          0\n" +
                         "       END AS CREDIT,\n" +
                         "       CASE\n" +
                         "         WHEN IFNULL(SUM(IF(MT.TRANS_MODE = 'DR', MT.AMOUNT, -MT.AMOUNT)), 0) +\n" +
                         "              IF(LB.TRANS_MODE = 'DR' OR LB.TRANS_MODE IS NULL,\n" +
                         "                 IFNULL(LB.AMOUNT, 0),\n" +
                         "                 -IFNULL(LB.AMOUNT, 0)) > 0 THEN\n" +
                         "          IFNULL(SUM(IF(MT.TRANS_MODE = 'DR',\n" +
                         "                        (MT.AMOUNT),\n" +
                         "                        -MT.AMOUNT)),\n" +
                         "                 0) + IF(LB.TRANS_MODE = 'DR' OR LB.TRANS_MODE IS NULL,\n" +
                         "                         IFNULL(LB.AMOUNT, 0),\n" +
                         "                         -IFNULL(LB.AMOUNT, 0))\n" +
                         "         ELSE\n" +
                         "          0\n" +
                         "       END AS DEBIT\n" +
                         "  FROM MASTER_LEDGER_GROUP LG\n" +
                         "\n" +
                         " INNER JOIN MASTER_LEDGER ML\n" +
                         "    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                         "  LEFT JOIN (SELECT VT.VOUCHER_ID,\n" +
                         "                    VT.LEDGER_ID,\n" +
                         "                    VT.AMOUNT,\n" +
                         "                    VT.TRANS_MODE,\n" +
                         "                    VM.VOUCHER_TYPE,\n" +
                         "                    VM.PROJECT_ID\n" +
                         "               FROM VOUCHER_MASTER_TRANS VM\n" +
                         "              INNER JOIN VOUCHER_TRANS VT\n" +
                         "                 ON VT.VOUCHER_ID = VM.VOUCHER_ID\n" +
                         "               LEFT JOIN VOUCHER_CC_TRANS VCT\n" +
                         "                 ON VT.VOUCHER_ID = VCT.VOUCHER_ID\n" +
                         "              WHERE VM.PROJECT_ID IN (?PROJECT_ID)\n" +
                         "                AND VM.STATUS = 1\n" +
                         "                AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO) AS MT\n" +
                         "    ON MT.LEDGER_ID = ML.LEDGER_ID\n" +
                         "  LEFT JOIN LEDGER_BALANCE LB\n" +
                         "    ON LB.LEDGER_ID = ML.LEDGER_ID\n" +
                         "   AND LB.TRANS_FLAG = 'OP' AND LB.PROJECT_ID IN (?PROJECT_ID)\n" +
                         " WHERE LG.GROUP_ID IN (SELECT GROUP_ID\n" +
                         "                         FROM MASTER_LEDGER_GROUP\n" +
                         "                        WHERE PARENT_GROUP_ID IN (?GROUP_ID))\n" +
                         "   AND LG.GROUP_ID NOT IN (12, 13,14)\n" +
                         " GROUP BY LG.GROUP_ID HAVING DEBIT>0|| CREDIT>0\n" +
                         "UNION\n" +
                         "SELECT '" + DrillDownType.LEDGER_SUMMARY + "' as PARTICULAR_TYPE,\n" +
                         "       LG.GROUP_ID AS GROUP_ID,\n" +
                         "       ML.LEDGER_ID AS LEDGER_ID,\n" +
                         "       ML.LEDGER_NAME AS PARTICULARS,\n" +
                         "       LB.AMOUNT,\n" +
                         "       LB.TRANS_MODE,\n" +
                         "       CASE\n" +
                         "         WHEN IFNULL(SUM(IF(MT.TRANS_MODE = 'DR', MT.AMOUNT, -MT.AMOUNT)), 0) +\n" +
                         "              IF(LB.TRANS_MODE = 'DR' OR LB.TRANS_MODE IS NULL,\n" +
                         "                 IFNULL(LB.AMOUNT, 0),\n" +
                         "                 -IFNULL(LB.AMOUNT, 0)) < 0 THEN\n" +
                         "          ABS(IFNULL(SUM(IF(MT.TRANS_MODE = 'DR',\n" +
                         "                            MT.AMOUNT,\n" +
                         "                            (-MT.AMOUNT))),\n" +
                         "                     0) + IF(LB.TRANS_MODE = 'DR' OR LB.TRANS_MODE IS NULL,\n" +
                         "                             IFNULL(LB.AMOUNT, 0),\n" +
                         "                             -IFNULL(LB.AMOUNT, 0)))\n" +
                         "         ELSE\n" +
                         "          0\n" +
                         "       END AS CREDIT,\n" +
                         "       CASE\n" +
                         "         WHEN IFNULL(SUM(IF(MT.TRANS_MODE = 'DR', MT.AMOUNT, -MT.AMOUNT)), 0) +\n" +
                         "              IF(LB.TRANS_MODE = 'DR' OR LB.TRANS_MODE IS NULL,\n" +
                         "                 IFNULL(LB.AMOUNT, 0),\n" +
                         "                 -IFNULL(LB.AMOUNT, 0)) > 0 THEN\n" +
                         "          IFNULL(SUM(IF(MT.TRANS_MODE = 'DR',\n" +
                         "                        (MT.AMOUNT),\n" +
                         "                        -MT.AMOUNT)),\n" +
                         "                 0) + IF(LB.TRANS_MODE = 'DR' OR LB.TRANS_MODE IS NULL,\n" +
                         "                         IFNULL(LB.AMOUNT, 0),\n" +
                         "                         -IFNULL(LB.AMOUNT, 0))\n" +
                         "         ELSE\n" +
                         "          0\n" +
                         "       END AS DEBIT\n" +
                         "  FROM MASTER_LEDGER_GROUP LG\n" +
                         " INNER JOIN MASTER_LEDGER ML\n" +
                         "    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                         "  LEFT JOIN (SELECT VT.VOUCHER_ID, VT.LEDGER_ID, VT.AMOUNT, VT.TRANS_MODE\n" +
                         "               FROM VOUCHER_MASTER_TRANS VM\n" +
                         "              INNER JOIN VOUCHER_TRANS VT\n" +
                         "                 ON VT.VOUCHER_ID = VM.VOUCHER_ID\n" +
                         "               LEFT JOIN VOUCHER_CC_TRANS VCT\n" +
                         "                 ON VT.VOUCHER_ID = VCT.VOUCHER_ID\n" +
                         "              WHERE VM.PROJECT_ID IN (?PROJECT_ID)\n" +
                         "                AND VM.STATUS = 1\n" +
                         "                AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO) AS MT\n" +
                         "    ON MT.LEDGER_ID = ML.LEDGER_ID\n" +
                         "  LEFT JOIN LEDGER_BALANCE LB\n" +
                         "    ON LB.LEDGER_ID = ML.LEDGER_ID \n" +
                         "   AND LB.TRANS_FLAG = 'OP' AND LB.PROJECT_ID IN (?PROJECT_ID)\n" +
                         " WHERE LG.GROUP_ID = (SELECT GROUP_ID\n" +
                         "                        FROM MASTER_LEDGER_GROUP\n" +
                         "                       WHERE GROUP_ID IN (?GROUP_ID)\n" +
                         "                      UNION\n" +
                         "                      SELECT ?GROUP_ID)\n" +
                         "   AND LG.GROUP_ID NOT IN (12, 13,14)\n" +
                         " GROUP BY ML.LEDGER_ID HAVING DEBIT>0|| CREDIT>0 ";

                        break;
                    }
                #endregion

                #region Ledger
                case ReportSQLCommand.Report.Ledger:
                    {

                        query = "SELECT LG.NATURE_ID,'' AS VOUCHER_ID, 0 AS PROJECT_ID,\n" +
                            "       LG.SORT_ORDER,\n" +
                            "       ML.LEDGER_ID AS LEDGER_ID,'' AS VOUCHER_SUB_TYPE,\n" +
                            "       'LEDGER_OPENING_BALANCE' as PARTICULAR_TYPE,\n" +
                            "       \n" +
                            "       '' as DATE, DATE_FORMAT(?DATE_FROM, '%M-%Y') AS MONTH_YEAR_NAME,\n" +
                            "       CAST(DATE_FORMAT(?DATE_FROM, '%Y%m') AS UNSIGNED) AS MONTH_YEAR,\n" +
                            "       '' AS VOUCHER_NO,\n" +
                            "       LG.LEDGER_GROUP AS 'GROUP',\n" +
                            "       ML.LEDGER_CODE,\n" +
                            //"       IF(ML.LEDGER_CODE IS NULL OR ML.LEDGER_CODE = '',\n" +
                            //"          ML.LEDGER_NAME,\n" +
                            //"          CONCAT(ML.LEDGER_CODE, ' - ', ML.LEDGER_NAME)) AS LEDGER_NAME,\n" +
                            "          ML.LEDGER_NAME AS LEDGER_NAME,\n" +
                            "       'Opening Balance' AS 'PARTICULARS', 'Opening Balance' AS 'PARTICULARS1', 0 AS PARTICULARS_MODE_ORDER,\n" +
                            "       SUM(CASE\n" +
                            "             WHEN LB2.TRANS_MODE = 'CR' THEN\n" +
                            "              LB2.AMOUNT\n" +
                            "             ELSE\n" +
                            "              0\n" +
                            "           END) AS CREDIT,\n" +
                            "       SUM(CASE\n" +
                            "             WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                            "              LB2.AMOUNT\n" +
                            "             ELSE\n" +
                            "              0\n" +
                            "           END) AS DEBIT,\n" +
                            "       '' AS NARRATION,\n" +
                            "       ' ' AS VOUCHER_TYPE, ' ' AS IS_CASH_BANK_STATUS, ' ' AS VOUCHER_TYPE_NAME, 0 AS VOUCHER_DEFINITION_ID, 0 AS ACI_TYPE, '' AS LEDGER_DETAIL\n" +
                            "  FROM MASTER_LEDGER AS ML \n" +
                            " INNER JOIN MASTER_LEDGER_GROUP AS LG\n" +
                            "    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                            " INNER JOIN (SELECT LB.BALANCE_DATE,\n" +
                            "                    LB.BRANCH_ID,\n" +
                            "                    LB.PROJECT_ID,\n" +
                            "                    LB.LEDGER_ID,\n" +
                            "                    IF(ML.GROUP_ID IN (12, 13, 14) {AND ?CURRENCY_COUNTRY_ID>0}, LB.AMOUNT_FC, LB.AMOUNT) AS AMOUNT,\n" +
                            "                    IF(ML.GROUP_ID IN (12, 13, 14) {AND ?CURRENCY_COUNTRY_ID>0}, LB.TRANS_FC_MODE, LB.TRANS_MODE) AS TRANS_MODE\n" +
                            "               FROM LEDGER_BALANCE AS LB INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = LB.LEDGER_ID\n" +
                            "               LEFT JOIN (SELECT LBA.BRANCH_ID,\n" +
                            "                                LBA.PROJECT_ID,\n" +
                            "                                LBA.LEDGER_ID,\n" +
                            "                                MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
                            "                           FROM LEDGER_BALANCE LBA\n" +
                            "                          WHERE 1 = 1\n" +
                            "                            AND LBA.BALANCE_DATE < ?DATE_FROM\n" +
                            "                          GROUP BY LBA.BRANCH_ID,\n" +
                            "                                   LBA.PROJECT_ID,\n" +
                            "                                   LBA.LEDGER_ID) AS LB1\n" +
                            "                 ON LB.BRANCH_ID = LB1.BRANCH_ID\n" +
                            "                AND LB.PROJECT_ID = LB1.PROJECT_ID\n" +
                            "                AND LB.LEDGER_ID = LB1.LEDGER_ID\n" +
                            "              WHERE LB.PROJECT_ID IN (?PROJECT_ID)\n" +
                            "                AND LB.BALANCE_DATE = LB1.BAL_DATE) LB2\n" +
                            "    ON ML.LEDGER_ID = LB2.LEDGER_ID\n" +
                            " WHERE 1 = 1  AND ML.LEDGER_ID IN (?LEDGER_ID) AND LB2.AMOUNT>0 \n" +
                            " GROUP BY LG.GROUP_ID,\n" +
                            "          LG.GROUP_CODE,\n" +
                            "          LG.LEDGER_GROUP,\n" +
                            "          ML.LEDGER_ID,\n" +
                            "          ML.LEDGER_CODE,\n" +
                            "          ML.LEDGER_NAME\n" +
                            " UNION ALL  \n" +
                            "SELECT TT.NATURE_ID,TT.VOUCHER_ID, TT.PROJECT_ID, TT.SORT_ORDER,\n" +
                            "       TT.LEDGER_ID, TT.VOUCHER_SUB_TYPE,\n" +
                            "       TT.PARTICULAR_TYPE,\n" +
                            "       DATE_FORMAT(TT.DATE, '%d-%m-%Y') AS DATE, DATE_FORMAT(TT.DATE, '%M-%Y') AS MONTH_YEAR_NAME, \n" +
                            "       CAST(DATE_FORMAT(TT.DATE, '%Y%m') AS UNSIGNED) AS MONTH_YEAR,\n" +
                            "       TT.VOUCHER_NO,\n" +
                            "       TT.GROUP as 'Group',TT.LEDGER_CODE,\n" +
                            "     --  TT.LEDGER_NAME,\n" +
                            "       TT.LEDGER_NAME AS LEDGER_NAME,\n" +
                            "       TT.PARTICULARS,\n" +
                            "       IF((TT.NARRATION IS NULL OR TT.NARRATION = ''), CONCAT(TT.PARTICULARS, IF( TT.VOUCHER_TYPE IN ('JN'),' - Journal','')), TRIM(TT.NARRATION)) AS PARTICULARS1,\n" +
                            "       IF(TT.VOUCHER_TYPE IN ('RC', 'PY', 'CN'), 0, 1 ) AS PARTICULARS_MODE_ORDER,\n" +
                            "       (TT.CREDIT) AS CREDIT,\n" +
                            "       (TT.DEBIT) AS DEBIT,\n" +
                            "       CONCAT(TT.NARRATION, IF(TT.VOUCHER_SUB_TYPE='FD', CONCAT(IF(TT.NARRATION<>'', '<Br>',''),'FD: ', FD.FD_ACCOUNT_NUMBER), '' )  ) AS NARRATION,\n" +
                            "       CASE\n" +
                            "         WHEN TT.VOUCHER_TYPE = 'RC' THEN 'Receipt' \n" +
                            "         WHEN TT.VOUCHER_TYPE = 'PY' THEN  'Payment'\n" +
                            "         WHEN TT.VOUCHER_TYPE = 'CN' THEN 'Contra'  \n" +
                            "         WHEN TT.VOUCHER_TYPE = 'JN' THEN 'Journal' \n" +
                            "       END AS VOUCHER_TYPE, TT.IS_CASH_BANK_STATUS,\n" +
                            "       IF(TT.VOUCHER_DEFINITION_ID<=4, CASE TT.VOUCHER_TYPE\n" +
                            "         WHEN 'RC' THEN 'Receipt'\n" +
                            "         WHEN 'PY' THEN 'Payment'\n" +
                            "         WHEN 'CN' THEN 'Contra'\n" +
                            "         ELSE 'Journal' END, \n" +
                            "         MV.VOUCHER_NAME) AS VOUCHER_TYPE_NAME, TT.VOUCHER_DEFINITION_ID,ACI_TYPE, LEDGER_DETAIL\n" +
                            "       FROM \n" +
                           " (SELECT T.NATURE_ID,T.VOUCHER_ID, T.PROJECT_ID, T.SORT_ORDER,\n" +
                        "       T.LEDGER_ID,T.VOUCHER_SUB_TYPE,\n" +
                        "       T.PARTICULAR_TYPE,\n" +
                        "       T.VOUCHER_DATE as DATE,\n" +
                        "       T.VOUCHER_NO,\n" +
                        "       T.LEDGER_GROUP AS 'GROUP',T.LEDGER_CODE,\n" +
                        "       T.LEDGER_NAME,\n" +
                        "       T.PARTICULRARS as PARTICULARS,\n" +
                        "       IFNULL(SUM(T.CREDIT), 0) AS CREDIT,\n" +
                        "       IFNULL(SUM(T.DEBIT), 0) AS DEBIT,T.NARRATION,T.VOUCHER_TYPE,T.IS_CASH_BANK_STATUS, T.VOUCHER_DEFINITION_ID, T.ACI_TYPE, T.LEDGER_DETAIL\n" +
                        "  FROM (SELECT LG.NATURE_ID,VT.VOUCHER_ID, MT.PROJECT_ID, LG.SORT_ORDER,\n" +
                        "               VT.LEDGER_ID,MT.VOUCHER_SUB_TYPE,\n" +
                        "               'LEDGER_CASHBANK_VOUCHER' as PARTICULAR_TYPE,\n" +
                        "               MT.VOUCHER_DATE,\n" +
                        "               MT.VOUCHER_NO,\n" +
                        "               LG.LEDGER_GROUP,ML.LEDGER_CODE,\n" +
                        "               ML.LEDGER_NAME,\n" +
                        "               TA.TRANS_MODE AS 'PARTICULRARS',\n" +
                        "               (IFNULL(SUM( IF(VT.TRANS_MODE = 'CR', AMOUNT, 0)),0) * IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)) AS CREDIT,\n" + //refer top history #1
                        "               (IFNULL(SUM( IF(VT.TRANS_MODE = 'DR', AMOUNT, 0)),0) * IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)) AS DEBIT,\n" + //refer top history #1

                        "     --  CONCAT(IFNULL(MT.NARRATION,''),\n" +
                        "     CONCAT(CONCAT(CONCAT(CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION),''),IF(FDR.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',''),FDR.TDS_AMOUNT),' ')),\n" +
                        "     IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(MT.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', MT.NAME_ADDRESS),''),''),\n" +
                        "     IF(1=?INCLUDE_PAN_GST,IF(LENGTH(IFNULL(MT.PAN_NUMBER, '')) > 0, CONCAT(' -- PAN: ', MT.PAN_NUMBER), ''), ''),\n" +
                        "     IF(1=?INCLUDE_PAN_GST, IF(LENGTH(IFNULL(MT.GST_NUMBER, '')) > 0, CONCAT(' -- GST: ', MT.GST_NUMBER), ''), ''),\n" +
                        "     IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(CHEQUE_NO,'')) > 0,CONCAT(' -- ', CHEQUE_NO),''),'')), \n" +
                        "     IF(TRIM(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION))<>'' AND TRIM(REF.REFERENCE_NUMBER)<>'', \n" +
                        "     IF(TRIM(REF.REFERENCE_NUMBER)<>'', CONCAT(' -Ref ' , IFNULL(REF.REFERENCE_NUMBER,'')), '') ,  IF(TRIM(REF.REFERENCE_NUMBER)<>'', \n" +
                        "      CONCAT('Ref ' , IFNULL(REF.REFERENCE_NUMBER,'')), '') ), '', \n" +
                        "     IF(1= ?INCLUDE_NARRATION_CURRENCY AND MT.EXCHANGE_COUNTRY_ID>0, CONCAT(' (Currency Details : ', IFNULL(MCE.CURRENCY_NAME, ''), ' ', MT.CONTRIBUTION_AMOUNT, '@',MT.EXCHANGE_RATE, ')'),'')) AS NARRATION, \n" +
                        "     MT.VOUCHER_TYPE,MT.IS_CASH_BANK_STATUS,MT.VOUCHER_DEFINITION_ID,0 AS ACI_TYPE, VTCH.NAR_LEDGER AS LEDGER_DETAIL\n" +
                        "\n" +
                        "    FROM MASTER_LEDGER_GROUP LG\n" +
                        "\n" +
                        "    LEFT JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "    LEFT JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "    LEFT JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "    LEFT JOIN MASTER_COUNTRY MCE ON MCE.COUNTRY_ID = MT.EXCHANGE_COUNTRY_ID\n" +
                        "    LEFT JOIN (SELECT VR.REC_PAY_VOUCHER_ID, VR.LEDGER_ID, GROUP_CONCAT(VT.REFERENCE_NUMBER) AS REFERENCE_NUMBER FROM VOUCHER_REFERENCE VR\n" +
                        "    INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VR.REF_VOUCHER_ID AND VT.LEDGER_ID = VR.LEDGER_ID GROUP BY VR.REC_PAY_VOUCHER_ID, VR.LEDGER_ID) AS REF ON\n" +
                        "    REF.REC_PAY_VOUCHER_ID = MT.VOUCHER_ID AND REF.LEDGER_ID = VT.LEDGER_ID\n" +
                        "       LEFT JOIN FD_RENEWAL FDR\n" +
                        "      ON FDR.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "\n" +
                        "          JOIN (SELECT T.NATURE_ID,T.VOUCHER_ID, T.LEDGER_ID,T.VOUCHER_SUB_TYPE, T.TRANS_MODE\n" +
                        "\n" +
                        "                 FROM (SELECT LG.NATURE_ID,VT.VOUCHER_ID, VT.LEDGER_ID,MT.VOUCHER_SUB_TYPE,\n" +
                        "                              CASE \n" +
                        "                                WHEN LG.GROUP_ID = 12 AND VT.TRANS_MODE = 'CR' THEN CONCAT('TO BANK (', ML.LEDGER_NAME, ')')\n" +
                        "                                WHEN LG.GROUP_ID = 12 AND VT.TRANS_MODE = 'DR' THEN CONCAT('BY BANK (', ML.LEDGER_NAME, ')')\n" +
                        "                                WHEN LG.GROUP_ID = 13 AND VT.TRANS_MODE = 'CR' THEN 'TO CASH'\n" +
                        "                                WHEN LG.GROUP_ID = 13 AND VT.TRANS_MODE = 'DR' THEN 'BY CASH'\n" +
                        "                              END AS 'TRANS_MODE'\n" +
                        "                         FROM MASTER_LEDGER_GROUP LG\n" +
                        "                         LEFT JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "                         LEFT JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "                         LEFT JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        " LEFT JOIN VOUCHER_CC_TRANS VCT ON VT.VOUCHER_ID=VCT.VOUCHER_ID\n" +
                        "                        WHERE MT.VOUCHER_TYPE IN ('RC', 'PY')\n" +
                        "                          {AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO }\n" +
                        "                          {AND MT.VOUCHER_DATE <= ?DATE_AS_ON }\n" +
                        "                          AND MT.STATUS = 1\n" +
                        "                          AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "  { AND COST_CENTRE_ID IN(?COST_CENTRE_ID) }\n" +
                        "                          AND LG.GROUP_ID IN (12, 13)\n" +
                        "                        ORDER BY LG.NATURE_ID ASC) AS T\n" + //,VT.SEQUENCE_NO ASC) AS T\n" +
                        "                            GROUP BY T.VOUCHER_ID) AS TA ON MT.VOUCHER_ID = TA.VOUCHER_ID -- AND VT.LEDGER_ID=TA.LEDGER_ID\n" +
                        "                LEFT JOIN (SELECT VT.VOUCHER_ID, ML.LEDGER_ID, ML.GROUP_ID, ML.LEDGER_CODE,\n" +
                        "                       IF((COUNT(*) > 1 AND ?SHOW_NARRATION_MONTH_TOTAL=0), GROUP_CONCAT('<Br>', CONCAT(ML.LEDGER_NAME, ' ',\n" +
                        "                             CONCAT('Rs.', FORMAT(VT.AMOUNT, 2, 'en_IN')), ' ', VT.TRANS_MODE) ORDER BY VT.SEQUENCE_NO SEPARATOR ''), '' ) AS NAR_LEDGER\n" +
                        "                       FROM VOUCHER_TRANS VT\n" +
                        "                       INNER JOIN MASTER_LEDGER ML ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "                       WHERE ML.GROUP_ID NOT IN (12, 13) GROUP BY VT.VOUCHER_ID) AS VTCH ON VTCH.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "         WHERE MT.PROJECT_ID IN (?PROJECT_ID) AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)\n" +
                        "           AND VT.LEDGER_ID IN (?LEDGER_ID)\n" +
                        "           AND MT.VOUCHER_TYPE IN ('RC', 'PY')\n" +
                        "           AND MT.STATUS = 1\n" +
                        "           AND LG.GROUP_ID NOT IN (12, 13)\n" +
                        "           {AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO }\n" +
                        "           {AND MT.VOUCHER_DATE <= ?DATE_AS_ON }\n" +
                        "         GROUP BY MT.VOUCHER_DATE,\n" +
                        "                  VT.VOUCHER_ID,\n" +
                        "                  ML.LEDGER_ID,\n" +
                        "                  TA.TRANS_MODE\n" +
                        "  UNION\n" +
                        "\n" +
                        "SELECT LG.NATURE_ID,VT.VOUCHER_ID, MT.PROJECT_ID, LG.SORT_ORDER,\n" +
                        "               VT.LEDGER_ID,MT.VOUCHER_SUB_TYPE,\n" +
                        "               'LEDGER_CASHBANK_VOUCHER' as PARTICULAR_TYPE,\n" +
                        "               DATE(MT.VOUCHER_DATE) AS VOUCHER_DATE,\n" +
                        "               MT.VOUCHER_NO,\n" +
                        "               LG.LEDGER_GROUP,ML.LEDGER_CODE,\n" +
                        "               ML.LEDGER_NAME,\n" +
                        "               TA.TRANS_MODE AS 'PARTICULRARS',\n" +
                        "               CASE\n" +
                        "                 WHEN VT.TRANS_MODE = 'CR' THEN\n" +
                        "                  (IFNULL(AMOUNT, 0) * IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1))\n" +
                        "                 ELSE\n" +
                        "                  0.00\n" +
                        "               END AS CREDIT,\n" +
                        "               CASE\n" +
                        "                 WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                        "                  (IFNULL(AMOUNT, 0) * IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1))\n" +
                        "                 ELSE\n" +
                        "                  0.00\n" +
                        "               END AS DEBIT," +
                        "     --  CONCAT(IFNULL(MT.NARRATION,''),\n" +
                        "     CONCAT(CONCAT(CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='', IFNULL(MT.NARRATION,''), VT.NARRATION),''),IF(FDR.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',''),FDR.TDS_AMOUNT),' ')),\n" +
                        "      IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(MT.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', MT.NAME_ADDRESS),''),''),\n" +

                        "     IF(1=?INCLUDE_PAN_GST,IF(LENGTH(IFNULL(MT.PAN_NUMBER, '')) > 0, CONCAT(' -- PAN: ', MT.PAN_NUMBER), ''), ''),\n" +
                        "     IF(1=?INCLUDE_PAN_GST, IF(LENGTH(IFNULL(MT.GST_NUMBER, '')) > 0, CONCAT(' -- GST: ', MT.GST_NUMBER), ''), ''),\n" +

                        "      IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(CHEQUE_NO,'')) > 0,CONCAT(' -- ', CHEQUE_NO),''),''))   AS NARRATION,\n" +
                        "    MT.VOUCHER_TYPE, MT.IS_CASH_BANK_STATUS, MT.VOUCHER_DEFINITION_ID,0 AS ACI_TYPE, '' AS LEDGER_DETAIL\n" +
                        "\n" +
                        "          FROM MASTER_LEDGER_GROUP LG\n" +
                        "          LEFT JOIN MASTER_LEDGER ML\n" +
                        "            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "          LEFT JOIN VOUCHER_TRANS VT\n" +
                        "            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "          LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                        "            ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "       LEFT JOIN FD_RENEWAL FDR\n" +
                        "      ON FDR.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "\n" +
                        "          JOIN (SELECT T.NATURE_ID,T.VOUCHER_ID, T.LEDGER_ID,T.VOUCHER_SUB_TYPE, T.TRANS_MODE\n" +
                        "\n" +
                        "                 FROM (SELECT LG.NATURE_ID,VT.VOUCHER_ID, VT.LEDGER_ID,MT.VOUCHER_SUB_TYPE,\n" +
                        "                       CASE\n" +
                        "                        WHEN LG.GROUP_ID = 12 AND VT.TRANS_MODE = 'CR' THEN CONCAT('BY BANK (', CB.LEDGER_NAME, ')')\n" +
                        "                        WHEN LG.GROUP_ID = 12 AND VT.TRANS_MODE = 'DR' THEN CONCAT('TO BANK (', CB.LEDGER_NAME, ')')\n" +
                        "                        WHEN LG.GROUP_ID = 13 AND VT.TRANS_MODE = 'CR' THEN CONCAT('BY CASH (', CB.LEDGER_NAME, ')')\n" +
                        "                        WHEN LG.GROUP_ID = 13 AND VT.TRANS_MODE = 'DR' THEN CONCAT('TO CASH (', CB.LEDGER_NAME, ')')\n" +
                        "                        WHEN LG.GROUP_ID = 14 AND VT.TRANS_MODE = 'CR' THEN CONCAT('BY BANK (', CB.LEDGER_NAME, ')')\n" +
                        "                        WHEN LG.GROUP_ID = 14 AND VT.TRANS_MODE = 'DR' THEN CONCAT('TO BANK (', CB.LEDGER_NAME, ')')\n" +
                        "                        WHEN LG.GROUP_ID NOT IN (12,13,14) AND VT.TRANS_MODE = 'CR' THEN CONCAT('BY BANK (', CB.LEDGER_NAME, ')')\n" +
                        "                        WHEN LG.GROUP_ID NOT IN (12,13,14)  AND VT.TRANS_MODE = 'DR' THEN CONCAT('TO BANK (', CB.LEDGER_NAME, ')')\n" +
                        "                        END AS 'TRANS_MODE'\n" +
                        "                        FROM MASTER_LEDGER_GROUP LG\n" +
                        "                        LEFT JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "                        LEFT JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "                        LEFT JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "                        LEFT JOIN VOUCHER_CC_TRANS VCT ON VT.VOUCHER_ID=VCT.VOUCHER_ID\n" +
                        "                        LEFT JOIN (SELECT VT.VOUCHER_ID, ML.LEDGER_ID, ML.GROUP_ID, ML.LEDGER_NAME\n" +
                        "                                   FROM VOUCHER_TRANS VT\n" +
                        "                                   INNER JOIN MASTER_LEDGER ML ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "                                   WHERE ML.GROUP_ID IN (12, 13)) AS CB ON CB.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "                        WHERE MT.VOUCHER_TYPE IN ('CN')\n" +
                        "                         { AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO} \n" +
                        "                          AND MT.STATUS = 1 AND MT.PROJECT_ID IN (?PROJECT_ID) AND (LG.GROUP_ID IN (12, 13,14) OR MT.VOUCHER_SUB_TYPE = 'FD')\n" +
                        "                        ORDER BY LG.NATURE_ID,VOUCHER_DATE ASC) AS T\n" +//,VT.SEQUENCE_NO ASC) AS T\n" +
                        "               GROUP BY T.VOUCHER_ID,T.LEDGER_ID) AS TA\n" +
                        "            ON MT.VOUCHER_ID = TA.VOUCHER_ID  AND VT.LEDGER_ID=TA.LEDGER_ID\n" +
                        "         WHERE MT.PROJECT_ID IN (?PROJECT_ID) AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)\n" +
                        "           AND VT.LEDGER_ID IN(?LEDGER_ID) AND MT.VOUCHER_TYPE IN ('CN') AND MT.STATUS = 1\n" +
                        "           AND (LG.GROUP_ID IN (12, 13,14) OR MT.VOUCHER_SUB_TYPE = 'FD')\n" +
                        "           {AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO}\n" +
                        "\n" +
                        "         GROUP BY MT.VOUCHER_DATE,\n" +
                        "                  VT.VOUCHER_ID,\n" +
                        "                  ML.LEDGER_ID,\n" +
                        "                  VT.TRANS_MODE \n" + //TA.TRANS_MODE On 19/12/2023 (To show Cash/BAnk Transfer)
                        "        UNION\n" + // 24/02/2025,Chinna
                            " SELECT NATURE_ID, VOUCHER_ID, PROJECT_ID,\n" +
                            "       SORT_ORDER,\n" +
                            "       LEDGER_ID,\n" +
                            "       VOUCHER_SUB_TYPE,\n" +
                            "       'LEDGER_JOURNAL_VOUCHER' AS PARTICULAR_TYPE,\n" +
                            "       DATE(VOUCHER_DATE) AS VOUCHER_DATE,\n" +
                            "       VOUCHER_NO,\n" +
                            "       LEDGER_GROUP,\n" +
                            "       LEDGER_CODE,\n" +
                            "       LEDGER_NAME,\n" +
                            "       CASE\n" +
                            "           WHEN GROUP_ID = '12' AND TRANS_MODE = 'DR' THEN CONCAT('To Bank (', PARTICULARS, ')')\n" +
                            "           WHEN GROUP_ID = '12' AND TRANS_MODE = 'CR' THEN CONCAT('By Bank (', PARTICULARS, ')')\n" +
                            "           WHEN GROUP_ID = '13' AND TRANS_MODE = 'DR' THEN 'To Cash'\n" +
                            "           WHEN GROUP_ID = '13' AND TRANS_MODE = 'CR' THEN 'By Cash'\n" +
                            "           ELSE PARTICULARS\n" +
                            "       END AS PARTICULARS,\n" +
                            "       CREDIT, DEBIT,\n" +
                            "       NARRATION,\n" +
                            "       VOUCHER_TYPE, IS_CASH_BANK_STATUS, VOUCHER_DEFINITION_ID, ACI_TYPE, LEDGER_DETAIL \n" +
                            "FROM (\n" +
                            "    SELECT TS.NATURE_ID, TS.VOUCHER_ID, TS.PROJECT_ID,\n" +
                            "           TS.SORT_ORDER,\n" +
                            "           TS.LEDGER_ID,\n" +
                            "           TS.VOUCHER_SUB_TYPE,\n" +
                            "           'LEDGER_JOURNAL_VOUCHER' AS PARTICULAR_TYPE,\n" +
                            "           DATE(TS.VOUCHER_DATE) AS VOUCHER_DATE,\n" +
                            "           TS.VOUCHER_NO,\n" +
                            "           TS.LEDGER_GROUP,\n" +
                            "           TS.LEDGER_CODE,\n" +
                            "           TS.LEDGER_NAME,\n" +
                            "           IF(?SHOW_ALL_AGAINST_LEDGERS = 1,\n" +
                            "               GROUP_CONCAT(DISTINCT IF(VT.TRANS_MODE = TS.TRANS_MODE, NULL, ML.LEDGER_NAME) SEPARATOR ', '),\n" +
                            "               SUBSTRING_INDEX(GROUP_CONCAT(DISTINCT IF(VT.TRANS_MODE = TS.TRANS_MODE, NULL, ML.LEDGER_NAME) SEPARATOR ', '), ',', 1)\n" +
                            "           ) AS PARTICULARS,\n" +
                            "           IF(?SHOW_ALL_AGAINST_LEDGERS = 1,\n" +
                            "               GROUP_CONCAT(DISTINCT IF(VT.TRANS_MODE = TS.TRANS_MODE, NULL, ML.GROUP_ID) SEPARATOR ', '),\n" +
                            "               SUBSTRING_INDEX(GROUP_CONCAT(DISTINCT IF(VT.TRANS_MODE = TS.TRANS_MODE, NULL, ML.GROUP_ID) SEPARATOR ', '), ',', 1)\n" +
                            "           ) AS GROUP_ID,\n" +
                            "           TS.CREDIT, TS.DEBIT, TS.TRANS_MODE,\n" +
                            "           IF(VT.NARRATION IS NULL OR VT.NARRATION = '',\n" +
                            "              CONCAT(\n" +
                            "                  CONCAT(\n" +
                            "                      CONCAT(IFNULL(VMT.NARRATION, ''), ''),\n" +
                            "                      IF(TS.TDS_AMOUNT > 0, CONCAT(CONCAT(' -TDS Amt:', ''), TS.TDS_AMOUNT), ' ')\n" +
                            "                  )\n" +
                            "              ),\n" +
                            "              CONCAT(\n" +
                            "                  CONCAT(\n" +
                            "                      CONCAT(IFNULL(VT.NARRATION, ''), ''),\n" +
                            "                      IF(TS.TDS_AMOUNT > 0, CONCAT(CONCAT(' -TDS Amt:', ''), TS.TDS_AMOUNT), ' ')\n" +
                            "                  )\n" +
                            "              )\n" +
                            "           ) AS NARRATION,\n" +
                            "           TS.VOUCHER_TYPE, TS.IS_CASH_BANK_STATUS, TS.VOUCHER_DEFINITION_ID, ACI_TYPE, '' AS LEDGER_DETAIL\n" +
                            "    FROM VOUCHER_MASTER_TRANS VMT\n" +
                            "    INNER JOIN VOUCHER_TRANS VT ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                            "    INNER JOIN MASTER_LEDGER ML ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                            "    JOIN (\n" +
                            "        SELECT LG.NATURE_ID, VT.VOUCHER_ID, MT.PROJECT_ID,\n" +
                            "               LG.SORT_ORDER,\n" +
                            "               MT.VOUCHER_SUB_TYPE,\n" +
                            "               MT.VOUCHER_DATE,\n" +
                            "               MT.VOUCHER_NO,\n" +
                            "               VT.NARRATION,\n" +
                            "               FDR.TDS_AMOUNT,\n" +
                            "               MT.VOUCHER_TYPE, MT.IS_CASH_BANK_STATUS,\n" +
                            "               MT.VOUCHER_DEFINITION_ID,\n" +
                            "               VT.TRANS_MODE,\n" +
                            "               ML.LEDGER_NAME,\n" +
                            "               ML.LEDGER_CODE,\n" +
                            "               ML.LEDGER_ID,\n" +
                            "               LG.GROUP_ID,\n" +
                            "               (IFNULL(SUM(IF(VT.TRANS_MODE = 'CR', VT.AMOUNT, 0)), 0) *\n" +
                            "               IF(MT.IS_MULTI_CURRENCY = 1 AND ?CURRENCY_COUNTRY_ID = 0, VT.EXCHANGE_RATE, 1)) AS CREDIT,\n" +
                            "               (IFNULL(SUM(IF(VT.TRANS_MODE = 'DR', VT.AMOUNT, 0)), 0) *\n" +
                            "               IF(MT.IS_MULTI_CURRENCY = 1 AND ?CURRENCY_COUNTRY_ID = 0, VT.EXCHANGE_RATE, 1)) AS DEBIT,\n" +
                            "               VT.SEQUENCE_NO,\n" +
                            "               LG.LEDGER_GROUP,\n" +
                            "               IF(MT.VOUCHER_ID = FDR.FD_INTEREST_VOUCHER_ID, 1, 0) AS ACI_TYPE\n" +
                            "        FROM MASTER_LEDGER_GROUP LG\n" +
                            "        LEFT JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                            "        LEFT JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                            "        LEFT JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "        LEFT JOIN FD_RENEWAL FDR ON MT.VOUCHER_ID = FDR.FD_INTEREST_VOUCHER_ID\n" +
                            "        WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                            "          AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1 = 1)\n" +
                            "          AND VT.LEDGER_ID IN (?LEDGER_ID)\n" +
                            "          AND MT.VOUCHER_TYPE IN ('JN')\n" +
                            "          AND MT.STATUS = 1\n" +
                            "          AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                            "        GROUP BY MT.VOUCHER_DATE,\n" +
                            "                 VT.VOUCHER_ID,\n" +
                            "                 ML.LEDGER_ID,\n" +
                            "                 VT.TRANS_MODE,\n" +
                            "                 VT.SEQUENCE_NO\n" +
                            "        HAVING LG.GROUP_ID NOT IN (12, 13)\n" +
                            "    ) AS TS ON VT.VOUCHER_ID = TS.VOUCHER_ID\n" +
                            "    GROUP BY TS.VOUCHER_DATE, TS.VOUCHER_ID, TS.LEDGER_ID, TS.SEQUENCE_NO\n" +
                            ") AS journal) AS T\n" +
                            "         GROUP BY T.VOUCHER_ID, T.LEDGER_ID, PARTICULARS\n" +
                        "\n" +
                        "UNION ALL\n" +
                        "\n" +
                        "SELECT LG.NATURE_ID,VT.VOUCHER_ID, MT.PROJECT_ID, LG.SORT_ORDER,\n" +
                        "       VT.LEDGER_ID,MT.VOUCHER_SUB_TYPE,\n" +
                        "       'LEDGER_CASHBANK_VOUCHER' as PARTICULAR_TYPE,\n" +
                        "       DATE(MT.VOUCHER_DATE) as DATE,\n" +
                        "       MT.VOUCHER_NO,\n" +
                        "       LG.LEDGER_GROUP,ML.LEDGER_CODE,\n" +
                        "       ML.LEDGER_NAME,\n" +
                        "       TR.LEDGER_NAME AS 'PARTICULARS',\n" +
                        "       TR.CREDIT,\n" +
                        "       TR.DEBIT," +
                        "     --  CONCAT(IFNULL(MT.NARRATION,''),\n" +
                        "     CONCAT(CONCAT(CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='', IFNULL(MT.NARRATION,''), VT.NARRATION),''),IF(FDR.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',''),FDR.TDS_AMOUNT),' ')),\n" +
                        "     IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(MT.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', MT.NAME_ADDRESS),''),''),\n" +

                        "   IF(1=?INCLUDE_PAN_GST,IF(LENGTH(IFNULL(MT.PAN_NUMBER, '')) > 0, CONCAT(' -- PAN: ', MT.PAN_NUMBER), ''), ''),\n" +
                        "   IF(1=?INCLUDE_PAN_GST, IF(LENGTH(IFNULL(MT.GST_NUMBER, '')) > 0, CONCAT(' -- GST: ', MT.GST_NUMBER), ''), ''),\n" +


                        "     IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(CHEQUE_NO,'')) > 0,CONCAT(' -- ', CHEQUE_NO),''),''))   AS NARRATION,\n" +
                        "       MT.VOUCHER_TYPE,MT.IS_CASH_BANK_STATUS, MT.VOUCHER_DEFINITION_ID,0 AS ACI_TYPE, '' AS LEDGER_DETAIL\n" +
                        "\n" +
                        "  FROM MASTER_LEDGER_GROUP LG\n" +
                        "\n" +
                        "  LEFT JOIN MASTER_LEDGER ML\n" +
                        "    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "  LEFT JOIN VOUCHER_TRANS VT\n" +
                        "    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "  LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                        "    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "  LEFT JOIN FD_RENEWAL FDR\n" +
                        "   ON FDR.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "  JOIN (SELECT LG.NATURE_ID,VT.VOUCHER_ID,\n" +
                        "               VT.LEDGER_ID,MT.VOUCHER_SUB_TYPE,\n" +
                        "               ML.LEDGER_NAME,\n" +
                        "               CASE\n" +
                        "                 WHEN VT.TRANS_MODE = 'CR' THEN\n" +
                        "                  (IFNULL(VT.AMOUNT, 0)* IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1))\n" +
                        "                 ELSE\n" +
                        "                  0.00\n" +
                        "               END AS CREDIT,\n" +
                        "               CASE\n" +
                        "                 WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                        "                  (IFNULL(VT.AMOUNT, 0)* IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1))\n" +
                        "                 ELSE\n" +
                        "                  0.00\n" +
                        "               END AS DEBIT\n" +
                        "\n" +
                        "          FROM master_ledger_GROUP LG\n" +
                        "\n" +
                        "          LEFT JOIN MASTER_LEDGER ML\n" +
                        "            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "          LEFT JOIN VOUCHER_TRANS VT\n" +
                        "            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "          LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                        "            ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "\n" +
                        " LEFT JOIN VOUCHER_CC_TRANS VCT ON VT.VOUCHER_ID=VCT.VOUCHER_ID\n" +
                        "         WHERE  \n" +
                        "           { MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO }\n" +
                        "           { AND MT.VOUCHER_DATE <= ?DATE_AS_ON }\n" +
                        "                AND  MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "           and LG.GROUP_ID  in (13, 12, 14)\n" +
                        "           and MT.VOUCHER_TYPE  NOT in ('CN')\n" +
                        "           AND MT.STATUS = 1\n" +
                        "  { AND COST_CENTRE_ID IN(?COST_CENTRE_ID) }\n" +
                        "         GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID) AS TR\n" +
                        "    ON TR.VOUCHER_ID = MT.VOUCHER_ID and tr.ledger_id=ml.ledger_id\n" +
                        " WHERE\n" +
                        " MT.PROJECT_ID IN (?PROJECT_ID) AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)\n" +
                        " AND VT.LEDGER_ID IN (?LEDGER_ID)\n" +
                        " AND\n" +
                        " MT.STATUS = 1 \n" +
                        " { AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO }\n" +

                        " { AND MT.VOUCHER_DATE <= ?DATE_AS_ON }\n" +
                        " AND LG.GROUP_ID IN (12, 13, 14)\n" +
                        " GROUP BY MT.VOUCHER_DATE, VT.VOUCHER_ID, ML.LEDGER_ID) AS TT \n" +
                        " LEFT JOIN MASTER_VOUCHER MV ON MV.VOUCHER_ID = TT.VOUCHER_DEFINITION_ID \n" +
                        "                 LEFT JOIN (SELECT FDA.FD_ACCOUNT_ID, 0 AS VOUCHER_ID, RNO.FD_INTEREST_VOUCHER_ID, RNO.FD_VOUCHER_ID,\n" +
                        "                       RNO.RENEWAL_DATE, IFNULL(RNO.RECEIPT_NO,'') AS RECEIPT_NO,\n" +
                        "                       CONCAT(FDA.FD_ACCOUNT_NUMBER,  IF(IFNULL(RNO.RECEIPT_NO,'')='', '', CONCAT(' (R: ', IFNULL(RNO.RECEIPT_NO,''),')')) ) AS FD_ACCOUNT_NUMBER\n" +
                        "                       FROM FD_ACCOUNT AS FDA\n" +
                        "                       INNER JOIN (SELECT FR.FD_ACCOUNT_ID, FR.FD_INTEREST_VOUCHER_ID, FR.FD_VOUCHER_ID,FR.RENEWAL_DATE, \n" +
                        "                       SUBSTRING_INDEX(GROUP_CONCAT(FR1.RECEIPT_NO ORDER BY FR1.RENEWAL_DATE DESC SEPARATOR '|'), '|', 1) AS RECEIPT_NO \n" +
                        "                       FROM FD_RENEWAL AS FR\n" +
                        "                       LEFT JOIN (SELECT FR1.FD_ACCOUNT_ID, FR1.RENEWAL_DATE AS RENEWAL_DATE, IFNULL(FR1.RECEIPT_NO, '') AS RECEIPT_NO\n" +
                        "                       FROM FD_RENEWAL AS FR1\n" +
                        "                       INNER JOIN FD_ACCOUNT FD1 ON FD1.FD_ACCOUNT_ID = FR1.FD_ACCOUNT_ID\n" +
                        "                       WHERE FD1.STATUS =1 AND FD1.PROJECT_ID IN (?PROJECT_ID) AND FR1.STATUS =1 AND FR1.FD_TYPE = 'RN' AND FR1.RENEWAL_DATE<=?DATE_TO) AS FR1\n" +
                        "                         ON FR1.FD_ACCOUNT_ID= FR.FD_ACCOUNT_ID AND FR1.RENEWAL_DATE<FR.RENEWAL_DATE\n" +
                        "                         WHERE STATUS =1 GROUP BY FR.FD_ACCOUNT_ID, FR.FD_RENEWAL_ID) AS RNO\n" + //FR1.RENEWAL_DATE
                        "                           ON RNO.FD_ACCOUNT_ID = FDA.FD_ACCOUNT_ID WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "                       UNION ALL SELECT FDA.FD_ACCOUNT_ID, FDA.FD_VOUCHER_ID, 0 AS FD_INTEREST_VOUCHER_ID, 0 AS FD_VOUCHER_ID, FDA.INVESTMENT_DATE, '' AS RECEIPT_NO, \n" +
                        "                       FDA.FD_ACCOUNT_NUMBER FROM FD_ACCOUNT AS FDA WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)) AS FD\n" +
                        "                 ON FD.VOUCHER_ID = TT.VOUCHER_ID OR FD.FD_INTEREST_VOUCHER_ID = TT.VOUCHER_ID OR FD.FD_VOUCHER_ID = TT.VOUCHER_ID\n" +
                        " GROUP BY TT.DATE, TT.VOUCHER_ID, TT.LEDGER_ID ORDER BY NATURE_ID, DATE, VOUCHER_NO";


                        // 24/02/2025, Chinna to Get Journal Transaction for BY and To only, other wise we can use it as it is

                        //            query = "SELECT LG.NATURE_ID,'' AS VOUCHER_ID, 0 AS PROJECT_ID,\n" +
                        //                "       LG.SORT_ORDER,\n" +
                        //                "       ML.LEDGER_ID AS LEDGER_ID,'' AS VOUCHER_SUB_TYPE,\n" +
                        //                "       'LEDGER_OPENING_BALANCE' as PARTICULAR_TYPE,\n" +
                        //                "       \n" +
                        //                "       '' as DATE, DATE_FORMAT(?DATE_FROM, '%M-%Y') AS MONTH_YEAR_NAME,\n" +
                        //                "       CAST(DATE_FORMAT(?DATE_FROM, '%Y%m') AS UNSIGNED) AS MONTH_YEAR,\n" +
                        //                "       '' AS VOUCHER_NO,\n" +
                        //                "       LG.LEDGER_GROUP AS 'GROUP',\n" +
                        //                "       ML.LEDGER_CODE,\n" +
                        //                //"       IF(ML.LEDGER_CODE IS NULL OR ML.LEDGER_CODE = '',\n" +
                        //                //"          ML.LEDGER_NAME,\n" +
                        //                //"          CONCAT(ML.LEDGER_CODE, ' - ', ML.LEDGER_NAME)) AS LEDGER_NAME,\n" +
                        //                "          ML.LEDGER_NAME AS LEDGER_NAME,\n" +
                        //                "       'Opening Balance' AS 'PARTICULARS', 'Opening Balance' AS 'PARTICULARS1', 0 AS PARTICULARS_MODE_ORDER,\n" +
                        //                "       SUM(CASE\n" +
                        //                "             WHEN LB2.TRANS_MODE = 'CR' THEN\n" +
                        //                "              LB2.AMOUNT\n" +
                        //                "             ELSE\n" +
                        //                "              0\n" +
                        //                "           END) AS CREDIT,\n" +
                        //                "       SUM(CASE\n" +
                        //                "             WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                        //                "              LB2.AMOUNT\n" +
                        //                "             ELSE\n" +
                        //                "              0\n" +
                        //                "           END) AS DEBIT,\n" +
                        //                "       '' AS NARRATION,\n" +
                        //                "       ' ' AS VOUCHER_TYPE, ' ' AS IS_CASH_BANK_STATUS, ' ' AS VOUCHER_TYPE_NAME, 0 AS VOUCHER_DEFINITION_ID, 0 AS ACI_TYPE, '' AS LEDGER_DETAIL\n" +
                        //                "  FROM MASTER_LEDGER AS ML \n" +
                        //                " INNER JOIN MASTER_LEDGER_GROUP AS LG\n" +
                        //                "    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        //                " INNER JOIN (SELECT LB.BALANCE_DATE,\n" +
                        //                "                    LB.BRANCH_ID,\n" +
                        //                "                    LB.PROJECT_ID,\n" +
                        //                "                    LB.LEDGER_ID,\n" +
                        //                "                    IF(ML.GROUP_ID IN (12, 13, 14) {AND ?CURRENCY_COUNTRY_ID>0}, LB.AMOUNT_FC, LB.AMOUNT) AS AMOUNT,\n" +
                        //                "                    IF(ML.GROUP_ID IN (12, 13, 14) {AND ?CURRENCY_COUNTRY_ID>0}, LB.TRANS_FC_MODE, LB.TRANS_MODE) AS TRANS_MODE\n" +
                        //                "               FROM LEDGER_BALANCE AS LB INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = LB.LEDGER_ID\n" +
                        //                "               LEFT JOIN (SELECT LBA.BRANCH_ID,\n" +
                        //                "                                LBA.PROJECT_ID,\n" +
                        //                "                                LBA.LEDGER_ID,\n" +
                        //                "                                MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
                        //                "                           FROM LEDGER_BALANCE LBA\n" +
                        //                "                          WHERE 1 = 1\n" +
                        //                "                            AND LBA.BALANCE_DATE < ?DATE_FROM\n" +
                        //                "                          GROUP BY LBA.BRANCH_ID,\n" +
                        //                "                                   LBA.PROJECT_ID,\n" +
                        //                "                                   LBA.LEDGER_ID) AS LB1\n" +
                        //                "                 ON LB.BRANCH_ID = LB1.BRANCH_ID\n" +
                        //                "                AND LB.PROJECT_ID = LB1.PROJECT_ID\n" +
                        //                "                AND LB.LEDGER_ID = LB1.LEDGER_ID\n" +
                        //                "              WHERE LB.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //                "                AND LB.BALANCE_DATE = LB1.BAL_DATE) LB2\n" +
                        //                "    ON ML.LEDGER_ID = LB2.LEDGER_ID\n" +
                        //                " WHERE 1 = 1  AND ML.LEDGER_ID IN (?LEDGER_ID) AND LB2.AMOUNT>0 \n" +
                        //                " GROUP BY LG.GROUP_ID,\n" +
                        //                "          LG.GROUP_CODE,\n" +
                        //                "          LG.LEDGER_GROUP,\n" +
                        //                "          ML.LEDGER_ID,\n" +
                        //                "          ML.LEDGER_CODE,\n" +
                        //                "          ML.LEDGER_NAME\n" +
                        //                " UNION ALL  \n" +
                        //                "SELECT TT.NATURE_ID,TT.VOUCHER_ID, TT.PROJECT_ID, TT.SORT_ORDER,\n" +
                        //                "       TT.LEDGER_ID, TT.VOUCHER_SUB_TYPE,\n" +
                        //                "       TT.PARTICULAR_TYPE,\n" +
                        //                "       DATE_FORMAT(TT.DATE, '%d-%m-%Y') AS DATE, DATE_FORMAT(TT.DATE, '%M-%Y') AS MONTH_YEAR_NAME, \n" +
                        //                "       CAST(DATE_FORMAT(TT.DATE, '%Y%m') AS UNSIGNED) AS MONTH_YEAR,\n" +
                        //                "       TT.VOUCHER_NO,\n" +
                        //                "       TT.GROUP as 'Group',TT.LEDGER_CODE,\n" +
                        //                "     --  TT.LEDGER_NAME,\n" +
                        //                "       TT.LEDGER_NAME AS LEDGER_NAME,\n" +
                        //                "       TT.PARTICULARS,\n" +
                        //                "       IF((TT.NARRATION IS NULL OR TT.NARRATION = ''), CONCAT(TT.PARTICULARS, IF( TT.VOUCHER_TYPE IN ('JN'),' - Journal','')), TRIM(TT.NARRATION)) AS PARTICULARS1,\n" +
                        //                "       IF(TT.VOUCHER_TYPE IN ('RC', 'PY', 'CN'), 0, 1 ) AS PARTICULARS_MODE_ORDER,\n" +
                        //                "       (TT.CREDIT) AS CREDIT,\n" +
                        //                "       (TT.DEBIT) AS DEBIT,\n" +
                        //                "       CONCAT(TT.NARRATION, IF(TT.VOUCHER_SUB_TYPE='FD', CONCAT(IF(TT.NARRATION<>'', '<Br>',''),'FD: ', FD.FD_ACCOUNT_NUMBER), '' )  ) AS NARRATION,\n" +
                        //                "       CASE\n" +
                        //                "         WHEN TT.VOUCHER_TYPE = 'RC' THEN 'Receipt' \n" +
                        //                "         WHEN TT.VOUCHER_TYPE = 'PY' THEN  'Payment'\n" +
                        //                "         WHEN TT.VOUCHER_TYPE = 'CN' THEN 'Contra'  \n" +
                        //                "         WHEN TT.VOUCHER_TYPE = 'JN' THEN 'Journal' \n" +
                        //                "       END AS VOUCHER_TYPE, TT.IS_CASH_BANK_STATUS,\n" +
                        //                "       IF(TT.VOUCHER_DEFINITION_ID<=4, CASE TT.VOUCHER_TYPE\n" +
                        //                "         WHEN 'RC' THEN 'Receipt'\n" +
                        //                "         WHEN 'PY' THEN 'Payment'\n" +
                        //                "         WHEN 'CN' THEN 'Contra'\n" +
                        //                "         ELSE 'Journal' END, \n" +
                        //                "         MV.VOUCHER_NAME) AS VOUCHER_TYPE_NAME, TT.VOUCHER_DEFINITION_ID,ACI_TYPE, LEDGER_DETAIL\n" +
                        //                "       FROM \n" +
                        //               " (SELECT T.NATURE_ID,T.VOUCHER_ID, T.PROJECT_ID, T.SORT_ORDER,\n" +
                        //            "       T.LEDGER_ID,T.VOUCHER_SUB_TYPE,\n" +
                        //            "       T.PARTICULAR_TYPE,\n" +
                        //            "       T.VOUCHER_DATE as DATE,\n" +
                        //            "       T.VOUCHER_NO,\n" +
                        //            "       T.LEDGER_GROUP AS 'GROUP',T.LEDGER_CODE,\n" +
                        //            "       T.LEDGER_NAME,\n" +
                        //            "       T.PARTICULRARS as PARTICULARS,\n" +
                        //            "       IFNULL(SUM(T.CREDIT), 0) AS CREDIT,\n" +
                        //            "       IFNULL(SUM(T.DEBIT), 0) AS DEBIT,T.NARRATION,T.VOUCHER_TYPE,T.IS_CASH_BANK_STATUS, T.VOUCHER_DEFINITION_ID, T.ACI_TYPE, T.LEDGER_DETAIL\n" +
                        //            "  FROM (SELECT LG.NATURE_ID,VT.VOUCHER_ID, MT.PROJECT_ID, LG.SORT_ORDER,\n" +
                        //            "               VT.LEDGER_ID,MT.VOUCHER_SUB_TYPE,\n" +
                        //            "               'LEDGER_CASHBANK_VOUCHER' as PARTICULAR_TYPE,\n" +
                        //            "               MT.VOUCHER_DATE,\n" +
                        //            "               MT.VOUCHER_NO,\n" +
                        //            "               LG.LEDGER_GROUP,ML.LEDGER_CODE,\n" +
                        //            "               ML.LEDGER_NAME,\n" +
                        //            "               TA.TRANS_MODE AS 'PARTICULRARS',\n" +
                        //            "               (IFNULL(SUM( IF(VT.TRANS_MODE = 'CR', AMOUNT, 0)),0) * IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)) AS CREDIT,\n" + //refer top history #1
                        //            "               (IFNULL(SUM( IF(VT.TRANS_MODE = 'DR', AMOUNT, 0)),0) * IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)) AS DEBIT,\n" + //refer top history #1

                        //            "     --  CONCAT(IFNULL(MT.NARRATION,''),\n" +
                        //            "     CONCAT(CONCAT(CONCAT(CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION),''),IF(FDR.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',''),FDR.TDS_AMOUNT),' ')),\n" +
                        //            "     IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(MT.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', MT.NAME_ADDRESS),''),''),\n" +
                        //            "     IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(CHEQUE_NO,'')) > 0,CONCAT(' -- ', CHEQUE_NO),''),'')), \n" +
                        //            "     IF(TRIM(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION))<>'' AND TRIM(REF.REFERENCE_NUMBER)<>'', \n" +
                        //            "     IF(TRIM(REF.REFERENCE_NUMBER)<>'', CONCAT(' -Ref ' , IFNULL(REF.REFERENCE_NUMBER,'')), '') ,  IF(TRIM(REF.REFERENCE_NUMBER)<>'', \n" +
                        //            "      CONCAT('Ref ' , IFNULL(REF.REFERENCE_NUMBER,'')), '') ), '', \n" +
                        //            "     IF(1= ?INCLUDE_NARRATION_CURRENCY AND MT.EXCHANGE_COUNTRY_ID>0, CONCAT(' (Currency Details : ', IFNULL(MCE.CURRENCY_NAME, ''), ' ', MT.CONTRIBUTION_AMOUNT, '@',MT.EXCHANGE_RATE, ')'),'')) AS NARRATION, \n" +
                        //            "     MT.VOUCHER_TYPE,MT.IS_CASH_BANK_STATUS,MT.VOUCHER_DEFINITION_ID,0 AS ACI_TYPE, VTCH.NAR_LEDGER AS LEDGER_DETAIL\n" +
                        //            "\n" +
                        //            "    FROM MASTER_LEDGER_GROUP LG\n" +
                        //            "\n" +
                        //            "    LEFT JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        //            "    LEFT JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        //            "    LEFT JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        //            "    LEFT JOIN MASTER_COUNTRY MCE ON MCE.COUNTRY_ID = MT.EXCHANGE_COUNTRY_ID\n" +
                        //            "    LEFT JOIN (SELECT VR.REC_PAY_VOUCHER_ID, VR.LEDGER_ID, GROUP_CONCAT(VT.REFERENCE_NUMBER) AS REFERENCE_NUMBER FROM VOUCHER_REFERENCE VR\n" +
                        //            "    INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VR.REF_VOUCHER_ID AND VT.LEDGER_ID = VR.LEDGER_ID GROUP BY VR.REC_PAY_VOUCHER_ID, VR.LEDGER_ID) AS REF ON\n" +
                        //            "    REF.REC_PAY_VOUCHER_ID = MT.VOUCHER_ID AND REF.LEDGER_ID = VT.LEDGER_ID\n" +
                        //            "       LEFT JOIN FD_RENEWAL FDR\n" +
                        //            "      ON FDR.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID\n" +
                        //            "\n" +
                        //            "          JOIN (SELECT T.NATURE_ID,T.VOUCHER_ID, T.LEDGER_ID,T.VOUCHER_SUB_TYPE, T.TRANS_MODE\n" +
                        //            "\n" +
                        //            "                 FROM (SELECT LG.NATURE_ID,VT.VOUCHER_ID, VT.LEDGER_ID,MT.VOUCHER_SUB_TYPE,\n" +
                        //            "                              CASE \n" +
                        //            "                                WHEN LG.GROUP_ID = 12 AND VT.TRANS_MODE = 'CR' THEN CONCAT('TO BANK (', ML.LEDGER_NAME, ')')\n" +
                        //            "                                WHEN LG.GROUP_ID = 12 AND VT.TRANS_MODE = 'DR' THEN CONCAT('BY BANK (', ML.LEDGER_NAME, ')')\n" +
                        //            "                                WHEN LG.GROUP_ID = 13 AND VT.TRANS_MODE = 'CR' THEN 'TO CASH'\n" +
                        //            "                                WHEN LG.GROUP_ID = 13 AND VT.TRANS_MODE = 'DR' THEN 'BY CASH'\n" +
                        //            "                              END AS 'TRANS_MODE'\n" +
                        //            "                         FROM MASTER_LEDGER_GROUP LG\n" +
                        //            "                         LEFT JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        //            "                         LEFT JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        //            "                         LEFT JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        //            " LEFT JOIN VOUCHER_CC_TRANS VCT ON VT.VOUCHER_ID=VCT.VOUCHER_ID\n" +
                        //            "                        WHERE MT.VOUCHER_TYPE IN ('RC', 'PY')\n" +
                        //            "                          {AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO }\n" +
                        //            "                          {AND MT.VOUCHER_DATE <= ?DATE_AS_ON }\n" +
                        //            "                          AND MT.STATUS = 1\n" +
                        //            "                          AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //            "  { AND COST_CENTRE_ID IN(?COST_CENTRE_ID) }\n" +
                        //            "                          AND LG.GROUP_ID IN (12, 13)\n" +
                        //            "                        ORDER BY LG.NATURE_ID ASC) AS T\n" + //,VT.SEQUENCE_NO ASC) AS T\n" +
                        //            "                            GROUP BY T.VOUCHER_ID) AS TA ON MT.VOUCHER_ID = TA.VOUCHER_ID -- AND VT.LEDGER_ID=TA.LEDGER_ID\n" +
                        //            "                LEFT JOIN (SELECT VT.VOUCHER_ID, ML.LEDGER_ID, ML.GROUP_ID, ML.LEDGER_CODE,\n" +
                        //            "                       IF((COUNT(*) > 1 AND ?SHOW_NARRATION_MONTH_TOTAL=0), GROUP_CONCAT('<Br>', CONCAT(ML.LEDGER_NAME, ' ',\n" +
                        //            "                             CONCAT('Rs.', FORMAT(VT.AMOUNT, 2, 'en_IN')), ' ', VT.TRANS_MODE) ORDER BY VT.SEQUENCE_NO SEPARATOR ''), '' ) AS NAR_LEDGER\n" +
                        //            "                       FROM VOUCHER_TRANS VT\n" +
                        //            "                       INNER JOIN MASTER_LEDGER ML ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        //            "                       WHERE ML.GROUP_ID NOT IN (12, 13) GROUP BY VT.VOUCHER_ID) AS VTCH ON VTCH.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        //            "         WHERE MT.PROJECT_ID IN (?PROJECT_ID) AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)\n" +
                        //            "           AND VT.LEDGER_ID IN (?LEDGER_ID)\n" +
                        //            "           AND MT.VOUCHER_TYPE IN ('RC', 'PY')\n" +
                        //            "           AND MT.STATUS = 1\n" +
                        //            "           AND LG.GROUP_ID NOT IN (12, 13)\n" +
                        //            "           {AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO }\n" +
                        //            "           {AND MT.VOUCHER_DATE <= ?DATE_AS_ON }\n" +
                        //            "         GROUP BY MT.VOUCHER_DATE,\n" +
                        //            "                  VT.VOUCHER_ID,\n" +
                        //            "                  ML.LEDGER_ID,\n" +
                        //            "                  TA.TRANS_MODE\n" +
                        //            "  UNION\n" +
                        //            "\n" +
                        //            "SELECT LG.NATURE_ID,VT.VOUCHER_ID, MT.PROJECT_ID, LG.SORT_ORDER,\n" +
                        //            "               VT.LEDGER_ID,MT.VOUCHER_SUB_TYPE,\n" +
                        //            "               'LEDGER_CASHBANK_VOUCHER' as PARTICULAR_TYPE,\n" +
                        //            "               DATE(MT.VOUCHER_DATE) AS VOUCHER_DATE,\n" +
                        //            "               MT.VOUCHER_NO,\n" +
                        //            "               LG.LEDGER_GROUP,ML.LEDGER_CODE,\n" +
                        //            "               ML.LEDGER_NAME,\n" +
                        //            "               TA.TRANS_MODE AS 'PARTICULRARS',\n" +
                        //            "               CASE\n" +
                        //            "                 WHEN VT.TRANS_MODE = 'CR' THEN\n" +
                        //            "                  (IFNULL(AMOUNT, 0) * IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1))\n" +
                        //            "                 ELSE\n" +
                        //            "                  0.00\n" +
                        //            "               END AS CREDIT,\n" +
                        //            "               CASE\n" +
                        //            "                 WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                        //            "                  (IFNULL(AMOUNT, 0) * IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1))\n" +
                        //            "                 ELSE\n" +
                        //            "                  0.00\n" +
                        //            "               END AS DEBIT," +
                        //            "     --  CONCAT(IFNULL(MT.NARRATION,''),\n" +
                        //            "     CONCAT(CONCAT(CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='', IFNULL(MT.NARRATION,''), VT.NARRATION),''),IF(FDR.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',''),FDR.TDS_AMOUNT),' ')),\n" +
                        //            "      IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(MT.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', MT.NAME_ADDRESS),''),''),\n" +
                        //            "      IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(CHEQUE_NO,'')) > 0,CONCAT(' -- ', CHEQUE_NO),''),''))   AS NARRATION,\n" +
                        //            "    MT.VOUCHER_TYPE, MT.IS_CASH_BANK_STATUS, MT.VOUCHER_DEFINITION_ID,0 AS ACI_TYPE, '' AS LEDGER_DETAIL\n" +
                        //            "\n" +
                        //            "          FROM MASTER_LEDGER_GROUP LG\n" +
                        //            "          LEFT JOIN MASTER_LEDGER ML\n" +
                        //            "            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        //            "          LEFT JOIN VOUCHER_TRANS VT\n" +
                        //            "            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        //            "          LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                        //            "            ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        //            "       LEFT JOIN FD_RENEWAL FDR\n" +
                        //            "      ON FDR.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID\n" +
                        //            "\n" +
                        //            "          JOIN (SELECT T.NATURE_ID,T.VOUCHER_ID, T.LEDGER_ID,T.VOUCHER_SUB_TYPE, T.TRANS_MODE\n" +
                        //            "\n" +
                        //            "                 FROM (SELECT LG.NATURE_ID,VT.VOUCHER_ID, VT.LEDGER_ID,MT.VOUCHER_SUB_TYPE,\n" +
                        //            "                       CASE\n" +
                        //            "                        WHEN LG.GROUP_ID = 12 AND VT.TRANS_MODE = 'CR' THEN CONCAT('BY BANK (', CB.LEDGER_NAME, ')')\n" +
                        //            "                        WHEN LG.GROUP_ID = 12 AND VT.TRANS_MODE = 'DR' THEN CONCAT('TO BANK (', CB.LEDGER_NAME, ')')\n" +
                        //            "                        WHEN LG.GROUP_ID = 13 AND VT.TRANS_MODE = 'CR' THEN CONCAT('BY CASH (', CB.LEDGER_NAME, ')')\n" +
                        //            "                        WHEN LG.GROUP_ID = 13 AND VT.TRANS_MODE = 'DR' THEN CONCAT('TO CASH (', CB.LEDGER_NAME, ')')\n" +
                        //            "                        WHEN LG.GROUP_ID = 14 AND VT.TRANS_MODE = 'CR' THEN CONCAT('BY BANK (', CB.LEDGER_NAME, ')')\n" +
                        //            "                        WHEN LG.GROUP_ID = 14 AND VT.TRANS_MODE = 'DR' THEN CONCAT('TO BANK (', CB.LEDGER_NAME, ')')\n" +
                        //            "                        WHEN LG.GROUP_ID NOT IN (12,13,14) AND VT.TRANS_MODE = 'CR' THEN CONCAT('BY BANK (', CB.LEDGER_NAME, ')')\n" +
                        //            "                        WHEN LG.GROUP_ID NOT IN (12,13,14)  AND VT.TRANS_MODE = 'DR' THEN CONCAT('TO BANK (', CB.LEDGER_NAME, ')')\n" +
                        //            "                        END AS 'TRANS_MODE'\n" +
                        //            "                        FROM MASTER_LEDGER_GROUP LG\n" +
                        //            "                        LEFT JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        //            "                        LEFT JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        //            "                        LEFT JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        //            "                        LEFT JOIN VOUCHER_CC_TRANS VCT ON VT.VOUCHER_ID=VCT.VOUCHER_ID\n" +
                        //            "                        LEFT JOIN (SELECT VT.VOUCHER_ID, ML.LEDGER_ID, ML.GROUP_ID, ML.LEDGER_NAME\n" +
                        //            "                                   FROM VOUCHER_TRANS VT\n" +
                        //            "                                   INNER JOIN MASTER_LEDGER ML ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        //            "                                   WHERE ML.GROUP_ID IN (12, 13)) AS CB ON CB.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        //            "                        WHERE MT.VOUCHER_TYPE IN ('CN')\n" +
                        //            "                         { AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO} \n" +
                        //            "                          AND MT.STATUS = 1 AND MT.PROJECT_ID IN (?PROJECT_ID) AND (LG.GROUP_ID IN (12, 13,14) OR MT.VOUCHER_SUB_TYPE = 'FD')\n" +
                        //            "                        ORDER BY LG.NATURE_ID,VOUCHER_DATE ASC) AS T\n" +//,VT.SEQUENCE_NO ASC) AS T\n" +
                        //            "               GROUP BY T.VOUCHER_ID,T.LEDGER_ID) AS TA\n" +
                        //            "            ON MT.VOUCHER_ID = TA.VOUCHER_ID  AND VT.LEDGER_ID=TA.LEDGER_ID\n" +
                        //            "         WHERE MT.PROJECT_ID IN (?PROJECT_ID) AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)\n" +
                        //            "           AND VT.LEDGER_ID IN(?LEDGER_ID) AND MT.VOUCHER_TYPE IN ('CN') AND MT.STATUS = 1\n" +
                        //            "           AND (LG.GROUP_ID IN (12, 13,14) OR MT.VOUCHER_SUB_TYPE = 'FD')\n" +
                        //            "           {AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO}\n" +
                        //            "\n" +
                        //            "         GROUP BY MT.VOUCHER_DATE,\n" +
                        //            "                  VT.VOUCHER_ID,\n" +
                        //            "                  ML.LEDGER_ID,\n" +
                        //            "                  VT.TRANS_MODE \n" + //TA.TRANS_MODE On 19/12/2023 (To show Cash/BAnk Transfer)
                        //            "        UNION\n" +
                        //                "SELECT TS.NATURE_ID,ts.VOUCHER_ID, ts.PROJECT_ID,\n" +
                        //            "       ts.SORT_ORDER,\n" +
                        //            "       ts.LEDGER_ID,\n" +
                        //            "       ts.VOUCHER_SUB_TYPE,\n" +
                        //            "       'LEDGER_JOURNAL_VOUCHER' as PARTICULAR_TYPE,\n" +
                        //            "       DATE(ts.VOUCHER_DATE) AS VOUCHER_DATE,\n" +
                        //            "       ts.VOUCHER_NO,\n" +
                        //            "       Ts.LEDGER_GROUP,\n" +
                        //            "       Ts.LEDGER_CODE,\n" +
                        //            "       Ts.LEDGER_NAME,\n" +
                        //                //"       ML.LEDGER_NAME AS 'PARTICULARS',\n" + //On 22/02/2021, whether to show all against ledger names or show only top of the agaist ledger
                        //            "IF(?SHOW_ALL_AGAINST_LEDGERS=1, GROUP_CONCAT( DISTINCT IF (VT.TRANS_MODE=TS.TRANS_MODE, null, ML.LEDGER_NAME) separator ', '),\n" +
                        //            "SUBSTRING_INDEX(GROUP_CONCAT( DISTINCT IF (VT.TRANS_MODE=TS.TRANS_MODE, null, ML.LEDGER_NAME) separator ', '), ',', 1)) AS PARTICULARS,\n" +
                        //            "TS.CREDIT,TS.DEBIT,\n" +
                        //                // "       IF(VT.NARRATION=NULL OR VT.NARRATION='',VMT.NARRATION,VT.NARRATION) AS NARRATION,\n" +
                        //                // " IF(VT.NARRATION=NULL OR VT.NARRATION='',CONCAT(CONCAT(CONCAT(IFNULL(VMT.NARRATION, ''),' - TDS Amt:'), TS.TDS_AMOUNT)),\n" +
                        //                // " CONCAT(CONCAT(CONCAT(IFNULL(VT.NARRATION, ''),' - TDS Amt:'), TS.TDS_AMOUNT))) AS NARRATION,\n" +
                        //            "  IF(VT.NARRATION IS NULL OR VT.NARRATION='',CONCAT(CONCAT(CONCAT(IFNULL(VMT.NARRATION, ''),''),IF(TS.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',''),TS.TDS_AMOUNT),' '))),\n" +
                        //            "  CONCAT(CONCAT(CONCAT(IFNULL(VT.NARRATION, ''),''),IF(TS.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',''),TS.TDS_AMOUNT),' ')))) AS NARRATION,\n" +
                        //            "   ts.VOUCHER_TYPE,TS.IS_CASH_BANK_STATUS,ts.VOUCHER_DEFINITION_ID,ACI_TYPE, '' AS LEDGER_DETAIL\n" +
                        //            "\n" +
                        //            "  FROM VOUCHER_MASTER_TRANS VMT\n" +
                        //            "\n" +
                        //            " INNER JOIN VOUCHER_TRANS VT\n" +
                        //            "    ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                        //            "\n" +
                        //            " INNER JOIN MASTER_LEDGER ML\n" +
                        //            "    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        //            "\n" +
                        //            "  JOIN (SELECT LG.NATURE_ID,VT.VOUCHER_ID, MT.PROJECT_ID, \n" +
                        //            "               LG.SORT_ORDER,\n" +
                        //            "               MT.VOUCHER_SUB_TYPE,\n" +
                        //            "               MT.VOUCHER_DATE,\n" +
                        //            "               MT.VOUCHER_NO,\n" +
                        //            "               VT.NARRATION,\n" +
                        //            "               FDR.TDS_AMOUNT,\n" +
                        //            "               MT.VOUCHER_TYPE, MT.IS_CASH_BANK_STATUS,\n" +
                        //"               MT.VOUCHER_DEFINITION_ID,\n" +
                        //            "               VT.TRANS_MODE,\n" +
                        //            "               ML.LEDGER_NAME,\n" +
                        //            "               ML.LEDGER_CODE,\n" +
                        //            "               ML.LEDGER_ID,\n" +
                        //            "               (IFNULL(SUM( IF(VT.TRANS_MODE = 'CR', VT.AMOUNT, 0)), 0) * IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)) AS CREDIT,\n" +
                        //            "               (IFNULL(SUM( IF(VT.TRANS_MODE = 'DR', VT.AMOUNT, 0)), 0) * IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)) AS DEBIT,\n" +
                        //                //"               SUM(VT.AMOUNT) AS AMOUNT,\n" +
                        //                //"               CASE WHEN COUNT(VT.LEDGER_ID)=1 THEN SUM(VT.AMOUNT) ELSE VT.AMOUNT END AS AMOUNT,\n" + Done on 30/06/2017, refer top history #1
                        //            "               VT.SEQUENCE_NO,\n" +
                        //            "               LG.LEDGER_GROUP,     IF(MT.VOUCHER_ID = FDR.FD_INTEREST_VOUCHER_ID,1,0) AS ACI_TYPE \n" +
                        //            "          FROM MASTER_LEDGER_GROUP LG\n" +
                        //            "          LEFT JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        //            "          LEFT JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        //            "          LEFT JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        //            "\n" +
                        //            "LEFT JOIN FD_RENEWAL FDR\n" +
                        //            "  ON MT.VOUCHER_ID = FDR.FD_INTEREST_VOUCHER_ID\n" +
                        //            "\n" +

                        //            "         WHERE MT.PROJECT_ID IN (?PROJECT_ID) AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)\n" +
                        //            "           AND VT.LEDGER_ID IN (?LEDGER_ID)\n" +
                        //            "           AND MT.VOUCHER_TYPE IN ('JN')\n" +
                        //            "           AND MT.STATUS = 1\n" +
                        //            "           AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        //            "         GROUP BY MT.VOUCHER_DATE,\n" +
                        //            "                  VT.VOUCHER_ID,\n" +
                        //            "                  ML.LEDGER_ID, VT.TRANS_MODE, \n" +
                        //            "                  VT.SEQUENCE_NO AND LG.GROUP_ID NOT IN (12, 13)) as ts\n" +
                        //            "    ON VT.VOUCHER_ID = Ts.VOUCHER_ID \n" + //AND VT.TRANS_MODE <> TS.TRANS_MODE 15/02/2019
                        //            " GROUP BY ts.VOUCHER_DATE, ts.VOUCHER_ID, ts.LEDGER_ID, ts.SEQUENCE_NO) AS T\n" +
                        //            "         GROUP BY T.VOUCHER_ID, T.LEDGER_ID, PARTICULARS\n" +
                        //            "\n" +
                        //            "UNION ALL\n" +
                        //            "\n" +
                        //            "SELECT LG.NATURE_ID,VT.VOUCHER_ID, MT.PROJECT_ID, LG.SORT_ORDER,\n" +
                        //            "       VT.LEDGER_ID,MT.VOUCHER_SUB_TYPE,\n" +
                        //            "       'LEDGER_CASHBANK_VOUCHER' as PARTICULAR_TYPE,\n" +
                        //            "       DATE(MT.VOUCHER_DATE) as DATE,\n" +
                        //            "       MT.VOUCHER_NO,\n" +
                        //            "       LG.LEDGER_GROUP,ML.LEDGER_CODE,\n" +
                        //            "       ML.LEDGER_NAME,\n" +
                        //            "       TR.LEDGER_NAME AS 'PARTICULARS',\n" +
                        //            "       TR.CREDIT,\n" +
                        //            "       TR.DEBIT," +
                        //            "     --  CONCAT(IFNULL(MT.NARRATION,''),\n" +
                        //            "     CONCAT(CONCAT(CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='', IFNULL(MT.NARRATION,''), VT.NARRATION),''),IF(FDR.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',''),FDR.TDS_AMOUNT),' ')),\n" +
                        //            "     IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(MT.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', MT.NAME_ADDRESS),''),''),\n" +
                        //            "     IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(CHEQUE_NO,'')) > 0,CONCAT(' -- ', CHEQUE_NO),''),''))   AS NARRATION,\n" +
                        //            "       MT.VOUCHER_TYPE,MT.IS_CASH_BANK_STATUS, MT.VOUCHER_DEFINITION_ID,0 AS ACI_TYPE, '' AS LEDGER_DETAIL\n" +
                        //            "\n" +
                        //            "  FROM MASTER_LEDGER_GROUP LG\n" +
                        //            "\n" +
                        //            "  LEFT JOIN MASTER_LEDGER ML\n" +
                        //            "    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        //            "  LEFT JOIN VOUCHER_TRANS VT\n" +
                        //            "    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        //            "  LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                        //            "    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        //            "  LEFT JOIN FD_RENEWAL FDR\n" +
                        //            "   ON FDR.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID\n" +
                        //            "  JOIN (SELECT LG.NATURE_ID,VT.VOUCHER_ID,\n" +
                        //            "               VT.LEDGER_ID,MT.VOUCHER_SUB_TYPE,\n" +
                        //            "               ML.LEDGER_NAME,\n" +
                        //            "               CASE\n" +
                        //            "                 WHEN VT.TRANS_MODE = 'CR' THEN\n" +
                        //            "                  (IFNULL(VT.AMOUNT, 0)* IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1))\n" +
                        //            "                 ELSE\n" +
                        //            "                  0.00\n" +
                        //            "               END AS CREDIT,\n" +
                        //            "               CASE\n" +
                        //            "                 WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                        //            "                  (IFNULL(VT.AMOUNT, 0)* IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1))\n" +
                        //            "                 ELSE\n" +
                        //            "                  0.00\n" +
                        //            "               END AS DEBIT\n" +
                        //            "\n" +
                        //            "          FROM master_ledger_GROUP LG\n" +
                        //            "\n" +
                        //            "          LEFT JOIN MASTER_LEDGER ML\n" +
                        //            "            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        //            "          LEFT JOIN VOUCHER_TRANS VT\n" +
                        //            "            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        //            "          LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                        //            "            ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        //            "\n" +
                        //            " LEFT JOIN VOUCHER_CC_TRANS VCT ON VT.VOUCHER_ID=VCT.VOUCHER_ID\n" +
                        //            "         WHERE  \n" +
                        //            "           { MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO }\n" +
                        //            "           { AND MT.VOUCHER_DATE <= ?DATE_AS_ON }\n" +
                        //            "                AND  MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //            "           and LG.GROUP_ID  in (13, 12, 14)\n" +
                        //            "           and MT.VOUCHER_TYPE  NOT in ('CN')\n" +
                        //            "           AND MT.STATUS = 1\n" +
                        //            "  { AND COST_CENTRE_ID IN(?COST_CENTRE_ID) }\n" +
                        //            "         GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID) AS TR\n" +
                        //            "    ON TR.VOUCHER_ID = MT.VOUCHER_ID and tr.ledger_id=ml.ledger_id\n" +
                        //            " WHERE\n" +
                        //            " MT.PROJECT_ID IN (?PROJECT_ID) AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)\n" +
                        //            " AND VT.LEDGER_ID IN (?LEDGER_ID)\n" +
                        //            " AND\n" +
                        //            " MT.STATUS = 1 \n" +
                        //            " { AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO }\n" +

                        //            " { AND MT.VOUCHER_DATE <= ?DATE_AS_ON }\n" +
                        //            " AND LG.GROUP_ID IN (12, 13, 14)\n" +
                        //            " GROUP BY MT.VOUCHER_DATE, VT.VOUCHER_ID, ML.LEDGER_ID) AS TT \n" +
                        //            " LEFT JOIN MASTER_VOUCHER MV ON MV.VOUCHER_ID = TT.VOUCHER_DEFINITION_ID \n" +
                        //            "                 LEFT JOIN (SELECT FDA.FD_ACCOUNT_ID, 0 AS VOUCHER_ID, RNO.FD_INTEREST_VOUCHER_ID, RNO.FD_VOUCHER_ID,\n" +
                        //            "                       RNO.RENEWAL_DATE, IFNULL(RNO.RECEIPT_NO,'') AS RECEIPT_NO,\n" +
                        //            "                       CONCAT(FDA.FD_ACCOUNT_NUMBER,  IF(IFNULL(RNO.RECEIPT_NO,'')='', '', CONCAT(' (R: ', IFNULL(RNO.RECEIPT_NO,''),')')) ) AS FD_ACCOUNT_NUMBER\n" +
                        //            "                       FROM FD_ACCOUNT AS FDA\n" +
                        //            "                       INNER JOIN (SELECT FR.FD_ACCOUNT_ID, FR.FD_INTEREST_VOUCHER_ID, FR.FD_VOUCHER_ID,FR.RENEWAL_DATE, \n" +
                        //            "                       SUBSTRING_INDEX(GROUP_CONCAT(FR1.RECEIPT_NO ORDER BY FR1.RENEWAL_DATE DESC SEPARATOR '|'), '|', 1) AS RECEIPT_NO \n" +
                        //            "                       FROM FD_RENEWAL AS FR\n" +
                        //            "                       LEFT JOIN (SELECT FR1.FD_ACCOUNT_ID, FR1.RENEWAL_DATE AS RENEWAL_DATE, IFNULL(FR1.RECEIPT_NO, '') AS RECEIPT_NO\n" +
                        //            "                       FROM FD_RENEWAL AS FR1\n" +
                        //            "                       INNER JOIN FD_ACCOUNT FD1 ON FD1.FD_ACCOUNT_ID = FR1.FD_ACCOUNT_ID\n" +
                        //            "                       WHERE FD1.STATUS =1 AND FD1.PROJECT_ID IN (?PROJECT_ID) AND FR1.STATUS =1 AND FR1.FD_TYPE = 'RN' AND FR1.RENEWAL_DATE<=?DATE_TO) AS FR1\n" +
                        //            "                         ON FR1.FD_ACCOUNT_ID= FR.FD_ACCOUNT_ID AND FR1.RENEWAL_DATE<FR.RENEWAL_DATE\n" +
                        //            "                         WHERE STATUS =1 GROUP BY FR.FD_ACCOUNT_ID, FR.FD_RENEWAL_ID) AS RNO\n" + //FR1.RENEWAL_DATE
                        //            "                           ON RNO.FD_ACCOUNT_ID = FDA.FD_ACCOUNT_ID WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //            "                       UNION ALL SELECT FDA.FD_ACCOUNT_ID, FDA.FD_VOUCHER_ID, 0 AS FD_INTEREST_VOUCHER_ID, 0 AS FD_VOUCHER_ID, FDA.INVESTMENT_DATE, '' AS RECEIPT_NO, \n" +
                        //            "                       FDA.FD_ACCOUNT_NUMBER FROM FD_ACCOUNT AS FDA WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)) AS FD\n" +
                        //            "                 ON FD.VOUCHER_ID = TT.VOUCHER_ID OR FD.FD_INTEREST_VOUCHER_ID = TT.VOUCHER_ID OR FD.FD_VOUCHER_ID = TT.VOUCHER_ID\n" +
                        //            " GROUP BY TT.DATE, TT.VOUCHER_ID, TT.LEDGER_ID ORDER BY NATURE_ID, DATE, VOUCHER_NO";//,LEDGER_CODE,DATE";
                        //            //ORDER BY NATURE_ID
                        break;
                    }
                case ReportSQLCommand.Report.LedgerwiseCashBankCollection:
                    {
                        /*query = @"SELECT VM.VOUCHER_ID, VM.VOUCHER_DATE, RCPYCN.LEDGER_ID, RCPYCN.LEDGER_NAME AS LEDGER_NAME,
                                  CASHBANK.LEDGER_NAME AS CASHBANK,
                                  (IF(CASHBANK.GROUP_ID = 13 AND VM.VOUCHER_TYPE = 'RC', RCPYCN.AMOUNT, 0)) AS RECEIPT_CASH_AMOUNT,
                                  (IF(CASHBANK.GROUP_ID = 12 AND VM.VOUCHER_TYPE = 'RC', RCPYCN.AMOUNT, 0)) AS RECEIPT_BANK_AMOUNT,
                                  (IF(CASHBANK.GROUP_ID = 13 AND VM.VOUCHER_TYPE = 'PY', RCPYCN.AMOUNT, 0)) AS PAYMENT_CASH_AMOUNT,
                                  (IF(CASHBANK.GROUP_ID = 12 AND VM.VOUCHER_TYPE = 'PY', RCPYCN.AMOUNT, 0)) AS PAYMENT_BANK_AMOUNT,
                                  CASE VM.VOUCHER_TYPE WHEN 'RC' THEN 'Receipt' WHEN 'PY' THEN 'Payment' WHEN 'CN' THEN 'Contra' ELSE 'JOURNAL' END AS VOUCHER_TYPE,
                                  VM.VOUCHER_SUB_TYPE, VM.VOUCHER_DEFINITION_ID
                                  FROM VOUCHER_MASTER_TRANS AS VM
                                  LEFT JOIN (SELECT VT.VOUCHER_ID, VT.LEDGER_ID, ML.LEDGER_NAME, VT.TRANS_MODE, SUM(VT.AMOUNT) AS AMOUNT
                                             FROM VOUCHER_TRANS VT
                                             INNER JOIN VOUCHER_MASTER_TRANS VM ON VT.VOUCHER_ID = VM.VOUCHER_ID
                                             INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID
                                             WHERE VM.PROJECT_ID IN (?PROJECT_ID) AND VM.STATUS = 1 AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO
                                             AND ML.GROUP_ID NOT IN (12, 13)
                                             GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID) AS RCPYCN
                                             ON RCPYCN.VOUCHER_ID = VM.VOUCHER_ID
                                  LEFT JOIN (SELECT VT.VOUCHER_ID, ML.GROUP_ID, VT.TRANS_MODE, SUM(VT.AMOUNT) AS AMOUNT,
                                             CASE WHEN ML.LEDGER_SUB_TYPE = 'BK' THEN
                                             CONCAT(CONCAT(ML.LEDGER_NAME, ' - '), CONCAT(MB.BANK, ' - '), MB.BRANCH)
                                             ELSE ML.LEDGER_NAME END AS LEDGER_NAME
                                             FROM VOUCHER_TRANS VT
                                             INNER JOIN VOUCHER_MASTER_TRANS VM ON VT.VOUCHER_ID = VM.VOUCHER_ID
                                             LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID
                                             LEFT JOIN MASTER_BANK_ACCOUNT MBA ON MBA.LEDGER_ID = ML.LEDGER_ID
                                             LEFT JOIN MASTER_BANK MB ON MB.BANK_ID = MBA.BANK_ID
                                             WHERE VM.PROJECT_ID IN (?PROJECT_ID) AND VM.STATUS = 1 AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND
                                             ML.GROUP_ID IN (12, 13) GROUP BY VT.VOUCHER_ID) AS CASHBANK
                                            ON CASHBANK.VOUCHER_ID = VM.VOUCHER_ID
                                  WHERE VM.STATUS = 1 AND VM.PROJECT_ID IN (?PROJECT_ID) AND VM.VOUCHER_TYPE IN ('RC', 'PY')
                                  AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO {AND RCPYCN.LEDGER_ID IN (?LEDGER_ID)}
                         ORDER BY VM.VOUCHER_DATE;"; //, VT.LEDGER_ID*/
                        query = @"SELECT VMT.PROJECT_ID, MLG.NATURE_ID, MLG.GROUP_ID, ML.LEDGER_ID, MLG.GROUP_CODE, MLG.PARENT_GROUP_ID, ML.LEDGER_CODE, MLG.SORT_ORDER,
                                    PG.SORT_ORDER AS PARENT_SORT_ORDER, CASE WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN MLG.LEDGER_GROUP ELSE PG.LEDGER_GROUP END AS PARENT_GROUP, IF(0 = 1 OR 0 = 1,
                                    CASE
                                      WHEN MLG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN
                                       CONCAT(MLG.LEDGER_GROUP)
                                      ELSE
                                    CONCAT('   ',MLG.LEDGER_GROUP)
                                    END,MLG.LEDGER_GROUP) AS LEDGER_GROUP,
                                    IF(0 = 1 AND 0 = 1,
                                    CASE
                                      WHEN MLG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN
                                       CONCAT('   ', ML.LEDGER_NAME)
                                      ELSE
                                       CONCAT('      ', ML.LEDGER_NAME)
                                    END,
                                    ML.LEDGER_NAME) AS LEDGER_NAME, VTCB.LEDGER_NAME AS CASHBANK, VMT.VOUCHER_DATE,
                                    (IF(CASH_BANK_FLAG=  1 AND VT.TRANS_MODE ='CR',  IFNULL(VT.AMOUNT, 0), 0)) AS RECEIPT_CASH_AMOUNT,
                                    (IF(CASH_BANK_FLAG = 2 AND VT.TRANS_MODE ='CR',  IFNULL(VT.AMOUNT, 0), 0)) AS RECEIPT_BANK_AMOUNT,
                                    (IF(CASH_BANK_FLAG=  1 AND VT.TRANS_MODE ='DR',  IFNULL(VT.AMOUNT, 0), 0)) AS PAYMENT_CASH_AMOUNT,
                                    (IF(CASH_BANK_FLAG = 2 AND VT.TRANS_MODE ='DR',  IFNULL(VT.AMOUNT, 0), 0)) AS PAYMENT_BANK_AMOUNT,
                                    CASE VMT.VOUCHER_TYPE WHEN 'RC' THEN 'Receipt' WHEN 'PY' THEN 'Payment' WHEN 'CN' THEN 'Contra' ELSE 'JOURNAL' END AS VOUCHER_TYPE,
                                    VMT.VOUCHER_SUB_TYPE, VMT.VOUCHER_DEFINITION_ID
                                    FROM MASTER_LEDGER AS ML
                                    INNER JOIN MASTER_LEDGER_GROUP AS MLG ON ML.GROUP_ID = MLG.GROUP_ID AND MLG.GROUP_ID NOT IN (12,13,14)
                                    INNER JOIN MASTER_LEDGER_GROUP PG  ON MLG.PARENT_GROUP_ID=PG.GROUP_ID
                                    INNER JOIN VOUCHER_TRANS AS VT ON VT.LEDGER_ID = ML.LEDGER_ID
                                    INNER JOIN VOUCHER_MASTER_TRANS AS VMT ON VT.VOUCHER_ID = VMT.VOUCHER_ID AND VMT.PROJECT_ID IN (?PROJECT_ID) AND
                                    VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND
                                    ( (VMT.VOUCHER_TYPE IN ('RC','PY') ) OR (VMT.VOUCHER_TYPE IN ('JN','CN') AND VMT.VOUCHER_SUB_TYPE='FD') )
                                    AND VMT.STATUS = 1
                                    INNER JOIN (SELECT VOUCHER_ID, IF(ML.GROUP_ID IN (13), 1, 2) AS CASH_BANK_FLAG,
                                          CASE WHEN ML.LEDGER_SUB_TYPE = 'BK' THEN
                                            CONCAT(CONCAT(ML.LEDGER_NAME, ' - '), CONCAT(MB.BANK, ' - '), MB.BRANCH)
                                           ELSE ML.LEDGER_NAME END AS LEDGER_NAME
                                          FROM VOUCHER_TRANS VT
                                          INNER JOIN MASTER_LEDGER AS ML ON ML.LEDGER_ID = VT.LEDGER_ID AND ML.GROUP_ID IN (12, 13, 14)
                                          LEFT JOIN MASTER_BANK_ACCOUNT MBA ON MBA.LEDGER_ID = ML.LEDGER_ID
                                          LEFT JOIN MASTER_BANK MB ON MB.BANK_ID = MBA.BANK_ID
                                          GROUP BY VT.VOUCHER_ID) AS VTCB ON VTCB.VOUCHER_ID = VMT.VOUCHER_ID
                                    WHERE VMT.PROJECT_ID IN (?PROJECT_ID) AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO {AND VT.LEDGER_ID IN (?LEDGER_ID)}";
                        break;
                    }
                #endregion

                #region Monthly Abstract Receipt Journal
                case ReportSQLCommand.Report.MonthlyAbstractReceiptJournal:
                    {
                        //query = "SELECT MLG.GROUP_ID,\n" +
                        //"       ML.LEDGER_ID,\n" +
                        //"       VMT.VOUCHER_DATE,\n" +
                        //"       MLG.GROUP_CODE,\n" +
                        //"       MLG.LEDGER_GROUP,\n" +
                        //"       ML.LEDGER_CODE,\n" +
                        //"       ML.LEDGER_NAME,\n" +
                        //"       IF(VMT.VOUCHER_DATE >= ?DATE_FROM,\n" +
                        //"          IF((?VOUCHER_TYPE = 'JN' AND VT.TRANS_MODE = 'DR'),\n" +
                        //"             -IFNULL(VT.AMOUNT, 0),\n" +
                        //"             IFNULL(VT.AMOUNT, 0)),\n" +
                        //"          0) AS AMOUNT_PERIOD,\n" +
                        //"       IF((?VOUCHER_TYPE = 'JN' AND VT.TRANS_MODE = 'DR'),\n" +
                        //"          -IFNULL(VT.AMOUNT, 0),\n" +
                        //"          IFNULL(VT.AMOUNT, 0)) AS AMOUNT_PROGRESSIVE,\n" +
                        //"       IFNULL(VT.TRANS_MODE, '') AS TRANS_MODE,\n" +
                        //"       IF(ISNULL(VT.AMOUNT) = 0, 1, 0) AS HAS_TRANS\n" +
                        //"  FROM PROJECT_LEDGER AS PL\n" +
                        //" INNER JOIN MASTER_LEDGER AS ML\n" +
                        //"    ON PL.LEDGER_ID = ML.LEDGER_ID\n" +
                        //"   AND PL.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //" INNER JOIN MASTER_LEDGER_GROUP AS MLG\n" +
                        //"    ON ML.GROUP_ID = MLG.GROUP_ID\n" +
                        //"   AND MLG.GROUP_ID NOT IN (?GROUP_ID)\n" +
                        //"  LEFT JOIN VOUCHER_TRANS AS VT\n" +
                        //" INNER JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                        //"    ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                        //"   AND VMT.VOUCHER_DATE BETWEEN ?DATE_PROGRESS_FROM AND ?DATE_TO\n" +
                        //"   AND VMT.VOUCHER_TYPE IN ('JN')\n" +
                        //"   AND VMT.STATUS = 1\n" +
                        //"   AND VT.TRANS_MODE = ?TRANS_MODE ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                        //"   AND VMT.PROJECT_ID = PL.PROJECT_ID\n" +
                        //"  INNER JOIN FD_RENEWAL AS FR\n" +
                        //"    ON VMT.VOUCHER_ID = FR.FD_VOUCHER_ID\n" +
                        //" WHERE FR.STATUS = 1\n" +
                        //"   AND FR.IS_DELETED = 1\n" +
                        //"   AND FR.RENEWAL_TYPE = 'ACI'\n" +
                        //"   AND FR.RENEWAL_DATE BETWEEN ?DATE_PROGRESS_FROM AND ?DATE_TO";

                        query = "SELECT T.LEDGER_ID,T.GROUP_ID,T.GROUP_CODE,T.LEDGER_GROUP,T.LEDGER_CODE,T.LEDGER_NAME,CAST(T.RECEIPTAMT AS DECIMAL) AS RECEIPTAMT\n" +
                       "  FROM (SELECT FDR.INTEREST_LEDGER_ID AS LEDGER_ID,\n" +
                       "               ML.GROUP_ID,\n" +
                       "               ML.GROUP_CODE,\n" +
                       "               ML.LEDGER_GROUP,\n" +
                       "               MLG.LEDGER_CODE,\n" +
                       "               MLG.LEDGER_NAME,\n" +
                       "               IFNULL(SUM(FDR.ACCUMULATED_INTEREST_AMOUNT), 0) AS RECEIPTAMT,\n" +
                       "               IF(FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                       "                  IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) +\n" +
                       "                  IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                       "                  IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) = 0,\n" +
                       "                  'Closed',\n" +
                       "                  'Active') AS CLOSING_STATUS\n" +
                       "          FROM FD_ACCOUNT AS FDA\n" +
                       "          LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                       "                           MAX(MATURITY_DATE) AS MATURITY_DATE,\n" +
                       "                           MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                       "                           SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                       "                           SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                       "                           SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                       "                      FROM FD_RENEWAL\n" +
                       "                     WHERE STATUS = 1\n" +
                       "                       AND IS_DELETED = 1\n" +
                       "                       AND RENEWAL_DATE < ?DATE_FROM\n" +
                       "                     GROUP BY FD_ACCOUNT_ID) AS FDRO\n" +
                       "            ON FDA.FD_ACCOUNT_ID = FDRO.FD_ACCOUNT_ID\n" +
                       "          LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                       "                           INTEREST_LEDGER_ID,\n" +
                       "                           MAX(MATURITY_DATE) AS MATURITY_DATE,\n" +
                       "                           MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                       "                           INTEREST_RATE,\n" +
                       "                           IF(INTEREST_TYPE = 0, 'Simple', 'Compound') AS INTEREST_MODE,\n" +
                       "                           SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                       "                           SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                       "                           SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                       "                      FROM FD_RENEWAL\n" +
                       "                     WHERE STATUS = 1\n" +
                       "                       AND IS_DELETED = 1\n" +
                       "                       AND RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                       "                     GROUP BY FD_ACCOUNT_ID\n" +
                       "                     ORDER BY FD_ACCOUNT_ID DESC) AS FDR\n" +
                       "            ON FDA.FD_ACCOUNT_ID = FDR.FD_ACCOUNT_ID\n" +
                       "          LEFT JOIN MASTER_BANK AS MBK\n" +
                       "            ON FDA.BANK_ID = MBK.BANK_ID\n" +
                       "          LEFT JOIN MASTER_PROJECT MPR\n" +
                       "            ON FDA.PROJECT_ID = MPR.PROJECT_ID\n" +
                       "          LEFT JOIN MASTER_LEDGER MLG\n" +
                       "            ON FDR.INTEREST_LEDGER_ID = MLG.LEDGER_ID\n" +
                       "          LEFT JOIN MASTER_LEDGER_GROUP AS ML\n" +
                       "            ON MLG.GROUP_ID = ML.GROUP_ID\n" +
                       "         WHERE FDA.STATUS = 1\n" +
                       "           AND FDA.INVESTMENT_DATE <= ?DATE_TO\n" +
                       "           AND MPR.PROJECT_ID IN (?PROJECT_ID)\n" +
                       "           AND FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                       "               IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) <> 0) AS T\n" +
                       " WHERE T.CLOSING_STATUS = 'Closed'";


                        break;
                    }
                #endregion

                #region ACI Balance
                case ReportSQLCommand.Report.FetchACIBalance:
                    {
                        query = "SELECT T.*\n" +
                        "  FROM (\n" +
                        "\n" +
                        "        SELECT FDA.LEDGER_ID,\n" +
                        "                IFNULL(FDR.MATURITY_DATE, FDA.MATURED_ON) AS MATURITY_DATE,\n" +
                        "                FDA.FD_ACCOUNT_NUMBER,\n" +
                        "                IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) AS INTEREST_AMOUNT,\n" +
                        "                IF(FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                        "                   IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) +\n" +
                        "                   IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                        "                   IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) = 0,\n" +
                        "                   'Closed',\n" +
                        "                   'Active') AS CLOSING_STATUS\n" +
                        "          FROM FD_ACCOUNT AS FDA\n" +
                        "          LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                        "                            MAX(MATURITY_DATE) AS MATURITY_DATE,\n" +
                        "                            MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                        "                            SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                        "                            SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                        "                            SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                        "                       FROM FD_RENEWAL\n" +
                        "                      WHERE STATUS = 1\n" +
                        "                        AND IS_DELETED = 1\n" +
                        "                       { AND RENEWAL_DATE <?DATE_FROM }\n" +
                        "                       { AND RENEWAL_DATE <?BALANCE_DATE }\n" +
                        "                      GROUP BY FD_ACCOUNT_ID) AS FDRO\n" +
                        "            ON FDA.FD_ACCOUNT_ID = FDRO.FD_ACCOUNT_ID\n" +
                        "          LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                        "                            MAX(MATURITY_DATE) AS MATURITY_DATE,\n" +
                        "                            MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                        "                            INTEREST_RATE,\n" +
                        "                            IF(INTEREST_TYPE = 0, 'Simple', 'Compound') AS INTEREST_MODE,\n" +
                        "                            SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                        "                            SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                        "                            SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                        "                       FROM FD_RENEWAL AS F\n" +
                        "                      WHERE STATUS = 1\n" +
                        "                        AND IS_DELETED = 1\n" +
                        "                       { AND RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO}\n" +
                        "                       { AND RENEWAL_DATE <=?BALANCE_DATE }\n" +
                        "                      GROUP BY F.RENEWAL_DATE,FD_ACCOUNT_ID\n" +
                        "                      ORDER BY FD_ACCOUNT_ID DESC) AS FDR\n" +
                        "            ON FDA.FD_ACCOUNT_ID = FDR.FD_ACCOUNT_ID\n" +
                        "          LEFT JOIN MASTER_BANK AS MBK\n" +
                        "            ON FDA.BANK_ID = MBK.BANK_ID\n" +
                        "          LEFT JOIN MASTER_PROJECT MPR\n" +
                        "            ON FDA.PROJECT_ID = MPR.PROJECT_ID\n" +
                        "          LEFT JOIN MASTER_LEDGER MLG\n" +
                        "            ON FDA.LEDGER_ID = MLG.LEDGER_ID\n" +
                        "         WHERE FDA.STATUS = 1\n" +
                        "          { AND FDA.INVESTMENT_DATE <= ?DATE_TO}\n" +
                        "          { AND FDA.INVESTMENT_DATE <= ?BALANCE_DATE }\n" +
                        "           AND MPR.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "           AND FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                        "               IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) <> 0) AS T\n" +
                         " WHERE T.CLOSING_STATUS = 'Active'";


                        break;
                    }
                #endregion

                #region ACI Balance Multi
                case ReportSQLCommand.Report.FetchACIBalanceMulti:
                    {
                        query = "SELECT VOUCHER_ID,\n" +
                        "       FA.FD_ACCOUNT_ID,\n" +
                        "       FR.FD_VOUCHER_ID,\n" +
                        "       VMT.PROJECT_ID,\n" +
                        "       FA.LEDGER_ID,\n" +
                        "       VOUCHER_DATE,\n" +
                        "       RENEWAL_TYPE,\n" +
                        "       SUM(FR.INTEREST_AMOUNT) AS INTEREST_AMOUNT\n" +
                        "  FROM VOUCHER_MASTER_TRANS AS VMT\n" +
                        "  LEFT JOIN FD_RENEWAL AS FR\n" +
                        "    ON VMT.VOUCHER_ID = FR.FD_VOUCHER_ID\n" +
                        "  LEFT JOIN FD_ACCOUNT AS FA\n" +
                        "   ON FR.FD_ACCOUNT_ID=FA.FD_ACCOUNT_ID\n" +
                        " WHERE FR.RENEWAL_TYPE = 'ACI'\n" +
                        "   AND FR.STATUS = 1\n" +
                        "   AND FR.IS_DELETED = 1\n" +
                        "   AND VMT.STATUS = 1\n" +
                        "   {AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO}\n" +
                        "   {AND VOUCHER_DATE <=?BALANCE_DATE} \n" +
                        "   AND VMT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        " GROUP BY FR.FD_ACCOUNT_ID";
                        break;
                    }
                case ReportSQLCommand.Report.MonitorInternalAudit:
                    {
                        query = @"select * from master_ledger";
                        break;
                    }
                #endregion
            }
            return query;
        }

        #endregion
    }

    public class ReportBankSQL
    {
        public string GetReportSQL(ReportSQLCommand.BankReport queryId)
        {
            string query = string.Empty;
            switch (queryId)
            {
                #region BankReport

                #region ChequeIssuedRegisterDetails
                case ReportSQLCommand.BankReport.ChequeIssuedRegister:
                    {
                        query = "SELECT MT.VOUCHER_ID, T.LEDGER_ID, VMT.VOUCHER_SUB_TYPE, ML.LEDGER_NAME AS ACCOUNT_NUMBER,\n" +
                                " CONCAT(MB.BANK, ',', MB.BRANCH) AS ISSUED_BANK,\n" +
                                " VMT.VOUCHER_DATE, MT.CHEQUE_NO, MATERIALIZED_ON,\n" +
                                " T.LEDGER_NAME, T.TRANS_MODE, T.AMOUNT,\n" +
                            //"CASE WHEN @pVId <> MT.VOUCHER_ID THEN MT.AMOUNT ELSE 0 END AS ISSUED_AMOUNT,\n"+
                                "MT.AMOUNT AS ISSUED_AMOUNT,\n" +
                                "@pVId:=MT.VOUCHER_ID,\n" +
                                " VMT.NAME_ADDRESS, VMT.NARRATION, T.SEQUENCE_NO\n" +
                                " FROM VOUCHER_MASTER_TRANS VMT\n" +
                                " INNER JOIN VOUCHER_TRANS MT ON VMT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                " INNER JOIN MASTER_LEDGER ML ON MT.LEDGER_ID = ML.LEDGER_ID\n" +
                                " LEFT JOIN MASTER_BANK_ACCOUNT MBA ON ML.LEDGER_ID = MBA.LEDGER_ID\n" +
                                " LEFT JOIN MASTER_BANK MB ON MB.BANK_ID = MBA.BANK_ID\n" +
                                " INNER JOIN\n" +
                                "(SELECT MT.VOUCHER_ID,MT.LEDGER_ID,ML.LEDGER_CODE,ML.LEDGER_NAME,MT.AMOUNT, MT.TRANS_MODE, MT.SEQUENCE_NO\n" +
                                    "FROM MASTER_LEDGER AS ML\n" +
                                    "INNER JOIN VOUCHER_TRANS AS MT\n" +
                                    "ON MT.LEDGER_ID=ML.LEDGER_ID\n" +
                                    "INNER JOIN VOUCHER_MASTER_TRANS AS VMT ON VMT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                    "WHERE VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND \n" +
                                    "(ML.GROUP_ID NOT IN (12) OR (VMT.VOUCHER_TYPE = 'CN' AND MT.TRANS_MODE ='DR')) AND VMT.STATUS = 1\n" +
                                    "{ AND ML.LEDGER_ID IN (?LEDGER_ID)}\n" +
                                    " AND VMT.PROJECT_ID IN (?PROJECT_ID) AND VMT.VOUCHER_TYPE IN ('PY','CN') AND VMT.VOUCHER_SUB_TYPE NOT IN ('FD')\n" +
                                    ") AS T ON VMT.VOUCHER_ID = T.VOUCHER_ID\n" +
                                ",(SELECT @pVId := 0) AS P\n" +
                                " WHERE VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO { AND ML.LEDGER_ID IN (?CASHBANK_LEDGER_ID)}\n" +
                                    "   AND ML.LEDGER_SUB_TYPE = 'BK'\n" +
                                    "   AND VMT.STATUS = 1\n" +
                                    "   AND VMT.VOUCHER_TYPE IN ('PY','CN') AND VMT.VOUCHER_SUB_TYPE NOT IN ('FD') \n" +
                                    "   AND VMT.PROJECT_ID IN (?PROJECT_ID) AND (MT.CHEQUE_NO IS NOT NULL AND MT.CHEQUE_NO<>'')\n" +
                                " ORDER BY VMT.VOUCHER_DATE, MT.CHEQUE_NO, T.VOUCHER_ID, T.SEQUENCE_NO";

                        break;
                    }
                #endregion

                #region ChequeCollectedRegisterDetails
                case ReportSQLCommand.BankReport.ChequeCollectedRegister:
                    {
                        query = "SELECT MT.VOUCHER_ID, VMT.VOUCHER_NO, VMT.VOUCHER_SUB_TYPE, VMT.VOUCHER_DATE, MT.CHEQUE_NO,\n" +
                                "CONCAT(MT.CHEQUE_REF_BANKNAME, CONCAT(IF((MT.CHEQUE_REF_BRANCH IS NOT NULL AND MT.CHEQUE_REF_BRANCH<>''),'-',''), MT.CHEQUE_REF_BRANCH),'') AS DRAWEE_NAME,\n" +
                                "T.LEDGER_NAME,\n" +
                                "MT.CHEQUE_REF_DATE AS CHEQUE_DATE,\n" +
                                "MT.AMOUNT AS AMOUNT, VMT.NAME_ADDRESS, @pVId:=MT.VOUCHER_ID\n" +
                                "FROM VOUCHER_MASTER_TRANS VMT\n" +
                                " INNER JOIN VOUCHER_TRANS MT ON VMT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                " INNER JOIN MASTER_LEDGER ML ON MT.LEDGER_ID = ML.LEDGER_ID\n" +
                                " INNER JOIN\n" +
                                "(SELECT MT.VOUCHER_ID, ML.LEDGER_NAME, SUM(MT.AMOUNT) AS AMOUNT\n" +
                                    "FROM MASTER_LEDGER AS ML\n" +
                                    "INNER JOIN VOUCHER_TRANS AS MT ON MT.LEDGER_ID=ML.LEDGER_ID\n" +
                                    "INNER JOIN VOUCHER_MASTER_TRANS AS VMT ON VMT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                    "WHERE VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND \n" +
                                    "(ML.GROUP_ID NOT IN (12) OR (VMT.VOUCHER_TYPE = 'CN' AND MT.TRANS_MODE ='CR')) AND VMT.STATUS = 1\n" +
                                    "{ AND ML.LEDGER_ID IN (?LEDGER_ID)}\n" +
                                    " AND VMT.PROJECT_ID IN (?PROJECT_ID) AND VMT.VOUCHER_TYPE IN ('RC','CN') AND VMT.VOUCHER_SUB_TYPE NOT IN ('FD')\n" +
                                " GROUP BY MT.VOUCHER_ID) AS T ON VMT.VOUCHER_ID = T.VOUCHER_ID\n" +
                                ",(SELECT @pVId := 0) AS P\n" +
                                " WHERE VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO { AND ML.LEDGER_ID IN (?CASHBANK_LEDGER_ID)}\n" +
                                " AND ML.LEDGER_SUB_TYPE = 'BK' AND VMT.STATUS = 1\n" +
                                " AND VMT.VOUCHER_TYPE IN ('RC','CN') AND VMT.VOUCHER_SUB_TYPE NOT IN ('FD') \n" +
                                " AND VMT.PROJECT_ID IN (?PROJECT_ID) AND (MT.CHEQUE_NO IS NOT NULL AND MT.CHEQUE_NO<>'')\n" +
                                " ORDER BY VMT.VOUCHER_DATE, MT.CHEQUE_NO, VMT.VOUCHER_ID";

                        break;
                    }
                #endregion

                #region Cheque Cleared
                case ReportSQLCommand.BankReport.ChequeCleared:
                    {
                        query = "SELECT MT.VOUCHER_ID,\n" +
                        "       T.LEDGER_ID,VMT.VOUCHER_SUB_TYPE,\n" +
                        "       VMT.VOUCHER_DATE,\n" +
                        "       MT.CHEQUE_NO,\n" +
                        "       T.LEDGER_CODE,\n" +
                        "       MATERIALIZED_ON,\n" +
                        "       T.LEDGER_NAME,\n" +
                        "       T.AMOUNT\n" +
                        "  FROM MASTER_PROJECT PL\n" +
                        " INNER JOIN VOUCHER_MASTER_TRANS VMT\n" +
                        "    ON PL.PROJECT_ID = VMT.PROJECT_ID\n" +
                        " INNER JOIN VOUCHER_TRANS MT\n" +
                        "    ON VMT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        " INNER JOIN MASTER_LEDGER ML\n" +
                        "    ON MT.LEDGER_ID = ML.LEDGER_ID\n" +
                        " INNER JOIN\n" +
                        "(SELECT MT.VOUCHER_ID,MT.LEDGER_ID,ML.LEDGER_CODE,ML.LEDGER_NAME,MT.AMOUNT\n" +
                                  "FROM MASTER_LEDGER AS ML\n" +
                                  "INNER JOIN VOUCHER_TRANS AS MT\n" +
                                  "ON MT.LEDGER_ID=ML.LEDGER_ID\n" +
                                  "WHERE ML.GROUP_ID NOT IN(12))AS T\n" +
                        "ON VMT.VOUCHER_ID = T.VOUCHER_ID\n" +
                            //" INNER JOIN master_bank_ACCOUNT ba\n" +
                            //"    ON ML.LEDGER_ID = BA.LEDGER_ID\n" +
                            //" INNER JOIN MASTER_BANK MB\n" +
                            //"    ON BA.BANK_ID = MB.BANK_ID\n" +
                        " WHERE VMT.VOUCHER_DATE <=?DATE_AS_ON\n" +
                        "   AND ML.LEDGER_SUB_TYPE = 'BK'\n" +
                        "   AND VMT.STATUS = 1\n" +
                        "   AND VMT.VOUCHER_TYPE IN ('PY') AND VMT.VOUCHER_SUB_TYPE NOT IN ('FD') \n" +
                        "   AND PL.PROJECT_ID IN (?PROJECT_ID)\n" +
                            //"AND ML.IS_BANK_INTEREST_LEDGER=0\n" +
                        "   AND ML.LEDGER_ID IN (?LEDGER_ID)\n" +
                        "   AND MT.MATERIALIZED_ON IS NOT NULL\n" +
                            //" GROUP BY VMT.VOUCHER_ID\n" +
                        " ORDER BY VOUCHER_DATE ASC";

                        break;
                    }
                #endregion

                #region Cheque Uncleared
                case ReportSQLCommand.BankReport.ChequeUncleared:
                    {
                        query = "SELECT MT.VOUCHER_ID,\n" +
                        "       T.LEDGER_ID,VMT.VOUCHER_SUB_TYPE,\n" +
                        "       VMT.VOUCHER_DATE,\n" +
                        "       MT.CHEQUE_NO,\n" +
                        "       T.LEDGER_CODE,\n" +
                        "       MATERIALIZED_ON,\n" +
                        "       T.LEDGER_NAME,\n" +
                        "       T.AMOUNT\n" +
                        "  FROM MASTER_PROJECT PL\n" +
                        " INNER JOIN VOUCHER_MASTER_TRANS VMT\n" +
                        "    ON PL.PROJECT_ID = VMT.PROJECT_ID\n" +
                        " INNER JOIN VOUCHER_TRANS MT\n" +
                        "    ON VMT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        " INNER JOIN MASTER_LEDGER ML\n" +
                        "    ON MT.LEDGER_ID = ML.LEDGER_ID\n" +
                          " INNER JOIN\n" +
                        "(SELECT MT.VOUCHER_ID,MT.LEDGER_ID,ML.LEDGER_CODE,ML.LEDGER_NAME,MT.AMOUNT\n" +
                                  "FROM MASTER_LEDGER AS ML\n" +
                                  "INNER JOIN VOUCHER_TRANS AS MT\n" +
                                  "ON MT.LEDGER_ID=ML.LEDGER_ID\n" +
                                  "WHERE ML.GROUP_ID NOT IN(12))AS T\n" +
                        "ON VMT.VOUCHER_ID = T.VOUCHER_ID\n" +
                            //" INNER JOIN master_bank_ACCOUNT ba\n" +
                            //"    ON ML.BANK_ACCOUNT_ID = BA.BANK_ACCOUNT_ID\n" +
                            //" INNER JOIN MASTER_BANK MB\n" +
                            //"    ON BA.BANK_ID = MB.BANK_ID\n" +
                        " WHERE \n" +
                        "   ML.LEDGER_SUB_TYPE = 'BK'\n" +
                        "   AND VMT.STATUS = 1\n" +
                        "   AND VMT.VOUCHER_TYPE IN ('PY')\n" +
                        "   AND PL.PROJECT_ID IN (?PROJECT_ID)\n" +
                            //"AND ML.IS_BANK_INTEREST_LEDGER=0\n" +
                        "   AND ML.LEDGER_ID IN (?LEDGER_ID)\n" +
                            //MOdified by salamon
                        "   AND ((MT.MATERIALIZED_ON > ?DATE_AS_ON AND VMT.VOUCHER_DATE <= ?DATE_AS_ON)\n" +
                        "        OR IF(MT.MATERIALIZED_ON IS NULL,VMT.VOUCHER_DATE<=?DATE_AS_ON,''))\n" +
                            //" GROUP BY VMT.VOUCHER_ID\n" +
                        " ORDER BY VOUCHER_DATE ASC";

                        break;
                    }
                #endregion

                #region Cheque Realiszed
                case ReportSQLCommand.BankReport.ChequeRealiszed:
                    {
                        query = "SELECT MT.VOUCHER_ID,\n" +
                        "       T.LEDGER_ID,VMT.VOUCHER_SUB_TYPE,\n" +
                        "       VMT.VOUCHER_DATE,\n" +
                        "       MT.CHEQUE_NO,\n" +
                        "       T.LEDGER_CODE,\n" +
                        "       MATERIALIZED_ON,\n" +
                        "       T.LEDGER_NAME,\n" +
                        "       T.AMOUNT\n" +
                        "  FROM MASTER_PROJECT PL\n" +
                        " INNER JOIN VOUCHER_MASTER_TRANS VMT\n" +
                        "    ON PL.PROJECT_ID = VMT.PROJECT_ID\n" +
                        " INNER JOIN VOUCHER_TRANS MT\n" +
                        "    ON VMT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        " INNER JOIN MASTER_LEDGER ML\n" +
                        "    ON MT.LEDGER_ID = ML.LEDGER_ID\n" +
                          " INNER JOIN\n" +
                        "(SELECT MT.VOUCHER_ID,MT.LEDGER_ID,ML.LEDGER_CODE,ML.LEDGER_NAME,MT.AMOUNT\n" +
                                  "FROM MASTER_LEDGER AS ML\n" +
                                  "INNER JOIN VOUCHER_TRANS AS MT\n" +
                                  "ON MT.LEDGER_ID=ML.LEDGER_ID\n" +
                                  "WHERE ML.GROUP_ID NOT IN(12))AS T\n" +
                        "ON VMT.VOUCHER_ID = T.VOUCHER_ID\n" +
                            //" INNER JOIN master_bank_ACCOUNT ba\n" +
                            //"    ON ML.BANK_ACCOUNT_ID = BA.BANK_ACCOUNT_ID\n" +
                            //" INNER JOIN MASTER_BANK MB\n" +
                            //"    ON BA.BANK_ID = MB.BANK_ID\n" +
                        " WHERE VMT.VOUCHER_DATE <=?DATE_AS_ON\n" +
                        "   AND ML.LEDGER_SUB_TYPE = 'BK'\n" +
                        "   AND VMT.STATUS = 1\n" +
                        "   AND VMT.VOUCHER_TYPE IN ('RC') AND VMT.VOUCHER_SUB_TYPE NOT IN ('FD') \n" +
                        "   AND PL.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   AND ML.LEDGER_ID IN (?LEDGER_ID)\n" +
                        "   AND MT.MATERIALIZED_ON IS NOT NULL\n" +
                            //" GROUP BY VMT.VOUCHER_ID\n" +
                        " ORDER BY VOUCHER_DATE ASC";
                        break;
                    }
                #endregion

                #region Cheque Unrealized
                case ReportSQLCommand.BankReport.ChequeUnrealized:
                    {
                        query = "SELECT MT.VOUCHER_ID,\n" +
                        "       T.LEDGER_ID,VMT.VOUCHER_SUB_TYPE,\n" +
                        "       VMT.VOUCHER_DATE,\n" +
                        "       MT.CHEQUE_NO,\n" +
                        "       T.LEDGER_CODE,\n" +
                        "       MATERIALIZED_ON,\n" +
                        "       T.LEDGER_NAME,\n" +
                        "       T.AMOUNT\n" +
                        "  FROM MASTER_PROJECT PL\n" +
                        " INNER JOIN VOUCHER_MASTER_TRANS VMT\n" +
                        "    ON PL.PROJECT_ID = VMT.PROJECT_ID\n" +
                        " INNER JOIN VOUCHER_TRANS MT\n" +
                        "    ON VMT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        " INNER JOIN MASTER_LEDGER ML\n" +
                        "    ON MT.LEDGER_ID = ML.LEDGER_ID\n" +
                         " INNER JOIN\n" +
                        "(SELECT MT.VOUCHER_ID,MT.LEDGER_ID,ML.LEDGER_CODE,ML.LEDGER_NAME,MT.AMOUNT\n" +
                                  "FROM MASTER_LEDGER AS ML\n" +
                                  "INNER JOIN VOUCHER_TRANS AS MT\n" +
                                  "ON MT.LEDGER_ID=ML.LEDGER_ID\n" +
                                  "WHERE ML.GROUP_ID NOT IN(12))AS T\n" +
                        "ON VMT.VOUCHER_ID = T.VOUCHER_ID\n" +
                            //" INNER JOIN master_bank_ACCOUNT ba\n" +
                            //"    ON ML.BANK_ACCOUNT_ID = BA.BANK_ACCOUNT_ID\n" +
                            //" INNER JOIN MASTER_BANK MB\n" +
                            //"    ON BA.BANK_ID = MB.BANK_ID\n" +
                        " WHERE\n" +  //Commented by Salamon  VMT.VOUCHER_DATE <=?DATE_AS_ON\n" +
                        "   ML.LEDGER_SUB_TYPE = 'BK'\n" +
                        "   AND VMT.STATUS = 1\n" +
                        "   AND VMT.VOUCHER_TYPE IN ('RC') AND VMT.VOUCHER_SUB_TYPE NOT IN ('FD') \n" +
                        "   AND PL.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   AND ML.LEDGER_ID IN (?LEDGER_ID)\n" +
                            //MOdified by salamon
                        "   AND ((MT.MATERIALIZED_ON > ?DATE_AS_ON AND VMT.VOUCHER_DATE <= ?DATE_AS_ON)\n" +
                        "        OR IF(MT.MATERIALIZED_ON IS NULL,VMT.VOUCHER_DATE<=?DATE_AS_ON,''))\n" +
                            //" GROUP BY VMT.VOUCHER_ID\n" +
                        " ORDER BY VOUCHER_DATE ASC";
                        break;
                    }
                #endregion

                #region Bank Reconciliation Statement
                case ReportSQLCommand.BankReport.BankReconcilationStatement:
                    {
                        //// Show the Multiple Transaction in the bank Reconcilation Statement Reports ( Receipts and Payment Data)

                        //18.12.2017 To show MultipleTransaction, Double Entry, Multiple Transaction, To Show the Contra Vouchers 
                        // "       MT.CHEQUE_REF_DATE,\n" +
                        query = "SELECT MT.VOUCHER_ID,\n" +
                        "       T.LEDGER_ID,VMT.VOUCHER_SUB_TYPE,T.TRANS_MODE,VMT.VOUCHER_TYPE,\n" +
                        "       MT.CHEQUE_NO,\n" +
                        "       IF(MT.CHEQUE_REF_DATE='0001-01-01 00:00:00','',DATE_FORMAT(MT.CHEQUE_REF_DATE,'%d/%m/%Y')) AS CHEQUE_REF_DATE,\n" +
                        "       VMT.VOUCHER_DATE,\n" +
                        "       T.LEDGER_CODE,\n" +
                        "       IF(MATERIALIZED_ON='0001-01-01 00:00:00','',DATE_FORMAT(MATERIALIZED_ON,'%d/%m/%Y')) as 'DATE',\n" +
                        "       T.LEDGER_NAME,\n" +
                        "       CASE\n" +
                        "         WHEN VMT.VOUCHER_TYPE = 'PY' THEN\n" +
                        "        IF(T.TRANS_MODE ='DR',MT.AMOUNT, -MT.AMOUNT)\n" +
                       "         WHEN (VMT.VOUCHER_TYPE = 'CN' AND T.TRANS_MODE ='DR')  THEN\n" +
                        "        T.AMOUNT\n" +
                        "         ELSE\n" +
                        "          0.00\n" +
                        "       END AS 'UnCleared',\n" +
                        "       CASE\n" +
                        "         WHEN VMT.VOUCHER_TYPE = 'RC' THEN\n" +
                        "   IF(T.TRANS_MODE ='CR',MT.AMOUNT, -MT.AMOUNT)\n" +
                        "    WHEN (VMT.VOUCHER_TYPE = 'CN' AND T.TRANS_MODE ='CR') THEN\n" +
                        "    T.AMOUNT\n" +
                        "         ELSE\n" +
                        "          0.00\n" +
                        "       END AS 'Unrealised'\n" +
                        "  FROM MASTER_PROJECT PL\n" +
                        " INNER JOIN VOUCHER_MASTER_TRANS VMT\n" +
                        "    ON PL.PROJECT_ID = VMT.PROJECT_ID\n" +
                        " INNER JOIN VOUCHER_TRANS MT\n" +
                        "    ON VMT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "\n" +
                        " INNER JOIN MASTER_LEDGER ML\n" +
                        "    ON MT.LEDGER_ID = ML.LEDGER_ID\n" +
                         " INNER JOIN\n" +
                        "(SELECT MT.VOUCHER_ID,MT.LEDGER_ID,ML.GROUP_ID,ML.LEDGER_CODE,ML.LEDGER_NAME,MT.AMOUNT,MT.TRANS_MODE,MT.SEQUENCE_NO\n" +
                                  "FROM MASTER_LEDGER AS ML\n" +
                                  "INNER JOIN VOUCHER_TRANS AS MT\n" +
                                  "ON MT.LEDGER_ID=ML.LEDGER_ID\n" +
                                  "INNER JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                                  " ON VMT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                  "WHERE (VMT.VOUCHER_TYPE IN ('RC', 'PY') AND ML.GROUP_ID NOT IN (12)) OR (VMT.VOUCHER_TYPE = 'CN' AND ML.LEDGER_ID NOT IN (?LEDGER_ID))) AS T\n" +
                        " ON VMT.VOUCHER_ID = T.VOUCHER_ID\n" +
                        " WHERE\n" +
                        "   ML.LEDGER_SUB_TYPE = 'BK'\n" +
                        "   AND VMT.STATUS = 1\n" +
                        "   AND PL.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   AND ML.LEDGER_ID IN (?LEDGER_ID)\n" +
                        "   AND ((MT.MATERIALIZED_ON > ?DATE_AS_ON AND VMT.VOUCHER_DATE <= ?DATE_AS_ON)\n" +
                        "        OR IF(MT.MATERIALIZED_ON IS NULL,VMT.VOUCHER_DATE<=?DATE_AS_ON,''))\n" +
                        "   AND VMT.VOUCHER_TYPE IN ('PY', 'RC','CN')  AND VMT.VOUCHER_SUB_TYPE NOT IN ('FD') \n" +
                        " ORDER BY VOUCHER_DATE,CHEQUE_NO DESC, MT.VOUCHER_ID, T.SEQUENCE_NO";
                        break;
                    }

                case ReportSQLCommand.BankReport.BankReconcilationStatementByConsolidated:
                    {
                        //18.12.2017 To show MultipleTransaction, Double Entry, Multiple Transaction, To Show the Contra Vouchers 
                        query = "SELECT MT.VOUCHER_ID,\n" +
                        "       T.LEDGER_ID,VMT.VOUCHER_SUB_TYPE,T.TRANS_MODE,VMT.VOUCHER_TYPE,\n" +
                        "       MT.CHEQUE_NO,\n" +
                        "       IF(MT.CHEQUE_REF_DATE='0001-01-01 00:00:00','',DATE_FORMAT(MT.CHEQUE_REF_DATE,'%d/%m/%Y')) AS CHEQUE_REF_DATE,\n" +
                        "       VMT.VOUCHER_DATE,\n" +
                        "       T.LEDGER_CODE,\n" +
                        "       IF(MATERIALIZED_ON='0001-01-01 00:00:00','',DATE_FORMAT(MATERIALIZED_ON,'%d/%m/%Y')) as 'DATE',\n" +
                        "       T.LEDGER_NAME,\n" +
                        "       (CASE\n" +
                        "         WHEN VMT.VOUCHER_TYPE = 'PY' THEN\n" +
                        "               MT.AMOUNT\n" +
                        "         WHEN (VMT.VOUCHER_TYPE = 'CN' AND T.TRANS_MODE ='DR')  THEN\n" +
                        "               MT.AMOUNT\n" +
                        "        WHEN (VMT.VOUCHER_TYPE ='JN' AND T.TRANS_MODE='DR') THEN\n" +
                        "        MT.AMOUNT\n" +
                        "         ELSE\n" +
                        "          0.00\n" +
                        "       END) AS 'UnCleared',\n" +
                        "       (CASE\n" +
                        "         WHEN VMT.VOUCHER_TYPE = 'RC' THEN\n" +
                        "             MT.AMOUNT\n" +
                        "         WHEN (VMT.VOUCHER_TYPE = 'CN' AND T.TRANS_MODE ='CR') THEN\n" +
                        "             MT.AMOUNT\n" +
                         "        WHEN (VMT.VOUCHER_TYPE ='JN' AND T.TRANS_MODE='CR') THEN\n" +
                        "         MT.AMOUNT\n" +
                        "         ELSE\n" +
                        "          0.00\n" +
                        "       END) AS 'Unrealised'\n" +
                        "  FROM MASTER_PROJECT PL\n" +
                        " INNER JOIN VOUCHER_MASTER_TRANS VMT\n" +
                        "    ON PL.PROJECT_ID = VMT.PROJECT_ID\n" +
                        " INNER JOIN VOUCHER_TRANS MT\n" +
                        "    ON VMT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "\n" +
                        " INNER JOIN MASTER_LEDGER ML\n" +
                        "    ON MT.LEDGER_ID = ML.LEDGER_ID\n" +
                         " INNER JOIN\n" +
                        "(SELECT MT.VOUCHER_ID,MT.LEDGER_ID,ML.GROUP_ID,ML.LEDGER_CODE,ML.LEDGER_NAME,MT.AMOUNT,MT.TRANS_MODE,MT.SEQUENCE_NO\n" +
                                  "FROM MASTER_LEDGER AS ML\n" +
                                  "INNER JOIN VOUCHER_TRANS AS MT\n" +
                                  "ON MT.LEDGER_ID=ML.LEDGER_ID\n" +
                                  "INNER JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                                  " ON VMT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                  "WHERE (VMT.VOUCHER_TYPE IN ('RC', 'PY','JN') AND ML.GROUP_ID NOT IN(12)) OR (VMT.VOUCHER_TYPE = 'CN' AND ML.LEDGER_ID NOT IN (?LEDGER_ID)) GROUP BY MT.VOUCHER_ID) AS T\n" +
                        " ON VMT.VOUCHER_ID = T.VOUCHER_ID\n" +
                        " WHERE\n" +
                        "   ML.LEDGER_SUB_TYPE = 'BK'\n" +
                        "   AND VMT.STATUS = 1\n" +
                        "   AND PL.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   AND ML.LEDGER_ID IN (?LEDGER_ID)\n" +
                        "   AND ((MT.MATERIALIZED_ON > ?DATE_AS_ON AND VMT.VOUCHER_DATE <= ?DATE_AS_ON)\n" +
                        "        OR IF(MT.MATERIALIZED_ON IS NULL,VMT.VOUCHER_DATE<=?DATE_AS_ON,''))\n" +
                        "   AND VMT.VOUCHER_TYPE IN ('PY', 'RC','CN','JN') AND (VMT.IS_CASH_BANK_STATUS=1) AND VMT.VOUCHER_SUB_TYPE NOT IN ('FD') \n" +
                        "GROUP BY VMT.VOUCHER_ID, MT.SEQUENCE_NO\n" +
                        " ORDER BY VOUCHER_DATE,CHEQUE_NO DESC, MT.VOUCHER_ID, T.SEQUENCE_NO";
                        break;

                        // 14/02/2025, Chinna
                        //18.12.2017 To show MultipleTransaction, Double Entry, Multiple Transaction, To Show the Contra Vouchers 
                        //query = "SELECT MT.VOUCHER_ID,\n" +
                        //"       T.LEDGER_ID,VMT.VOUCHER_SUB_TYPE,T.TRANS_MODE,VMT.VOUCHER_TYPE,\n" +
                        //"       MT.CHEQUE_NO,\n" +
                        //"       IF(MT.CHEQUE_REF_DATE='0001-01-01 00:00:00','',DATE_FORMAT(MT.CHEQUE_REF_DATE,'%d/%m/%Y')) AS CHEQUE_REF_DATE,\n" +
                        //"       VMT.VOUCHER_DATE,\n" +
                        //"       T.LEDGER_CODE,\n" +
                        //"       IF(MATERIALIZED_ON='0001-01-01 00:00:00','',DATE_FORMAT(MATERIALIZED_ON,'%d/%m/%Y')) as 'DATE',\n" +
                        //"       T.LEDGER_NAME,\n" +
                        //"       (CASE\n" +
                        //"         WHEN VMT.VOUCHER_TYPE = 'PY' THEN\n" +
                        //"               MT.AMOUNT\n" +
                        //"         WHEN (VMT.VOUCHER_TYPE = 'CN' AND T.TRANS_MODE ='DR')  THEN\n" +
                        //"               MT.AMOUNT\n" +
                        //"         ELSE\n" +
                        //"          0.00\n" +
                        //"       END) AS 'UnCleared',\n" +
                        //"       (CASE\n" +
                        //"         WHEN VMT.VOUCHER_TYPE = 'RC' THEN\n" +
                        //"             MT.AMOUNT\n" +
                        //"         WHEN (VMT.VOUCHER_TYPE = 'CN' AND T.TRANS_MODE ='CR') THEN\n" +
                        //"             MT.AMOUNT\n" +
                        //"         ELSE\n" +
                        //"          0.00\n" +
                        //"       END) AS 'Unrealised'\n" +
                        //"  FROM MASTER_PROJECT PL\n" +
                        //" INNER JOIN VOUCHER_MASTER_TRANS VMT\n" +
                        //"    ON PL.PROJECT_ID = VMT.PROJECT_ID\n" +
                        //" INNER JOIN VOUCHER_TRANS MT\n" +
                        //"    ON VMT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        //"\n" +
                        //" INNER JOIN MASTER_LEDGER ML\n" +
                        //"    ON MT.LEDGER_ID = ML.LEDGER_ID\n" +
                        // " INNER JOIN\n" +
                        //"(SELECT MT.VOUCHER_ID,MT.LEDGER_ID,ML.GROUP_ID,ML.LEDGER_CODE,ML.LEDGER_NAME,MT.AMOUNT,MT.TRANS_MODE,MT.SEQUENCE_NO\n" +
                        //          "FROM MASTER_LEDGER AS ML\n" +
                        //          "INNER JOIN VOUCHER_TRANS AS MT\n" +
                        //          "ON MT.LEDGER_ID=ML.LEDGER_ID\n" +
                        //          "INNER JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                        //          " ON VMT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        //          "WHERE (VMT.VOUCHER_TYPE IN ('RC', 'PY') AND ML.GROUP_ID NOT IN(12)) OR (VMT.VOUCHER_TYPE = 'CN' AND ML.LEDGER_ID NOT IN (?LEDGER_ID)) GROUP BY MT.VOUCHER_ID) AS T\n" +
                        //" ON VMT.VOUCHER_ID = T.VOUCHER_ID\n" +
                        //" WHERE\n" +
                        //"   ML.LEDGER_SUB_TYPE = 'BK'\n" +
                        //"   AND VMT.STATUS = 1\n" +
                        //"   AND PL.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //"   AND ML.LEDGER_ID IN (?LEDGER_ID)\n" +
                        //"   AND ((MT.MATERIALIZED_ON > ?DATE_AS_ON AND VMT.VOUCHER_DATE <= ?DATE_AS_ON)\n" +
                        //"        OR IF(MT.MATERIALIZED_ON IS NULL,VMT.VOUCHER_DATE<=?DATE_AS_ON,''))\n" +
                        //"   AND VMT.VOUCHER_TYPE IN ('PY', 'RC','CN')  AND VMT.VOUCHER_SUB_TYPE NOT IN ('FD') \n" +
                        //"GROUP BY VMT.VOUCHER_ID, MT.SEQUENCE_NO\n" +
                        //" ORDER BY VOUCHER_DATE,CHEQUE_NO DESC, MT.VOUCHER_ID, T.SEQUENCE_NO";
                        //break;
                    }
                case ReportSQLCommand.BankReport.BankActualStatement:
                    {
                        //16.04.2020 To show bank Actual statement (Materialized)
                        query = "SELECT MT.VOUCHER_ID, T.LEDGER_ID, VMT.VOUCHER_TYPE, VMT.VOUCHER_SUB_TYPE, \n" +
                                "VMT.VOUCHER_DATE, MATERIALIZED_ON AS DATE, T.LEDGER_CODE, T.LEDGER_NAME,\n" +
                                "T.TRANS_MODE, MT.CHEQUE_NO, \n" +
                                "CONCAT(IF(?SHOW_FIXED_DEPOSIT_VOUCHER_DETAIL=1, CONCAT(T.LEDGER_NAME, '-'), ''), VMT.NARRATION, IF(VMT.VOUCHER_SUB_TYPE='FD', CONCAT(' FD: ', FD.FD_ACCOUNT_NUMBER), '') ) AS NARRATION,\n" +
                                "VMT.NAME_ADDRESS,\n" +
                                " CASE WHEN ?SHOW_FIXED_DEPOSIT_VOUCHER_DETAIL=1 AND VMT.VOUCHER_TYPE = 'RC' AND VMT.VOUCHER_SUB_TYPE ='FD' THEN\n" +
                                "        IF(T.TRANS_MODE='DR', T.AMOUNT, 0)                           \n" +
                                "      WHEN (?SHOW_FIXED_DEPOSIT_VOUCHER_DETAIL=1 AND VMT.VOUCHER_TYPE = 'CN' AND VMT.VOUCHER_SUB_TYPE ='FD'AND T.TRANS_MODE ='DR') THEN\n" +
                                "        IF(T.TRANS_MODE='DR', T.AMOUNT, 0)\n" +
                                "      WHEN VMT.VOUCHER_TYPE = 'PY' THEN\n" +
                                "        MT.AMOUNT\n" +
                                "      WHEN (VMT.VOUCHER_TYPE = 'CN' AND T.TRANS_MODE ='DR')  THEN\n" +
                                "        MT.AMOUNT\n" +
                                "      ELSE\n" +
                                "        0.00\n" +
                                " END AS DEBIT,\n" +
                                " CASE WHEN ?SHOW_FIXED_DEPOSIT_VOUCHER_DETAIL=1 AND VMT.VOUCHER_TYPE = 'RC' AND VMT.VOUCHER_SUB_TYPE ='FD' THEN\n" +
                                "        IF(T.TRANS_MODE='CR', T.AMOUNT, 0)\n" +
                                "      WHEN (?SHOW_FIXED_DEPOSIT_VOUCHER_DETAIL=1 AND VMT.VOUCHER_TYPE = 'CN' AND VMT.VOUCHER_SUB_TYPE ='FD' AND T.TRANS_MODE ='CR') THEN\n" +
                                "        IF(T.TRANS_MODE='CR', T.AMOUNT, 0)\n" +
                                "      WHEN VMT.VOUCHER_TYPE = 'RC' THEN\n" +
                                "        MT.AMOUNT\n" +
                                "      WHEN (VMT.VOUCHER_TYPE = 'CN' AND T.TRANS_MODE ='CR') THEN\n" +
                                "        MT.AMOUNT\n" +
                                "      ELSE\n" +
                                "        0.00\n" +
                                " END AS CREDIT\n" +
                                "FROM MASTER_PROJECT PL\n" +
                                "INNER JOIN VOUCHER_MASTER_TRANS VMT ON PL.PROJECT_ID = VMT.PROJECT_ID\n" +
                                "INNER JOIN VOUCHER_TRANS MT ON VMT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "INNER JOIN MASTER_LEDGER ML ON MT.LEDGER_ID = ML.LEDGER_ID\n" +
                                "INNER JOIN\n" +
                                "(SELECT MT.VOUCHER_ID,MT.LEDGER_ID,ML.GROUP_ID,ML.LEDGER_CODE,ML.LEDGER_NAME,MT.AMOUNT,MT.TRANS_MODE,MT.SEQUENCE_NO\n" +
                                "  FROM MASTER_LEDGER AS ML\n" +
                                "  INNER JOIN VOUCHER_TRANS AS MT ON MT.LEDGER_ID=ML.LEDGER_ID\n" +
                                "  INNER JOIN VOUCHER_MASTER_TRANS AS VMT ON VMT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "WHERE (VMT.VOUCHER_TYPE IN ('RC', 'PY') AND ML.GROUP_ID NOT IN(12)) OR (VMT.VOUCHER_TYPE = 'CN' AND ML.LEDGER_ID NOT IN (?LEDGER_ID))) AS T\n" +
                                "ON VMT.VOUCHER_ID = T.VOUCHER_ID\n" +
                                " LEFT JOIN (SELECT FDA.FD_ACCOUNT_ID, 0 AS VOUCHER_ID, RNO.FD_INTEREST_VOUCHER_ID, RNO.FD_VOUCHER_ID,\n" +
                                "          RNO.RENEWAL_DATE, IFNULL(RNO.RECEIPT_NO,'') AS RECEIPT_NO,\n" +
                                "          CONCAT(FDA.FD_ACCOUNT_NUMBER,  IF(IFNULL(RNO.RECEIPT_NO,'')='', '', CONCAT(' (R: ', IFNULL(RNO.RECEIPT_NO,''),')')) ) AS FD_ACCOUNT_NUMBER\n" +
                                "          FROM FD_ACCOUNT AS FDA\n" +
                                "          INNER JOIN (SELECT FR.FD_ACCOUNT_ID, FR.FD_INTEREST_VOUCHER_ID, FR.FD_VOUCHER_ID,FR.RENEWAL_DATE, \n" +
                                "                   SUBSTRING_INDEX(GROUP_CONCAT(FR1.RECEIPT_NO ORDER BY FR1.RENEWAL_DATE DESC SEPARATOR '|'), '|', 1) AS RECEIPT_NO \n" +
                                "                   FROM FD_RENEWAL AS FR\n" +
                                "                   LEFT JOIN (SELECT FR1.FD_ACCOUNT_ID, FR1.RENEWAL_DATE AS RENEWAL_DATE, IFNULL(FR1.RECEIPT_NO, '') AS RECEIPT_NO\n" +
                                "                       FROM FD_RENEWAL AS FR1\n" +
                                "                       INNER JOIN FD_ACCOUNT FD1 ON FD1.FD_ACCOUNT_ID = FR1.FD_ACCOUNT_ID\n" +
                                "                       WHERE FD1.STATUS =1 AND FD1.PROJECT_ID IN (?PROJECT_ID) AND FR1.STATUS =1 AND FR1.FD_TYPE = 'RN' AND FR1.RENEWAL_DATE<=?DATE_TO) AS FR1\n" +
                                "                   ON FR1.FD_ACCOUNT_ID= FR.FD_ACCOUNT_ID AND FR1.RENEWAL_DATE<FR.RENEWAL_DATE\n" +
                                "                   WHERE STATUS =1 GROUP BY FR.FD_ACCOUNT_ID, FR.FD_RENEWAL_ID) AS RNO\n" + //FR1.RENEWAL_DATE
                                "           ON RNO.FD_ACCOUNT_ID = FDA.FD_ACCOUNT_ID WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "           UNION ALL SELECT FDA.FD_ACCOUNT_ID, FDA.FD_VOUCHER_ID, 0 AS FD_INTEREST_VOUCHER_ID, 0 AS FD_VOUCHER_ID, FDA.INVESTMENT_DATE, '' AS RECEIPT_NO, \n" +
                                "           FDA.FD_ACCOUNT_NUMBER FROM FD_ACCOUNT AS FDA WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)) AS FD\n" +
                                "    ON FD.VOUCHER_ID = VMT.VOUCHER_ID OR FD.FD_INTEREST_VOUCHER_ID = VMT.VOUCHER_ID OR FD.FD_VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "WHERE ML.LEDGER_SUB_TYPE = 'BK' AND VMT.STATUS = 1 AND PL.PROJECT_ID IN (?PROJECT_ID) AND ML.LEDGER_ID IN (?LEDGER_ID)\n" +
                                "AND (MT.MATERIALIZED_ON BETWEEN ?DATE_FROM AND ?DATE_TO ) AND VMT.VOUCHER_TYPE IN ('PY', 'RC','CN')\n" + //AND VMT.VOUCHER_SUB_TYPE NOT IN ('FD')
                                "GROUP BY VMT.VOUCHER_ID, IF(?SHOW_FIXED_DEPOSIT_VOUCHER_DETAIL=1 AND VMT.VOUCHER_SUB_TYPE='FD', T.SEQUENCE_NO, MT.SEQUENCE_NO)\n" +
                                "ORDER BY VMT.VOUCHER_DATE, VMT.VOUCHER_ID, MT.CHEQUE_NO DESC, MT.VOUCHER_ID, T.SEQUENCE_NO;";
                        break;
                    }
                #endregion

                #region Bank Reconciliation Statement Cleared/Reconciled
                case ReportSQLCommand.BankReport.BankReconcilationStatementCleared:
                    {
                        query = "SELECT MT.VOUCHER_ID,\n" +
                        "       T.LEDGER_ID,VMT.VOUCHER_SUB_TYPE,\n" +
                        "       MT.CHEQUE_NO,\n" +
                        "       T.LEDGER_CODE,\n" +
                        "       MATERIALIZED_ON,\n" +
                        "       T.LEDGER_NAME,\n" +
                        "       CASE\n" +
                        "         WHEN VMT.VOUCHER_TYPE = 'PY' THEN\n" +
                        "          T.AMOUNT\n" +
                        "         ELSE\n" +
                        "          0.00\n" +
                        "       END AS 'Cleared',\n" +
                        "       CASE\n" +
                        "         WHEN VMT.VOUCHER_TYPE = 'RC' THEN\n" +
                        "          T.AMOUNT\n" +
                        "         ELSE\n" +
                        "          0.00\n" +
                        "       END AS 'realised'\n" +
                        "  FROM MASTER_PROJECT PL\n" +
                        " INNER JOIN VOUCHER_MASTER_TRANS VMT\n" +
                        "    ON PL.PROJECT_ID = VMT.PROJECT_ID\n" +
                        " INNER JOIN VOUCHER_TRANS MT\n" +
                        "    ON VMT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "\n" +
                        " INNER JOIN MASTER_LEDGER ML\n" +
                        "    ON MT.LEDGER_ID = ML.LEDGER_ID\n" +
                         " INNER JOIN\n" +
                        "(SELECT MT.VOUCHER_ID,MT.LEDGER_ID,ML.LEDGER_CODE,ML.LEDGER_NAME,MT.AMOUNT\n" +
                                  "FROM MASTER_LEDGER AS ML\n" +
                                  "INNER JOIN VOUCHER_TRANS AS MT\n" +
                                  "ON MT.LEDGER_ID=ML.LEDGER_ID\n" +
                                  "WHERE ML.GROUP_ID NOT IN(12))AS T\n" +
                        "ON VMT.VOUCHER_ID = T.VOUCHER_ID\n" +
                            //" INNER JOIN master_bank_ACCOUNT ba\n" +
                            //"    ON ML.BANK_ACCOUNT_ID = BA.BANK_ACCOUNT_ID\n" +
                            //" INNER JOIN MASTER_BANK MB\n" +
                            //"    ON BA.BANK_ID = MB.BANK_ID\n" +
                        " WHERE VMT.VOUCHER_DATE <= ?DATE_AS_ON\n" +
                        "   AND ML.LEDGER_SUB_TYPE = 'BK'\n" +
                        "   AND VMT.STATUS = 1\n" +
                        "   AND PL.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   AND ML.LEDGER_ID IN (?LEDGER_ID)\n" +
                        "   AND VMT.VOUCHER_TYPE IN ('PY', 'RC')  AND VMT.VOUCHER_SUB_TYPE NOT IN ('FD')  \n" +
                        "   AND MT.MATERIALIZED_ON IS NOT NULL\n" +
                        " GROUP BY VMT.VOUCHER_ID\n" +
                        " ORDER BY CHEQUE_NO DESC";

                        break;
                    }

                #endregion

                #region Cash Bank Book
                case ReportSQLCommand.BankReport.CashBankBook:
                    {
                        query = "SELECT \n" +
                            " TT.VOUCHER_ID, TRIM(GROUP_CONCAT(TT.REC_VOUCHER_TYPE ORDER BY TT.sort_id DESC SEPARATOR '')) AS REC_VOUCHER_TYPE,\n" +
                            " TRIM(GROUP_CONCAT(TT.PAY_VOUCHER_TYPE ORDER BY TT.sort_id DESC SEPARATOR '')) AS PAY_VOUCHER_TYPE, TT.VOUCHER_SUB_TYPE,TT.PROJECT_ID,\n" +
                            " TRIM(GROUP_CONCAT(TT.LEDGER_ID ORDER BY TT.sort_id DESC SEPARATOR '')) AS LEDGER_ID,\n" +
                            " DATE(TT.VOUCHER_DATE) AS 'DATE',\n" +
                            " CONCAT(DATE_FORMAT(TT.VOUCHER_DATE, '%b') , CONCAT(' '  , DATE_FORMAT(TT.VOUCHER_DATE, '%Y'))) MONTH_YEAR_NAME,\n" +
                            " DATE_FORMAT(TT.VOUCHER_DATE,'%Y - %m') MONTH_YEAR,\n" +
                            " TRIM(GROUP_CONCAT(TT.VOUCHER_NO ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS RECEIPT_NO,\n" +
                            " TRIM(GROUP_CONCAT(TT.LEDGER_CODE ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS LEDGER_CODE,\n" +
                            " TRIM(GROUP_CONCAT(TT.LEDGER_NAME ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS 'RECEIPT',\n" +
                            //" TRIM(GROUP_CONCAT(TT.REC_LEDGER_AMOUNT ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS REC_LEDGER_AMOUNT, \n" +
                            " TT.REC_LEDGER_AMOUNT,\n" +
                            " IF(SUM(TT.CASH + TT.BANK) = 0 AND REC_CB_GROUP_ID = 13, TT.REC_LEDGER_AMOUNT, SUM(TT.CASH)) AS CASH,\n" +
                            " IF(SUM(TT.CASH + TT.BANK) = 0 AND REC_CB_GROUP_ID = 12, TT.REC_LEDGER_AMOUNT, SUM(TT.BANK)) AS BANK,\n" +
                            " TRIM(GROUP_CONCAT(TT.NARRATION ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS NARRATION,\n" +
                            " TRIM(GROUP_CONCAT(TT.PAY_VOUCHER_ID ORDER BY TT.sort_id DESC SEPARATOR '')) AS PAY_VOUCHER_ID,TT.VOUCHER_PAYMENT_SUB_TYPE,\n" +
                            " TRIM(GROUP_CONCAT(TT.PAY_VID ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS PAY_VNO,\n" +
                            " TRIM(GROUP_CONCAT(TT.PAY_LED_ID ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS PAY_LED_ID,\n" +
                            " TRIM(GROUP_CONCAT(TT.PAY_CODE ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS PAY_CODE,\n" +
                            " TRIM(GROUP_CONCAT(TT.PAY_LEDGER ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS 'PAYMENT',\n" +
                            //" TRIM(GROUP_CONCAT(TT.PAY_LEDGER_AMOUNT ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS PAY_LEDGER_AMOUNT, \n" +
                            " TT.PAY_LEDGER_AMOUNT,\n" +
                            " IF(SUM(TT.PAY_CASH + TT.PAY_BANK) = 0 AND PAY_CB_GROUP_ID = 13, TT.PAY_LEDGER_AMOUNT, SUM(TT.PAY_CASH)) AS PAY_CASH,\n" +
                            " IF(SUM(TT.PAY_CASH + TT.PAY_BANK) = 0 AND PAY_CB_GROUP_ID = 12, TT.PAY_LEDGER_AMOUNT, SUM(TT.PAY_BANK)) AS PAY_BANK,\n" +
                            " TRIM(GROUP_CONCAT(TT.NAP ORDER BY TT.sort_id DESC SEPARATOR ' '))  AS NARRATION_PAY, IFNULL(CB_NAME, '') as CB_NAME, \n" +
                            " IFNULL(REC_FD_ACCOUNT_ID, 0) AS REC_FD_ACCOUNT_ID, IFNULL(PAY_FD_ACCOUNT_ID, 0) AS PAY_FD_ACCOUNT_ID, REC_BASE_NARRATION, PAY_BASE_NARRATION\n" +
                            "  FROM (SELECT VT.VOUCHER_ID, MT.VOUCHER_TYPE AS REC_VOUCHER_TYPE, '' AS PAY_VOUCHER_TYPE, MT.VOUCHER_SUB_TYPE, MT.PROJECT_ID,\n" +
                            "               VT.LEDGER_ID, MT.VOUCHER_NO, ML.LEDGER_CODE,\n" +
                            //"               GROUP_CONCAT(MT.VOUCHER_NO ORDER BY sort_id DESC SEPARATOR ' ') AS VOUCHER_NO,\n" + //On 01/06/2022
                            //"               GROUP_CONCAT(ML.LEDGER_CODE ORDER BY sort_id SEPARATOR ' ') AS LEDGER_CODE,\n" + //On 01/06/2022
                            "               @row_num := IF(@prev_value = T.voucher_date AND @rprev_value = MT.VOUCHER_ID AND @rprev_vo_value=T.VOUCHER_NO, @row_num,\n" +
                            "                  IF(@prev_value = T.voucher_date AND @rprev_value <> MT.VOUCHER_ID, @row_num + 1, 1)) AS sort_id,\n" +
                            "               @prev_value := T.voucher_date as VOUCHER_DATE,\n" +
                            " @rrow_num := IF(@rprev_value = MT.VOUCHER_ID, @rrow_num + 1, 1) AS sort_id1, \n" +
                            " @rprev_value := MT.VOUCHER_ID as v1, @rprev_vo_value:=T.VOUCHER_NO AS VNo1, \n" +
                            "IF(COUNT(*) > 1,\n" +
                            "  GROUP_CONCAT(CONCAT(ML.LEDGER_NAME, ' ', CONCAT(CONVERT(IFNULL(MCE.CURRENCY_SYMBOL, 'Rs.') using utf8), FORMAT(VT.AMOUNT, 2, 'en_IN')), ' ',VT.TRANS_MODE, '<br>')  ORDER BY VT.SEQUENCE_NO SEPARATOR ' '),\n" + //sort_id 
                            "  GROUP_CONCAT(ML.LEDGER_NAME)) AS LEDGER_NAME, \n" +
                            //" CONCAT(CONCAT(VT.AMOUNT,' '),VT.TRANS_MODE) AS REC_LEDGER_AMOUNT, \n" +
                            "  SUM(IF(VT.TRANS_MODE='CR', (VT.AMOUNT * IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)) , 0)) AS REC_LEDGER_AMOUNT, \n" +
                            "             CASE   WHEN (T.CASH ) >0  AND @rrow_num <> 1 \n" +
                            "     THEN 0  ELSE CASE WHEN (T.CASH ) >0 AND @rrow_num = 1 \n" +
                            "     THEN  (T.CASH)  ELSE 0 END  END AS CASH, \n" +
                            "      CASE WHEN (T.BANK >0) AND @rrow_num <> 1  THEN 0 \n" +
                            "      ELSE  CASE WHEN  (T.BANK >0) AND @rrow_num = 1 \n" +
                            "     THEN (T.BANK) ELSE  0 END END  AS BANK, \n" +
                            "               '' AS PAY_VOUCHER_ID, MT.VOUCHER_SUB_TYPE AS VOUCHER_PAYMENT_SUB_TYPE,\n" +
                            "               '' AS PAY_VID,\n" +
                            "               '' as PAY_LED_ID,\n" +
                            "               '' AS PAY_CODE,\n" +
                            "               '' AS PAY_LEDGER,\n" +
                            "               0 AS PAY_LEDGER_AMOUNT, \n" + //'' AS PAY_LEDGER_AMOUNT
                            "               0 AS PAY_CASH,\n" +
                            "               0 AS PAY_BANK,\n" +
                            "            CONCAT(CONCAT(CONCAT(CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION),CONCAT(IF(MT.VOUCHER_SUB_TYPE='FD',CONCAT('', '') ,'')),''),IF(T.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',''),T.TDS_AMOUNT),' ')),\n" +
                            "            IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(MT.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', MT.NAME_ADDRESS),''),''),\n" +
                            "            IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(T.CHEQUE_NO,'')) > 0,CONCAT(' -- ', T.CHEQUE_NO , ' ', IFNULL(T.FUND_TRANSFER_TYPE_NAME,'')),''),'')), \n" +
                            "            IF(1=?INCLUDE_PAN_GST,IF(LENGTH(IFNULL(MT.PAN_NUMBER, '')) > 0, CONCAT(' -- PAN: ', MT.PAN_NUMBER), ''), ''),\n" +
                            "            IF(1=?INCLUDE_PAN_GST, IF(LENGTH(IFNULL(MT.GST_NUMBER, '')) > 0, CONCAT(' -- GST: ', MT.GST_NUMBER), ''), ''),\n" +
                            "            IF(VT.GST>0, CONCAT('GST ', GST),''), IF(CB_GROUP_ID=12, CONCAT(' Ac/No : ', CB_NAME), ''),\n" +
                            "            IF(1= ?INCLUDE_NARRATION_CURRENCY AND MT.EXCHANGE_COUNTRY_ID>0, CONCAT(' (Currency Details : ', IFNULL(MCE.CURRENCY_NAME, ''), ' ', MT.CONTRIBUTION_AMOUNT, '@',MT.EXCHANGE_RATE, ')'),''))   AS NARRATION,\n" +
                            "            '' AS NAP, CB_NAME, T.FD_ACCOUNT_ID AS REC_FD_ACCOUNT_ID, 0 AS PAY_FD_ACCOUNT_ID, T.CB_GROUP_ID AS REC_CB_GROUP_ID, 0 AS PAY_CB_GROUP_ID,\n" +
                            "          IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION) AS REC_BASE_NARRATION, '' AS PAY_BASE_NARRATION\n" +
                            "          FROM (SELECT VOUCHER_ID, PROJECT_ID, VOUCHER_NO, VOUCHER_DATE, VOUCHER_TYPE, VOUCHER_SUB_TYPE,\n" +
                            "              NARRATION, NAME_ADDRESS,PAN_NUMBER, GST_NUMBER, EXCHANGE_COUNTRY_ID, CONTRIBUTION_AMOUNT, EXCHANGE_RATE, IS_MULTI_CURRENCY, STATUS FROM VOUCHER_MASTER_TRANS\n" +
                            "              WHERE STATUS = 1 AND (VOUCHER_TYPE IN ('RC') OR (VOUCHER_TYPE IN ('JN') AND IS_CASH_BANK_STATUS = 1))\n" +
                            "                    AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND PROJECT_ID IN (?PROJECT_ID)\n" +
                            "                    AND IF(?CURRENCY_COUNTRY_ID > 0, CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)\n" +
                            "              ORDER BY VOUCHER_DATE, VOUCHER_ID) AS MT\n" +
                            "          LEFT JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "          LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                            "          LEFT JOIN MASTER_COUNTRY MCE ON MCE.COUNTRY_ID = MT.EXCHANGE_COUNTRY_ID\n" +
                            "          JOIN (SELECT CASHBANK.VOUCHER_DATE,CASHBANK.VOUCHER_SUB_TYPE,\n" +
                            "                IFNULL(MBA.ACCOUNT_NUMBER,' ') AS ACCOUNT_NUMBER,\n" +
                            "                      CASHBANK.VOUCHER_ID,\n" +
                            "                      CASHBANK.VOUCHER_NO,\n" +
                            "                      CASHBANK.LEDGER_ID,\n" +
                            "                      SUM(CASHBANK.CASH) AS CASH,\n" +
                            "                      SUM(CASHBANK.BANK) AS BANK,CASHBANK.CHEQUE_NO, CASHBANK.FUND_TRANSFER_TYPE_NAME, CASHBANK.CB_GROUP_ID, CASHBANK.CB_NAME,\n" +
                            "                      CASHBANK.LEDGER_CODE,CASHBANK.PROJECT_ID, SUM(FDR.TDS_AMOUNT) AS TDS_AMOUNT, IFNULL(FDR.FD_ACCOUNT_ID,0) AS FD_ACCOUNT_ID\n" +
                            "                 FROM (SELECT MT.VOUCHER_DATE,MT.VOUCHER_SUB_TYPE,\n" +
                            "                              VT.VOUCHER_ID,\n" +
                            "                              MT.VOUCHER_NO,\n" +
                            "                              VT.LEDGER_ID,\n" +
                            "                              ML.LEDGER_CODE,  VT.CHEQUE_NO, VT.FUND_TRANSFER_TYPE_NAME, ML.GROUP_ID AS CB_GROUP_ID, ML.LEDGER_NAME AS CB_NAME,\n" +
                            "                              SUM(IF(ML.GROUP_ID = 13, (VT.AMOUNT * IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)) , 0)) AS CASH,\n" +
                            "                              SUM(IF(ML.GROUP_ID = 12, (VT.AMOUNT * IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)), 0)) AS BANK,\n" +
                            /*"                            CASE WHEN ML.GROUP_ID = 13 THEN \n" +
                            "                                SUM(VT.AMOUNT) \n" +
                            "                                   ELSE 0 END AS CASH, \n" +
                            "                              CASE WHEN ML.GROUP_ID = 12 THEN \n" +
                            "                               SUM(VT.AMOUNT) ELSE 0 END AS BANK,\n" +*/
                            "                             MT.PROJECT_ID\n" +
                            "                           \n" +
                            "                        FROM VOUCHER_MASTER_TRANS MT\n" +
                            "                        LEFT JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "                        LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                            "                        WHERE (MT.VOUCHER_TYPE in('RC') OR (MT.VOUCHER_TYPE IN ('JN') AND MT.IS_CASH_BANK_STATUS = 1 AND VT.TRANS_MODE = 'DR'))\n" +
                            "                          AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO \n" +
                            "                          AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                            "                          and ML.GROUP_ID IN (12, 13)\n" +
                            "                          AND MT.STATUS = 1\n" +
                            "                        GROUP BY MT.PROJECT_ID,VT.VOUCHER_ID\n" + //VT.LEDGER_ID (01/06/2022)
                            "                        ORDER BY MT.PROJECT_ID, MT.VOUCHER_DATE,\n" +
                            "                                 MT.VOUCHER_NO,\n" +
                            "                                 VT.SEQUENCE_NO) AS CASHBANK\n" +
                            "                LEFT JOIN MASTER_BANK_ACCOUNT MBA ON MBA.LEDGER_ID=CASHBANK.LEDGER_ID \n" +
                            "                LEFT JOIN MASTER_BANK MB ON MB.BANK_ID=MBA.BANK_ID \n" +
                            "                LEFT JOIN FD_RENEWAL FDR ON FDR.FD_INTEREST_VOUCHER_ID = CASHBANK.VOUCHER_ID\n" +
                            "                GROUP BY CASHBANK.VOUCHER_ID\n" +
                            "                ORDER BY CASHBANK.PROJECT_ID,CASHBANK.VOUCHER_DATE, CASHBANK.VOUCHER_NO) AS T\n" +
                            //"            ON MT.VOUCHER_ID = T.VOUCHER_ID, (SELECT @row_num := 1) x,\n" + On 20/04/2021, to have proper Date Order to avoid merging Voucher No
                            "            ON T.VOUCHER_ID = MT.VOUCHER_ID AND T.VOUCHER_DATE = MT.VOUCHER_DATE,\n" +
                            "     (SELECT @row_num := 1) x,\n" + //On 20/04/2021, to have proper Date Order to avoid merging Voucher No
                            "     (SELECT @prev_value := null) y, (SELECT @rrow_num := 1) x1,  (SELECT @rprev_value := null) y1, (SELECT @rprev_vo_value := null) y2 \n" +  // Temp variable to reset voucherNo
                            "     WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                            "       AND MT.VOUCHER_TYPE IN ('RC', 'JN')\n" +
                            "       AND VT.TRANS_MODE IN ('DR','CR') AND (T.BANK > 0 OR T.CASH > 0)\n" +
                            "       AND MT.STATUS = 1\n" +
                            "       AND T.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                            "       AND ML.GROUP_ID NOT IN (12, 13)\n" +
                            "       GROUP BY MT.PROJECT_ID,MT.VOUCHER_DATE, VT.VOUCHER_ID \n" + //VT.SEQUENCE_NO (01/06/2022)
                            "\n" +
                            "        UNION ALL\n" +
                            "\n" +
                            "        SELECT '' AS VOUCHER_ID, '' AS REC_VOUCHER_TYPE, MT.VOUCHER_TYPE AS PAY_VOUCHER_TYPE, MT.VOUCHER_SUB_TYPE, MT.PROJECT_ID,\n" +
                            "               '' AS LEDGER_ID,\n" +
                            "               '' AS VOUCHER_NO,\n" +
                            "               '' AS LEDGER_CODE,\n" +
                            "               @row_number :=\n" +
                            "               IF(@prev_val = T.voucher_date, @row_number + 1, 1) AS sort_id,\n" +
                            "               @prev_val := T.voucher_date as VOUCHER_DATE,\n" +
                            "               @prow_num := IF(@pprev_value = MT.VOUCHER_ID, @prow_num + 1, 1) AS sort_id1, \n" +
                            "               @pprev_value := MT.VOUCHER_ID as v1, @pprev_vo_value:=MT.VOUCHER_NO AS VNo1, \n" +
                            "               '' AS LEDGER_NAME,\n" +
                            "               0 AS REC_LEDGER_AMOUNT,  \n" + //'' AS REC_LEDGER_AMOUNT
                            "               0 AS CASH,\n" +
                            "               0 AS BANK,\n" +
                            "               VT.VOUCHER_ID AS PAY_VOUCHER_ID,MT.VOUCHER_SUB_TYPE AS VOUCHER_PAYMENT_SUB_TYPE,\n" +
                            "               T.VOUCHER_NO AS PAY_VID,\n" +
                            "               VT.LEDGER_ID as PAY_LED_ID,\n" +
                            "               ML.LEDGER_CODE AS PAY_CODE,\n" +
                            "             IF(COUNT(*) > 1,\n" +
                            "             GROUP_CONCAT(CONCAT(ML.LEDGER_NAME, ' ', CONCAT(CONVERT(IFNULL(MCE.CURRENCY_SYMBOL, 'Rs.') using utf8), FORMAT(VT.AMOUNT, 2, 'en_IN')), ' ', VT.TRANS_MODE ,'<br>') ORDER BY VT.SEQUENCE_NO SEPARATOR ' '),\n" + //@row_number 
                            "             GROUP_CONCAT(ML.LEDGER_NAME)) AS PAY_LEDGER,\n" +
                            "              SUM(IF(VT.TRANS_MODE='DR', (VT.AMOUNT * IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)), 0)) AS PAY_LEDGER_AMOUNT, \n" +
                            "             CASE   WHEN (T.CASH ) >0  AND @prow_num <> 1 \n" +
                            "      THEN 0 ELSE CASE WHEN (T.CASH ) >0 AND @prow_num = 1 \n" +
                            "      THEN (T.CASH) ELSE 0 END END AS PAY_CASH, \n" +
                            "      CASE WHEN (T.BANK >0) AND @prow_num <> 1  THEN 0 \n" +
                            "      ELSE  CASE WHEN (T.BANK >0) AND @prow_num = 1 \n" +
                            "     THEN (T.BANK) ELSE 0 END END AS PAY_BANK, '' AS NARRATION,\n" +
                            "     CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION),''),IF(FDR.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',''),FDR.TDS_AMOUNT),' ')),\n" +
                            "     IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(MT.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', MT.NAME_ADDRESS),''),''),\n" +
                            "      IF(1=?INCLUDE_PAN_GST,IF(LENGTH(IFNULL(MT.PAN_NUMBER, '')) > 0, CONCAT(' -- PAN: ', MT.PAN_NUMBER), ''), ''),\n" +
                            "      IF(1=?INCLUDE_PAN_GST, IF(LENGTH(IFNULL(MT.GST_NUMBER, '')) > 0, CONCAT(' -- GST: ', MT.GST_NUMBER), ''), ''),\n" +
                            "     IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(T.CHEQUE_NO,'')) > 0,CONCAT(' -- ', T.CHEQUE_NO, ' ', IFNULL(T.FUND_TRANSFER_TYPE_NAME,'')),''),'')),\n" +
                            "     IF(TRIM(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION))<>'' AND TRIM(REF.REFERENCE_NUMBER)<>'',\n" +
                            "     IF(TRIM(REF.REFERENCE_NUMBER)<>'', CONCAT('-REF ' , IFNULL(REF.REFERENCE_NUMBER,'')), '') ,  IF(TRIM(REF.REFERENCE_NUMBER)<>'', CONCAT('REF ' , IFNULL(REF.REFERENCE_NUMBER,'')), '') ) ), IF(VT.GST>0, CONCAT('GST ', GST),''), IF(CB_GROUP_ID=12, CONCAT(' Ac/No : ', CB_NAME), ''))   AS NAP,\n" +
                            "     CB_NAME, 0 AS REC_FD_ACCOUNT_ID, IFNULL(FDR.FD_ACCOUNT_ID,0) AS PAY_FD_ACCOUNT_ID, 0 AS REC_CB_GROUP_ID, T.CB_GROUP_ID AS PAY_CB_GROUP_ID, \n" +
                            "     '' AS REC_BASE_NARRATION , IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION) AS PAY_BASE_NARRATION\n" +
                            "     FROM (SELECT VOUCHER_ID, PROJECT_ID, VOUCHER_NO, VOUCHER_DATE, VOUCHER_TYPE, VOUCHER_SUB_TYPE,\n" +
                            "              NARRATION, NAME_ADDRESS,PAN_NUMBER, GST_NUMBER, EXCHANGE_COUNTRY_ID, EXCHANGE_RATE, IS_MULTI_CURRENCY, STATUS FROM VOUCHER_MASTER_TRANS\n" +
                            "              WHERE STATUS = 1 AND (VOUCHER_TYPE IN ('PY') OR (VOUCHER_TYPE IN ('JN') AND IS_CASH_BANK_STATUS = 1))\n" +
                            "                AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND PROJECT_ID IN (?PROJECT_ID)\n" +
                            "                AND IF(?CURRENCY_COUNTRY_ID > 0, CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)\n" +
                            "              ORDER BY VOUCHER_DATE, VOUCHER_NO) AS MT\n" +
                            "     LEFT JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "     LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                            "     LEFT JOIN MASTER_COUNTRY MCE ON MCE.COUNTRY_ID = MT.EXCHANGE_COUNTRY_ID\n" +
                            "     LEFT JOIN (SELECT VR.REC_PAY_VOUCHER_ID, VR.LEDGER_ID, GROUP_CONCAT(VT.REFERENCE_NUMBER) AS REFERENCE_NUMBER FROM VOUCHER_REFERENCE VR\n" +
                            "     INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VR.REF_VOUCHER_ID AND VT.LEDGER_ID = VR.LEDGER_ID GROUP BY VR.REC_PAY_VOUCHER_ID, VR.LEDGER_ID) AS REF ON\n" +
                            "     REF.REC_PAY_VOUCHER_ID = MT.VOUCHER_ID AND REF.LEDGER_ID = VT.LEDGER_ID\n" +
                            "     LEFT JOIN FD_RENEWAL FDR\n" +
                            "      ON FDR.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "          JOIN (SELECT CASHBANK.VOUCHER_DATE,CASHBANK.VOUCHER_SUB_TYPE,\n" +
                            "                IFNULL(MBA.ACCOUNT_NUMBER,' ') AS ACCOUNT_NUMBER,\n" +
                            "                       CASHBANK.VOUCHER_ID,\n" +
                            "                       CASHBANK.LEDGER_ID,\n" +
                            "                      SUM(CASHBANK.CASH) AS CASH,\n" +
                            "                      SUM(CASHBANK.BANK) AS BANK,CASHBANK.CHEQUE_NO, CASHBANK.FUND_TRANSFER_TYPE_NAME, CASHBANK.CB_GROUP_ID, CASHBANK.CB_NAME,\n" +
                            "                       CASHBANK.VOUCHER_NO,\n" +
                            "                       CASHBANK.LEDGER_CODE,CASHBANK.PROJECT_ID\n" +
                            "                  FROM (SELECT MT.VOUCHER_DATE,MT.VOUCHER_SUB_TYPE,\n" +
                            "                               VT.VOUCHER_ID,\n" +
                            "                               MT.VOUCHER_NO,\n" +
                            "                               ML.LEDGER_CODE,\n" +
                            "                               VT.LEDGER_ID,VT.CHEQUE_NO, VT.FUND_TRANSFER_TYPE_NAME, ML.GROUP_ID AS CB_GROUP_ID, ML.LEDGER_NAME AS CB_NAME,\n" +
                            "                               SUM(IF(ML.GROUP_ID = 13, (VT.AMOUNT * IF(MT.IS_MULTI_CURRENCY=1 {AND ?CURRENCY_COUNTRY_ID=0}, VT.EXCHANGE_RATE, 1)), 0)) AS CASH, \n" +
                            "                                SUM(IF(ML.GROUP_ID = 12, (VT.AMOUNT * IF(MT.IS_MULTI_CURRENCY=1 {AND ?CURRENCY_COUNTRY_ID=0}, VT.EXCHANGE_RATE, 1)), 0)) AS BANK, \n" +
                            /*"                           CASE WHEN ML.GROUP_ID = 13 THEN \n" +
                            "                                SUM(VT.AMOUNT) \n" +
                            "                                   ELSE 0 END AS CASH, \n" +
                            "                             CASE WHEN ML.GROUP_ID = 12 THEN \n" +
                            "                               SUM(VT.AMOUNT) ELSE 0 END AS BANK,\n" +*/
                            "                             MT.PROJECT_ID \n" +
                            "\n" +
                            "                          FROM VOUCHER_MASTER_TRANS MT\n" +
                            "                          LEFT JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "                          LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                            "                         WHERE (MT.VOUCHER_TYPE IN ('PY') OR (MT.VOUCHER_TYPE IN ('JN') AND MT.IS_CASH_BANK_STATUS = 1 AND VT.TRANS_MODE = 'CR')) \n" +
                            "                              -- AND VT.voucher_id = 2\n" +
                            "                           AND mt.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                            "                           AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                            "                           and ML.GROUP_ID IN (12, 13)\n" +
                            "                           AND MT.STATUS = 1\n" +
                            "                         GROUP BY MT.PROJECT_ID, MT.VOUCHER_ID\n" + //VT.LEDGER_ID (101/06/2022)
                            "                         ORDER BY MT.PROJECT_ID,MT.VOUCHER_DATE,\n" +
                            "                                  MT.VOUCHER_NO,\n" +
                            "                                  VT.SEQUENCE_NO) AS CASHBANK\n" +
                            "                 LEFT JOIN MASTER_BANK_ACCOUNT MBA  \n" +
                            "                  ON MBA.LEDGER_ID=CASHBANK.LEDGER_ID \n" +
                            "                LEFT JOIN MASTER_BANK MB \n" +
                            "                 ON MB.BANK_ID=MBA.BANK_ID \n" +
                            "                 GROUP BY CASHBANK.VOUCHER_ID\n" +
                            "                 ORDER BY CASHBANK.PROJECT_ID,CASHBANK.VOUCHER_DATE,CASHBANK.VOUCHER_NO) AS T\n" +
                            "            ON MT.VOUCHER_ID = T.VOUCHER_ID, (SELECT @row_number := 1) x,\n" +
                            "         (SELECT @prev_val := null) y, (SELECT @prow_num := 1) x1,  (SELECT @pprev_value := null) y1, (SELECT @pprev_vo_value := null) y2 \n" +
                            "         WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                            "           AND MT.VOUCHER_TYPE IN ('PY', 'JN')\n" +
                            "           AND VT.TRANS_MODE IN ('CR','DR') AND (T.BANK > 0 OR T.CASH > 0)\n" +
                            "           AND MT.STATUS = 1\n" +
                            "           AND T.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                            "           AND ML.GROUP_ID NOT IN (12, 13)\n" +
                            "         GROUP BY MT.PROJECT_ID,MT.VOUCHER_DATE,\n" +
                            "                  VT.VOUCHER_ID\n" +
                            //"                  VT.SEQUENCE_NO\n" + (101/06/2022)
                            //"                  ML.LEDGER_ID\n" + (101/06/2022)
                            "\n" +
                            "        UNION ALL\n" +
                            "\n" +
                            "        SELECT TT.VOUCHER_ID, TT.VOUCHER_TYPE AS REC_VOUCHER_TYPE, TT.VOUCHER_TYPE AS PAY_VOUCHER_TYPE, TT.VOUCHER_SUB_TYPE,TT.PROJECT_ID,\n" +
                            "               GROUP_CONCAT(TT.LEDGER_ID ORDER BY TT.LEDGER_ID DESC\n" +
                            "                            SEPARATOR '') AS LEDGER_ID,\n" +
                            "               GROUP_CONCAT(TT.VOUCHER_NO ORDER BY TT.VOUCHER_ID DESC\n" +
                            "                            SEPARATOR ' ') AS VOUCHER_NO,\n" +
                            "               GROUP_CONCAT(TT.LEDGER_CODE ORDER BY TT.VOUCHER_ID DESC\n" +
                            "                            SEPARATOR ' ') AS LEDGER_CODE,\n" +
                            "               @row_numC :=\n" +
                            "               IF(@prev_valueC = TT.voucher_date, @row_numC + 1, 10000000) AS sort_id,\n" +
                            "               @prev_valueC := TT.voucher_date as VOUCHER_DATE,\n" +
                            "               @crow_num := IF(@cprev_value = TT.VOUCHER_ID, @row_num + 1, 1) AS sort_id1, \n" +
                            "               @cprev_value := TT.VOUCHER_ID as v1, '' AS VNo1, \n" +
                            "               CASE\n" +
                            "                 WHEN IFNULL(SUM(TT.BANK), 0) > 0 AND\n" +
                            "                      IFNULL(SUM(TT.PAY_CASH), 0) > 0 AND TT.VOUCHER_SUB_TYPE = 'GN' THEN\n" +
                            "                  CONCAT(GROUP_CONCAT(TT.LEDGER_NAME ORDER BY TT.VOUCHER_ID DESC\n" +
                            "                                      SEPARATOR ' '),\n" +
                            "                         IF(?HIDE_CONTRA_NOTE=1, '', ' (CASH DEPOSIT)') )\n" +
                            "                 WHEN IFNULL(SUM(TT.CASH), 0) > 0 AND\n" +
                            "                      IFNULL(SUM(TT.PAY_BANK), 0) > 0 AND TT.VOUCHER_SUB_TYPE = 'GN' THEN\n" +
                            "                  CONCAT(GROUP_CONCAT(TT.LEDGER_NAME ORDER BY TT.VOUCHER_ID DESC\n" +
                            "                                      SEPARATOR ' '),\n" +
                            "                         IF(?HIDE_CONTRA_NOTE=1, '', ' (CASH WITHDRAWAL)') )\n" +
                            "                 WHEN IFNULL(SUM(TT.BANK), 0) > 0 AND\n" +
                            "                      IFNULL(SUM(TT.PAY_BANK), 0) > 0 AND TT.VOUCHER_SUB_TYPE = 'GN'  THEN\n" +
                            "                  CONCAT(GROUP_CONCAT(TT.LEDGER_NAME ORDER BY TT.VOUCHER_ID DESC\n" +
                            "                                      SEPARATOR ' '),\n" +
                            "                         IF(?HIDE_CONTRA_NOTE=1, '', ' (BANK TRANSFER)') )\n" +
                            "                 WHEN IFNULL(SUM(TT.CASH > 0), 0) AND\n" +
                            "                      IFNULL(SUM(TT.PAY_CASH), 0) > 0 AND TT.VOUCHER_SUB_TYPE = 'GN' THEN\n" +
                            "                  CONCAT(GROUP_CONCAT(TT.LEDGER_NAME ORDER BY TT.VOUCHER_ID DESC\n" +
                            "                                      SEPARATOR ' '),\n" +
                            "                         IF(?HIDE_CONTRA_NOTE=1, '', ' (CASH TRANSFER)') )\n" +
                            "                 WHEN IFNULL(SUM(TT.BANK > 0), 0) AND \n" +
                            "                    IFNULL(SUM(TT.PAY_BANK), 0) > 0 AND TT.VOUCHER_SUB_TYPE = 'FD' THEN \n" +
                            "                    CONCAT(GROUP_CONCAT(TT.LEDGER_NAME ORDER BY TT.VOUCHER_ID DESC \n" +
                            "              SEPARATOR ' '), \n" +
                            "               IF(?HIDE_CONTRA_NOTE=1, '', IF(TT.GROUP_ID=12, ' (FD WITHDRAWAL)', ' (FD INVESTMENT)')) ) \n" +
                            "    ELSE \n" +
                            "                   CONCAT(GROUP_CONCAT(TT.LEDGER_NAME ORDER BY TT.VOUCHER_ID DESC \n" +
                            "                                     SEPARATOR ' '), \n" +
                            "                        ' ') \n" +
                            "               END AS LEDGER_NAME,\n" +
                            "               0 AS REC_LEDGER_AMOUNT ,\n" +
                            "               SUM(TT.CASH) AS CASH,\n" +
                            "               SUM(TT.BANK) AS BANK,\n" +
                            "               GROUP_CONCAT(TT.PAY_VOUCHER_ID ORDER BY TT.PAY_VOUCHER_ID DESC\n" +
                            "                            SEPARATOR ' ') AS PAY_VOUCHER_ID,TT.VOUCHER_SUB_TYPE AS VOUCHER_PAYMENT_SUB_TYPE, \n" +
                            "               GROUP_CONCAT(TT.PAY_VID ORDER BY TT.VOUCHER_ID DESC SEPARATOR ' ') AS PAY_VID,\n" +
                            "               GROUP_CONCAT(TT.PAY_LED_ID ORDER BY TT.PAY_LED_ID DESC\n" +
                            "                            SEPARATOR '') AS PAY_LED_ID,\n" +
                            "               GROUP_CONCAT(TT.PAY_CODE ORDER BY TT.VOUCHER_ID DESC\n" +
                            "                            SEPARATOR ' ') AS PAY_CODE,\n" +
                            "               CASE\n" +
                            "                 WHEN IFNULL(SUM(TT.BANK), 0) > 0 AND\n" +
                            "                      IFNULL(SUM(TT.PAY_CASH), 0) > 0 AND TT.VOUCHER_SUB_TYPE = 'GN' THEN\n" +
                            "                  CONCAT(GROUP_CONCAT(TT.PAY_LEDGER ORDER BY TT.VOUCHER_ID DESC\n" +
                            "                                      SEPARATOR ' '),\n" +
                            "                         IF(?HIDE_CONTRA_NOTE=1, '', '(CASH DEPOSIT)') )\n" +
                            "                 WHEN IFNULL(SUM(TT.CASH), 0) > 0 AND\n" +
                            "                      IFNULL(SUM(TT.PAY_BANK), 0) > 0 AND TT.VOUCHER_SUB_TYPE = 'GN' THEN\n" +
                            "                  CONCAT(GROUP_CONCAT(TT.PAY_LEDGER ORDER BY TT.VOUCHER_ID DESC\n" +
                            "                                      SEPARATOR ' '),\n" +
                            "                         IF(?HIDE_CONTRA_NOTE=1, '', '(CASH WITHDRAWAL)') )\n" +
                            "                 WHEN IFNULL(SUM(TT.BANK), 0) > 0 AND\n" +
                            "                      IFNULL(SUM(TT.PAY_BANK), 0) > 0 AND TT.VOUCHER_SUB_TYPE = 'GN' THEN\n" +
                            "                  CONCAT(GROUP_CONCAT(TT.PAY_LEDGER ORDER BY TT.VOUCHER_ID DESC\n" +
                            "                                      SEPARATOR ' '),\n" +
                            "                         IF(?HIDE_CONTRA_NOTE=1, '', '(BANK TRANSFER)') )\n" +
                            "                 WHEN IFNULL(SUM(TT.CASH > 0), 0) AND\n" +
                            "                      IFNULL(SUM(TT.PAY_CASH), 0) > 0 AND TT.VOUCHER_SUB_TYPE = 'GN' THEN\n" +
                            "                  CONCAT(GROUP_CONCAT(TT.PAY_LEDGER ORDER BY TT.VOUCHER_ID DESC\n" +
                            "                                      SEPARATOR ' '),\n" +
                            "                         IF(?HIDE_CONTRA_NOTE=1, '', '(CASH TRANSFER)') )\n" +
                            "                 WHEN IFNULL(SUM(TT.PAY_BANK > 0), 0) AND \n" +
                            "                    IFNULL(SUM(TT.BANK), 0) > 0 AND TT.VOUCHER_SUB_TYPE = 'FD' THEN \n" +
                            "     CONCAT(GROUP_CONCAT(TT.PAY_LEDGER ORDER BY TT.VOUCHER_ID DESC \n" +
                            "              SEPARATOR ' '), \n" +
                            "              IF(?HIDE_CONTRA_NOTE=1, '',  IF(TT.GROUP_ID=12, ' (FD WITHDRAWAL)', ' (FD INVESTMENT)') ) ) \n" +
                            " ELSE \n" +
                            " CONCAT(GROUP_CONCAT(TT.PAY_LEDGER ORDER BY TT.VOUCHER_ID DESC  \n" +
                            "                                    SEPARATOR ' '),  \n" +
                            "                       ' ')  \n" +
                            "               END AS PAY_LEDGER,\n" +
                            "              0 AS PAY_LEDGER_AMOUNT,\n" +
                            "               SUM(TT.PAY_CASH) AS PAY_CASH,\n" +
                            "               SUM(TT.PAY_BANK) AS PAY_BANK,\n" +
                            "               CONCAT(GROUP_CONCAT(TT.NARRATION), IF(TT.VOUCHER_TYPE IN ('RC','PY') AND TT.GROUP_ID = 12,  CONCAT(' Ac/No : ', CB_NAME), '') ) AS NARRATION,\n" + //GROUP_CONCAT
                            "               CONCAT(GROUP_CONCAT(TT.NAP),  IF(TT.VOUCHER_TYPE IN ('RC','PY') AND TT.GROUP_ID = 12,  CONCAT(' Ac/No : ', CB_NAME), '') ) AS NAP,\n" + //GROUP_CONCAT
                            //"               CONCAT(GROUP_CONCAT(TT.NARRATION), IF(TT.VOUCHER_SUB_TYPE = 'GN', IF(CB_GROUP_ID= 12, 'A/c No: ', ' - '), CB_NAME), '') AS NARRATION,\n" +
                            //"               CONCAT(GROUP_CONCAT(TT.NAP), IF(TT.VOUCHER_SUB_TYPE = 'GN', IF(TT.GROUP_ID=12, 'A/c No: ', ' - '), IF(TT.VOUCHER_SUB_TYPE = 'GN', TT.LEDGER_NAME, CB_NAME)), '') AS NAP, \n" +
                            "               CB_NAME, REC_FD_ACCOUNT_ID, PAY_FD_ACCOUNT_ID, REC_CB_GROUP_ID, PAY_CB_GROUP_ID, REC_BASE_NARRATION, PAY_BASE_NARRATION\n" +
                            "          FROM (SELECT T.VOUCHER_ID, T.VOUCHER_TYPE, T.VOUCHER_SUB_TYPE, T.PROJECT_ID, T.GROUP_ID,\n" +
                            "                       T.LEDGER_ID,\n" +
                            "                       VTCH.LEDGER_CODE,\n" +
                            "                       T.VOUCHER_NO,\n" +
                            "                       T.VOUCHER_DATE,\n" +
                            //"                       IF(COUNT(*) > 1,\n" +
                            //"                       GROUP_CONCAT(  IF(T.GROUP_ID IN (12, 13), CONCAT(T.LEDGER_NAME, ' ', T.BANK, ' ', T.TRANS_MODE, '<br>', IF(T.VOUCHER_SUB_TYPE = 'FD', '<br>', '')) ,   CONCAT(T.LEDGER_NAME, ' ', T.BANK, ' ', T.TRANS_MODE, '<br>'))  ORDER BY T.SEQUENCE_NO DESC SEPARATOR ' '),\n" +
                            //"                       GROUP_CONCAT(  IF(T.GROUP_ID IN (12, 13), T.LEDGER_NAME , T.LEDGER_NAME)  ORDER BY T.SEQUENCE_NO DESC SEPARATOR ' ')) AS LEDGER_NAME,\n" +
                            "                       IF (T.VOUCHER_TYPE IN ('RC', 'PY'), GROUP_CONCAT(VTCH.LEDGER_NAME, ' ', VTCH.AMOUNT, ' ', VTCH.TRANS_MODE, '<br>') ,\n" +
                            "                       IF(COUNT(*) > 1,\n" +
                            "                       GROUP_CONCAT( IF(T.GROUP_ID IN (12, 13) AND T.VOUCHER_SUB_TYPE ='GN',\n" +
                            "                       CONCAT(T.LEDGER_NAME, ' ', CONCAT(CONVERT(IFNULL(T.CURRENCY_SYMBOL, 'Rs.') using utf8), FORMAT(T.BANK, 2, 'en_IN')), ' ', T.TRANS_MODE, '<br>'),\n" +
                            "                       IF(T.GROUP_ID NOT IN (12, 13),  CONCAT(T.LEDGER_NAME, ' ', T.BANK, ' ', T.TRANS_MODE, '<br>'),\n" +
                            "                       CONCAT(VTCH.LEDGER_NAME, ' ', VTCH.AMOUNT, ' ', VTCH.TRANS_MODE, '<br>')))  ORDER BY T.SEQUENCE_NO DESC SEPARATOR ' '),\n" +
                            "                       GROUP_CONCAT(  IF(T.GROUP_ID IN (12, 13), T.LEDGER_NAME , T.LEDGER_NAME) ))) AS LEDGER_NAME,\n" +
                            "                       IF(T.VOUCHER_TYPE IN ('RC', 'PY')  AND T.GROUP_ID = 13, SUM(VTCH.AMOUNT), IFNULL(T.CASH, 0)) AS CASH,\n" +
                            "                       IF(T.VOUCHER_TYPE IN ('RC', 'PY')  AND T.GROUP_ID = 12, SUM(VTCH.AMOUNT), SUM(IF(T.GROUP_ID = 12 , (IFNULL(T.BANK, 0)),0))) AS BANK,\n" + //SUM(IF(T.GROUP_ID = 12 , IFNULL(T.BANK, 0),0)) 15/11/2022, if voucher have same ledger in CR Mode
                            "                       '' AS PAY_VOUCHER_ID,T.VOUCHER_SUB_TYPE AS VOUCHER_PAYMENT_SUB_TYPE,\n" +
                            "                       T.SEQUENCE_NO,\n" +
                            "                       '' AS PAY_VID,\n" +
                            "                       '' AS PAY_LED_ID,\n" +
                            "                       '' AS PAY_CODE,\n" +
                            "                       '' AS PAY_LEDGER,\n" +
                            "                       0 AS PAY_CASH,\n" +
                            "                       0 AS PAY_BANK,\n" +
                            "                     --  T.NARRATION,\n" +
                            "                     --  CONCAT(IFNULL(T.NARRATION,''),\n" +
                            "                     CONCAT(CONCAT(CONCAT(T.NARRATION,'', IF(VOUCHER_SUB_TYPE='FD', CONCAT('', ''), '')),IF(T.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',''),T.TDS_AMOUNT),' ')),\n" +
                            "                     IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(T.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', T.NAME_ADDRESS),''),''),\n" +
                            "                     IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(T.CHEQUE_NO,'')) > 0,CONCAT(' -- ', T.CHEQUE_NO, ' ',IFNULL(T.FUND_TRANSFER_TYPE_NAME,'')),''),''), \n" +
                            "                     IF(1= ?INCLUDE_NARRATION_CURRENCY AND T.EXCHANGE_COUNTRY_ID>0, CONCAT(' (Currency Details : ', IFNULL(T.CURRENCY_NAME, ''), ' ', T.CONTRIBUTION_AMOUNT, '@',T.EXCHANGE_RATE, ')'),''))   AS NARRATION,\n" +
                            "                     '' AS NAP, VTCH.GROUP_ID AS CB_GROUP_ID, IF(T.VOUCHER_TYPE IN ('RC', 'PY'), T.LEDGER_NAME, VTCH.LEDGER_NAME) AS CB_NAME, \n" +
                            "                     FD_ACCOUNT_ID AS REC_FD_ACCOUNT_ID, \n" +
                            "                     IF(T.VOUCHER_TYPE IN ('RC', 'PY'),T.GROUP_ID, 0) AS PAY_FD_ACCOUNT_ID, IF(T.VOUCHER_TYPE IN ('RC', 'PY'),T.GROUP_ID, 0) AS REC_CB_GROUP_ID, 0 AS PAY_CB_GROUP_ID, \n" +
                            "                     T.NARRATION AS REC_BASE_NARRATION, T.NARRATION AS PAY_BASE_NARRATION, T.CUR_COUNTRY_ID, VTCH.CUR_COUNTRY_ID AS CB_CUR_COUNTRY_ID\n" +
                            "                  FROM (SELECT\n" +
                            "\n" +
                            "                         VT.VOUCHER_ID,MT.VOUCHER_SUB_TYPE,\n" +
                            "                         MT.VOUCHER_NO,\n" +
                            "                         ML.LEDGER_CODE,\n" +
                            "                         VT.TRANS_MODE,\n" +
                            "                         ML.LEDGER_NAME, \n" +
                            "                         VT.SEQUENCE_NO,\n" +
                            "                         MT.PROJECT_ID,\n" +
                            "                         VT.LEDGER_ID,\n" +
                            "                         MT.VOUCHER_DATE,\n" +
                            "                         ML.GROUP_ID,\n" +
                            "                         MT.VOUCHER_TYPE,\n" +
                            "                         CASE\n" +
                            "                           WHEN ML.GROUP_ID NOT IN (13) THEN\n" +
                            "                              IF(MT.IS_MULTI_CURRENCY=0, IFNULL(VT.AMOUNT, 0),\n" +
                            "                                 IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID>0, IFNULL(VT.AMOUNT, 0), VT.ACTUAL_AMOUNT))\n" +
                            //"                            (IFNULL(VT.AMOUNT, 0) *IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1))\n" +
                            "                         END AS BANK,\n" +
                            "                         CASE\n" +
                            "                           WHEN ML.GROUP_ID = 13 THEN\n" +
                            //"                            (IFNULL(VT.AMOUNT, 0) *IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1))\n" +
                            "                              IF(MT.IS_MULTI_CURRENCY=0, IFNULL(VT.AMOUNT, 0),\n" +
                            "                                 IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID>0, IFNULL(VT.AMOUNT, 0), VT.ACTUAL_AMOUNT))\n" +
                            "                         END AS CASH,\n" +
                            "                         MT.NARRATION, FDR.TDS_AMOUNT, MT.NAME_ADDRESS,VT.CHEQUE_NO,VT.FUND_TRANSFER_TYPE_NAME, IFNULL(FDR.FD_ACCOUNT_ID,0) AS FD_ACCOUNT_ID,\n" +
                            "                         MT.EXCHANGE_COUNTRY_ID, MT.CONTRIBUTION_AMOUNT, MT.EXCHANGE_RATE, MCE.CURRENCY_NAME, MCE.CURRENCY_SYMBOL, ML.CUR_COUNTRY_ID\n" +
                            "                         FROM VOUCHER_MASTER_TRANS MT\n" +
                            "                         LEFT JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "                         LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                            "                         LEFT JOIN MASTER_COUNTRY MCE ON MCE.COUNTRY_ID = MT.EXCHANGE_COUNTRY_ID\n" +
                            "                         LEFT JOIN (SELECT FD.FD_ACCOUNT_ID, FD.FD_VOUCHER_ID AS VOUCHER_ID, FR.FD_VOUCHER_ID, FR.FD_INTEREST_VOUCHER_ID, FR.TDS_AMOUNT\n" +
                            "                            FROM FD_RENEWAL FR\n" +
                            "                            INNER JOIN FD_ACCOUNT FD ON FR.FD_ACCOUNT_ID = FD.FD_ACCOUNT_ID\n" +
                            "                            WHERE FD.PROJECT_ID IN (?PROJECT_ID) AND FD.STATUS=1 AND FR.STATUS=1 ) FDR\n" +
                            "                               ON FDR.VOUCHER_ID = MT.VOUCHER_ID OR FDR.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID OR FDR.FD_VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "                         WHERE ((VT.TRANS_MODE = 'DR' AND MT.VOUCHER_TYPE = 'CN') OR VT.AMOUNT=0) \n" +
                            "                           AND PROJECT_ID IN (?PROJECT_ID)\n" +
                            "                           AND MT.STATUS = 1 \n" +
                            "                           AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                            "                         ORDER BY VT.VOUCHER_ID ASC) AS T\n" +
                            "                 LEFT JOIN (SELECT VT.VOUCHER_ID, ML.LEDGER_ID, ML.GROUP_ID, ML.LEDGER_CODE, ML.LEDGER_NAME, VT.AMOUNT, VT.TRANS_MODE, ML.CUR_COUNTRY_ID\n" +
                            "                            FROM VOUCHER_TRANS VT\n" +
                            "                            INNER JOIN MASTER_LEDGER ML ON VT.LEDGER_ID = ML.LEDGER_ID WHERE VT.TRANS_MODE = 'CR' AND VT.AMOUNT > 0 GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID) AS VTCH ON VTCH.VOUCHER_ID = T.VOUCHER_ID\n" +
                            "                 WHERE T.PROJECT_ID IN (?PROJECT_ID) AND IF(?CURRENCY_COUNTRY_ID > 0, T.CUR_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)\n" +
                            "                   AND T.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                            //"                   AND T.GROUP_ID IN (12, 13, 14)\n" + //On 09/01/2020, include FD vouchers both sides
                            "                     AND ( (T.GROUP_ID NOT IN (14) AND T.VOUCHER_TYPE = 'CN')  OR (T.VOUCHER_TYPE IN ('RC', 'PY') AND IFNULL(T.CASH,0)=0 AND IFNULL(T.BANK,0)=0) ) \n" + //Removed on 16/03/2020, (On 09/01/2020, include FD vouchers both sides)
                            "                 GROUP BY T.PROJECT_ID,T.VOUCHER_DATE, T.VOUCHER_ID\n" +
                            "\n" +
                            "                UNION\n" +
                            "\n" +
                            "                SELECT T.VOUCHER_ID AS VOUCHER_ID, T.VOUCHER_TYPE, T.VOUCHER_SUB_TYPE,T.PROJECT_ID,T.GROUP_ID,\n" +
                            "                       '' AS LEDGER_ID,\n" +
                            "                       '' AS LEDGER_CODE,\n" +
                            "                       '' AS VOUCHER_NO,\n" +
                            "                       T.VOUCHER_DATE,\n" +
                            "                       '' AS LEDGER_NAME,\n" +
                            "                       0 AS CASH,\n" +
                            "                       0 AS BANK,\n" +
                            "                       T.VOUCHER_ID AS PAY_VOUCHER_ID, T.VOUCHER_SUB_TYPE AS VOUCHER_PAYMENT_SUB_TYPE,\n" +
                            "                       T.SEQUENCE_NO,\n" +
                            "                       T.VOUCHER_NO AS PAY_VID,\n" +
                            "                       T.LEDGER_ID AS PAY_LED_ID,\n" +
                            "                       VTCH.LEDGER_CODE AS PAY_CODE,\n" +
                            "                       IF (T.VOUCHER_TYPE IN ('RC', 'PY'), GROUP_CONCAT(VTCH.LEDGER_NAME, ' ', VTCH.AMOUNT, ' ', VTCH.TRANS_MODE, '<br>') ,\n" +
                            "                       IF(COUNT(*) > 1,\n" +
                            "                       GROUP_CONCAT(  IF(T.GROUP_ID IN (12, 13),CONCAT(T.LEDGER_NAME, ' ', CONCAT(CONVERT(IFNULL(T.CURRENCY_SYMBOL, 'Rs.') using utf8), FORMAT(T.BANK, 2, 'en_IN')), ' ', T.TRANS_MODE, '<br>', IF(T.VOUCHER_SUB_TYPE='FD', '<br>', ''))  ,   CONCAT(T.LEDGER_NAME, ' ', T.BANK, ' ', T.TRANS_MODE, '<br>'))  ORDER BY T.SEQUENCE_NO DESC SEPARATOR ' ') ,\n" +
                            "                       GROUP_CONCAT(  IF(T.GROUP_ID IN (12, 13), T.LEDGER_NAME, T.LEDGER_NAME)  ORDER BY T.SEQUENCE_NO DESC SEPARATOR ' '))) AS PAY_LEDGER,\n" +
                            "                       IF(T.VOUCHER_TYPE IN ('RC', 'PY') AND T.GROUP_ID = 13, SUM(VTCH.AMOUNT), SUM(IFNULL(T.CASH, 0))) AS PAY_CASH,\n" +
                            "                       IF(T.VOUCHER_TYPE IN ('RC', 'PY') AND T.GROUP_ID = 12, SUM(VTCH.AMOUNT), SUM(IFNULL(T.BANK, 0))) AS PAY_BANK,\n" +
                            "                       '' AS NARRATION,\n" +
                            "              --         T.NARRATION AS NAP, VTCH.GROUP_ID AS CB_GROUP_ID, IF(T.VOUCHER_TYPE IN ('RC', 'PY'), T.LEDGER_NAME, VTCH.LEDGER_NAME) AS CB_NAME\n" +
                            "             --  CONCAT(IFNULL(T.NARRATION,''),\n" +
                            "     CONCAT(CONCAT(CONCAT(T.NARRATION,'', IF(VOUCHER_SUB_TYPE='FD', CONCAT('', ''), '')),IF(T.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',''),T.TDS_AMOUNT),' ')),\n" +
                            "     IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(T.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', T.NAME_ADDRESS),''),''),\n" +
                            "     IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(T.CHEQUE_NO,'')) > 0,CONCAT(' -- ', T.CHEQUE_NO, ' ', IFNULL(T.FUND_TRANSFER_TYPE_NAME,'')),''),''),\n" +
                            "     IF(1= ?INCLUDE_NARRATION_CURRENCY AND T.EXCHANGE_COUNTRY_ID>0, CONCAT(' (Currency Details : ', IFNULL(T.CURRENCY_NAME, ''), ' ', T.CONTRIBUTION_AMOUNT, '@',T.EXCHANGE_RATE, ')'),'') ) AS NAP,\n" +
                            "     VTCH.GROUP_ID AS CB_GROUP_ID, VTCH.LEDGER_NAME AS CB_NAME, 0 AS REC_FD_ACCOUNT_ID, FD_ACCOUNT_ID AS PAY_FD_ACCOUNT_ID,\n" +
                            "     IF(T.VOUCHER_TYPE IN ('RC', 'PY'), T.GROUP_ID, 0) AS REC_CB_GROUP_ID, IF(T.VOUCHER_TYPE IN ('RC', 'PY'), T.GROUP_ID, 0) AS PAY_CB_GROUP_ID, \n" +
                            "     T.NARRATION AS REC_BASE_NARRATION, T.NARRATION AS PAY_BASE_NARRATION, T.CUR_COUNTRY_ID, VTCH.CUR_COUNTRY_ID AS CB_CUR_COUNTRY_ID\n" +
                            "                  FROM (SELECT VT.VOUCHER_ID,MT.VOUCHER_SUB_TYPE,\n" +
                            "                               ML.LEDGER_CODE,\n" +
                            "                               MT.VOUCHER_NO,\n" +
                            "                               VT.TRANS_MODE,\n" +
                            "                               ML.LEDGER_NAME,\n" +
                            "                               VT.SEQUENCE_NO,\n" +
                            "                               MT.PROJECT_ID,\n" +
                            "                               VT.LEDGER_ID,\n" +
                            "                               MT.VOUCHER_DATE,\n" +
                            "                               ML.GROUP_ID,\n" +
                            "                               MT.VOUCHER_TYPE,\n" +
                            "                               CASE\n" +
                            "                                 WHEN ML.GROUP_ID IN (12, 14) THEN\n" +
                            //"                                  (IFNULL(VT.AMOUNT, 0) *IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1))\n" +
                            "                                    IF(MT.IS_MULTI_CURRENCY=0, IFNULL(VT.AMOUNT, 0),\n" +
                            "                                       IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID>0, IFNULL(VT.AMOUNT, 0), VT.ACTUAL_AMOUNT))\n" +
                            "                               END AS BANK,\n" +
                            "                               CASE\n" +
                            "                                 WHEN ML.GROUP_ID = 13 THEN\n" +
                            //"                                  (IFNULL(VT.AMOUNT, 0) *IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1))\n" +
                            "                                    IF(MT.IS_MULTI_CURRENCY=0, IFNULL(VT.AMOUNT, 0),\n" +
                            "                                       IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID>0, IFNULL(VT.AMOUNT, 0), VT.ACTUAL_AMOUNT))\n" +
                            "                               END AS CASH,\n" +
                            "                               MT.NARRATION,FDR.TDS_AMOUNT,MT.NAME_ADDRESS,VT.CHEQUE_NO,VT.FUND_TRANSFER_TYPE_NAME, IFNULL(FDR.FD_ACCOUNT_ID,0) AS FD_ACCOUNT_ID,\n" +
                            "                               MT.EXCHANGE_COUNTRY_ID, MT.CONTRIBUTION_AMOUNT, MT.EXCHANGE_RATE, MCE.CURRENCY_NAME, MCE.CURRENCY_SYMBOL, ML.CUR_COUNTRY_ID\n" +
                            "                          FROM VOUCHER_MASTER_TRANS MT\n" +
                            "                          LEFT JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "                          LEFT JOIN MASTER_LEDGER ML ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                            "                          LEFT JOIN MASTER_COUNTRY MCE ON MCE.COUNTRY_ID = MT.EXCHANGE_COUNTRY_ID\n" +
                            "                          LEFT JOIN (SELECT FD.FD_ACCOUNT_ID, FD.FD_VOUCHER_ID, 0 TDS_AMOUNT FROM FD_ACCOUNT FD \n" +
                            "                                    WHERE FD.PROJECT_ID IN (?PROJECT_ID) AND FD.STATUS=1) FDR ON FDR.FD_VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "                         WHERE ((VT.TRANS_MODE = 'CR' AND MT.VOUCHER_TYPE = 'CN') OR VT.AMOUNT=0)\n" +
                            "                           AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                            "                           AND MT.STATUS = 1 AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)\n" +
                            "                           AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                            "                         ORDER BY VT.VOUCHER_ID ASC) AS T\n" +
                            "                 LEFT JOIN (SELECT VT.VOUCHER_ID, ML.LEDGER_ID, ML.GROUP_ID, ML.LEDGER_CODE, ML.LEDGER_NAME, VT.AMOUNT, VT.TRANS_MODE, ML.CUR_COUNTRY_ID\n" +
                            "                       FROM VOUCHER_TRANS VT\n" +
                            "                       INNER JOIN MASTER_LEDGER ML ON VT.LEDGER_ID = ML.LEDGER_ID WHERE VT.TRANS_MODE = 'DR' AND VT.AMOUNT > 0 GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID) AS VTCH ON VTCH.VOUCHER_ID = T.VOUCHER_ID\n" +
                            "                 WHERE T.PROJECT_ID IN (?PROJECT_ID) AND IF(?CURRENCY_COUNTRY_ID > 0, T.CUR_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1) \n" +
                            "                   AND T.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                            //"                   AND T.GROUP_ID IN (12, 13, 14)\n" + //On 09/01/2020, include FD vouchers both sides
                            "                     AND ( (T.GROUP_ID IN (12, 13) AND T.VOUCHER_TYPE = 'CN') OR  (T.VOUCHER_TYPE IN ('RC', 'PY') AND IFNULL(T.CASH,0)=0 AND IFNULL(T.BANK,0)=0 ) )\n" + //Removed on 16/03/2020, (On 09/01/2020, include FD vouchers both sides)

                            "                 GROUP BY T.PROJECT_ID,T.VOUCHER_DATE, T.VOUCHER_ID) AS TT,\n" +
                            "               (SELECT @row_numC := 1000000) x,\n" +
                            "               (SELECT @prev_valueC := null) y, (SELECT @crow_num := 1) x1,  (SELECT @cprev_value := null) y1\n" +
                            "         GROUP BY TT.VOUCHER_DATE, tt.VOUCHER_ID -- , tt.sequence_no\n" +
                            "\n" +
                            "        ) AS TT\n" +
                            " GROUP BY TT.PROJECT_ID, TT.VOUCHER_DATE, TT.SORT_ID\n" +
                            " ORDER BY TT.PROJECT_ID, TT.VOUCHER_DATE,LENGTH(TT.VOUCHER_NO) DESC,TT.VOUCHER_NO,LENGTH(TT.PAY_VID),TT.PAY_VID,IF(LENGTH(GROUP_CONCAT(TT.PAY_VOUCHER_ID))=0, TT.VOUCHER_ID, TT.PAY_VOUCHER_ID)"; //On 26/04/2021, to have proper Voucher Entry Order

                        //" ORDER BY TT.PROJECT_ID, TT.VOUCHER_DATE, IF(LENGTH(GROUP_CONCAT(TT.PAY_VOUCHER_ID))=0, TT.VOUCHER_ID, TT.PAY_VOUCHER_ID),\n" +
                        //"LENGTH(TT.VOUCHER_NO) DESC,TT.VOUCHER_NO,LENGTH(TT.PAY_VID),TT.PAY_VID";

                        // chinna  21.06.2019 to Remove the Ledger ID
                        //" GROUP BY TT.PROJECT_ID, TT.VOUCHER_DATE, TT.LEDGER_ID, TT.SORT_ID\n" +

                        // it is done already 
                        //tt.voucher_id
                        //On 28/08/2018, For Receipts, Payments shows in separate rows TT.LEDGER_ID(08/01/2019)
                        //" GROUP BY TT.PROJECT_ID,TT.VOUCHER_DATE,tt.voucher_id,tt.pay_voucher_id, tt.SORT_ID\n" +
                        //" ORDER BY TT.PROJECT_ID,TT.VOUCHER_DATE,LENGTH(TT.VOUCHER_NO),TT.VOUCHER_NO,LENGTH(TT.PAY_VID),TT.PAY_VID";//tt.voucher_id ,tt.sort_id,
                        break;
                    }
                case ReportSQLCommand.BankReport.CashBankBookDouble:
                    {

                        //Changed  logic to get ref no and name and address
                        query = "SELECT\n" +
                            " TT.VOUCHER_ID,TT.VOUCHER_SUB_TYPE,TT.PROJECT_ID,\n" +
                            " TRIM(GROUP_CONCAT(TT.LEDGER_ID ORDER BY TT.sort_id DESC SEPARATOR '')) AS LEDGER_ID,\n" +
                            " DATE(TT.VOUCHER_DATE) AS 'DATE',\n" +
                            " CONCAT(DATE_FORMAT(TT.VOUCHER_DATE, '%b') , CONCAT(' '  , DATE_FORMAT(TT.VOUCHER_DATE, '%Y'))) MONTH_YEAR_NAME,\n" +
                            " DATE_FORMAT(TT.VOUCHER_DATE,'%Y - %m') MONTH_YEAR,\n" +
                            " TRIM(GROUP_CONCAT(TT.VOUCHER_NO ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS RECEIPT_NO,\n" +
                            " TRIM(GROUP_CONCAT(TT.LEDGER_CODE ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS LEDGER_CODE,\n" +
                            " TRIM(GROUP_CONCAT(TT.LEDGER_NAME ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS 'RECEIPT',\n" +
                            " TRIM(GROUP_CONCAT(TT.REC_LEDGER_AMOUNT ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS REC_LEDGER_AMOUNT, \n" +
                            " SUM(TT.CASH) AS CASH,\n" +
                            " SUM(TT.BANK) AS BANK,\n" +
                            " TRIM(GROUP_CONCAT(TT.NARRATION ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS NARRATION,\n" +
                            " TRIM(GROUP_CONCAT(TT.PAY_VOUCHER_ID ORDER BY TT.sort_id DESC SEPARATOR '')) AS PAY_VOUCHER_ID,TT.VOUCHER_PAYMENT_SUB_TYPE,\n" +
                            " TRIM(GROUP_CONCAT(TT.PAY_VID ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS PAY_VNO,\n" +
                            " TRIM(GROUP_CONCAT(TT.PAY_LED_ID ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS PAY_LED_ID,\n" +
                            " TRIM(GROUP_CONCAT(TT.PAY_CODE ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS PAY_CODE,\n" +
                            " TRIM(GROUP_CONCAT(TT.PAY_LEDGER ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS 'PAYMENT',\n" +
                            "TRIM(GROUP_CONCAT(TT.PAY_LEDGER_AMOUNT ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS PAY_LEDGER_AMOUNT, \n" +
                            " SUM(TT.PAY_CASH) AS PAY_CASH,\n" +
                            " SUM(TT.PAY_BANK) AS PAY_BANK,\n" +
                            " TRIM(GROUP_CONCAT(TT.NAP ORDER BY TT.sort_id DESC SEPARATOR ' '))  AS NARRATION_PAY, REC_FD_ACCOUNT_ID, PAY_FD_ACCOUNT_ID\n" +
                            "  FROM (SELECT VT.VOUCHER_ID,MT.VOUCHER_SUB_TYPE,MT.PROJECT_ID,\n" +
                            "               VT.LEDGER_ID,\n" +
                            "               GROUP_CONCAT(MT.VOUCHER_NO ORDER BY sort_id DESC SEPARATOR ' ') AS VOUCHER_NO,\n" +
                            "               GROUP_CONCAT(ML.LEDGER_CODE ORDER BY sort_id DESC SEPARATOR ' ') AS LEDGER_CODE,\n" +
                            "               @row_num := IF(@prev_value = T.voucher_date , @row_num + 1, 1) AS sort_id,\n" +
                            "               @prev_value := T.voucher_date as VOUCHER_DATE,\n" +
                            " @rrow_num := IF(@rprev_value = MT.VOUCHER_ID, @rrow_num + 1, 1) AS sort_id1, \n" +
                            " @rprev_value := MT.VOUCHER_ID as v1, @rprev_vo_value:=T.VOUCHER_NO AS VNo1,\n" +
                             " ML.LEDGER_NAME AS LEDGER_NAME,\n" +
                            " CONCAT(CONCAT(VT.AMOUNT,' '),VT.TRANS_MODE) AS REC_LEDGER_AMOUNT, SUM(IF(VT.TRANS_MODE='CR', VT.AMOUNT, 0)) AS REC_TOTAL_LEDGER_AMOUNT,\n" +
                            "    CASE WHEN T.CASH > 0 AND @rrow_num <> 1 THEN 0 WHEN T.CASH > 0 AND @rrow_num = 1 THEN T.CASH\n" +
                            "         WHEN (T.CASH + T.BANK) = 0 AND @rrow_num = 1 AND CB_GROUP_ID = 13 THEN REC.AMOUNT ELSE 0 END AS CASH,\n" +
                            "    CASE WHEN T.BANK > 0 AND @rrow_num <> 1 THEN 0 WHEN T.BANK > 0 AND @rrow_num = 1 THEN T.BANK\n" +
                            "         WHEN (T.CASH + T.BANK) = 0 AND @rrow_num = 1 AND CB_GROUP_ID = 12 THEN REC.AMOUNT ELSE 0 END AS BANK,\n" +
                            "               '' AS PAY_VOUCHER_ID, MT.VOUCHER_SUB_TYPE AS VOUCHER_PAYMENT_SUB_TYPE,\n" +
                            "               '' AS PAY_VID,\n" +
                            "               '' as PAY_LED_ID,\n" +
                            "               '' AS PAY_CODE,\n" +
                            "               '' AS PAY_LEDGER,\n" +
                            "               '' AS PAY_LEDGER_AMOUNT, 0 AS PAY_TOTAL_LEDGER_AMOUNT,\n" +
                            "               0 AS PAY_CASH,\n" +
                            "               0 AS PAY_BANK,\n" +
                            "            CONCAT(CONCAT(CONCAT(CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION),'', '' ),IF(T.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',''),T.TDS_AMOUNT),' ')),\n" + //IF(MT.VOUCHER_SUB_TYPE='FD', CONCAT(' FD:',FD.FD_ACCOUNT_NUMBER), '') 
                            "            IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(MT.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', MT.NAME_ADDRESS),''),''),\n" +
                            "            IF(1=?INCLUDE_PAN_GST,IF(LENGTH(IFNULL(MT.PAN_NUMBER, '')) > 0, CONCAT(' -- PAN: ', MT.PAN_NUMBER), ''), ''),\n" +
                            "            IF(1=?INCLUDE_PAN_GST, IF(LENGTH(IFNULL(MT.GST_NUMBER, '')) > 0, CONCAT(' -- GST: ', MT.GST_NUMBER), ''), ''),\n" +
                            "            IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(T.CHEQUE_NO,'')) > 0,CONCAT(' -- ', T.CHEQUE_NO , ' ', IFNULL(T.FUND_TRANSFER_TYPE_NAME,'')),''),'')), IF(VT.GST>0, CONCAT('GST ', GST),''),\n" +
                            "            IF(1= ?INCLUDE_NARRATION_CURRENCY AND MT.EXCHANGE_COUNTRY_ID>0, CONCAT(' (Currency Details : ', IFNULL(MCE.CURRENCY_NAME, ''), ' ', MT.CONTRIBUTION_AMOUNT, '@',MT.EXCHANGE_RATE, ')'),'') )   AS NARRATION,\n" +
                            "               '' AS NAP, T.FD_ACCOUNT_ID AS REC_FD_ACCOUNT_ID, 0 AS PAY_FD_ACCOUNT_ID, CB_GROUP_ID AS REC_CB_GROUP_ID, 0 AS PAY_CB_GROUP_ID\n" +
                            "\n" +
                            "     FROM (SELECT VOUCHER_ID, PROJECT_ID, VOUCHER_NO, VOUCHER_DATE, VOUCHER_TYPE, VOUCHER_SUB_TYPE,\n" +
                            "              NARRATION, NAME_ADDRESS,PAN_NUMBER,GST_NUMBER, EXCHANGE_COUNTRY_ID, CONTRIBUTION_AMOUNT, EXCHANGE_RATE, STATUS FROM VOUCHER_MASTER_TRANS\n" +
                            "              WHERE STATUS = 1 AND VOUCHER_TYPE IN ('RC') AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND PROJECT_ID IN (?PROJECT_ID)\n" +
                            "              ORDER BY VOUCHER_DATE, VOUCHER_ID) AS MT\n" +
                            "          LEFT JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "          LEFT JOIN (SELECT VT.VOUCHER_ID, SUM(VT.AMOUNT) AS AMOUNT FROM VOUCHER_TRANS VT WHERE VT.TRANS_MODE = 'CR' GROUP BY VT.VOUCHER_ID) REC ON REC.VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "          LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                            "          LEFT JOIN MASTER_COUNTRY MCE ON MCE.COUNTRY_ID = MT.EXCHANGE_COUNTRY_ID\n" +
                            "          JOIN (SELECT CASHBANK.VOUCHER_DATE,CASHBANK.VOUCHER_SUB_TYPE,\n" +
                            "                IFNULL(MBA.ACCOUNT_NUMBER,' ') AS ACCOUNT_NUMBER,\n" +
                            "                      CASHBANK.VOUCHER_ID,\n" +
                            "                      CASHBANK.VOUCHER_NO,\n" +
                            "                      CASHBANK.CB_GROUP_ID, CASHBANK.LEDGER_ID,\n" +
                            "                      SUM(CASHBANK.CASH) AS CASH,\n" +
                            "                      SUM(CASHBANK.BANK) AS BANK,CASHBANK.CHEQUE_NO, CASHBANK.FUND_TRANSFER_TYPE_NAME,\n" +
                            "                      CASHBANK.LEDGER_CODE,CASHBANK.PROJECT_ID, SUM(FDR.TDS_AMOUNT) AS TDS_AMOUNT, IFNULL(FDR.FD_ACCOUNT_ID, 0) AS FD_ACCOUNT_ID\n" +
                            "                 FROM (SELECT MT.VOUCHER_DATE,MT.VOUCHER_SUB_TYPE,\n" +
                            "                              VT.VOUCHER_ID,\n" +
                            "                              MT.VOUCHER_NO,\n" +
                            "                              ML.GROUP_ID AS CB_GROUP_ID, VT.LEDGER_ID,\n" +
                            "                              ML.LEDGER_CODE,  VT.CHEQUE_NO, VT.FUND_TRANSFER_TYPE_NAME,\n" +
                            "                           CASE WHEN ML.GROUP_ID = 13 THEN \n" +
                            "                                SUM(VT.AMOUNT) \n" +
                            "                                   ELSE 0 END AS CASH, \n" +
                            "                           CASE WHEN ML.GROUP_ID = 12 THEN \n" +
                            "                               SUM(VT.AMOUNT)  \n" +
                            "                                   ELSE 0 END AS BANK,MT.PROJECT_ID\n" +
                            "                           \n" +
                            "                         FROM VOUCHER_MASTER_TRANS MT\n" +
                            "                         LEFT JOIN VOUCHER_TRANS VT ON MT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                            "                         LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                            "                        WHERE MT.VOUCHER_TYPE in('RC') AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO \n" +
                            "                          AND MT.PROJECT_ID IN (?PROJECT_ID) AND ML.GROUP_ID IN (12, 13)\n" +
                            "                          AND MT.STATUS = 1 GROUP BY MT.PROJECT_ID,VT.VOUCHER_ID, VT.LEDGER_ID\n" +
                            "                        ORDER BY MT.PROJECT_ID, MT.VOUCHER_DATE,\n" +
                            "                                 MT.VOUCHER_NO,\n" +
                            "                                 VT.SEQUENCE_NO) AS CASHBANK\n" +
                            "                 LEFT JOIN MASTER_BANK_ACCOUNT MBA  \n" +
                            "                   ON MBA.LEDGER_ID=CASHBANK.LEDGER_ID \n" +
                            "                LEFT JOIN MASTER_BANK MB \n" +
                            "                   ON MB.BANK_ID=MBA.BANK_ID \n" +
                            "                LEFT JOIN FD_RENEWAL FDR\n" +
                            "                   ON FDR.FD_INTEREST_VOUCHER_ID = CASHBANK.VOUCHER_ID\n" +
                            "                GROUP BY CASHBANK.VOUCHER_ID\n" +
                            "                ORDER BY CASHBANK.PROJECT_ID,CASHBANK.VOUCHER_DATE, CASHBANK.VOUCHER_NO) AS T\n" +
                            //"            ON MT.VOUCHER_ID = T.VOUCHER_ID, (SELECT @row_num := 1) x,\n" + On 20/04/2021, to have proper Date Order to avoid merging Voucher No
                            "                        ON T.VOUCHER_ID = MT.VOUCHER_ID AND T.VOUCHER_DATE = MT.VOUCHER_DATE,\n" +
                            "         (SELECT @row_num := 1) x,\n" + //On 20/04/2021, to have proper Date Order to avoid merging Voucher No
                            "         (SELECT @prev_value := null) y, (SELECT @rrow_num := 1) x1,  (SELECT @rprev_value := null) y1,  (SELECT @rprev_vo_value := null) y2 \n" +  // Temp variable to reset voucherNo
                            "         WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                            "           AND MT.VOUCHER_TYPE IN ('RC') AND VT.TRANS_MODE IN ('DR','CR') \n" +
                            "           AND MT.STATUS = 1 AND T.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                            "           AND ML.GROUP_ID NOT IN (12, 13)\n" +
                            "         GROUP BY MT.PROJECT_ID,MT.VOUCHER_DATE, VT.VOUCHER_ID, VT.SEQUENCE_NO\n" +
                            "\n" +
                            "        UNION ALL\n" +
                            "\n" +
                            "        SELECT '' AS VOUCHER_ID,MT.VOUCHER_SUB_TYPE,MT.PROJECT_ID,\n" +
                            "               '' AS LEDGER_ID,\n" +
                            "               '' AS VOUCHER_NO,\n" +
                            "               '' AS LEDGER_CODE,\n" +
                            "               @row_number :=\n" +
                            "               IF(@prev_val = T.voucher_date, @row_number + 1, 1) AS sort_id,\n" +
                            "               @prev_val := T.voucher_date as VOUCHER_DATE,\n" +
                            "               @prow_num := IF(@pprev_value = MT.VOUCHER_ID, @prow_num + 1, 1) AS sort_id1, \n" +
                            "                @pprev_value := MT.VOUCHER_ID as v1, @pprev_vo_value:=MT.VOUCHER_NO AS VNo1, \n" +
                            "               '' AS LEDGER_NAME,\n" +
                            "                '' AS REC_LEDGER_AMOUNT, 0 AS REC_TOTAL_LEDGER_AMOUNT,\n" +
                            "               0 AS CASH,\n" +
                            "               0 AS BANK,\n" +
                            "               VT.VOUCHER_ID AS PAY_VOUCHER_ID,MT.VOUCHER_SUB_TYPE AS VOUCHER_PAYMENT_SUB_TYPE,\n" +
                            "               GROUP_CONCAT(T.VOUCHER_NO ORDER BY sort_id DESC SEPARATOR '') AS PAY_VID,\n" +
                            "               VT.LEDGER_ID as PAY_LED_ID,\n" +
                            "               GROUP_CONCAT(ML.LEDGER_CODE ORDER BY sort_id DESC SEPARATOR '') AS PAY_CODE,\n" +
                            //"               --  CONCAT(CONCAT(CONCAT(CONCAT(ML.LEDGER_NAME,'  '),VT.AMOUNT),' '),VT.TRANS_MODE) AS PAY_LEDGER,-- CONCAT(ML.LEDGER_NAME,T.ACCOUNT_NUMBER)\n" +
                            //"          --   GROUP_CONCAT(CONCAT(ML.LEDGER_NAME,T.ACCOUNT_NUMBER) ORDER BY sort_id DESC SEPARATOR ' ') AS PAY_LEDGER,\n" +
                            "             GROUP_CONCAT(ML.LEDGER_NAME ORDER BY sort_id DESC SEPARATOR ' ') AS PAY_LEDGER,\n" +
                            "\n" +
                            "      CONCAT(CONCAT(VT.AMOUNT,' '),VT.TRANS_MODE) AS PAY_LEDGER_AMOUNT, SUM(IF(VT.TRANS_MODE='DR', VT.AMOUNT, 0)) AS PAY_TOTAL_LEDGER_AMOUNT,\n" +
                            "      CASE WHEN T.CASH > 0 AND @prow_num <> 1 THEN 0 WHEN T.CASH > 0 AND @prow_num = 1 THEN T.CASH\n" +
                            "           WHEN (T.BANK + T.CASH) = 0 AND @prow_num = 1 AND CB_GROUP_ID = 13 THEN PAY.AMOUNT ELSE 0 END AS PAY_CASH,\n" +
                            "      CASE WHEN T.BANK > 0 AND @prow_num <> 1 THEN 0 WHEN T.BANK > 0 AND @prow_num = 1 THEN T.BANK\n" +
                            "           WHEN (T.BANK + T.CASH) = 0 AND @prow_num = 1 AND CB_GROUP_ID = 12 THEN PAY.AMOUNT ELSE 0 END AS PAY_BANK,\n" +
                            "      '' AS NARRATION,\n" +
                            "      CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION),''),IF(FDR.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',''),FDR.TDS_AMOUNT),' ')),\n" +
                            "     IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(MT.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', MT.NAME_ADDRESS),''),''),\n" +
                            "            IF(1=?INCLUDE_PAN_GST,IF(LENGTH(IFNULL(MT.PAN_NUMBER, '')) > 0, CONCAT(' -- PAN: ', MT.PAN_NUMBER), ''), ''),\n" +
                            "            IF(1=?INCLUDE_PAN_GST, IF(LENGTH(IFNULL(MT.GST_NUMBER, '')) > 0, CONCAT(' -- GST: ', MT.GST_NUMBER), ''), ''),\n" +
                            "     IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(T.CHEQUE_NO,'')) > 0,CONCAT(' -- ', T.CHEQUE_NO, ' ', IFNULL(T.FUND_TRANSFER_TYPE_NAME,'')),''),'')),\n" +
                            "     IF(TRIM(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION))<>'' AND TRIM(REF.REFERENCE_NUMBER)<>'',\n" +
                            "     IF(TRIM(REF.REFERENCE_NUMBER)<>'', CONCAT('-REF ' , IFNULL(REF.REFERENCE_NUMBER,'')), '') ,  IF(TRIM(REF.REFERENCE_NUMBER)<>'', CONCAT('REF ' , IFNULL(REF.REFERENCE_NUMBER,'')), '') ) ), IF(VT.GST>0, CONCAT('GST ', GST),''))   AS NAP,\n" +
                            "     0 AS REC_FD_ACCOUNT_ID, FDR.FD_ACCOUNT_ID AS PAY_FD_ACCOUNT_ID, 0 AS REC_CB_GROUP_ID, CB_GROUP_ID AS PAY_CB_GROUP_ID\n" +
                            "     FROM (SELECT VOUCHER_ID, PROJECT_ID, VOUCHER_NO, VOUCHER_DATE, VOUCHER_TYPE, VOUCHER_SUB_TYPE,\n" +
                            "              NARRATION, NAME_ADDRESS,PAN_NUMBER,GST_NUMBER, STATUS FROM VOUCHER_MASTER_TRANS\n" +
                            "              WHERE STATUS = 1 AND VOUCHER_TYPE IN ('PY') AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND PROJECT_ID IN (?PROJECT_ID)\n" +
                            "              ORDER BY VOUCHER_DATE, VOUCHER_ID) AS MT\n" +
                            "     LEFT JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "     LEFT JOIN (SELECT VT.VOUCHER_ID, SUM(VT.AMOUNT) AS AMOUNT FROM VOUCHER_TRANS VT WHERE VT.TRANS_MODE = 'DR' GROUP BY VT.VOUCHER_ID) PAY ON PAY.VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "     LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                            "     LEFT JOIN (SELECT VR.REC_PAY_VOUCHER_ID, VR.LEDGER_ID, GROUP_CONCAT(VT.REFERENCE_NUMBER) AS REFERENCE_NUMBER FROM VOUCHER_REFERENCE VR\n" +
                            "     INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VR.REF_VOUCHER_ID AND VT.LEDGER_ID = VR.LEDGER_ID GROUP BY VR.REC_PAY_VOUCHER_ID, VR.LEDGER_ID) AS REF ON\n" +
                            "     REF.REC_PAY_VOUCHER_ID = MT.VOUCHER_ID AND REF.LEDGER_ID = VT.LEDGER_ID\n" +
                            "      LEFT JOIN FD_RENEWAL FDR\n" +
                            "      ON FDR.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "          JOIN (SELECT CASHBANK.VOUCHER_DATE,CASHBANK.VOUCHER_SUB_TYPE,\n" +
                            "                IFNULL(MBA.ACCOUNT_NUMBER,' ') AS ACCOUNT_NUMBER,\n" +
                            "                       CASHBANK.VOUCHER_ID,\n" +
                            "                       CASHBANK.CB_GROUP_ID, CASHBANK.LEDGER_ID,\n" +
                            "                      SUM(CASHBANK.CASH) AS CASH,\n" +
                            "                      SUM(CASHBANK.BANK) AS BANK,CASHBANK.CHEQUE_NO, CASHBANK.FUND_TRANSFER_TYPE_NAME,\n" +
                            "                       CASHBANK.VOUCHER_NO,\n" +
                            "                       CASHBANK.LEDGER_CODE,CASHBANK.PROJECT_ID\n" +
                            "                  FROM (SELECT MT.VOUCHER_DATE,MT.VOUCHER_SUB_TYPE,\n" +
                            "                               ML.GROUP_ID AS CB_GROUP_ID, VT.VOUCHER_ID,\n" +
                            "                               MT.VOUCHER_NO,\n" +
                            "                               ML.LEDGER_CODE,\n" +
                            "                               VT.LEDGER_ID,VT.CHEQUE_NO, VT.FUND_TRANSFER_TYPE_NAME,\n" +
                            "                           CASE WHEN ML.GROUP_ID = 13 THEN \n" +
                            "                                SUM(VT.AMOUNT) \n" +
                            "                                   ELSE 0 END AS CASH, \n" +
                            "                           CASE WHEN ML.GROUP_ID = 12 THEN \n" +
                            "                               SUM(VT.AMOUNT)  \n" +
                            "                                   ELSE 0 END AS BANK,MT.PROJECT_ID \n" +
                            "\n" +
                            "                          FROM VOUCHER_MASTER_TRANS MT\n" +
                            "                          LEFT JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "                          LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                            "                         WHERE MT.VOUCHER_TYPE IN ('PY')\n" +
                            "                           AND mt.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                            "                           AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                            "                           and ML.GROUP_ID IN (12, 13) AND MT.STATUS = 1\n" +
                            "                         GROUP BY MT.PROJECT_ID, MT.VOUCHER_ID, VT.LEDGER_ID\n" +
                            "                         ORDER BY MT.PROJECT_ID,MT.VOUCHER_DATE,\n" +
                            "                                  MT.VOUCHER_NO,\n" +
                            "                                  VT.SEQUENCE_NO) AS CASHBANK\n" +
                            "                 LEFT JOIN MASTER_BANK_ACCOUNT MBA  \n" +
                            "                  ON MBA.LEDGER_ID=CASHBANK.LEDGER_ID \n" +
                            "                LEFT JOIN MASTER_BANK MB \n" +
                            "                 ON MB.BANK_ID=MBA.BANK_ID \n" +
                            "                 GROUP BY CASHBANK.VOUCHER_ID\n" +
                            "                 ORDER BY CASHBANK.PROJECT_ID,CASHBANK.VOUCHER_DATE,CASHBANK.VOUCHER_NO) AS T\n" +
                            "            ON MT.VOUCHER_ID = T.VOUCHER_ID, (SELECT @row_number := 1) x,\n" +
                            "         (SELECT @prev_val := null) y, (SELECT @prow_num := 1) x1,  (SELECT @pprev_value := null) y1, (SELECT @pprev_vo_value := null) y2 \n" +
                            "         WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                            "           AND MT.VOUCHER_TYPE IN ('PY') \n" +
                            "           AND VT.TRANS_MODE IN ('CR','DR') \n" +
                            "           AND MT.STATUS = 1\n" +
                            "           AND T.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                            "           AND ML.GROUP_ID NOT IN (12, 13)\n" +
                            "         GROUP BY MT.PROJECT_ID,MT.VOUCHER_DATE,\n" +
                            "                  VT.VOUCHER_ID,\n" +
                            "                  VT.SEQUENCE_NO,\n" +
                            "                  ML.LEDGER_ID\n" +
                            "\n" +
                            "        UNION ALL\n" +
                            "\n" +
                            "        SELECT TT.VOUCHER_ID,TT.VOUCHER_SUB_TYPE,TT.PROJECT_ID,\n" +
                            "               GROUP_CONCAT(TT.LEDGER_ID ORDER BY TT.LEDGER_ID DESC\n" +
                            "                            SEPARATOR '') AS LEDGER_ID,\n" +
                            "               GROUP_CONCAT(TT.VOUCHER_NO ORDER BY TT.VOUCHER_ID DESC\n" +
                            "                            SEPARATOR ' ') AS VOUCHER_NO,\n" +
                            "               GROUP_CONCAT(TT.LEDGER_CODE ORDER BY TT.VOUCHER_ID DESC\n" +
                            "                            SEPARATOR ' ') AS LEDGER_CODE,\n" +
                            "               @row_numC :=\n" +
                            "               IF(@prev_valueC = TT.voucher_date, @row_numC + 1, 10000000) AS sort_id,\n" +
                            "               @prev_valueC := TT.voucher_date as VOUCHER_DATE,\n" +
                             "              @crow_num := IF(@cprev_value = TT.VOUCHER_ID, @row_num + 1, 1) AS sort_id1, \n" +
                            "               @cprev_value := TT.VOUCHER_ID as v1, '' AS VNo1,\n" +
                            "               CASE\n" +
                            "                 WHEN IFNULL(SUM(TT.BANK), 0) > 0 AND\n" +
                            "                      IFNULL(SUM(TT.PAY_CASH), 0) > 0 AND TT.VOUCHER_SUB_TYPE = 'GN' THEN\n" +
                            "                  CONCAT(GROUP_CONCAT(TT.LEDGER_NAME ORDER BY TT.VOUCHER_ID DESC\n" +
                            "                                      SEPARATOR ' '),\n" +
                            "                         ' (CASH DEPOSIT)')\n" +
                            "                 WHEN IFNULL(SUM(TT.CASH), 0) > 0 AND\n" +
                            "                      IFNULL(SUM(TT.PAY_BANK), 0) > 0 AND TT.VOUCHER_SUB_TYPE = 'GN' THEN\n" +
                            "                  CONCAT(GROUP_CONCAT(TT.LEDGER_NAME ORDER BY TT.VOUCHER_ID DESC\n" +
                            "                                      SEPARATOR ' '),\n" +
                            "                         ' (CASH WITHDRAWAL)')\n" +
                            "                 WHEN IFNULL(SUM(TT.BANK), 0) > 0 AND\n" +
                            "                      IFNULL(SUM(TT.PAY_BANK), 0) > 0 AND TT.VOUCHER_SUB_TYPE = 'GN'  THEN\n" +
                            "                  CONCAT(GROUP_CONCAT(TT.LEDGER_NAME ORDER BY TT.VOUCHER_ID DESC\n" +
                            "                                      SEPARATOR ' '),\n" +
                            "                         ' (BANK TRANSFER)')\n" +
                            "                 WHEN IFNULL(SUM(TT.CASH > 0), 0) AND\n" +
                            "                      IFNULL(SUM(TT.PAY_CASH), 0) > 0 AND TT.VOUCHER_SUB_TYPE = 'GN' THEN\n" +
                            "                  CONCAT(GROUP_CONCAT(TT.LEDGER_NAME ORDER BY TT.VOUCHER_ID DESC\n" +
                            "                                      SEPARATOR ' '),\n" +
                            "                         ' (CASH TRANSFER)')\n" +
                            "                 WHEN IFNULL(SUM(TT.BANK > 0), 0) AND \n" +
                            "                    IFNULL(SUM(TT.PAY_BANK), 0) > 0 AND TT.VOUCHER_SUB_TYPE = 'FD' THEN \n" +
                            "                    CONCAT(GROUP_CONCAT(TT.LEDGER_NAME ORDER BY TT.VOUCHER_ID DESC \n" +
                            "              SEPARATOR ' '), \n" +
                            "               IF(TT.GROUP_ID=12, ' (FD WITHDRAWAL)', ' (FD INVESTMENT)')) \n" +
                            "    ELSE \n" +
                            "                   CONCAT(GROUP_CONCAT(TT.LEDGER_NAME ORDER BY TT.VOUCHER_ID DESC \n" +
                            "                                     SEPARATOR ' '), \n" +
                            "                        ' ') \n" +
                            "               END AS LEDGER_NAME,\n" +
                            "               IF(TT.VOUCHER_SUB_TYPE = 'FD', CONCAT(TT.REC_AMOUNT, ' ' , TT.REC_TRANS_MODE), ' ') AS REC_LEDGER_AMOUNT, 0 AS REC_TOTAL_LEDGER_AMOUNT,\n" +
                            "               SUM(TT.CASH) AS CASH,\n" +
                            "               SUM(TT.BANK) AS BANK,\n" +
                            "               GROUP_CONCAT(TT.PAY_VOUCHER_ID ORDER BY TT.PAY_VOUCHER_ID DESC\n" +
                            "                            SEPARATOR ' ') AS PAY_VOUCHER_ID,TT.VOUCHER_SUB_TYPE AS VOUCHER_PAYMENT_SUB_TYPE, \n" +
                            "               GROUP_CONCAT(TT.PAY_VID ORDER BY TT.VOUCHER_ID DESC SEPARATOR ' ') AS PAY_VID,\n" +
                            "               GROUP_CONCAT(TT.PAY_LED_ID ORDER BY TT.PAY_LED_ID DESC\n" +
                            "                            SEPARATOR '') AS PAY_LED_ID,\n" +
                            "               GROUP_CONCAT(TT.PAY_CODE ORDER BY TT.VOUCHER_ID DESC\n" +
                            "                            SEPARATOR ' ') AS PAY_CODE,\n" +
                            "               CASE\n" +
                            "                 WHEN IFNULL(SUM(TT.BANK), 0) > 0 AND\n" +
                            "                      IFNULL(SUM(TT.PAY_CASH), 0) > 0 AND TT.VOUCHER_SUB_TYPE = 'GN' THEN\n" +
                            "                  CONCAT(GROUP_CONCAT(TT.PAY_LEDGER ORDER BY TT.VOUCHER_ID DESC\n" +
                            "                                      SEPARATOR ' '),\n" +
                            "                         '(CASH DEPOSIT)')\n" +
                            "                 WHEN IFNULL(SUM(TT.CASH), 0) > 0 AND\n" +
                            "                      IFNULL(SUM(TT.PAY_BANK), 0) > 0 AND TT.VOUCHER_SUB_TYPE = 'GN' THEN\n" +
                            "                  CONCAT(GROUP_CONCAT(TT.PAY_LEDGER ORDER BY TT.VOUCHER_ID DESC\n" +
                            "                                      SEPARATOR ' '),\n" +
                            "                         '(CASH WITHDRAWAL)')\n" +
                            "                 WHEN IFNULL(SUM(TT.BANK), 0) > 0 AND\n" +
                            "                      IFNULL(SUM(TT.PAY_BANK), 0) > 0 AND TT.VOUCHER_SUB_TYPE = 'GN' THEN\n" +
                            "                  CONCAT(GROUP_CONCAT(TT.PAY_LEDGER ORDER BY TT.VOUCHER_ID DESC\n" +
                            "                                      SEPARATOR ' '),\n" +
                            "                         '(BANK TRANSFER)')\n" +
                            "                 WHEN IFNULL(SUM(TT.CASH > 0), 0) AND\n" +
                            "                      IFNULL(SUM(TT.PAY_CASH), 0) > 0 AND TT.VOUCHER_SUB_TYPE = 'GN' THEN\n" +
                            "                  CONCAT(GROUP_CONCAT(TT.PAY_LEDGER ORDER BY TT.VOUCHER_ID DESC\n" +
                            "                                      SEPARATOR ' '),\n" +
                            "                         '(CASH TRANSFER)')\n" +
                            "                 WHEN IFNULL(SUM(TT.PAY_BANK > 0), 0) AND \n" +
                            "                    IFNULL(SUM(TT.BANK), 0) > 0 AND TT.VOUCHER_SUB_TYPE = 'FD' THEN \n" +
                            "     CONCAT(GROUP_CONCAT(TT.PAY_LEDGER ORDER BY TT.VOUCHER_ID DESC \n" +
                            "              SEPARATOR ' '), \n" +
                            "  IF(TT.GROUP_ID=12, ' (FD WITHDRAWAL)', ' (FD INVESTMENT)') ) \n" +
                            " ELSE \n" +
                            " CONCAT(GROUP_CONCAT(TT.PAY_LEDGER ORDER BY TT.VOUCHER_ID DESC  \n" +
                            "                                    SEPARATOR ' '),  \n" +
                            "                       ' ')  \n" +
                            "               END AS PAY_LEDGER,\n" +
                            "               IF(TT.VOUCHER_SUB_TYPE ='FD', CONCAT(TT.PAY_AMOUNT, ' ' , TT.PAY_TRANS_MODE), ' ') AS PAY_LEDGER_AMOUNT, 0 AS PAY_TOTAL_LEDGER_AMOUNT,\n" +
                            "               SUM(TT.PAY_CASH) AS PAY_CASH,\n" +
                            "               SUM(TT.PAY_BANK) AS PAY_BANK,\n" +
                            "               GROUP_CONCAT(DISTINCT TT.NARRATION) AS NARRATION,\n" +
                            "               GROUP_CONCAT(DISTINCT TT.NAP) AS NAP, 0 AS REC_FD_ACCOUNT_ID, 0 AS PAY_FD_ACCOUNT_ID, 0 AS REC_CB_GROUP_ID, 0 AS PAY_CB_GROUP_ID\n" +
                            "          FROM (SELECT T.VOUCHER_ID,T.VOUCHER_SUB_TYPE,T.PROJECT_ID, T.GROUP_ID,\n" +
                            "                       T.LEDGER_ID,\n" +
                            "                       T.LEDGER_CODE,\n" +
                            "                       T.VOUCHER_NO,\n" +
                            "                       T.VOUCHER_DATE,\n" +
                            "                       T.LEDGER_NAME,\n" +
                            "                       IFNULL(T.CASH, 0) AS CASH, T.AMOUNT AS REC_AMOUNT, T.TRANS_MODE AS REC_TRANS_MODE, '' AS PAY_AMOUNT, '' AS PAY_TRANS_MODE,\n" +
                            "                       SUM(IFNULL(T.BANK, 0)) AS BANK,\n" +
                            "                       '' AS PAY_VOUCHER_ID,T.VOUCHER_SUB_TYPE AS VOUCHER_PAYMENT_SUB_TYPE,\n" +
                            "                       T.SEQUENCE_NO,\n" +
                            "                       '' AS PAY_VID,\n" +
                            "                       '' AS PAY_LED_ID,\n" +
                            "                       '' AS PAY_CODE,\n" +
                            "                       '' AS PAY_LEDGER,\n" +
                            "                       0 AS PAY_CASH,\n" +
                            "                       0 AS PAY_BANK,\n" +
                            "                     --  T.NARRATION,\n" +
                            "             --  CONCAT(IFNULL(T.NARRATION,''),\n" +
                            "CONCAT(CONCAT(CONCAT(T.NARRATION,''),IF(T.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',''),T.TDS_AMOUNT),' ')),\n" +
                            "     IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(T.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', T.NAME_ADDRESS),''),''),\n" +
                            "     IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(T.CHEQUE_NO,'')) > 0,CONCAT(' -- ', T.CHEQUE_NO, ' ',IFNULL(T.FUND_TRANSFER_TYPE_NAME,'')),''),''))   AS NARRATION,\n" +
                            "                       '' AS NAP, 0 AS REC_CB_GROUP_ID, T.GROUP_ID AS PAY_CB_GROUP_ID\n" +
                            "                  FROM (SELECT\n" +
                            "                         VT.VOUCHER_ID,MT.VOUCHER_SUB_TYPE,\n" +
                            "                         MT.VOUCHER_NO,\n" +
                            "                         IF(ML.GROUP_ID IN (12, 13), ML.LEDGER_CODE, ML.LEDGER_CODE) AS LEDGER_CODE,\n" +
                            "                         IF(ML.GROUP_ID IN (12, 13), VTCH.TRANS_MODE, VT.TRANS_MODE) AS TRANS_MODE,\n" +
                            "                         IF(ML.GROUP_ID IN (12, 13), ML.LEDGER_NAME, ML.LEDGER_NAME) AS LEDGER_NAME,\n" +
                            "                         VT.SEQUENCE_NO,\n" +
                            "                         MT.PROJECT_ID,\n" +
                            "                         VT.LEDGER_ID,\n" +
                            "                         MT.VOUCHER_DATE,\n" +
                            "                         LG.GROUP_ID,\n" +
                            "                         MT.VOUCHER_TYPE,\n" +
                            "                         CASE\n" +
                            "                           WHEN LG.GROUP_ID IN (12, 14) THEN\n" +
                            "                            IFNULL(VT.AMOUNT, 0)\n" +
                            "                         END AS BANK,\n" +
                            "                         CASE\n" +
                            "                           WHEN LG.GROUP_ID = 13 THEN\n" +
                            "                            IFNULL(VT.AMOUNT, 0)\n" +
                            "                         END AS CASH,  IF(ML.GROUP_ID = 12 AND MT.VOUCHER_SUB_TYPE ='FD', IFNULL(VTCH.AMOUNT, 0), IFNULL(VT.AMOUNT, 0)) AS AMOUNT,\n" +
                            "                         CONCAT( MT.NARRATION, IF(MT.VOUCHER_SUB_TYPE='FD', CONCAT(' FD: ',FD.FD_ACCOUNT_NUMBER ),'') ) AS NARRATION,\n" +
                            "                         FDR.TDS_AMOUNT, MT.NAME_ADDRESS,VT.CHEQUE_NO,VT.FUND_TRANSFER_TYPE_NAME \n" +
                            "                          FROM MASTER_LEDGER_GROUP LG\n" +
                            "\n" +
                            "                          LEFT JOIN MASTER_LEDGER ML\n" +
                            "                            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                            "                          LEFT JOIN VOUCHER_TRANS VT\n" +
                            "                            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                            "                          LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                            "                            ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "               LEFT JOIN FD_RENEWAL FDR ON FDR.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "               LEFT JOIN (SELECT VT.VOUCHER_ID, ML.GROUP_ID, ML.LEDGER_ID, ML.LEDGER_CODE, ML.LEDGER_NAME, VT.AMOUNT, VT.TRANS_MODE\n" +
                            "                       FROM VOUCHER_TRANS VT\n" +
                            "                       INNER JOIN MASTER_LEDGER ML ON VT.LEDGER_ID = ML.LEDGER_ID WHERE VT.TRANS_MODE = 'CR' GROUP BY VT.VOUCHER_ID) AS VTCH ON VTCH.VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "                 LEFT JOIN (SELECT FDA.FD_ACCOUNT_ID, 0 AS VOUCHER_ID, RNO.FD_INTEREST_VOUCHER_ID, RNO.FD_VOUCHER_ID,\n" +
                            "                       RNO.RENEWAL_DATE, IFNULL(RNO.RECEIPT_NO,'') AS RECEIPT_NO,\n" +
                            "                       CONCAT(FDA.FD_ACCOUNT_NUMBER,  IF(IFNULL(RNO.RECEIPT_NO,'')='', '', CONCAT(' (R: ', IFNULL(RNO.RECEIPT_NO,''),')')) ) AS FD_ACCOUNT_NUMBER\n" +
                            "                       FROM FD_ACCOUNT AS FDA\n" +
                            "                       INNER JOIN (SELECT FR.FD_ACCOUNT_ID, FR.FD_INTEREST_VOUCHER_ID, FR.FD_VOUCHER_ID,FR.RENEWAL_DATE, \n" +
                            "                       SUBSTRING_INDEX(GROUP_CONCAT(FR1.RECEIPT_NO ORDER BY FR1.RENEWAL_DATE DESC SEPARATOR '|'), '|', 1) AS RECEIPT_NO \n" +
                            "                       FROM FD_RENEWAL AS FR\n" +
                            "                       LEFT JOIN (SELECT FR1.FD_ACCOUNT_ID, FR1.RENEWAL_DATE AS RENEWAL_DATE, IFNULL(FR1.RECEIPT_NO, '') AS RECEIPT_NO\n" +
                            "                       FROM FD_RENEWAL AS FR1\n" +
                            "                       INNER JOIN FD_ACCOUNT FD1 ON FD1.FD_ACCOUNT_ID = FR1.FD_ACCOUNT_ID\n" +
                            "                       WHERE FD1.STATUS =1 AND FD1.PROJECT_ID IN (?PROJECT_ID) AND FR1.STATUS =1 AND FR1.FD_TYPE = 'RN' AND FR1.RENEWAL_DATE<=?DATE_TO) AS FR1\n" +
                            "                         ON FR1.FD_ACCOUNT_ID= FR.FD_ACCOUNT_ID AND FR1.RENEWAL_DATE<FR.RENEWAL_DATE\n" +
                            "                         WHERE STATUS =1 GROUP BY FR.FD_ACCOUNT_ID, FR.FD_RENEWAL_ID) AS RNO\n" + //FR1.RENEWAL_DATE
                            "                           ON RNO.FD_ACCOUNT_ID = FDA.FD_ACCOUNT_ID WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)\n" +
                            "                       UNION ALL SELECT FDA.FD_ACCOUNT_ID, FDA.FD_VOUCHER_ID, 0 AS FD_INTEREST_VOUCHER_ID, 0 AS FD_VOUCHER_ID, FDA.INVESTMENT_DATE, '' AS RECEIPT_NO, \n" +
                            "                       FDA.FD_ACCOUNT_NUMBER FROM FD_ACCOUNT AS FDA WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)) AS FD\n" +
                            "                 ON FD.VOUCHER_ID = MT.VOUCHER_ID OR FD.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID OR FD.FD_VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "                         WHERE VT.TRANS_MODE = 'DR'\n" +
                            "                           AND MT.VOUCHER_TYPE = 'CN'\n" +
                            "                           AND PROJECT_ID IN (?PROJECT_ID)\n" +
                            "                           AND MT.STATUS = 1\n" +
                            "                           AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                            "                         ORDER BY VT.VOUCHER_ID ASC) AS T\n" +
                            "                 WHERE T.PROJECT_ID IN (?PROJECT_ID)\n" +
                            "                   AND T.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                            //"                   AND T.GROUP_ID IN (12, 13, 14)\n" + //On 09/01/2020, include FD vouchers both sides
                            "                     AND T.GROUP_ID NOT IN (14)\n" + //Removed on 16/03/2020, (On 09/01/2020, include FD vouchers both sides)
                            "                   AND T.VOUCHER_TYPE = 'CN'\n" +
                            "                 GROUP BY T.PROJECT_ID,T.VOUCHER_DATE, T.VOUCHER_ID, T.LEDGER_ID\n" +
                            "\n" +
                            "                UNION\n" +
                            "\n" +
                            "                SELECT T.VOUCHER_ID AS VOUCHER_ID,T.VOUCHER_SUB_TYPE,T.PROJECT_ID,T.GROUP_ID,\n" +
                            "                       '' AS LEDGER_ID,\n" +
                            "                       '' AS LEDGER_CODE,\n" +
                            "                       '' AS VOUCHER_NO,\n" +
                            "                       T.VOUCHER_DATE,\n" +
                            "                       '' AS LEDGER_NAME,\n" +
                            "                       0 AS CASH, '' AS REC_AMOUNT, '' AS REC_TRANS_MODE, T.AMOUNT AS PAY_AMOUNT, T.TRANS_MODE AS PAY_TRANS_MODE,\n" +
                            "                       0 AS BANK,\n" +
                            "                       T.VOUCHER_ID AS PAY_VOUCHER_ID, T.VOUCHER_SUB_TYPE AS VOUCHER_PAYMENT_SUB_TYPE,\n" +
                            "                       T.SEQUENCE_NO,\n" +
                            "                       T.VOUCHER_NO AS PAY_VID,\n" +
                            "                       T.LEDGER_ID AS PAY_LED_ID,\n" +
                            "                       T.LEDGER_CODE AS PAY_CODE,\n" +
                            "                       T.LEDGER_NAME AS PAY_LEDGER,\n" +
                            "                       SUM(IFNULL(T.CASH, 0)) AS PAY_CASH, \n" +
                            "                       SUM(IFNULL(T.BANK, 0)) AS PAY_BANK,\n" +
                            "                       '' AS NARRATION,\n" +
                            "              --         T.NARRATION AS NAP\n" +
                            "             --  CONCAT(IFNULL(T.NARRATION,''),\n" +
                            "     CONCAT(CONCAT(CONCAT(T.NARRATION,''),IF(T.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',''),T.TDS_AMOUNT),' ')),\n" +
                            "     IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(T.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', T.NAME_ADDRESS),''),''),\n" +
                            "     IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(T.CHEQUE_NO,'')) > 0,CONCAT(' -- ', T.CHEQUE_NO, ' ', IFNULL(T.FUND_TRANSFER_TYPE_NAME,'')),''),''))  AS NAP,\n" +
                            "     T.GROUP_ID AS REC_CB_GROUP_ID, 0 AS PAY_CB_GROUP_ID\n" +
                            "                  FROM (SELECT VT.VOUCHER_ID,MT.VOUCHER_SUB_TYPE,\n" +
                            "                               ML.LEDGER_CODE,\n" +
                            "                               MT.VOUCHER_NO,\n" +
                            "                               VT.TRANS_MODE,\n" +
                            "                               ML.LEDGER_NAME,\n" +
                            "                               VT.SEQUENCE_NO,\n" +
                            "                               MT.PROJECT_ID,\n" +
                            "                               VT.LEDGER_ID,\n" +
                            "                               MT.VOUCHER_DATE,\n" +
                            "                               LG.GROUP_ID,\n" +
                            "                               MT.VOUCHER_TYPE,\n" +
                            "                               CASE\n" +
                            "                                 WHEN LG.GROUP_ID IN (12, 14) THEN\n" +
                            "                                  IFNULL(VT.AMOUNT, 0)\n" +
                            "                               END AS BANK,\n" +
                            "                               CASE\n" +
                            "                                 WHEN LG.GROUP_ID = 13 THEN\n" +
                            "                                  IFNULL(VT.AMOUNT, 0)\n" +
                            "                               END AS CASH, IFNULL(VT.AMOUNT, 0) AS AMOUNT,\n" +
                            "                               CONCAT( MT.NARRATION, IF(MT.VOUCHER_SUB_TYPE='FD', CONCAT(' FD: ',FD.FD_ACCOUNT_NUMBER ),'') ) AS NARRATION,\n" +
                            "                               FDR.TDS_AMOUNT,MT.NAME_ADDRESS,VT.CHEQUE_NO,VT.FUND_TRANSFER_TYPE_NAME\n" +
                            "                          FROM MASTER_LEDGER_GROUP LG\n" +
                            "\n" +
                            "                          LEFT JOIN MASTER_LEDGER ML\n" +
                            "                            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                            "                          LEFT JOIN VOUCHER_TRANS VT\n" +
                            "                            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                            "                          LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                            "                            ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "                        LEFT JOIN FD_RENEWAL FDR ON FDR.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "                        LEFT JOIN (SELECT VT.VOUCHER_ID, ML.GROUP_ID, ML.LEDGER_ID, ML.LEDGER_CODE, ML.LEDGER_NAME, VT.AMOUNT, VT.TRANS_MODE\n" +
                            "                              FROM VOUCHER_TRANS VT\n" +
                            "                              INNER JOIN MASTER_LEDGER ML ON VT.LEDGER_ID = ML.LEDGER_ID WHERE VT.TRANS_MODE = 'DR' GROUP BY VT.VOUCHER_ID) AS VTCH ON VTCH.VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "                 LEFT JOIN (SELECT FDA.FD_ACCOUNT_ID, 0 AS VOUCHER_ID, RNO.FD_INTEREST_VOUCHER_ID, RNO.FD_VOUCHER_ID,\n" +
                            "                       RNO.RENEWAL_DATE, IFNULL(RNO.RECEIPT_NO,'') AS RECEIPT_NO,\n" +
                            "                       CONCAT(FDA.FD_ACCOUNT_NUMBER,  IF(IFNULL(RNO.RECEIPT_NO,'')='', '', CONCAT(' (R: ', IFNULL(RNO.RECEIPT_NO,''),')')) ) AS FD_ACCOUNT_NUMBER\n" +
                            "                       FROM FD_ACCOUNT AS FDA\n" +
                            "                       INNER JOIN (SELECT FR.FD_ACCOUNT_ID, FR.FD_INTEREST_VOUCHER_ID, FR.FD_VOUCHER_ID,FR.RENEWAL_DATE, \n" +
                            "                       SUBSTRING_INDEX(GROUP_CONCAT(FR1.RECEIPT_NO ORDER BY FR1.RENEWAL_DATE DESC SEPARATOR '|'), '|', 1) AS RECEIPT_NO \n" +
                            "                       FROM FD_RENEWAL AS FR\n" +
                            "                       LEFT JOIN (SELECT FR1.FD_ACCOUNT_ID, FR1.RENEWAL_DATE AS RENEWAL_DATE, IFNULL(FR1.RECEIPT_NO, '') AS RECEIPT_NO\n" +
                            "                       FROM FD_RENEWAL AS FR1\n" +
                            "                       INNER JOIN FD_ACCOUNT FD1 ON FD1.FD_ACCOUNT_ID = FR1.FD_ACCOUNT_ID\n" +
                            "                       WHERE FD1.STATUS =1 AND FD1.PROJECT_ID IN (?PROJECT_ID) AND FR1.STATUS =1 AND FR1.FD_TYPE = 'RN' AND FR1.RENEWAL_DATE<=?DATE_TO) AS FR1\n" +
                            "                         ON FR1.FD_ACCOUNT_ID= FR.FD_ACCOUNT_ID AND FR1.RENEWAL_DATE<FR.RENEWAL_DATE\n" +
                            "                         WHERE STATUS =1 GROUP BY FR.FD_ACCOUNT_ID, FR.FD_RENEWAL_ID) AS RNO\n" + //FR1.RENEWAL_DATE
                            "                           ON RNO.FD_ACCOUNT_ID = FDA.FD_ACCOUNT_ID WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)\n" +
                            "                       UNION ALL SELECT FDA.FD_ACCOUNT_ID, FDA.FD_VOUCHER_ID, 0 AS FD_INTEREST_VOUCHER_ID, 0 AS FD_VOUCHER_ID, FDA.INVESTMENT_DATE, '' AS RECEIPT_NO, \n" +
                            "                       FDA.FD_ACCOUNT_NUMBER FROM FD_ACCOUNT AS FDA WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)) AS FD\n" +
                            "                 ON FD.VOUCHER_ID = MT.VOUCHER_ID OR FD.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID OR FD.FD_VOUCHER_ID = MT.VOUCHER_ID\n" +
                            "                         WHERE VT.TRANS_MODE = 'CR'\n" +
                            "                           AND MT.VOUCHER_TYPE = 'CN'\n" +
                            "                           AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                            "                           AND MT.STATUS = 1\n" +
                            "                           AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                            "                         ORDER BY VT.VOUCHER_ID ASC) AS T\n" +
                            "                 WHERE T.PROJECT_ID IN (?PROJECT_ID)\n" +
                            "                   AND T.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                            //"                   AND T.GROUP_ID IN (12, 13, 14)\n" + //On 09/01/2020, include FD vouchers both sides
                            //"                     AND T.GROUP_ID IN (12, 13)\n" + //Removed on 16/03/2020, (On 09/01/2020, include FD vouchers both sides)
                            "                       AND T.GROUP_ID IN (12, 13)\n" +
                            "                   AND T.VOUCHER_TYPE = 'CN'\n" +
                            "                 GROUP BY T.PROJECT_ID,T.VOUCHER_DATE, T.VOUCHER_ID, T.LEDGER_ID) AS TT,\n" +
                            "               (SELECT @row_numC := 1000000) x,\n" +
                            "               (SELECT @prev_valueC := null) y, (SELECT @crow_num := 1) x1,  (SELECT @cprev_value := null) y1\n" +
                            "         GROUP BY TT.VOUCHER_DATE, TT.VOUCHER_ID, IF(TT.VOUCHER_SUB_TYPE = 'FD', TT.LEDGER_ID,  1 = 1) -- , tt.sequence_no\n" +
                            "\n" +
                            "        ) AS TT\n" +
                            " GROUP BY TT.PROJECT_ID, TT.VOUCHER_DATE, TT.SORT_ID\n" +
                            " ORDER BY TT.PROJECT_ID, TT.VOUCHER_DATE,LENGTH(TT.VOUCHER_NO) DESC,TT.VOUCHER_NO,LENGTH(TT.PAY_VID) DESC,TT.PAY_VID,IF(LENGTH(GROUP_CONCAT(TT.PAY_VOUCHER_ID))=0, TT.VOUCHER_ID, TT.PAY_VOUCHER_ID)"; //On 26/04/2021, to have proper Voucher Entry Order

                        //" ORDER BY TT.PROJECT_ID, TT.VOUCHER_DATE, IF(LENGTH(GROUP_CONCAT(TT.PAY_VOUCHER_ID))=0, TT.VOUCHER_ID, TT.PAY_VOUCHER_ID),\n" +
                        //"LENGTH(TT.VOUCHER_NO) DESC,TT.VOUCHER_NO,LENGTH(TT.PAY_VID),TT.PAY_VID";

                        // chinna  21.06.2019 to Remove the Ledger ID
                        //" GROUP BY TT.PROJECT_ID, TT.VOUCHER_DATE, TT.LEDGER_ID, TT.SORT_ID\n" +


                        // it is done already 
                        //tt.voucher_id
                        //On 28/08/2018, For Receipts, Payments shows in separate rows TT.LEDGER_ID(08/01/2019)
                        //" GROUP BY TT.PROJECT_ID,TT.VOUCHER_DATE,tt.voucher_id,tt.pay_voucher_id, tt.SORT_ID\n" +
                        //" ORDER BY TT.PROJECT_ID,TT.VOUCHER_DATE,LENGTH(TT.VOUCHER_NO),TT.VOUCHER_NO,LENGTH(TT.PAY_VID),TT.PAY_VID";//tt.voucher_id ,tt.sort_id,

                        break;
                    }
                case ReportSQLCommand.BankReport.CashBankBookManual: //Join Common Receipts and Payments
                    {
                        query = "SELECT * FROM\n" +
                                "(SELECT @Row1:=@Row1+1 AS ROW1, VOUCHER_ID, LEDGER_ID, DATE, RECEIPT_NO, VOUCHER_SUB_TYPE, LEDGER_CODE, RECEIPT, CASH,\n" +
                                "BANK, NARRATION\n" +
                                "FROM (SELECT MT.VOUCHER_ID, VT.LEDGER_ID, MT.VOUCHER_DATE AS DATE, MT.VOUCHER_NO AS RECEIPT_NO,\n" +
                                "MT.VOUCHER_SUB_TYPE AS VOUCHER_SUB_TYPE, \n" +
                                "CASE WHEN CASHBANK.CASH > 0 AND MT.VOUCHER_TYPE = 'CN' THEN VTCH.LEDGER_CODE\n" +
                                " WHEN CASHBANK.BANK > 0 AND MT.VOUCHER_TYPE = 'CN' THEN VTCH.LEDGER_CODE\n" +
                                " ELSE ML.LEDGER_CODE END AS LEDGER_CODE, \n" +
                                "CASE WHEN CASHBANK.CASH > 0 AND MT.VOUCHER_TYPE = 'CN' THEN CONCAT(VTCH.LEDGER_NAME, IF(MT.VOUCHER_SUB_TYPE='GN', ' (CASH WITHDRAWAL)', '') )\n" +
                                " WHEN CASHBANK.BANK > 0 AND MT.VOUCHER_TYPE = 'CN' THEN CONCAT(VTCH.LEDGER_NAME , IF(MT.VOUCHER_SUB_TYPE='GN', ' (CASH DEPOSIT)',  CONCAT(', ', GROUP_CONCAT(ML.LEDGER_NAME)) ) )\n" +
                                " ELSE GROUP_CONCAT(ML.LEDGER_NAME) END AS RECEIPT , \n" +
                                "CASHBANK.CASH AS CASH, CASHBANK.BANK AS BANK,\n" +
                                "CASHBANK.ACCOUNT_NUMBER AS ACCOUNT_NUMBER, CONCAT(MT.NARRATION, IF(MT.VOUCHER_SUB_TYPE = 'FD', CONCAT(' FD: ', FD.FD_ACCOUNT_NUMBER),'') ) AS NARRATION\n" +
                                "FROM VOUCHER_MASTER_TRANS MT\n" +
                                "INNER JOIN VOUCHER_TRANS VT ON MT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                "JOIN\n" +
                                "(SELECT MT.VOUCHER_ID, VT.LEDGER_ID, VT.CHEQUE_NO,\n" +
                                "CASE WHEN ML.GROUP_ID = 13 THEN SUM(VT.AMOUNT) ELSE 0 END AS CASH, VT.TRANS_MODE,\n" +
                                "CASE WHEN ML.GROUP_ID = 12 THEN SUM(VT.AMOUNT) ELSE 0 END AS BANK,\n" +
                                "IFNULL(MBA.ACCOUNT_NUMBER,' ') AS ACCOUNT_NUMBER\n" +
                                "FROM VOUCHER_MASTER_TRANS MT\n" +
                                "INNER JOIN VOUCHER_TRANS VT ON MT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                "LEFT JOIN MASTER_BANK_ACCOUNT MBA ON MBA.LEDGER_ID=VT.LEDGER_ID\n" +
                                "LEFT JOIN MASTER_BANK MB ON MB.BANK_ID=MBA.BANK_ID\n" +
                                "WHERE ((MT.VOUCHER_TYPE = 'RC') OR (MT.VOUCHER_TYPE = 'CN' AND VT.TRANS_MODE='DR') )\n" +
                                "AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "AND ML.GROUP_ID IN (12, 13) AND MT.STATUS = 1\n" +
                                "GROUP BY VT.VOUCHER_ID) AS CASHBANK ON CASHBANK.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "LEFT JOIN (SELECT VT.VOUCHER_ID, ML.LEDGER_ID, ML.LEDGER_CODE, ML.LEDGER_NAME, VT.AMOUNT, VT.TRANS_MODE\n" +
                                "              FROM VOUCHER_TRANS VT\n" +
                                "              INNER JOIN MASTER_LEDGER ML ON VT.LEDGER_ID = ML.LEDGER_ID WHERE TRANS_MODE='CR') AS VTCH ON VTCH.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "                 LEFT JOIN (SELECT FDA.FD_ACCOUNT_ID, 0 AS VOUCHER_ID, RNO.FD_INTEREST_VOUCHER_ID, RNO.FD_VOUCHER_ID,\n" +
                                "                       RNO.RENEWAL_DATE, IFNULL(RNO.RECEIPT_NO,'') AS RECEIPT_NO,\n" +
                                "                       CONCAT(FDA.FD_ACCOUNT_NUMBER,  IF(IFNULL(RNO.RECEIPT_NO,'')='', '', CONCAT(' (R: ', IFNULL(RNO.RECEIPT_NO,''),')')) ) AS FD_ACCOUNT_NUMBER\n" +
                                "                       FROM FD_ACCOUNT AS FDA\n" +
                                "                       INNER JOIN (SELECT FR.FD_ACCOUNT_ID, FR.FD_INTEREST_VOUCHER_ID, FR.FD_VOUCHER_ID,FR.RENEWAL_DATE, \n" +
                                "                       SUBSTRING_INDEX(GROUP_CONCAT(FR1.RECEIPT_NO ORDER BY FR1.RENEWAL_DATE DESC SEPARATOR '|'), '|', 1) AS RECEIPT_NO \n" +
                                "                       FROM FD_RENEWAL AS FR\n" +
                                "                       LEFT JOIN (SELECT FR1.FD_ACCOUNT_ID, FR1.RENEWAL_DATE AS RENEWAL_DATE, IFNULL(FR1.RECEIPT_NO, '') AS RECEIPT_NO\n" +
                                "                       FROM FD_RENEWAL AS FR1\n" +
                                "                       INNER JOIN FD_ACCOUNT FD1 ON FD1.FD_ACCOUNT_ID = FR1.FD_ACCOUNT_ID\n" +
                                "                       WHERE FD1.STATUS =1 AND FD1.PROJECT_ID IN (?PROJECT_ID) AND FR1.STATUS =1 AND FR1.FD_TYPE = 'RN' AND FR1.RENEWAL_DATE<=?DATE_TO) AS FR1\n" +
                                "                         ON FR1.FD_ACCOUNT_ID= FR.FD_ACCOUNT_ID AND FR1.RENEWAL_DATE<FR.RENEWAL_DATE\n" +
                                "                         WHERE STATUS =1 GROUP BY FR.FD_ACCOUNT_ID, FR.FD_RENEWAL_ID) AS RNO\n" + //FR1.RENEWAL_DATE
                                "                           ON RNO.FD_ACCOUNT_ID = FDA.FD_ACCOUNT_ID WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                       UNION ALL SELECT FDA.FD_ACCOUNT_ID, FDA.FD_VOUCHER_ID, 0 AS FD_INTEREST_VOUCHER_ID, 0 AS FD_VOUCHER_ID, FDA.INVESTMENT_DATE, '' AS RECEIPT_NO, \n" +
                                "                       FDA.FD_ACCOUNT_NUMBER FROM FD_ACCOUNT AS FDA WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)) AS FD\n" +
                                "                 ON FD.VOUCHER_ID = MT.VOUCHER_ID OR FD.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID OR FD.FD_VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "WHERE (MT.VOUCHER_TYPE = 'RC' OR (MT.VOUCHER_TYPE = 'CN' AND VT.TRANS_MODE='DR')) AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "AND ( CASE WHEN VOUCHER_TYPE = 'RC' THEN ML.GROUP_ID NOT IN (12, 13)\n" +
                                "            WHEN VOUCHER_TYPE = 'CN' AND VOUCHER_SUB_TYPE='FD' THEN ML.GROUP_ID NOT IN (14, 12)\n" +
                                "            WHEN VOUCHER_TYPE = 'CN' AND VOUCHER_SUB_TYPE='GN' THEN ML.GROUP_ID IN (12, 13) END ) AND MT.STATUS = 1\n" +
                                "GROUP BY MT.VOUCHER_ID\n" +
                                "ORDER BY MT.VOUCHER_DATE, MT.VOUCHER_ID, MT.VOUCHER_NO, VT.SEQUENCE_NO) REC, (SELECT @Row1:=0) RowNum) T1\n" + //On 27/04/2021, to have proper Voucher Entry Order
                                "LEFT OUTER JOIN (\n" +
                                "SELECT @Row2:=@Row2+1 AS ROW2, PAY_VOUCHER_ID, PAY_LED_ID, PAY_DATE, PAY_VNO, VOUCHER_PAYMENT_SUB_TYPE, PAY_CODE,\n" +
                                "PAYMENT, PAY_CASH, PAY_BANK, PAY_ACCOUNT_NUMBER,\n" +
                                "NARRATION_PAY\n" +
                                "FROM\n" +
                                "(SELECT MT.VOUCHER_ID AS PAY_VOUCHER_ID, VT.LEDGER_ID AS PAY_LED_ID, MT.VOUCHER_DATE AS PAY_DATE, MT.VOUCHER_NO AS PAY_VNO,\n" +
                                "MT.VOUCHER_SUB_TYPE AS VOUCHER_PAYMENT_SUB_TYPE, \n" +
                                "CASE WHEN CASHBANK.CASH >0 AND MT.VOUCHER_TYPE='CN' THEN VTCH.LEDGER_CODE\n" +
                                "WHEN CASHBANK.BANK >0 AND MT.VOUCHER_TYPE='CN' THEN VTCH.LEDGER_CODE\n" +
                                "ELSE ML.LEDGER_CODE END AS PAY_CODE, \n" +
                                "CASE WHEN CASHBANK.CASH >0 AND MT.VOUCHER_TYPE='CN' THEN CONCAT(VTCH.LEDGER_NAME, IF(MT.VOUCHER_SUB_TYPE='GN', ' (CASH DEPOSIT)', ''))\n" +
                                "WHEN CASHBANK.BANK >0 AND MT.VOUCHER_TYPE='CN' THEN CONCAT(VTCH.LEDGER_NAME, IF(MT.VOUCHER_SUB_TYPE='GN','(CASH WITHDRAWAL)', ''))\n" +
                                "ELSE GROUP_CONCAT(ML.LEDGER_NAME) END PAYMENT, \n" +
                                "CASHBANK.CASH AS PAY_CASH, CASHBANK.BANK AS PAY_BANK, CASHBANK.ACCOUNT_NUMBER AS PAY_ACCOUNT_NUMBER,\n" +
                                "CONCAT(MT.NARRATION, IF(MT.VOUCHER_SUB_TYPE = 'FD', CONCAT(' FD: ', FD.FD_ACCOUNT_NUMBER),'') ) AS NARRATION_PAY\n" +
                                "FROM VOUCHER_MASTER_TRANS MT\n" +
                                "INNER JOIN VOUCHER_TRANS VT ON MT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                "JOIN\n" +
                                "(SELECT MT.VOUCHER_ID, VT.LEDGER_ID, VT.CHEQUE_NO,\n" +
                                "CASE WHEN ML.GROUP_ID = 13 THEN SUM(VT.AMOUNT) ELSE 0 END AS CASH, VT.TRANS_MODE,\n" +
                                "CASE WHEN ML.GROUP_ID = 12 THEN SUM(VT.AMOUNT) ELSE 0 END AS BANK,\n" +
                                "IFNULL(MBA.ACCOUNT_NUMBER,' ') AS ACCOUNT_NUMBER\n" +
                                "FROM VOUCHER_MASTER_TRANS MT\n" +
                                "INNER JOIN VOUCHER_TRANS VT ON MT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                "LEFT JOIN MASTER_BANK_ACCOUNT MBA ON MBA.LEDGER_ID=VT.LEDGER_ID\n" +
                                "LEFT JOIN MASTER_BANK MB ON MB.BANK_ID=MBA.BANK_ID\n" +
                                "WHERE ((MT.VOUCHER_TYPE = 'PY') OR (MT.VOUCHER_TYPE = 'CN' AND VT.TRANS_MODE='CR') )\n" +
                                "AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "AND ML.GROUP_ID IN (12, 13) AND MT.STATUS = 1\n" +
                                "GROUP BY VT.VOUCHER_ID) AS CASHBANK ON CASHBANK.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "LEFT JOIN (SELECT VT.VOUCHER_ID, ML.LEDGER_ID, ML.LEDGER_CODE, ML.LEDGER_NAME, VT.AMOUNT, VT.TRANS_MODE\n" +
                                "              FROM VOUCHER_TRANS VT\n" +
                                "              INNER JOIN MASTER_LEDGER ML ON VT.LEDGER_ID = ML.LEDGER_ID WHERE TRANS_MODE='DR') AS VTCH ON VTCH.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "                 LEFT JOIN (SELECT FDA.FD_ACCOUNT_ID, 0 AS VOUCHER_ID, RNO.FD_INTEREST_VOUCHER_ID, RNO.FD_VOUCHER_ID,\n" +
                                "                       RNO.RENEWAL_DATE, IFNULL(RNO.RECEIPT_NO,'') AS RECEIPT_NO,\n" +
                                "                       CONCAT(FDA.FD_ACCOUNT_NUMBER,  IF(IFNULL(RNO.RECEIPT_NO,'')='', '', CONCAT(' (R: ', IFNULL(RNO.RECEIPT_NO,''),')')) ) AS FD_ACCOUNT_NUMBER\n" +
                                "                       FROM FD_ACCOUNT AS FDA\n" +
                                "                       INNER JOIN (SELECT FR.FD_ACCOUNT_ID, FR.FD_INTEREST_VOUCHER_ID, FR.FD_VOUCHER_ID,FR.RENEWAL_DATE, \n" +
                                "                       SUBSTRING_INDEX(GROUP_CONCAT(FR1.RECEIPT_NO ORDER BY FR1.RENEWAL_DATE DESC SEPARATOR '|'), '|', 1) AS RECEIPT_NO \n" +
                                "                       FROM FD_RENEWAL AS FR\n" +
                                "                       LEFT JOIN (SELECT FR1.FD_ACCOUNT_ID, FR1.RENEWAL_DATE AS RENEWAL_DATE, IFNULL(FR1.RECEIPT_NO, '') AS RECEIPT_NO\n" +
                                "                       FROM FD_RENEWAL AS FR1\n" +
                                "                       INNER JOIN FD_ACCOUNT FD1 ON FD1.FD_ACCOUNT_ID = FR1.FD_ACCOUNT_ID\n" +
                                "                       WHERE FD1.STATUS =1 AND FD1.PROJECT_ID IN (?PROJECT_ID) AND FR1.STATUS =1 AND FR1.FD_TYPE = 'RN' AND FR1.RENEWAL_DATE<=?DATE_TO) AS FR1\n" +
                                "                         ON FR1.FD_ACCOUNT_ID= FR.FD_ACCOUNT_ID AND FR1.RENEWAL_DATE<FR.RENEWAL_DATE\n" +
                                "                         WHERE STATUS =1 GROUP BY FR.FD_ACCOUNT_ID, FR.FD_RENEWAL_ID) AS RNO\n" + //FR1.RENEWAL_DATE
                                "                           ON RNO.FD_ACCOUNT_ID = FDA.FD_ACCOUNT_ID WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                       UNION ALL SELECT FDA.FD_ACCOUNT_ID, FDA.FD_VOUCHER_ID, 0 AS FD_INTEREST_VOUCHER_ID, 0 AS FD_VOUCHER_ID, FDA.INVESTMENT_DATE, '' AS RECEIPT_NO, \n" +
                                "                       FDA.FD_ACCOUNT_NUMBER FROM FD_ACCOUNT AS FDA WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)) AS FD\n" +
                                "                 ON FD.VOUCHER_ID = MT.VOUCHER_ID OR FD.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID OR FD.FD_VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "WHERE (MT.VOUCHER_TYPE = 'PY' OR (MT.VOUCHER_TYPE = 'CN' AND VT.TRANS_MODE='CR')) AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "AND ( CASE WHEN VOUCHER_TYPE = 'PY' THEN ML.GROUP_ID NOT IN (12, 13)\n" +
                                "            WHEN VOUCHER_TYPE = 'CN' THEN ML.GROUP_ID IN (12, 13) END ) AND MT.STATUS = 1\n" +
                                "GROUP BY MT.VOUCHER_ID\n" +
                                "ORDER BY MT.VOUCHER_DATE, MT.VOUCHER_ID, MT.VOUCHER_NO, VT.SEQUENCE_NO) PAY, (SELECT @Row2:=0) RowNum) AS T2 ON ROW1 = ROW2;"; //On 27/04/2021, to have proper Voucher Entry Order

                        break;
                    }
                case ReportSQLCommand.BankReport.CashBankBookManual1: //Join Extra vouchers from Payments
                    {
                        query = "SELECT * FROM\n" +
                                 "(SELECT @Row1:=@Row1+1 AS ROW1, VOUCHER_ID, LEDGER_ID, DATE, RECEIPT_NO, VOUCHER_SUB_TYPE, LEDGER_CODE, RECEIPT, CASH,\n" +
                                 "BANK, NARRATION\n" +
                                 "FROM (SELECT MT.VOUCHER_ID, VT.LEDGER_ID, MT.VOUCHER_DATE AS DATE, MT.VOUCHER_NO AS RECEIPT_NO,\n" +
                                 "MT.VOUCHER_SUB_TYPE AS VOUCHER_SUB_TYPE, ML.LEDGER_CODE,\n" +
                                 "CASE WHEN CASHBANK.CASH > 0 AND MT.VOUCHER_TYPE = 'CN' THEN CONCAT(ML.LEDGER_NAME, IF(MT.VOUCHER_SUB_TYPE='GN', ' (CASH WITHDRAWAL)', '' ) )\n" +
                            //" WHEN CASHBANK.BANK > 0 AND MT.VOUCHER_TYPE = 'CN' THEN CONCAT(ML.LEDGER_NAME , IF(MT.VOUCHER_SUB_TYPE='GN', ' (CASH DEPOSIT)', '') )\n" +
                                 " WHEN CASHBANK.BANK > 0 AND MT.VOUCHER_TYPE = 'CN' THEN CONCAT(VTCH.LEDGER_NAME , IF(MT.VOUCHER_SUB_TYPE='GN', ' (CASH DEPOSIT)',  CONCAT(', ', GROUP_CONCAT(ML.LEDGER_NAME)) ) )\n" +
                                 " ELSE GROUP_CONCAT(ML.LEDGER_NAME) END AS RECEIPT , \n" +
                                 "CASHBANK.CASH AS CASH, CASHBANK.BANK AS BANK,\n" +
                                 "CASHBANK.ACCOUNT_NUMBER AS ACCOUNT_NUMBER, CONCAT(MT.NARRATION, IF(MT.VOUCHER_SUB_TYPE = 'FD', CONCAT(' FD: ', FD.FD_ACCOUNT_NUMBER),'') ) AS NARRATION\n" +
                                 "FROM VOUCHER_MASTER_TRANS MT\n" +
                                 "INNER JOIN VOUCHER_TRANS VT ON MT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                 "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                 "JOIN\n" +
                                 "(SELECT MT.VOUCHER_ID, VT.LEDGER_ID, VT.CHEQUE_NO,\n" +
                                 "CASE WHEN ML.GROUP_ID = 13 THEN SUM(VT.AMOUNT) ELSE 0 END AS CASH, VT.TRANS_MODE,\n" +
                                 "CASE WHEN ML.GROUP_ID = 12 THEN SUM(VT.AMOUNT) ELSE 0 END AS BANK,\n" +
                                 "IFNULL(MBA.ACCOUNT_NUMBER,' ') AS ACCOUNT_NUMBER\n" +
                                 "FROM VOUCHER_MASTER_TRANS MT\n" +
                                 "INNER JOIN VOUCHER_TRANS VT ON MT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                 "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                 "LEFT JOIN MASTER_BANK_ACCOUNT MBA ON MBA.LEDGER_ID=VT.LEDGER_ID\n" +
                                 "LEFT JOIN MASTER_BANK MB ON MB.BANK_ID=MBA.BANK_ID\n" +
                                 "WHERE ((MT.VOUCHER_TYPE = 'RC') OR (MT.VOUCHER_TYPE = 'CN' AND VT.TRANS_MODE='DR') )\n" +
                                 "AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                 "AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                 "AND ML.GROUP_ID IN (12, 13) AND MT.STATUS = 1\n" +
                                 "GROUP BY VT.VOUCHER_ID) AS CASHBANK ON CASHBANK.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                 "LEFT JOIN (SELECT VT.VOUCHER_ID, ML.LEDGER_ID, ML.LEDGER_CODE, ML.LEDGER_NAME, VT.AMOUNT, VT.TRANS_MODE\n" +
                                 "              FROM VOUCHER_TRANS VT\n" +
                                 "              INNER JOIN MASTER_LEDGER ML ON VT.LEDGER_ID = ML.LEDGER_ID WHERE TRANS_MODE='CR') AS VTCH ON VTCH.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                 "                 LEFT JOIN (SELECT FDA.FD_ACCOUNT_ID, 0 AS VOUCHER_ID, RNO.FD_INTEREST_VOUCHER_ID, RNO.FD_VOUCHER_ID,\n" +
                                 "                       RNO.RENEWAL_DATE, IFNULL(RNO.RECEIPT_NO,'') AS RECEIPT_NO,\n" +
                                 "                       CONCAT(FDA.FD_ACCOUNT_NUMBER,  IF(IFNULL(RNO.RECEIPT_NO,'')='', '', CONCAT(' (R: ', IFNULL(RNO.RECEIPT_NO,''),')')) ) AS FD_ACCOUNT_NUMBER\n" +
                                 "                       FROM FD_ACCOUNT AS FDA\n" +
                                 "                       INNER JOIN (SELECT FR.FD_ACCOUNT_ID, FR.FD_INTEREST_VOUCHER_ID, FR.FD_VOUCHER_ID,FR.RENEWAL_DATE, \n" +
                                 "                       SUBSTRING_INDEX(GROUP_CONCAT(FR1.RECEIPT_NO ORDER BY FR1.RENEWAL_DATE DESC SEPARATOR '|'), '|', 1) AS RECEIPT_NO \n" +
                                 "                       FROM FD_RENEWAL AS FR\n" +
                                 "                       LEFT JOIN (SELECT FR1.FD_ACCOUNT_ID, FR1.RENEWAL_DATE AS RENEWAL_DATE, IFNULL(FR1.RECEIPT_NO, '') AS RECEIPT_NO\n" +
                                 "                       FROM FD_RENEWAL AS FR1\n" +
                                 "                       INNER JOIN FD_ACCOUNT FD1 ON FD1.FD_ACCOUNT_ID = FR1.FD_ACCOUNT_ID\n" +
                                 "                       WHERE FD1.STATUS =1 AND FD1.PROJECT_ID IN (?PROJECT_ID) AND FR1.STATUS =1 AND FR1.FD_TYPE = 'RN' AND FR1.RENEWAL_DATE<=?DATE_TO) AS FR1\n" +
                                 "                         ON FR1.FD_ACCOUNT_ID= FR.FD_ACCOUNT_ID AND FR1.RENEWAL_DATE<FR.RENEWAL_DATE\n" +
                                 "                         WHERE STATUS =1 GROUP BY FR.FD_ACCOUNT_ID, FR.FD_RENEWAL_ID) AS RNO\n" + //FR1.RENEWAL_DATE
                                 "                           ON RNO.FD_ACCOUNT_ID = FDA.FD_ACCOUNT_ID WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)\n" +
                                 "                       UNION ALL SELECT FDA.FD_ACCOUNT_ID, FDA.FD_VOUCHER_ID, 0 AS FD_INTEREST_VOUCHER_ID, 0 AS FD_VOUCHER_ID, FDA.INVESTMENT_DATE, '' AS RECEIPT_NO, \n" +
                                 "                       FDA.FD_ACCOUNT_NUMBER FROM FD_ACCOUNT AS FDA WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)) AS FD\n" +
                                 "                 ON FD.VOUCHER_ID = MT.VOUCHER_ID OR FD.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID OR FD.FD_VOUCHER_ID = MT.VOUCHER_ID\n" +
                                 "WHERE (MT.VOUCHER_TYPE = 'RC' OR (MT.VOUCHER_TYPE = 'CN' AND VT.TRANS_MODE='DR')) AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                 "AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                 "AND ( CASE WHEN VOUCHER_TYPE = 'RC' THEN ML.GROUP_ID NOT IN (12, 13)\n" +
                                 "            WHEN VOUCHER_TYPE = 'CN' AND VOUCHER_SUB_TYPE='FD' THEN ML.GROUP_ID NOT IN (14, 12)\n" +
                                 "            WHEN VOUCHER_TYPE = 'CN' AND VOUCHER_SUB_TYPE='GN' THEN ML.GROUP_ID IN (12, 13) END ) AND MT.STATUS = 1\n" +
                                 "GROUP BY MT.VOUCHER_ID\n" +
                                 "ORDER BY MT.VOUCHER_DATE, MT.VOUCHER_ID, MT.VOUCHER_NO, VT.SEQUENCE_NO) REC, (SELECT @Row1:=0) RowNum) T1\n" + //On 27/04/2021, to have proper Voucher Entry Order
                                 "RIGHT OUTER JOIN (\n" +
                                 "SELECT @Row2:=@Row2+1 AS ROW2, PAY_VOUCHER_ID, PAY_LED_ID, PAY_DATE, PAY_VNO, VOUCHER_PAYMENT_SUB_TYPE, PAY_CODE,\n" +
                                 "PAYMENT, PAY_CASH, PAY_BANK, PAY_ACCOUNT_NUMBER, NARRATION_PAY\n" +
                                 "FROM\n" +
                                 "(SELECT MT.VOUCHER_ID AS PAY_VOUCHER_ID, VT.LEDGER_ID AS PAY_LED_ID, MT.VOUCHER_DATE AS PAY_DATE, MT.VOUCHER_NO AS PAY_VNO,\n" +
                                 "MT.VOUCHER_SUB_TYPE AS VOUCHER_PAYMENT_SUB_TYPE, ML.LEDGER_CODE AS PAY_CODE, \n" +
                                 "CASE WHEN CASHBANK.CASH >0 AND MT.VOUCHER_TYPE='CN' THEN CONCAT(ML.LEDGER_NAME, IF(MT.VOUCHER_SUB_TYPE='GN', ' (CASH DEPOSIT)', '' ))\n" +
                                 "WHEN CASHBANK.BANK >0 AND MT.VOUCHER_TYPE='CN' THEN CONCAT(ML.LEDGER_NAME, IF(MT.VOUCHER_SUB_TYPE='GN',' (CASH WITHDRAWAL)', '') )\n" +
                                 "ELSE GROUP_CONCAT(ML.LEDGER_NAME) END PAYMENT, \n" +
                                 "CASHBANK.CASH AS PAY_CASH, CASHBANK.BANK AS PAY_BANK, CASHBANK.ACCOUNT_NUMBER AS PAY_ACCOUNT_NUMBER, CONCAT(MT.NARRATION, IF(MT.VOUCHER_SUB_TYPE = 'FD', CONCAT(' FD: ', FD.FD_ACCOUNT_NUMBER),'') ) AS NARRATION_PAY\n" +
                                 "FROM VOUCHER_MASTER_TRANS MT\n" +
                                 "INNER JOIN VOUCHER_TRANS VT ON MT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                 "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                 "JOIN\n" +
                                 "(SELECT MT.VOUCHER_ID, VT.LEDGER_ID, VT.CHEQUE_NO,\n" +
                                 "CASE WHEN ML.GROUP_ID = 13 THEN SUM(VT.AMOUNT) ELSE 0 END AS CASH, VT.TRANS_MODE,\n" +
                                 "CASE WHEN ML.GROUP_ID = 12 THEN SUM(VT.AMOUNT) ELSE 0 END AS BANK,\n" +
                                 "IFNULL(MBA.ACCOUNT_NUMBER,' ') AS ACCOUNT_NUMBER\n" +
                                 "FROM VOUCHER_MASTER_TRANS MT\n" +
                                 "INNER JOIN VOUCHER_TRANS VT ON MT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                 "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                 "LEFT JOIN MASTER_BANK_ACCOUNT MBA ON MBA.LEDGER_ID=VT.LEDGER_ID\n" +
                                 "LEFT JOIN MASTER_BANK MB ON MB.BANK_ID=MBA.BANK_ID\n" +
                                 "WHERE ((MT.VOUCHER_TYPE = 'PY') OR (MT.VOUCHER_TYPE = 'CN' AND VT.TRANS_MODE='CR') )\n" +
                                 "AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                 "AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                 "AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                 "AND ML.GROUP_ID IN (12, 13) AND MT.STATUS = 1\n" +
                                 "GROUP BY VT.VOUCHER_ID) AS CASHBANK ON CASHBANK.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                 "LEFT JOIN (SELECT VT.VOUCHER_ID, ML.LEDGER_ID, ML.LEDGER_CODE, ML.LEDGER_NAME, VT.AMOUNT, VT.TRANS_MODE\n" +
                                 "              FROM VOUCHER_TRANS VT\n" +
                                 "              INNER JOIN MASTER_LEDGER ML ON VT.LEDGER_ID = ML.LEDGER_ID WHERE TRANS_MODE='DR') AS VTCH ON VTCH.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                 "                 LEFT JOIN (SELECT FDA.FD_ACCOUNT_ID, 0 AS VOUCHER_ID, RNO.FD_INTEREST_VOUCHER_ID, RNO.FD_VOUCHER_ID,\n" +
                                 "                       RNO.RENEWAL_DATE, IFNULL(RNO.RECEIPT_NO,'') AS RECEIPT_NO,\n" +
                                 "                       CONCAT(FDA.FD_ACCOUNT_NUMBER,  IF(IFNULL(RNO.RECEIPT_NO,'')='', '', CONCAT(' (R: ', IFNULL(RNO.RECEIPT_NO,''),')')) ) AS FD_ACCOUNT_NUMBER\n" +
                                 "                       FROM FD_ACCOUNT AS FDA\n" +
                                 "                       INNER JOIN (SELECT FR.FD_ACCOUNT_ID, FR.FD_INTEREST_VOUCHER_ID, FR.FD_VOUCHER_ID,FR.RENEWAL_DATE, \n" +
                                 "                       SUBSTRING_INDEX(GROUP_CONCAT(FR1.RECEIPT_NO ORDER BY FR1.RENEWAL_DATE DESC SEPARATOR '|'), '|', 1) AS RECEIPT_NO \n" +
                                 "                       FROM FD_RENEWAL AS FR\n" +
                                 "                       LEFT JOIN (SELECT FR1.FD_ACCOUNT_ID, FR1.RENEWAL_DATE AS RENEWAL_DATE, IFNULL(FR1.RECEIPT_NO, '') AS RECEIPT_NO\n" +
                                 "                       FROM FD_RENEWAL AS FR1\n" +
                                 "                       INNER JOIN FD_ACCOUNT FD1 ON FD1.FD_ACCOUNT_ID = FR1.FD_ACCOUNT_ID\n" +
                                 "                       WHERE FD1.STATUS =1 AND FD1.PROJECT_ID IN (?PROJECT_ID) AND FR1.STATUS =1 AND FR1.FD_TYPE = 'RN' AND FR1.RENEWAL_DATE<=?DATE_TO) AS FR1\n" +
                                 "                         ON FR1.FD_ACCOUNT_ID= FR.FD_ACCOUNT_ID AND FR1.RENEWAL_DATE<FR.RENEWAL_DATE\n" +
                                 "                         WHERE STATUS =1 GROUP BY FR.FD_ACCOUNT_ID, FR.FD_RENEWAL_ID) AS RNO\n" + //FR1.RENEWAL_DATE
                                 "                           ON RNO.FD_ACCOUNT_ID = FDA.FD_ACCOUNT_ID WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)\n" +
                                 "                       UNION ALL SELECT FDA.FD_ACCOUNT_ID, FDA.FD_VOUCHER_ID, 0 AS FD_INTEREST_VOUCHER_ID, 0 AS FD_VOUCHER_ID, FDA.INVESTMENT_DATE, '' AS RECEIPT_NO, \n" +
                                 "                       FDA.FD_ACCOUNT_NUMBER FROM FD_ACCOUNT AS FDA WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)) AS FD\n" +
                                 "                 ON FD.VOUCHER_ID = MT.VOUCHER_ID OR FD.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID OR FD.FD_VOUCHER_ID = MT.VOUCHER_ID\n" +
                                 "WHERE (MT.VOUCHER_TYPE = 'PY' OR (MT.VOUCHER_TYPE = 'CN' AND VT.TRANS_MODE='CR')) AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                 "AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                 "AND ( CASE WHEN VOUCHER_TYPE = 'PY' THEN ML.GROUP_ID NOT IN (12, 13)\n" +
                                 "            WHEN VOUCHER_TYPE = 'CN' THEN ML.GROUP_ID IN (12, 13) END ) AND MT.STATUS = 1\n" +
                                 "GROUP BY MT.VOUCHER_ID\n" +
                                 "ORDER BY MT.VOUCHER_DATE, MT.VOUCHER_ID, MT.VOUCHER_NO, VT.SEQUENCE_NO) PAY, (SELECT @Row2:=0) RowNum) AS T2 ON ROW1 = ROW2 \n" + //On 27/04/2021, to have proper Voucher Entry Order
                                 "WHERE ROW1 IS NULL";

                        break;
                    }
                case ReportSQLCommand.BankReport.CashBankBookManualReceipts:
                    {
                        query = "SELECT MT.VOUCHER_ID, VT.LEDGER_ID, MT.VOUCHER_DATE AS DATE, MT.VOUCHER_NO AS RECEIPT_NO,\n" +
                                    "MT.VOUCHER_SUB_TYPE AS VOUCHER_SUB_TYPE, ML.LEDGER_CODE, ML.LEDGER_NAME AS RECEIPT, CASHBANK.CASH AS CASH, CASHBANK.BANK AS BANK,\n" +
                                    "CASHBANK.ACCOUNT_NUMBER AS ACCOUNT_NUMBER, MT.NARRATION AS NARRATION\n" +
                                    "FROM VOUCHER_MASTER_TRANS MT\n" +
                                    "INNER JOIN VOUCHER_TRANS VT ON MT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                    "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                    "JOIN\n" +
                                    "(SELECT MT.VOUCHER_ID, VT.LEDGER_ID, VT.CHEQUE_NO,\n" +
                                    "CASE WHEN ML.GROUP_ID = 13 THEN (VT.AMOUNT) ELSE 0 END AS CASH, VT.TRANS_MODE,\n" +
                                    "CASE WHEN ML.GROUP_ID = 12 THEN (VT.AMOUNT) ELSE 0 END AS BANK,\n" +
                                    "IFNULL(MBA.ACCOUNT_NUMBER,' ') AS ACCOUNT_NUMBER\n" +
                                    "FROM VOUCHER_MASTER_TRANS MT\n" +
                                    "INNER JOIN VOUCHER_TRANS VT ON MT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                    "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                    "LEFT JOIN MASTER_BANK_ACCOUNT MBA ON MBA.LEDGER_ID=VT.LEDGER_ID\n" +
                                    "LEFT JOIN MASTER_BANK MB ON MB.BANK_ID=MBA.BANK_ID\n" +
                                    "WHERE ((MT.VOUCHER_TYPE = 'RC') OR (MT.VOUCHER_TYPE = 'CN' AND VT.TRANS_MODE='DR') )\n" +
                                    "AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                    "AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                    "AND ML.GROUP_ID IN (12, 13)AND MT.STATUS = 1\n" +
                                    "GROUP BY VT.VOUCHER_ID) AS CASHBANK ON CASHBANK.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                    "WHERE (MT.VOUCHER_TYPE = 'RC' OR (MT.VOUCHER_TYPE = 'CN' AND VT.TRANS_MODE='DR')) AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                    "AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                    "AND ( CASE WHEN VOUCHER_TYPE = 'RC' THEN ML.GROUP_ID NOT IN (12, 13)\n" +
                                    "            WHEN VOUCHER_TYPE = 'CN' THEN ML.GROUP_ID IN (12, 13) END ) AND MT.STATUS = 1\n" +
                                    "GROUP BY MT.VOUCHER_ID\n" +
                                    "ORDER BY MT.VOUCHER_DATE, MT.VOUCHER_NO, VT.SEQUENCE_NO";
                        break;
                    }
                case ReportSQLCommand.BankReport.CashBankBookManualPayments:
                    {
                        query = "SELECT MT.VOUCHER_ID AS PAY_VOUCHER_ID, VT.LEDGER_ID AS PAY_LED_ID, MT.VOUCHER_DATE AS PAY_DATE, MT.VOUCHER_NO AS PAY_VNO,\n" +
                                    "MT.VOUCHER_SUB_TYPE AS VOUCHER_PAYMENT_SUB_TYPE, ML.LEDGER_CODE AS PAY_CODE, ML.LEDGER_NAME AS PAYMENT,\n" +
                                    "CASHBANK.CASH AS PAY_CASH, CASHBANK.BANK AS PAY_BANK, CASHBANK.ACCOUNT_NUMBER AS PAY_ACCOUNT_NUMBER, MT.NARRATION AS NARRATION_PAY\n" +
                                    "FROM VOUCHER_MASTER_TRANS MT\n" +
                                    "INNER JOIN VOUCHER_TRANS VT ON MT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                    "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                    "JOIN\n" +
                                    "(SELECT MT.VOUCHER_ID, VT.LEDGER_ID, VT.CHEQUE_NO,\n" +
                                    "CASE WHEN ML.GROUP_ID = 13 THEN (VT.AMOUNT) ELSE 0 END AS CASH, VT.TRANS_MODE,\n" +
                                    "CASE WHEN ML.GROUP_ID = 12 THEN (VT.AMOUNT) ELSE 0 END AS BANK,\n" +
                                    "IFNULL(MBA.ACCOUNT_NUMBER,' ') AS ACCOUNT_NUMBER\n" +
                                    "FROM VOUCHER_MASTER_TRANS MT\n" +
                                    "INNER JOIN VOUCHER_TRANS VT ON MT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                    "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                    "LEFT JOIN MASTER_BANK_ACCOUNT MBA ON MBA.LEDGER_ID=VT.LEDGER_ID\n" +
                                    "LEFT JOIN MASTER_BANK MB ON MB.BANK_ID=MBA.BANK_ID\n" +
                                    "WHERE ((MT.VOUCHER_TYPE = 'PY') OR (MT.VOUCHER_TYPE = 'CN' AND VT.TRANS_MODE='CR') )\n" +
                                    "AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                    "AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                    "AND ML.GROUP_ID IN (12, 13) AND MT.STATUS = 1\n" +
                                    "GROUP BY VT.VOUCHER_ID) AS CASHBANK ON CASHBANK.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                    "WHERE (MT.VOUCHER_TYPE = 'PY' OR (MT.VOUCHER_TYPE = 'CN' AND VT.TRANS_MODE='CR')) AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                    "AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                    "AND ( CASE WHEN VOUCHER_TYPE = 'PY' THEN ML.GROUP_ID NOT IN (12, 13)\n" +
                                    "            WHEN VOUCHER_TYPE = 'CN' THEN ML.GROUP_ID IN (12, 13) END ) AND MT.STATUS = 1\n" +
                                    "GROUP BY MT.VOUCHER_ID\n" +
                                    "ORDER BY MT.VOUCHER_DATE, MT.VOUCHER_NO, VT.SEQUENCE_NO";
                        break;
                    }
                #endregion

                #region Cash Journal
                case ReportSQLCommand.BankReport.CashJournal:
                    {
                        query = "SELECT TT.VOUCHER_ID,TT.VOUCHER_SUB_TYPE, TT.VOUCHER_TYPE," +
                               "TT.DATE,CONCAT(DATE_FORMAT(TT.DATE, '%b') , CONCAT(' '  , DATE_FORMAT(TT.DATE, '%Y'))) MONTH_YEAR_NAME," +
                               "DATE_FORMAT(TT.DATE,'%Y - %m') MONTH_YEAR," +
                               "TT.VOUCHER_NO," +
                               "TT.LEDGER_CODE," +
                               "TT.CHEQUE_NO," +
                               "TT.LEDGER," +
                               "@prow_num := IF(@pprev_value = TT.VOUCHER_ID, @prow_num + 1, 1) AS sort_id1," +
                               "@pprev_value := TT.VOUCHER_ID as v1," +
                               "TT.RECEIPT," +
                               "TT.PAYMENT," +
                               " CONCAT(TT.NARRATION, IF(TT.VOUCHER_SUB_TYPE='FD', CONCAT(' FD: ', FD.FD_ACCOUNT_NUMBER), '') ) AS NARRATION" +
                        " FROM (" +
                        "SELECT MT.VOUCHER_ID,\n" +
                        "       MT.VOUCHER_SUB_TYPE, MT.VOUCHER_TYPE,\n" +
                        "       MT.VOUCHER_DATE AS DATE,\n" +
                        "       MT.VOUCHER_NO,\n" +
                        "       ML.LEDGER_CODE,\n" +
                        "       CHEQUE_NO,\n" +
                        "       ML.LEDGER_NAME AS LEDGER,\n" +
                        "       @rrow_num := IF(@rprev_value = MT.VOUCHER_ID, @rrow_num + 1, 1) AS sort_id1,\n" +
                        "       @rprev_value := MT.VOUCHER_ID as v1,\n" +
                        "       SUM(IF(VT.TRANS_MODE = 'DR', IF(T.CASH=0, 0, -VT.AMOUNT),  VT.AMOUNT)) AS RECEIPT,\n" + // multiple entries are summed (chinna)
                        "       SUM(IF(T.CASH = 0 AND VT.TRANS_MODE = 'DR', VT.AMOUNT, 0)) AS PAYMENT,\n" +
                        "     --  CONCAT(IFNULL(MT.NARRATION,''),\n" +
                        "     CONCAT(CONCAT(CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION),''),IF(FDR.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',' '),FDR.TDS_AMOUNT), '')),\n" +
                        "     IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(MT.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', MT.NAME_ADDRESS),''),''),\n" +
                        "     IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(CHEQUE_NO,'')) > 0,CONCAT(' -- ', CHEQUE_NO),''),''),\n" +
                        "     IF(1= ?INCLUDE_NARRATION_CURRENCY AND MT.EXCHANGE_COUNTRY_ID>0, CONCAT(' (Currency Details : ', IFNULL(MCE.CURRENCY_NAME, ''), ' ', MT.CONTRIBUTION_AMOUNT, '@',MT.EXCHANGE_RATE, ')'),'')) AS NARRATION\n" +
                        "\n" +
                        "  FROM MASTER_LEDGER_GROUP LG\n" +
                        "\n" +
                        "  LEFT JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "  LEFT JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "  LEFT JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "  LEFT JOIN FD_RENEWAL FDR ON FDR.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "  LEFT JOIN MASTER_COUNTRY MCE ON MCE.COUNTRY_ID = MT.EXCHANGE_COUNTRY_ID\n" +
                        "  JOIN (SELECT CASHBANK.VOUCHER_ID,\n" +
                        "               CASHBANK.VOUCHER_SUB_TYPE,\n" +
                        "               CASHBANK.LEDGER_ID,\n" +
                        "               CASHBANK.CASH,\n" +
                        "               CASHBANK.LEDGER_CODE\n" +
                        "          FROM (SELECT VT.VOUCHER_ID,\n" +
                        "                       MT.VOUCHER_SUB_TYPE,\n" +
                        "                       VT.LEDGER_ID,\n" +
                        "                       ML.LEDGER_CODE,\n" +
                        "                       CASE\n" +
                        "                         WHEN LG.GROUP_ID = 13 THEN\n" +
                        "                          SUM(VT.AMOUNT)\n" +
                        "                         ELSE\n" +
                        "                          0\n" +
                        "                       END AS CASH\n" +
                        "\n" +
                        "                  FROM MASTER_LEDGER_GROUP LG\n" +
                        "\n" +
                        "                  LEFT JOIN MASTER_LEDGER ML\n" +
                        "                    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "                  LEFT JOIN VOUCHER_TRANS VT\n" +
                        "                    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "                  LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                        "                    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "                 WHERE (MT.VOUCHER_TYPE IN ('RC', 'PY') OR (MT.VOUCHER_TYPE IN ('JN') OR VT.TRANS_MODE ='CR' AND IS_CASH_BANK_STATUS=1))\n" +
                        "    AND mt.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO \n" +
                        "                   AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "                    {   AND ML.LEDGER_ID IN (?LEDGER_ID)\n}" +
                        "                   AND MT.STATUS = 1\n" +
                        "                 GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID\n" +
                        "                 ORDER BY VT.VOUCHER_ID, VT.SEQUENCE_NO) AS CASHBANK\n" +
                        "         GROUP BY CASHBANK.VOUCHER_ID) AS T\n" +
                        "    ON MT.VOUCHER_ID = T.VOUCHER_ID, (SELECT @rrow_num := 1) x1,\n" +
                        " (SELECT @rprev_value := null) y1\n" +
                        " WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   AND (MT.VOUCHER_TYPE IN ('RC') OR (MT.VOUCHER_TYPE IN ('JN') AND VT.TRANS_MODE ='CR' AND IS_CASH_BANK_STATUS=1))\n" +
                        "   AND VT.TRANS_MODE IN('CR','DR')\n" +
                        "   AND MT.STATUS = 1\n" +
                        "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "   AND LG.GROUP_ID NOT IN (13)\n" +
                        " GROUP BY MT.VOUCHER_DATE, VT.VOUCHER_ID, IF(?SHOW_INDIVIDUAL_LEDGER=1, VT.SEQUENCE_NO, IF(?CONSOLIDATED=0,VT.LEDGER_ID,''))\n" +
                        "\n" +
                        "UNION ALL\n" +  // This is for Payment Entry
                        "\n" +
                        "SELECT MT.VOUCHER_ID,\n" +
                        "       MT.VOUCHER_SUB_TYPE,MT.VOUCHER_TYPE,\n" +
                        "       MT.VOUCHER_DATE AS DATE,\n" +
                        "       MT.VOUCHER_NO,\n" +
                        "       ML.LEDGER_CODE,\n" +
                        "       CHEQUE_NO,\n" +
                        "       ML.LEDGER_NAME,\n" +
                        "\n" +
                        "       @prow_num := IF(@pprev_value = MT.VOUCHER_ID, @prow_num + 1, 1) AS sort_id1,\n" +
                        "       @pprev_value := MT.VOUCHER_ID as v1,\n" +
                        "       SUM(IF(T.CASH = 0 AND VT.TRANS_MODE = 'CR', VT.AMOUNT, 0)) AS RECEIPT,\n" +
                        "       SUM(IF(VT.TRANS_MODE = 'CR', IF(T.CASH=0, 0, -VT.AMOUNT),  VT.AMOUNT)) AS PAYMENT,\n" + // Multiple entries are summed (chinna)
                        "     --  CONCAT(IFNULL(MT.NARRATION,''),\n" +
                        "     CONCAT(CONCAT(CONCAT(CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION),''),IF(FDR.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',''),FDR.TDS_AMOUNT), '')),\n" +
                        "     IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(MT.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', MT.NAME_ADDRESS),''),''),\n" +
                        "     IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(CHEQUE_NO,'')) > 0,CONCAT(' -- ', CHEQUE_NO),''),'')), \n" +
                        "     IF(TRIM(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION))<>'' AND TRIM(REF.REFERENCE_NUMBER)<>'',\n" +
                        "     IF(TRIM(REF.REFERENCE_NUMBER)<>'', CONCAT('-REF ' , IFNULL(REF.REFERENCE_NUMBER,'')), '') ,  IF(TRIM(REF.REFERENCE_NUMBER)<>'', CONCAT('REF ' , IFNULL(REF.REFERENCE_NUMBER,'')), '') ) )   AS NARRATION\n" +
                        "  FROM master_ledger_GROUP LG\n" +
                        "\n" +
                        "  LEFT JOIN master_ledger ML\n" +
                        "    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "  LEFT JOIN voucher_trans VT\n" +
                        "    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "  LEFT JOIN voucher_master_trans MT\n" +
                        "    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "  LEFT JOIN (SELECT VR.REC_PAY_VOUCHER_ID, VR.LEDGER_ID, GROUP_CONCAT(VT.REFERENCE_NUMBER) AS REFERENCE_NUMBER FROM VOUCHER_REFERENCE VR\n" +
                        " INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VR.REF_VOUCHER_ID AND VT.LEDGER_ID = VR.LEDGER_ID GROUP BY VR.REC_PAY_VOUCHER_ID, VR.LEDGER_ID) AS REF ON\n" +
                        " REF.REC_PAY_VOUCHER_ID = MT.VOUCHER_ID AND REF.LEDGER_ID = VT.LEDGER_ID\n" +
                        "   LEFT JOIN FD_RENEWAL FDR\n" +
                        "    ON FDR.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "\n" +
                        "  JOIN (SELECT CASHBANK.VOUCHER_ID,\n" +
                        "               CASHBANK.VOUCHER_SUB_TYPE,\n" +
                        "               CASHBANK.LEDGER_ID,\n" +
                        "               CASHBANK.CASH AS CASH,\n" +
                        "               --   CASHBANK.CASH_FLAG-- ,\n" +
                        "               --   CASHBANK.BANK_FLAG,\n" +
                        "               CASHBANK.LEDGER_CODE\n" +
                        "          FROM (SELECT VT.VOUCHER_ID,\n" +
                        "                       MT.VOUCHER_SUB_TYPE,\n" +
                        "                       VT.LEDGER_ID,\n" +
                        "                       ML.LEDGER_CODE,\n" +
                        "                       CASE\n" +
                        "                         WHEN LG.GROUP_ID = 13 THEN\n" +
                        "                          SUM(VT.AMOUNT)\n" +
                        "                         ELSE\n" +
                        "                          0\n" +
                        "                       END AS CASH\n" +
                        "\n" +
                        "                  FROM master_ledger_GROUP LG\n" +
                        "\n" +
                        "                  LEFT JOIN master_ledger ML\n" +
                        "                    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "                  LEFT JOIN voucher_trans VT\n" +
                        "                    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "                  LEFT JOIN voucher_master_trans MT\n" +
                        "                    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "                 WHERE (MT.VOUCHER_TYPE IN ('RC', 'PY') OR (MT.VOUCHER_TYPE IN ('JN') OR VT.TRANS_MODE ='DR' AND IS_CASH_BANK_STATUS=1))\n" +
                        "                   AND mt.VOUCHER_DATE BETWEEN  ?DATE_FROM AND ?DATE_TO\n" +
                        "                   AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "                  {   AND ML.LEDGER_ID IN (?LEDGER_ID)\n}" +
                        "                   AND MT.STATUS = 1\n" +
                        "                 GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID\n" +
                        "                 ORDER BY VT.VOUCHER_ID, VT.SEQUENCE_NO) AS CASHBANK\n" +
                        "         GROUP BY CASHBANK.VOUCHER_ID) AS T\n" +
                        "    ON MT.VOUCHER_ID = T.VOUCHER_ID, (SELECT @prow_num := 1) x1,\n" +
                        " (SELECT @pprev_value := null) y1\n" +
                        " WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   AND (MT.VOUCHER_TYPE IN ( 'PY') OR (MT.VOUCHER_TYPE IN ('JN') AND VT.TRANS_MODE ='DR' AND IS_CASH_BANK_STATUS=1))\n" +
                        "   AND VT.TRANS_MODE IN('CR','DR')\n" +
                        "   AND MT.STATUS = 1\n" +
                        "   AND VOUCHER_DATE  BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "   AND LG.GROUP_ID NOT IN (13)\n" +
                        " GROUP BY MT.VOUCHER_DATE, VT.VOUCHER_ID, IF(?SHOW_INDIVIDUAL_LEDGER=1, VT.SEQUENCE_NO, IF(?CONSOLIDATED=0,VT.LEDGER_ID,''))\n" +
                        "UNION\n" +   // This is Contra Credit Transaction
                        "SELECT MT.VOUCHER_ID,\n" +
                        "       MT.VOUCHER_SUB_TYPE,MT.VOUCHER_TYPE,\n" +
                        "       MT.VOUCHER_DATE AS DATE,\n" +
                        "       MT.VOUCHER_NO,\n" +
                        "       --  MCC.COST_CENTRE_NAME AS COST_CENTRE,\n" +
                        "       VTCH.LEDGER_CODE,\n" +
                        "       CHEQUE_NO,\n" +
                        "       CASE\n" +
                        "         WHEN IFNULL(SUM(VT.AMOUNT), 0) > 0 THEN\n" +
                        "          CONCAT(GROUP_CONCAT(VTCH.LEDGER_NAME ORDER BY VT.VOUCHER_ID DESC SEPARATOR ' '),\n" +
                        "              IF(?HIDE_CONTRA_NOTE=1,'', IF(VTCH.GROUP_ID = 13, '  (CASH TRANSFER)', IF(VTCH.GROUP_ID =14, '  (FD INVESTMENT)', '  (CASH DEPOSIT)')) ))\n" +
                        "         ELSE\n" +
                        "          ML.LEDGER_NAME\n" +
                        "       END AS LEDGER,\n" +
                        "       0 AS sort_id1,\n" +
                        "       0 AS V1,\n" +
                        "       0 AS RECEIPT,\n" +
                        "       IFNULL(SUM(VT.AMOUNT), 0) AS PAYMENT,\n" +
                        "     --  CONCAT(IFNULL(MT.NARRATION,''),\n" +
                        "     CONCAT(CONCAT(CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION),''),IF(FDR.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',' '),FDR.TDS_AMOUNT), '')),\n" +
                        "     IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(MT.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', MT.NAME_ADDRESS),''),''),\n" +
                        "     IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(CHEQUE_NO,'')) > 0,CONCAT(' -- ', CHEQUE_NO),''),''))   AS NARRATION\n" +
                        "\n" +
                        "  FROM MASTER_LEDGER_GROUP LG\n" +
                        "\n" +
                        "  LEFT JOIN MASTER_LEDGER ML\n" +
                        "    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "  LEFT JOIN VOUCHER_TRANS VT\n" +
                        "    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "  LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                        "    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "  LEFT JOIN FD_RENEWAL FDR\n" +
                        "    ON FDR.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "\n" +
                        "  JOIN (SELECT CASHBANK.VOUCHER_ID,\n" +
                        "               CASHBANK.VOUCHER_SUB_TYPE,\n" +
                        "               CASHBANK.LEDGER_ID,\n" +
                        "               CASHBANK.CASH_FLAG,\n" +
                        "               CASHBANK.BANK_FLAG,\n" +
                        "               CASHBANK.LEDGER_CODE\n" +
                        "          FROM (SELECT VT.VOUCHER_ID,\n" +
                        "                       MT.VOUCHER_SUB_TYPE,\n" +
                        "                       VT.LEDGER_ID,\n" +
                        "                       ML.LEDGER_CODE,\n" +
                        "                       CASE\n" +
                        "                         WHEN LG.GROUP_ID = 13 THEN\n" +
                        "                          1\n" +
                        "                         ELSE\n" +
                        "                          0\n" +
                        "                       END AS CASH_FLAG,\n" +
                        "                       CASE\n" +
                        "                         WHEN LG.GROUP_ID IN (12) THEN\n" +
                        "                          1\n" +
                        "                         ELSE\n" +
                        "                          0\n" +
                        "                       END AS BANK_FLAG\n" +
                        "\n" +
                        "                  FROM MASTER_LEDGER_GROUP LG\n" +
                        "\n" +
                        "                  LEFT JOIN MASTER_LEDGER ML\n" +
                        "                    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "                  LEFT JOIN VOUCHER_TRANS VT\n" +
                        "                    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "                  LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                        "                    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "                 WHERE MT.VOUCHER_TYPE IN ('CN')\n" +
                        "\n" +
                        "                   AND mt.VOUCHER_DATE  BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "                   AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                         "                  {   AND ML.LEDGER_ID IN (?LEDGER_ID)\n}" +
                        "                   AND MT.STATUS = 1\n" +
                        "                 GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID\n" +
                        "                 ORDER BY VT.VOUCHER_ID, VT.SEQUENCE_NO) AS CASHBANK\n" +
                        "         GROUP BY CASHBANK.VOUCHER_ID) AS T\n" +
                        "              ON MT.VOUCHER_ID = T.VOUCHER_ID\n" +
                        "         LEFT JOIN (SELECT VT.VOUCHER_ID, ML.GROUP_ID, ML.LEDGER_ID, ML.LEDGER_CODE, ML.LEDGER_NAME, VT.AMOUNT, VT.TRANS_MODE\n" +
                        "                  FROM VOUCHER_TRANS VT\n" +
                        "                  INNER JOIN MASTER_LEDGER ML ON VT.LEDGER_ID = ML.LEDGER_ID WHERE VT.TRANS_MODE = 'DR') AS VTCH ON VTCH.VOUCHER_ID = T.VOUCHER_ID\n" +
                        " WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   AND MT.VOUCHER_TYPE IN ('CN')\n" +
                        "   AND VT.TRANS_MODE = 'CR'\n" +
                        "   {  AND ML.LEDGER_ID IN (?LEDGER_ID)\n}" +
                        "   AND MT.STATUS = 1\n" +
                        "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "   AND LG.GROUP_ID NOT IN (12, 14)\n" +
                        " GROUP BY MT.VOUCHER_DATE, VT.VOUCHER_ID, IF(?CONSOLIDATED=0,VT.LEDGER_ID,'')\n" +   // , VT.LEDGER_ID
                        "UNION\n" + // This is for Contra Debit Transactions
                        "SELECT MT.VOUCHER_ID,\n" +
                        "       MT.VOUCHER_SUB_TYPE,MT.VOUCHER_TYPE,\n" +
                        "       MT.VOUCHER_DATE AS DATE,\n" +
                        "       MT.VOUCHER_NO,\n" +
                        "       --  MCC.COST_CENTRE_NAME AS COST_CENTRE,\n" +
                        "       VTCH.LEDGER_CODE,\n" +
                        "       CHEQUE_NO,\n" +
                        "       --   ML.LEDGER_NAME AS LEDGER,\n" +
                        "       CASE\n" +
                        "         WHEN IFNULL(SUM(VT.AMOUNT), 0) > 0 THEN\n" +
                        "          CONCAT(GROUP_CONCAT(VTCH.LEDGER_NAME ORDER BY VT.VOUCHER_ID DESC SEPARATOR ' '),\n" +
                        "               IF(?HIDE_CONTRA_NOTE=1,'', IF(VTCH.GROUP_ID = 13, '  (CASH TRANSFER)', IF(VTCH.GROUP_ID = 14, '  (FD WITHDRAWAL)', '  (CASH WITHDRAWAL) '))  ))\n" +
                        "         ELSE\n" +
                        "          ML.LEDGER_NAME\n" +
                        "       END AS LEDGER,\n" +
                        "       0 AS sort_id1,\n" +
                        "       0 AS V1,\n" +
                        "       IFNULL(SUM(VT.AMOUNT), 0) AS RECEIPT,\n" +
                        "       0 AS PAYMENT,\n" +
                        "     --  CONCAT(IFNULL(MT.NARRATION,''),\n" +
                        "     CONCAT(CONCAT(CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION),''),IF(FDR.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',' '),FDR.TDS_AMOUNT), '')),\n" +
                        "     IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(MT.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', MT.NAME_ADDRESS),''),''),\n" +
                        "     IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(CHEQUE_NO,'')) > 0,CONCAT(' -- ', CHEQUE_NO),''),''))   AS NARRATION\n" +
                        "\n" +
                        "  FROM MASTER_LEDGER_GROUP LG\n" +
                        "\n" +
                        "  LEFT JOIN MASTER_LEDGER ML\n" +
                        "    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "  LEFT JOIN VOUCHER_TRANS VT\n" +
                        "    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "  LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                        "    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "  LEFT JOIN FD_RENEWAL FDR\n" +
                        "    ON FDR.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "\n" +
                        "  JOIN (SELECT CASHBANK.VOUCHER_ID,\n" +
                        "               CASHBANK.VOUCHER_SUB_TYPE,\n" +
                        "               CASHBANK.LEDGER_ID,\n" +
                        "               CASHBANK.CASH_FLAG,\n" +
                        "               CASHBANK.BANK_FLAG,\n" +
                        "               CASHBANK.LEDGER_CODE\n" +
                        "          FROM (SELECT VT.VOUCHER_ID,\n" +
                        "                       MT.VOUCHER_SUB_TYPE,\n" +
                        "                       VT.LEDGER_ID,\n" +
                        "                       ML.LEDGER_CODE,\n" +
                        "                       CASE\n" +
                        "                         WHEN LG.GROUP_ID = 13 THEN\n" +
                        "                          1\n" +
                        "                         ELSE\n" +
                        "                          0\n" +
                        "                       END AS CASH_FLAG,\n" +
                        "                       CASE\n" +
                        "                         WHEN LG.GROUP_ID IN (12) THEN\n" +
                        "                          1\n" +
                        "                         ELSE\n" +
                        "                          0\n" +
                        "                       END AS BANK_FLAG\n" +
                        "\n" +
                        "                  FROM MASTER_LEDGER_GROUP LG\n" +
                        "\n" +
                        "                  LEFT JOIN MASTER_LEDGER ML\n" +
                        "                    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "                  LEFT JOIN VOUCHER_TRANS VT\n" +
                        "                    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "                  LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                        "                    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "                 WHERE MT.VOUCHER_TYPE IN ('CN')\n" +
                        "\n" +
                        "                   AND mt.VOUCHER_DATE  BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "                   AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                         "                    {  AND ML.LEDGER_ID IN (?LEDGER_ID)\n}" +
                        "                   AND MT.STATUS = 1\n" +
                        "                 GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID\n" +
                        "                 ORDER BY VT.VOUCHER_ID, VT.SEQUENCE_NO) AS CASHBANK\n" +
                        "         GROUP BY CASHBANK.VOUCHER_ID) AS T\n" +
                        "    ON MT.VOUCHER_ID = T.VOUCHER_ID\n" +
                        "         LEFT JOIN (SELECT VT.VOUCHER_ID, ML.GROUP_ID, ML.LEDGER_ID, ML.LEDGER_CODE, ML.LEDGER_NAME, VT.AMOUNT, VT.TRANS_MODE\n" +
                        "                  FROM VOUCHER_TRANS VT\n" +
                        "                  INNER JOIN MASTER_LEDGER ML ON VT.LEDGER_ID = ML.LEDGER_ID WHERE VT.TRANS_MODE = 'CR') AS VTCH ON VTCH.VOUCHER_ID = T.VOUCHER_ID\n" +
                        " WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   AND MT.VOUCHER_TYPE IN ('CN')\n" +
                        "   AND VT.TRANS_MODE = 'DR'\n" +
                        "   {  AND ML.LEDGER_ID IN (?LEDGER_ID)\n}" +
                        "   AND MT.STATUS = 1\n" +
                        "   AND VOUCHER_DATE  BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "   AND LG.GROUP_ID NOT IN (12, 14)\n" +
                        " GROUP BY MT.VOUCHER_DATE, VT.VOUCHER_ID,IF(?CONSOLIDATED=0,VT.LEDGER_ID,'')\n" +  // , VT.LEDGER_ID
                            //" ORDER BY VOUCHER_NO) AS TT ORDER BY TT.VOUCHER_NO,TT.SORT_ID1 "; //On 26/04/2021, to have proper Voucher Entry Order
                        " ORDER BY VOUCHER_NO) AS TT\n" +
                        " LEFT JOIN (SELECT FDA.FD_ACCOUNT_ID, 0 AS VOUCHER_ID, RNO.FD_INTEREST_VOUCHER_ID, RNO.FD_VOUCHER_ID,\n" +
                        "          RNO.RENEWAL_DATE, IFNULL(RNO.RECEIPT_NO,'') AS RECEIPT_NO,\n" +
                        "          CONCAT(FDA.FD_ACCOUNT_NUMBER,  IF(IFNULL(RNO.RECEIPT_NO,'')='', '', CONCAT(' (R: ', IFNULL(RNO.RECEIPT_NO,''),')')) ) AS FD_ACCOUNT_NUMBER\n" +
                        "          FROM FD_ACCOUNT AS FDA\n" +
                        "          INNER JOIN (SELECT FR.FD_ACCOUNT_ID, FR.FD_INTEREST_VOUCHER_ID, FR.FD_VOUCHER_ID,FR.RENEWAL_DATE, \n" +
                        "                   SUBSTRING_INDEX(GROUP_CONCAT(FR1.RECEIPT_NO ORDER BY FR1.RENEWAL_DATE DESC SEPARATOR '|'), '|', 1) AS RECEIPT_NO \n" +
                        "                   FROM FD_RENEWAL AS FR\n" +
                        "                   LEFT JOIN (SELECT FR1.FD_ACCOUNT_ID, FR1.RENEWAL_DATE AS RENEWAL_DATE, IFNULL(FR1.RECEIPT_NO, '') AS RECEIPT_NO\n" +
                        "                       FROM FD_RENEWAL AS FR1\n" +
                        "                       INNER JOIN FD_ACCOUNT FD1 ON FD1.FD_ACCOUNT_ID = FR1.FD_ACCOUNT_ID\n" +
                        "                       WHERE FD1.STATUS =1 AND FD1.PROJECT_ID IN (?PROJECT_ID) AND FR1.STATUS =1 AND FR1.FD_TYPE = 'RN' AND FR1.RENEWAL_DATE<=?DATE_TO) AS FR1\n" +
                        "                   ON FR1.FD_ACCOUNT_ID= FR.FD_ACCOUNT_ID AND FR1.RENEWAL_DATE<FR.RENEWAL_DATE\n" +
                        "                   WHERE STATUS =1 GROUP BY FR.FD_ACCOUNT_ID, FR.FD_RENEWAL_ID) AS RNO\n" + //FR1.RENEWAL_DATE
                        "           ON RNO.FD_ACCOUNT_ID = FDA.FD_ACCOUNT_ID WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "           UNION ALL SELECT FDA.FD_ACCOUNT_ID, FDA.FD_VOUCHER_ID, 0 AS FD_INTEREST_VOUCHER_ID, 0 AS FD_VOUCHER_ID, FDA.INVESTMENT_DATE, '' AS RECEIPT_NO, \n" +
                        "           FDA.FD_ACCOUNT_NUMBER FROM FD_ACCOUNT AS FDA WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)) AS FD\n" +
                        "    ON FD.VOUCHER_ID = TT.VOUCHER_ID OR FD.FD_INTEREST_VOUCHER_ID = TT.VOUCHER_ID OR FD.FD_VOUCHER_ID = TT.VOUCHER_ID\n" +
                            // "ORDER BY TT.DATE, TT.VOUCHER_ID, TT.VOUCHER_NO,TT.SORT_ID1 "; //Remove Sort_ID
                        "ORDER BY TT.DATE, TT.VOUCHER_ID, TT.VOUCHER_NO ";

                        break;
                    }

                #endregion

                #region Bank Journal
                case ReportSQLCommand.BankReport.BankJournal:
                    {
                        // In order show each and every Receipt, Payment, Contra Transaction separetely, Modified query logic
                        query = "SELECT TT.VOUCHER_ID,TT.VOUCHER_SUB_TYPE, TT.VOUCHER_TYPE, " +
                                  " TT.DATE, CONCAT(DATE_FORMAT(TT.DATE, '%b') , CONCAT(' '  , DATE_FORMAT(TT.DATE, '%Y'))) MONTH_YEAR_NAME," +
                                  " DATE_FORMAT(TT.DATE,'%Y - %m') MONTH_YEAR," +
                                  " TT.VOUCHER_NO," +
                                  " TT.LEDGER_CODE," +
                                  " TT.CHEQUE_NO," +
                                  " TT.LEDGER," +
                                  " @prow_num := IF(@pprev_value = TT.VOUCHER_ID, @prow_num + 1, 1) AS sort_id1," +
                                  " @pprev_value := TT.VOUCHER_ID as v1," +
                                  " TT.RECEIPT," +
                                  " TT.PAYMENT," +
                                  " CONCAT(TT.NARRATION, IF(TT.VOUCHER_SUB_TYPE='FD', CONCAT(' FD: ', FD.FD_ACCOUNT_NUMBER), '') ) AS NARRATION" +
                            " FROM (" +
                           "SELECT MT.VOUCHER_ID, VT.LEDGER_ID, T.LEDGER_ID AS CB_LEDGER_ID, VT.SEQUENCE_NO, MT.VOUCHER_SUB_TYPE,MT.VOUCHER_TYPE,\n" +
                           "       MT.VOUCHER_DATE AS DATE,\n" +
                           "       MT.VOUCHER_NO,\n" +
                           "       IF (MT.VOUCHER_SUB_TYPE='FD', SUBSTRING_INDEX(GROUP_CONCAT(ML.LEDGER_CODE ORDER BY SEQUENCE_NO DESC), ',',1), ML.LEDGER_CODE) AS LEDGER_CODE,\n" +
                           "       CHT.CHEQUE_NO,\n" +
                           "       CASE WHEN ?COUNT=1 THEN IF (MT.VOUCHER_SUB_TYPE='FD', SUBSTRING_INDEX(GROUP_CONCAT(ML.LEDGER_NAME ORDER BY SEQUENCE_NO DESC), ',',1), ML.LEDGER_NAME)\n" +
                           "             ELSE CONCAT(CONCAT(ML.LEDGER_NAME,' - '),CHT.CASHBANK_LEDGER) END AS LEDGER,\n" +
                           "       @rrow_num := IF(@rprev_value = MT.VOUCHER_ID, @rrow_num + 1, 1) AS sort_id1,\n" +
                           "       @rprev_value := MT.VOUCHER_ID as v1,\n" +
                           "    --  IF(VT.TRANS_MODE = 'DR' AND LG.GROUP_ID IN (12,13,14), -VT.AMOUNT,  VT.AMOUNT) AS RECEIPT,\n" +
                           "       SUM(IF(VT.TRANS_MODE = 'DR', IF(T.BANK=0, 0, -VT.AMOUNT), VT.AMOUNT)) AS RECEIPT,\n" +     // MULTIPLE ENTRIES ARE SUMMED (CHINNA)
                           "       SUM(IF(T.BANK = 0 AND VT.TRANS_MODE = 'DR', VT.AMOUNT, 0)) AS PAYMENT,\n" +
                           "     --  CONCAT(IFNULL(MT.NARRATION,''),\n" +
                           "     CONCAT(CONCAT(CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION),''),IF(FDR.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',''),FDR.TDS_AMOUNT),''), IF(FDR.CHARGE_AMOUNT>0, CONCAT(CONCAT(' -Penalty Amt:',''),FDR.CHARGE_AMOUNT),'')),\n" +
                           "     IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(MT.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', MT.NAME_ADDRESS),''),''),\n" +
                           "     IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(CHT.CHEQUE_NO,'')) > 0,CONCAT(' -- ', CHT.CHEQUE_NO),''),''),\n" +
                           "     IF(1= ?INCLUDE_NARRATION_CURRENCY AND MT.EXCHANGE_COUNTRY_ID>0, CONCAT(' (Currency Details : ', IFNULL(MCE.CURRENCY_NAME, ''), ' ', MT.CONTRIBUTION_AMOUNT, '@',MT.EXCHANGE_RATE, ')'),''))   AS NARRATION\n" +
                           "\n" +
                           "  FROM MASTER_LEDGER_GROUP LG\n" +
                           "  LEFT JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                           "  LEFT JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                           "  LEFT JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                           "  LEFT JOIN FD_RENEWAL FDR ON FDR.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID\n" +
                           "  LEFT JOIN MASTER_COUNTRY MCE ON MCE.COUNTRY_ID = MT.EXCHANGE_COUNTRY_ID\n" +
                           "\n" +
                           "  JOIN (SELECT CASHBANK.VOUCHER_ID,CASHBANK.VOUCHER_SUB_TYPE,\n" +
                           "               CASHBANK.LEDGER_ID,\n" +
                           "               CASHBANK.BANK,\n" +
                           "               CASHBANK.LEDGER_CODE\n" +
                           "          FROM (SELECT VT.VOUCHER_ID,MT.VOUCHER_SUB_TYPE,\n" +
                           "                       VT.LEDGER_ID,\n" +
                           "                       ML.LEDGER_CODE,\n" +
                           "                       CASE\n" +
                           "                         WHEN LG.GROUP_ID = 12 THEN\n" +
                           "                          SUM(VT.AMOUNT)\n" +
                           "                         ELSE\n" +
                           "                          0\n" +
                           "                       END AS BANK\n" +
                           "                  FROM MASTER_LEDGER_GROUP LG\n" +
                           "\n" +
                           "                  LEFT JOIN MASTER_LEDGER ML\n" +
                           "                    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                           "                  LEFT JOIN VOUCHER_TRANS VT\n" +
                           "                    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                           "                  LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                           "                    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                           "                 WHERE (MT.VOUCHER_TYPE IN ('RC','PY') OR (MT.VOUCHER_TYPE IN ('JN') OR VT.TRANS_MODE ='CR' AND  IS_CASH_BANK_STATUS=1))\n" +
                           "\n" +
                           "                   AND mt.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO \n" +
                           "                   AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                           "                       AND ML.LEDGER_ID IN (?LEDGER_ID)\n" +
                           "                   and lg.group_id in (12,14)\n" +
                           "                   AND MT.STATUS = 1\n" +
                           "                 GROUP BY VT.VOUCHER_ID\n" +
                           "                 ORDER BY VT.VOUCHER_ID, VT.SEQUENCE_NO) AS CASHBANK\n" +
                           "         GROUP BY CASHBANK.VOUCHER_ID) AS T\n" +
                           "    ON MT.VOUCHER_ID = T.VOUCHER_ID " +
                           "          JOIN(SELECT VT.VOUCHER_ID,VT.CHEQUE_NO,ML.LEDGER_NAME AS CASHBANK_LEDGER \n" +
                           "\n" +
                           "                  FROM MASTER_LEDGER_GROUP LG\n" +
                           "\n" +
                           "                  LEFT JOIN MASTER_LEDGER ML\n" +
                           "                    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                           "                  LEFT JOIN VOUCHER_TRANS VT\n" +
                           "                    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                           "                  LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                           "                    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                           "                 WHERE (MT.VOUCHER_TYPE IN ('RC','PY') OR (MT.VOUCHER_TYPE IN ('JN') OR VT.TRANS_MODE ='CR' AND  IS_CASH_BANK_STATUS=1))\n" +
                           "\n" +
                           "                   AND mt.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO \n" +
                           "                   AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                           "                   AND ML.LEDGER_ID IN (?LEDGER_ID)\n" +
                           "                   and lg.group_id in (12,14)\n" +
                           "                   AND MT.STATUS = 1\n" +
                           "                 GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID\n" +
                           "                 ORDER BY VT.VOUCHER_ID, VT.SEQUENCE_NO) AS CHT\n" +
                           " ON CHT.VOUCHER_ID=MT.VOUCHER_ID, (SELECT @rrow_num := 1) x1,\n" +
                           " (SELECT @rprev_value := null) y1\n" +
                           " WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                           "   AND (MT.VOUCHER_TYPE IN ('RC') OR (MT.VOUCHER_TYPE IN ('JN') AND VT.TRANS_MODE ='CR' AND  IS_CASH_BANK_STATUS=1))\n" +
                           " AND VT.TRANS_MODE IN('CR','DR')\n" +
                           "   AND MT.STATUS = 1\n" +
                           "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                           " AND VT.LEDGER_ID NOT IN(?LEDGER_ID) GROUP BY MT.VOUCHER_DATE, VT.VOUCHER_ID, IF(?SHOW_INDIVIDUAL_LEDGER=1, VT.SEQUENCE_NO, IF(?CONSOLIDATED=0,VT.LEDGER_ID,''))\n" +
                           "\n" +
                           "UNION ALL\n" +   // This is to get the Payment Transactions
                           "\n" +
                           "SELECT MT.VOUCHER_ID, VT.LEDGER_ID, VT.SEQUENCE_NO, T.LEDGER_ID AS CB_LEDGER_ID, MT.VOUCHER_SUB_TYPE,MT.VOUCHER_TYPE,\n" +
                           "       MT.VOUCHER_DATE AS DATE,\n" +
                           "       MT.VOUCHER_NO,\n" +
                           "       ML.LEDGER_CODE,\n" +
                           "       CHT.CHEQUE_NO,\n" +
                           "       CASE WHEN ?COUNT=1 THEN ML.LEDGER_NAME ELSE CONCAT(ML.LEDGER_NAME,' - ',CHT.CASHBANK_LEDGER) END AS LEDGER_NAME,\n" +
                           "       @prow_num := IF(@pprev_value = MT.VOUCHER_ID, @prow_num + 1, 1) AS sort_id1,\n" +
                           "       @pprev_value := MT.VOUCHER_ID as v1,\n" +
                           "       SUM(IF(T.BANK = 0 AND VT.TRANS_MODE = 'CR', VT.AMOUNT, 0)) AS RECEIPT,\n" +
                           "    -- IF(VT.TRANS_MODE = 'CR' AND LG.GROUP_ID IN (12,13,14), -VT.AMOUNT,  VT.AMOUNT)  AS PAYMENT,\n" +
                           "       SUM(IF(VT.TRANS_MODE = 'CR', IF(T.BANK=0, 0, -VT.AMOUNT),  VT.AMOUNT)) AS PAYMENT,\n" +   // MULTIPLE ENTRIES ARE SUMMED (CHINNA)
                           "     --  CONCAT(IFNULL(MT.NARRATION,''),\n" +
                           "     CONCAT(CONCAT(CONCAT(CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION),''),IF(FDR.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',''),FDR.TDS_AMOUNT),'')),\n" +
                           "     IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(MT.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', MT.NAME_ADDRESS),''),''),\n" +
                           "     IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(CHT.CHEQUE_NO,'')) > 0,CONCAT(' -- ', CHT.CHEQUE_NO),''),'')),\n" +
                           "     IF(TRIM(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION))<>'' AND TRIM(REF.REFERENCE_NUMBER)<>'',\n" +
                           "     IF(TRIM(REF.REFERENCE_NUMBER)<>'', CONCAT('-REF ' , IFNULL(REF.REFERENCE_NUMBER,'')), '') ,  IF(TRIM(REF.REFERENCE_NUMBER)<>'', CONCAT('REF ' , IFNULL(REF.REFERENCE_NUMBER,'')), '') ) )   AS NARRATION\n" +
                           "  FROM MASTER_LEDGER_GROUP LG\n" +
                           "  LEFT JOIN MASTER_LEDGER ML\n" +
                           "    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                           "  LEFT JOIN VOUCHER_TRANS VT\n" +
                           "    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                           "  LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                           "    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                           "  LEFT JOIN (SELECT VR.REC_PAY_VOUCHER_ID, VR.LEDGER_ID, GROUP_CONCAT(VT.REFERENCE_NUMBER) AS REFERENCE_NUMBER FROM VOUCHER_REFERENCE VR\n" +
                           " INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VR.REF_VOUCHER_ID AND VT.LEDGER_ID = VR.LEDGER_ID GROUP BY VR.REC_PAY_VOUCHER_ID, VR.LEDGER_ID) AS REF ON\n" +
                           " REF.REC_PAY_VOUCHER_ID = MT.VOUCHER_ID AND REF.LEDGER_ID = VT.LEDGER_ID\n" +
                           "  LEFT JOIN FD_RENEWAL FDR\n" +
                           "    ON FDR.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID\n" +
                           "  JOIN (SELECT CASHBANK.VOUCHER_ID,CASHBANK.VOUCHER_SUB_TYPE,\n" +
                           "               CASHBANK.LEDGER_ID,\n" +
                           "               CASHBANK.BANK,\n" +
                           "               CASHBANK.LEDGER_CODE\n" +
                           "          FROM (SELECT VT.VOUCHER_ID,MT.VOUCHER_SUB_TYPE,\n" +
                           "                       VT.LEDGER_ID,\n" +
                           "                       ML.LEDGER_CODE,\n" +
                           "                       CASE\n" +
                       "                         WHEN LG.GROUP_ID = 12 THEN\n" +
                       "                          SUM(VT.AMOUNT)\n" +
                       "                         ELSE\n" +
                       "                          0\n" +
                       "                       END AS BANK\n" +
                           "                  FROM MASTER_LEDGER_GROUP LG\n" +
                           "\n" +
                           "                  LEFT JOIN MASTER_LEDGER ML\n" +
                           "                    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                           "                  LEFT JOIN VOUCHER_TRANS VT\n" +
                           "                    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                           "                  LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                           "                    ON VT.VOUCHER_ID = MT.VOUCHER_ID \n" +
                           "                 WHERE (MT.VOUCHER_TYPE IN ('RC','PY') OR (MT.VOUCHER_TYPE IN ('JN') OR VT.TRANS_MODE ='DR' AND IS_CASH_BANK_STATUS=1))\n" +
                           "                   AND mt.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                           "                   AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                           "                   AND LG.GROUP_ID in (12,14)\n" +
                           "                      AND ML.LEDGER_ID IN (?LEDGER_ID)\n" +
                           "                   AND MT.STATUS = 1\n" +
                           "                 GROUP BY VT.VOUCHER_ID\n" +
                           "                 ORDER BY VT.VOUCHER_ID, VT.SEQUENCE_NO) AS CASHBANK\n" +
                           "         GROUP BY CASHBANK.VOUCHER_ID) AS T\n" +
                           "    ON MT.VOUCHER_ID = T.VOUCHER_ID  " +
                           "          JOIN(SELECT VT.VOUCHER_ID,VT.CHEQUE_NO,ML.LEDGER_NAME AS CASHBANK_LEDGER\n" +
                           "\n" +
                           "                  FROM MASTER_LEDGER_GROUP LG\n" +
                           "\n" +
                           "                  LEFT JOIN MASTER_LEDGER ML\n" +
                           "                    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                           "                  LEFT JOIN VOUCHER_TRANS VT\n" +
                           "                    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                           "                  LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                           "                    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                           "                 WHERE (MT.VOUCHER_TYPE IN ('RC','PY') OR (MT.VOUCHER_TYPE IN ('JN') OR VT.TRANS_MODE ='DR' AND IS_CASH_BANK_STATUS=1))\n" +
                           "\n" +
                           "                   AND mt.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO \n" +
                           "                   AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                           "                       AND ML.LEDGER_ID IN (?LEDGER_ID)\n" +
                           "                   and lg.group_id in (12,14)\n" +
                           "                   AND MT.STATUS = 1\n" +
                           "                 GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID\n" +
                           "                 ORDER BY VT.VOUCHER_ID, VT.SEQUENCE_NO) AS CHT\n" +
                           " ON CHT.VOUCHER_ID=MT.VOUCHER_ID , (SELECT @prow_num := 1) x1,\n" +
                           " (SELECT @pprev_value := null) y1\n" +
                           " WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                           "   AND (MT.VOUCHER_TYPE IN ('PY') OR (MT.VOUCHER_TYPE IN ('JN') AND VT.TRANS_MODE ='DR' AND IS_CASH_BANK_STATUS=1))\n" +
                           "    AND VT.TRANS_MODE IN('CR','DR')\n" +
                           "   AND MT.STATUS = 1\n" +
                           "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                           " AND VT.LEDGER_ID NOT IN(?LEDGER_ID)  GROUP BY MT.VOUCHER_DATE, VT.VOUCHER_ID, IF(?SHOW_INDIVIDUAL_LEDGER=1, VT.SEQUENCE_NO, IF(?CONSOLIDATED=0,VT.LEDGER_ID,'')) \n " +
                           "\n" +
                          "UNION\n" +   // This is Contra Credit Transaction
                        " SELECT * FROM (SELECT MT.VOUCHER_ID, VT.LEDGER_ID, T.LEDGER_ID AS CB_LEDGER_ID, VT.SEQUENCE_NO,\n" +
                        "       MT.VOUCHER_SUB_TYPE,MT.VOUCHER_TYPE,\n" +
                        "       MT.VOUCHER_DATE AS DATE,\n" +
                        "       MT.VOUCHER_NO,\n" +
                        "       --  MCC.COST_CENTRE_NAME AS COST_CENTRE,\n" +
                        "       VTCH.LEDGER_CODE,\n" +
                        "       CHEQUE_NO,\n" +
                        "       CASE\n" +
                        "         WHEN IFNULL(SUM(VT.AMOUNT), 0) > 0 THEN\n" +
                        "          CONCAT(GROUP_CONCAT(IF(ML.GROUP_ID =12, VTCH.LEDGER_NAME, ML.LEDGER_NAME) ORDER BY VT.SEQUENCE_NO DESC\n" +
                        "                              SEPARATOR ', '),\n" +
                        "              IF(?HIDE_CONTRA_NOTE=1,'', IF(VTCH.GROUP_ID = 12, '  (BANK TRANSFER)', IF(VTCH.GROUP_ID = 14, '  (FD INVESTMENT)', ' (CASH WITHDRAWAL) ')) ))\n" +
                        "         ELSE\n" +
                        "          ML.LEDGER_NAME\n" +
                        "       END AS LEDGER,\n" +
                        "       0 AS sort_id1,\n" +
                        "       0 AS V1,\n" +
                        "       0 AS RECEIPT,\n" +
                        "       SUM(IF((VT.AMOUNT-VTCH.AMOUNT)>0, IF(MT.IS_MULTI_CURRENCY=1, VT.AMOUNT , VTCH.AMOUNT), VT.AMOUNT )) AS PAYMENT,\n" + //SUM(VT.AMOUNT)
                        "     --  CONCAT(IFNULL(MT.NARRATION,''),\n" +
                        "     CONCAT(CONCAT(CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION),''),IF(FDR.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',' '),FDR.TDS_AMOUNT), '')),\n" +
                        "     IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(MT.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', MT.NAME_ADDRESS),''),''),\n" +
                        "     IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(CHEQUE_NO,'')) > 0,CONCAT(' -- ', CHEQUE_NO),''),''))   AS NARRATION\n" +
                        "\n" +
                        "  FROM MASTER_LEDGER_GROUP LG\n" +
                        "\n" +
                        "  LEFT JOIN MASTER_LEDGER ML\n" +
                        "    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "  LEFT JOIN VOUCHER_TRANS VT\n" +
                        "    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "  LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                        "    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "  LEFT JOIN FD_RENEWAL FDR\n" +
                        "    ON FDR.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "\n" +
                        "  JOIN (SELECT CASHBANK.VOUCHER_ID,\n" +
                        "               CASHBANK.VOUCHER_SUB_TYPE,\n" +
                        "               CASHBANK.LEDGER_ID,\n" +
                        "               CASHBANK.CASH_FLAG,\n" +
                        "               CASHBANK.BANK_FLAG,\n" +
                        "               CASHBANK.LEDGER_CODE\n" +
                        "          FROM (SELECT VT.VOUCHER_ID,\n" +
                        "                       MT.VOUCHER_SUB_TYPE,\n" +
                        "                       VT.LEDGER_ID,\n" +
                        "                       ML.LEDGER_CODE,\n" +
                        "                       CASE\n" +
                        "                         WHEN LG.GROUP_ID = 13 THEN\n" +
                        "                          1\n" +
                        "                         ELSE\n" +
                        "                          0\n" +
                        "                       END AS CASH_FLAG,\n" +
                        "                       CASE\n" +
                        "                         WHEN LG.GROUP_ID IN (12) THEN\n" +
                        "                          1\n" +
                        "                         ELSE\n" +
                        "                          0\n" +
                        "                       END AS BANK_FLAG\n" +
                        "\n" +
                        "                  FROM MASTER_LEDGER_GROUP LG\n" +
                        "\n" +
                        "                  LEFT JOIN MASTER_LEDGER ML\n" +
                        "                    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "                  LEFT JOIN VOUCHER_TRANS VT\n" +
                        "                    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "                  LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                        "                    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "                 WHERE MT.VOUCHER_TYPE IN ('CN')\n" +
                        "\n" +
                        "                   AND mt.VOUCHER_DATE  BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "                   AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                         "                  {   AND ML.LEDGER_ID IN (?LEDGER_ID)\n}" +
                        "                   AND MT.STATUS = 1\n" +
                        "                 GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID\n" +
                        "                 ORDER BY VT.VOUCHER_ID, VT.SEQUENCE_NO) AS CASHBANK\n" +
                        "         GROUP BY CASHBANK.VOUCHER_ID) AS T\n" +
                        "              ON MT.VOUCHER_ID = T.VOUCHER_ID\n" +
                        "         LEFT JOIN (SELECT VT.VOUCHER_ID, ML.GROUP_ID,  ML.LEDGER_ID, ML.LEDGER_CODE, ML.LEDGER_NAME, VT.AMOUNT, VT.TRANS_MODE\n" +
                        "                  FROM VOUCHER_TRANS VT\n" +
                        "                  INNER JOIN MASTER_LEDGER ML ON VT.LEDGER_ID = ML.LEDGER_ID WHERE VT.TRANS_MODE = 'DR') AS VTCH ON VTCH.VOUCHER_ID = T.VOUCHER_ID\n" +
                        " WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   AND MT.VOUCHER_TYPE IN ('CN')\n" +
                        "   AND VT.TRANS_MODE = 'CR' AND VT.LEDGER_ID IN (?LEDGER_ID)\n" +
                            //"   {  AND ML.LEDGER_ID IN (?LEDGER_ID)\n}" +
                        "   AND MT.STATUS = 1\n" +
                        "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO \n" +
                        "   AND LG.GROUP_ID NOT IN (13, 14)\n" +
                        " GROUP BY MT.VOUCHER_DATE, VT.VOUCHER_ID, IF(?CONSOLIDATED=0,VT.LEDGER_ID,''), IF(?CONSOLIDATED=0,VTCH.LEDGER_ID,'')\n" +   // , VT.LEDGER_ID
                        "UNION\n" + // This is for Contra Debit Transactions
                        "SELECT MT.VOUCHER_ID, VT.LEDGER_ID, T.LEDGER_ID AS CB_LEDGER_ID, VT.SEQUENCE_NO, \n" +
                        "       MT.VOUCHER_SUB_TYPE,MT.VOUCHER_TYPE,\n" +
                        "       MT.VOUCHER_DATE AS DATE,\n" +
                        "       MT.VOUCHER_NO,\n" +
                        "       --  MCC.COST_CENTRE_NAME AS COST_CENTRE,\n" +
                        "       VTCH.LEDGER_CODE,\n" +
                        "       CHEQUE_NO,\n" +
                        "       --   ML.LEDGER_NAME AS LEDGER,\n" +
                        "       CASE\n" +
                        "         WHEN IFNULL(SUM(VT.AMOUNT), 0) > 0 THEN\n" +
                        "          CONCAT(GROUP_CONCAT(IF(ML.GROUP_ID =12, VTCH.LEDGER_NAME, ML.LEDGER_NAME) ORDER BY VT.SEQUENCE_NO DESC\n" +
                        "                              SEPARATOR ', '),\n" +
                        "                 IF(?HIDE_CONTRA_NOTE=1, '', IF(VTCH.GROUP_ID = 12, '  (BANK TRANSFER)', IF(VTCH.GROUP_ID =14, '  (FD WITHDRAWAL)', ' (CASH DEPOSIT)')) ))\n" +
                        "         ELSE\n" +
                        "          ML.LEDGER_NAME\n" +
                        "       END AS LEDGER,\n" +
                        "       0 AS sort_id1,\n" +
                        "       0 AS V1,\n" +
                        "       SUM(IF((VT.AMOUNT-VTCH.AMOUNT)>0, IF(MT.IS_MULTI_CURRENCY=1, VT.AMOUNT , VTCH.AMOUNT), VT.AMOUNT )) AS RECEIPT,\n" + //SUM(VT.AMOUNT) SUM(IF((VTCH.AMOUNT-VT.AMOUNT)>0, VT.AMOUNT,VTCH.AMOUNT )) 
                        "       0 AS PAYMENT,\n" +
                        "     --  CONCAT(IFNULL(MT.NARRATION,''),\n" +
                        "     CONCAT(CONCAT(CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION),''),IF(FDR.TDS_AMOUNT>0, CONCAT(CONCAT(' -TDS Amt:',' '),FDR.TDS_AMOUNT), '')),\n" +
                        "     IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(MT.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', MT.NAME_ADDRESS),''),''),\n" +
                        "     IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(CHEQUE_NO,'')) > 0,CONCAT(' -- ', CHEQUE_NO),''),''))   AS NARRATION\n" +
                        "\n" +
                        "  FROM MASTER_LEDGER_GROUP LG\n" +
                        "\n" +
                        "  LEFT JOIN MASTER_LEDGER ML\n" +
                        "    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "  LEFT JOIN VOUCHER_TRANS VT\n" +
                        "    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "  LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                        "    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "  LEFT JOIN FD_RENEWAL FDR\n" +
                        "    ON FDR.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "\n" +
                        "  JOIN (SELECT CASHBANK.VOUCHER_ID,\n" +
                        "               CASHBANK.VOUCHER_SUB_TYPE,\n" +
                        "               CASHBANK.LEDGER_ID,\n" +
                        "               CASHBANK.CASH_FLAG,\n" +
                        "               CASHBANK.BANK_FLAG,\n" +
                        "               CASHBANK.LEDGER_CODE\n" +
                        "          FROM (SELECT VT.VOUCHER_ID,\n" +
                        "                       MT.VOUCHER_SUB_TYPE,\n" +
                        "                       VT.LEDGER_ID,\n" +
                        "                       ML.LEDGER_CODE,\n" +
                        "                       CASE\n" +
                        "                         WHEN LG.GROUP_ID = 13 THEN\n" +
                        "                          1\n" +
                        "                         ELSE\n" +
                        "                          0\n" +
                        "                       END AS CASH_FLAG,\n" +
                        "                       CASE\n" +
                        "                         WHEN LG.GROUP_ID IN (12) THEN\n" +
                        "                          1\n" +
                        "                         ELSE\n" +
                        "                          0\n" +
                        "                       END AS BANK_FLAG\n" +
                        "\n" +
                        "                  FROM MASTER_LEDGER_GROUP LG\n" +
                        "\n" +
                        "                  LEFT JOIN MASTER_LEDGER ML\n" +
                        "                    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "                  LEFT JOIN VOUCHER_TRANS VT\n" +
                        "                    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "                  LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                        "                    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "                 WHERE MT.VOUCHER_TYPE IN ('CN')\n" +
                        "\n" +
                        "                   AND mt.VOUCHER_DATE  BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "                   AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                         "                    {  AND ML.LEDGER_ID IN (?LEDGER_ID)\n}" +
                        "                   AND MT.STATUS = 1\n" +
                        "                 GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID\n" +
                        "                 ORDER BY VT.VOUCHER_ID, VT.SEQUENCE_NO) AS CASHBANK\n" +
                        "         GROUP BY CASHBANK.VOUCHER_ID) AS T\n" +
                        "    ON MT.VOUCHER_ID = T.VOUCHER_ID\n" +
                        "         LEFT JOIN (SELECT VT.VOUCHER_ID, ML.GROUP_ID, ML.LEDGER_ID, ML.LEDGER_CODE, ML.LEDGER_NAME, VT.AMOUNT, VT.TRANS_MODE\n" +
                        "                  FROM VOUCHER_TRANS VT\n" +
                        "                  INNER JOIN MASTER_LEDGER ML ON VT.LEDGER_ID = ML.LEDGER_ID WHERE VT.TRANS_MODE = 'CR') AS VTCH ON VTCH.VOUCHER_ID = T.VOUCHER_ID\n" +
                        " WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   AND MT.VOUCHER_TYPE IN ('CN')\n" +
                        "   AND VT.TRANS_MODE = 'DR' AND VT.LEDGER_ID IN (?LEDGER_ID)\n" +
                            //"   {  AND ML.LEDGER_ID IN (?LEDGER_ID)\n}" +
                        "   AND MT.STATUS = 1\n" +
                        "   AND VOUCHER_DATE  BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "   AND LG.GROUP_ID NOT IN (13, 14)\n" +
                        " GROUP BY MT.VOUCHER_DATE, VT.VOUCHER_ID,IF(?CONSOLIDATED=0,VT.LEDGER_ID,''), IF(?CONSOLIDATED=0,VTCH.LEDGER_ID,'')) AS TCONTRA WHERE TCONTRA.CB_LEDGER_ID IN (?LEDGER_ID) AND ( LEDGER_ID IN (?LEDGER_ID) OR VOUCHER_SUB_TYPE = 'FD' )\n" +  // , VT.LEDGER_ID
                            //"ORDER BY VOUCHER_NO) AS TT ORDER BY TT.VOUCHER_NO,TT.SORT_ID1"; //On 26/04/2021, to have proper Voucher Entry Order
                           "ORDER BY VOUCHER_NO ASC, SEQUENCE_NO DESC) AS TT\n" +
                        " LEFT JOIN (SELECT FDA.FD_ACCOUNT_ID, 0 AS VOUCHER_ID, RNO.FD_INTEREST_VOUCHER_ID, RNO.FD_VOUCHER_ID,\n" +
                        "          RNO.RENEWAL_DATE, IFNULL(RNO.RECEIPT_NO,'') AS RECEIPT_NO,\n" +
                        "          CONCAT(FDA.FD_ACCOUNT_NUMBER,  IF(IFNULL(RNO.RECEIPT_NO,'')='', '', CONCAT(' (R: ', IFNULL(RNO.RECEIPT_NO,''),')')) ) AS FD_ACCOUNT_NUMBER\n" +
                        "          FROM FD_ACCOUNT AS FDA\n" +
                        "          INNER JOIN (SELECT FR.FD_ACCOUNT_ID, FR.FD_INTEREST_VOUCHER_ID, FR.FD_VOUCHER_ID,FR.RENEWAL_DATE, \n" +
                        "                   SUBSTRING_INDEX(GROUP_CONCAT(FR1.RECEIPT_NO ORDER BY FR1.RENEWAL_DATE DESC SEPARATOR '|'), '|', 1) AS RECEIPT_NO \n" +
                        "                   FROM FD_RENEWAL AS FR\n" +
                        "                   LEFT JOIN (SELECT FR1.FD_ACCOUNT_ID, FR1.RENEWAL_DATE AS RENEWAL_DATE, IFNULL(FR1.RECEIPT_NO, '') AS RECEIPT_NO\n" +
                        "                       FROM FD_RENEWAL AS FR1\n" +
                        "                       INNER JOIN FD_ACCOUNT FD1 ON FD1.FD_ACCOUNT_ID = FR1.FD_ACCOUNT_ID\n" +
                        "                       WHERE FD1.STATUS =1 AND FD1.PROJECT_ID IN (?PROJECT_ID) AND FR1.STATUS =1 AND FR1.FD_TYPE = 'RN' AND FR1.RENEWAL_DATE<=?DATE_TO) AS FR1\n" +
                        "                   ON FR1.FD_ACCOUNT_ID= FR.FD_ACCOUNT_ID AND FR1.RENEWAL_DATE<FR.RENEWAL_DATE\n" +
                        "                   WHERE STATUS =1 GROUP BY FR.FD_ACCOUNT_ID, FR.FD_RENEWAL_ID) AS RNO\n" + //FR1.RENEWAL_DATE
                        "           ON RNO.FD_ACCOUNT_ID = FDA.FD_ACCOUNT_ID WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "           UNION ALL SELECT FDA.FD_ACCOUNT_ID, FDA.FD_VOUCHER_ID, 0 AS FD_INTEREST_VOUCHER_ID, 0 AS FD_VOUCHER_ID, FDA.INVESTMENT_DATE, '' AS RECEIPT_NO, \n" +
                        "           FDA.FD_ACCOUNT_NUMBER FROM FD_ACCOUNT AS FDA WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)) AS FD\n" +
                        "    ON FD.VOUCHER_ID = TT.VOUCHER_ID OR FD.FD_INTEREST_VOUCHER_ID = TT.VOUCHER_ID OR FD.FD_VOUCHER_ID = TT.VOUCHER_ID\n" +
                              " ORDER BY TT.DATE, TT.VOUCHER_ID, TT.VOUCHER_NO,CASE \n" +
                             " WHEN TT.VOUCHER_SUB_TYPE != 'FD' THEN tt.sort_id1\n" +
                             "  ELSE NULL END";

                        // " ORDER BY TT.DATE, TT.VOUCHER_ID, TT.VOUCHER_NO,TT.SORT_ID1"; // 15/01/2025 to remove sort_id1
                        //CASE\n" +
                        //       " WHEN TT.VOUCHER_SUB_TYPE != 'FD' THEN tt.sort_id1\n" +
                        //      "  ELSE NULL END";
                        break;
                    }
                #endregion

                #region Bank Flow
                case ReportSQLCommand.BankReport.BankFlow:
                    {
                        query = "SELECT TT.VOUCHER_ID,\n" +
                           "       TT.VOUCHER_DATE AS DATE,\n" +
                           "       SUM(REC_IN) AS 'IN_FLOW',\n" +
                           "       SUM(PAY_OUT) AS 'OUT_FLOW'\n" +
                           "  FROM (SELECT MT.VOUCHER_ID,\n" +
                           "               MT.VOUCHER_DATE,\n" +
                           "              IFNULL(T.AMOUNT, 0) AS REC_IN,\n" +
                           "               0.00 AS PAY_OUT\n" +
                           "          FROM master_ledger_GROUP LG\n" +
                           "          LEFT JOIN master_ledger ML\n" +
                           "            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                           "          LEFT JOIN voucher_trans VT\n" +
                           "            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                           "          LEFT JOIN voucher_master_trans MT\n" +
                           "            ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                           "          JOIN (SELECT VT.VOUCHER_ID, VT.LEDGER_ID, ML.LEDGER_CODE,SUM(VT.AMOUNT) AS AMOUNT\n" +
                           "                 FROM master_ledger_GROUP LG\n" +
                           "\n" +
                           "                 LEFT JOIN master_ledger ML\n" +
                           "                   ON ML.GROUP_ID = LG.GROUP_ID\n" +
                           "                 LEFT JOIN voucher_trans VT\n" +
                           "                   ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                           "                 LEFT JOIN voucher_master_trans MT\n" +
                           "                   ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                           "                WHERE MT.VOUCHER_TYPE IN ('RC')\n" +
                           "                  AND mt.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO " +
                           "                  AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                           "                  and lg.group_id in (12)\n" +
                           "                  AND MT.STATUS = 1\n" +
                           "                GROUP BY MT.VOUCHER_DATE) AS T\n" +
                           "            ON MT.VOUCHER_ID = T.VOUCHER_ID\n" +
                           "         WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                           "           AND MT.VOUCHER_TYPE IN('RC')\n" +
                           "           AND MT.STATUS = 1\n" +
                           "           AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                           "           AND LG.GROUP_ID NOT IN (13)\n" +
                           "         GROUP BY MT.PROJECT_ID,MT.VOUCHER_DATE\n" +
                           "        UNION ALL\n" +
                           "        SELECT MT.VOUCHER_ID,\n" +
                           "               MT.VOUCHER_DATE,\n" +
                           "               0.0 AS REC_IN,\n" +
                           "             IFNULL(T.AMOUNT, 0) AS PAY_OUT\n" +
                           "          FROM master_ledger_GROUP LG\n" +
                           "          LEFT JOIN master_ledger ML\n" +
                           "            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                           "          LEFT JOIN voucher_trans VT\n" +
                           "            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                           "          LEFT JOIN voucher_master_trans MT\n" +
                           "            ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                           "          JOIN (SELECT VT.VOUCHER_ID, VT.LEDGER_ID, ML.LEDGER_CODE,SUM(VT.AMOUNT) AS AMOUNT\n" +
                           "                  FROM master_ledger_GROUP LG\n" +
                           "\n" +
                           "                  LEFT JOIN master_ledger ML\n" +
                           "                    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                           "                  LEFT JOIN voucher_trans VT\n" +
                           "                    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                           "                  LEFT JOIN voucher_master_trans MT\n" +
                           "                    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                           "                 WHERE MT.VOUCHER_TYPE IN('PY')\n" +
                           "                   AND mt.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                           "                   AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                           "                   and lg.group_id in (12)\n" +
                           "                   AND MT.STATUS = 1\n" +
                           "                 GROUP BY MT.VOUCHER_DATE) AS T\n" +
                           "            ON MT.VOUCHER_ID = T.VOUCHER_ID\n" +
                           "         WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                           "           AND MT.VOUCHER_TYPE IN('PY')\n" +
                           "           AND MT.STATUS = 1\n" +
                           "           AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                           "           AND LG.GROUP_ID NOT IN (13)\n" +
                           "         GROUP BY MT.PROJECT_ID,MT.VOUCHER_DATE\n" +
                           "        UNION ALL\n" +
                           "        SELECT T.VOUCHER_ID,\n" +
                           "               T.VOUCHER_DATE,\n" +
                           "               SUM(T.AMOUNT) AS REC_IN,\n" +
                           "               0 AS PAY_OUT\n" +
                           "          FROM (SELECT VT.VOUCHER_ID,\n" +
                           "                       LG.GROUP_ID,\n" +
                           "                       MT.VOUCHER_TYPE,\n" +
                           "                       VT.AMOUNT,\n" +
                           "                       MT.VOUCHER_DATE,\n" +
                           "                       MT.PROJECT_ID\n" +
                           "                  FROM master_ledger_GROUP LG\n" +
                           "                  LEFT JOIN master_ledger ML\n" +
                           "                    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                           "                  LEFT JOIN voucher_trans VT\n" +
                           "                    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                           "                  LEFT JOIN voucher_master_trans MT\n" +
                           "                    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                           "                 WHERE VT.TRANS_MODE = 'DR'\n" +
                           "                   AND PROJECT_ID IN (?PROJECT_ID)\n" +
                           "                   AND MT.STATUS = 1\n" +
                           "                   AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO " +
                           "                 ORDER BY VT.VOUCHER_ID ASC) AS T\n" +
                           "         WHERE T.PROJECT_ID IN (?PROJECT_ID)\n" +
                           "           AND T.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO " +
                           "           AND T.GROUP_ID IN (12)\n" +
                           "           AND T.VOUCHER_TYPE = 'CN'\n" +
                           "         GROUP BY T.PROJECT_ID,T.VOUCHER_DATE\n" +
                           "        UNION\n" +
                           "        SELECT T.VOUCHER_ID,\n" +
                           "               T.VOUCHER_DATE,\n" +
                           "               0 AS REC_IN,\n" +
                           "               SUM(T.AMOUNT) AS PAY_OUT\n" +
                           "\n" +
                           "          FROM (SELECT VT.VOUCHER_ID,\n" +
                           "                       LG.GROUP_ID,\n" +
                           "                       MT.VOUCHER_TYPE,\n" +
                           "                       VT.AMOUNT,\n" +
                           "                       MT.VOUCHER_DATE,\n" +
                           "                       MT.PROJECT_ID\n" +
                           "                  FROM master_ledger_GROUP LG\n" +
                           "                  LEFT JOIN master_ledger ML\n" +
                           "                    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                           "                  LEFT JOIN voucher_trans VT\n" +
                           "                    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                           "                  LEFT JOIN voucher_master_trans MT\n" +
                           "                    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                           "                 WHERE VT.TRANS_MODE = 'CR'\n" +
                           "                   AND PROJECT_ID IN (?PROJECT_ID)\n" +
                           "                   AND MT.STATUS = 1\n" +
                           "                   AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO " +
                           "                 ORDER BY VT.VOUCHER_ID ASC) AS T\n" +
                           "         WHERE T.PROJECT_ID IN (?PROJECT_ID)\n" +
                           "           AND T.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO " +
                           "           AND T.GROUP_ID IN (12)\n" +
                           "           AND T.VOUCHER_TYPE = 'CN'\n" +
                           "         GROUP BY T.PROJECT_ID,T.VOUCHER_DATE) AS TT\n" +
                           " GROUP BY TT.VOUCHER_DATE;";
                        break;
                    }
                #endregion

                #region Cash Flow
                case ReportSQLCommand.BankReport.CashFlow:
                    {
                        query = "SELECT TT.VOUCHER_ID,\n" +
                        "       TT.VOUCHER_DATE AS DATE,\n" +
                        "       SUM(REC_IN) AS 'IN_FLOW',\n" +
                        "       SUM(PAY_OUT) AS 'OUT_FLOW'\n" +
                        "  FROM (SELECT MT.VOUCHER_ID,\n" +
                        "               MT.VOUCHER_DATE,\n" +
                        "             IFNULL(T.AMOUNT, 0) AS REC_IN,\n" +
                        "               0.00 AS PAY_OUT\n" +
                        "          FROM master_ledger_GROUP LG\n" +
                        "          LEFT JOIN master_ledger ML\n" +
                        "            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "          LEFT JOIN voucher_trans VT\n" +
                        "            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "          LEFT JOIN voucher_master_trans MT\n" +
                        "            ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "          JOIN (SELECT VT.VOUCHER_ID, VT.LEDGER_ID, ML.LEDGER_CODE,SUM(VT.AMOUNT) AS AMOUNT\n" +
                        "                 FROM master_ledger_GROUP LG\n" +
                        "\n" +
                        "                 LEFT JOIN master_ledger ML\n" +
                        "                   ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "                 LEFT JOIN voucher_trans VT\n" +
                        "                   ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "                 LEFT JOIN voucher_master_trans MT\n" +
                        "                   ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "                WHERE MT.VOUCHER_TYPE IN('RC')\n" +   //
                        "                  AND mt.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO " +
                        "                  AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "                  and lg.group_id in (13)\n" +
                        "                  AND MT.STATUS = 1\n" +
                        "                GROUP BY MT.VOUCHER_DATE) AS T\n" +  //VT.VOUCHER_ID
                        "            ON MT.VOUCHER_ID = T.VOUCHER_ID\n" +
                        "         WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "           AND MT.VOUCHER_TYPE IN('RC')\n" +
                        "           AND MT.STATUS = 1\n" +
                        "           AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "           AND LG.GROUP_ID NOT IN (12)\n" +
                        "         GROUP BY MT.PROJECT_ID,MT.VOUCHER_DATE\n" +
                        "        UNION ALL\n" +
                        "        SELECT MT.VOUCHER_ID,\n" +
                        "               MT.VOUCHER_DATE,\n" +
                        "               0.0 AS REC_IN,\n" +
                        "               IFNULL(T.AMOUNT, 0) AS PAY_OUT\n" +
                        "          FROM master_ledger_GROUP LG\n" +
                        "          LEFT JOIN master_ledger ML\n" +
                        "            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "          LEFT JOIN voucher_trans VT\n" +
                        "            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "          LEFT JOIN voucher_master_trans MT\n" +
                        "            ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "          JOIN (SELECT VT.VOUCHER_ID, VT.LEDGER_ID, ML.LEDGER_CODE,SUM(VT.AMOUNT) AS AMOUNT\n" +
                        "                  FROM master_ledger_GROUP LG\n" +
                        "\n" +
                        "                  LEFT JOIN master_ledger ML\n" +
                        "                    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "                  LEFT JOIN voucher_trans VT\n" +
                        "                    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "                  LEFT JOIN voucher_master_trans MT\n" +
                        "                    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "                 WHERE MT.VOUCHER_TYPE IN('PY')\n" +
                        "                   AND mt.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "                   AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "                   and lg.group_id in (13)\n" +
                        "                   AND MT.STATUS = 1\n" +
                        "                 GROUP BY MT.VOUCHER_DATE) AS T\n" +
                        "            ON MT.VOUCHER_ID = T.VOUCHER_ID\n" +
                        "         WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "           AND MT.VOUCHER_TYPE IN('PY')\n" +
                        "           AND MT.STATUS = 1\n" +
                        "           AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "           AND LG.GROUP_ID NOT IN (12)\n" +
                        "         GROUP BY MT.PROJECT_ID,MT.VOUCHER_DATE\n" +
                        "        UNION ALL\n" +
                        "        SELECT T.VOUCHER_ID,\n" +
                        "               T.VOUCHER_DATE,\n" +
                        "               SUM(T.AMOUNT) AS REC_IN,\n" +
                        "               '' AS PAY_OUT\n" +
                        "          FROM (SELECT VT.VOUCHER_ID,\n" +
                        "                       LG.GROUP_ID,\n" +
                        "                       MT.VOUCHER_TYPE,\n" +
                        "                       VT.AMOUNT,\n" +
                        "                       MT.VOUCHER_DATE,\n" +
                        "                       MT.PROJECT_ID\n" +
                        "                  FROM master_ledger_GROUP LG\n" +
                        "                  LEFT JOIN master_ledger ML\n" +
                        "                    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "                  LEFT JOIN voucher_trans VT\n" +
                        "                    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "                  LEFT JOIN voucher_master_trans MT\n" +
                        "                    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "                 WHERE VT.TRANS_MODE = 'DR'\n" +
                        "                   AND PROJECT_ID IN (?PROJECT_ID)\n" +
                        "                   AND MT.STATUS = 1\n" +
                        "                   AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO " +
                        "                 ORDER BY VT.VOUCHER_ID ASC) AS T\n" +
                        "         WHERE T.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "           AND T.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO " +
                        "           AND T.GROUP_ID IN (13)\n" +
                        "           AND T.VOUCHER_TYPE = 'CN'\n" +
                        "         GROUP BY T.PROJECT_ID,T.VOUCHER_DATE\n" +
                        "        UNION\n" +
                        "        SELECT T.VOUCHER_ID,\n" +
                        "               T.VOUCHER_DATE,\n" +
                        "               '' AS REC_IN,\n" +
                        "               SUM(T.AMOUNT) AS PAY_OUT\n" +
                        "\n" +
                        "          FROM (SELECT VT.VOUCHER_ID,\n" +
                        "                       LG.GROUP_ID,\n" +
                        "                       MT.VOUCHER_TYPE,\n" +
                        "                       VT.AMOUNT,\n" +
                        "                       MT.VOUCHER_DATE,\n" +
                        "                       MT.PROJECT_ID\n" +
                        "                  FROM master_ledger_GROUP LG\n" +
                        "                  LEFT JOIN master_ledger ML\n" +
                        "                    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "                  LEFT JOIN voucher_trans VT\n" +
                        "                    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "                  LEFT JOIN voucher_master_trans MT\n" +
                        "                    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "                 WHERE VT.TRANS_MODE = 'CR'\n" +
                        "                   AND PROJECT_ID IN (?PROJECT_ID)\n" +
                        "                   AND MT.STATUS = 1\n" +
                        "                   AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO " +
                        "                 ORDER BY VT.VOUCHER_ID ASC) AS T\n" +
                        "         WHERE T.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "           AND T.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO " +
                        "           AND T.GROUP_ID IN (13)\n" +
                        "           AND T.VOUCHER_TYPE = 'CN'\n" +
                        "         GROUP BY T.PROJECT_ID,T.VOUCHER_DATE) AS TT\n" +
                        " GROUP BY TT.VOUCHER_DATE;";

                        break;
                    }
                #endregion

                #region DayBook
                case ReportSQLCommand.BankReport.DayBook:
                    {
                        query =
                                "SELECT FN.VOUCHER_ID,\n" +
                                "       FN.VOUCHER_NO,\n" +
                                "       FN.DATE, IFNULL(CB.CASH_BANK,'') AS CASH_BANK,\n" +
                                "       FN.PARTICULARS,\n" +
                                "       FN.DEBIT AS DEBIT,\n" +
                                "       FN.CREDIT AS CREDIT,\n" +
                                "       CONCAT(FN.NARRATION, IF(FN.VOUCHER_SUB_TYPE='FD', CONCAT(' FD: ', FD.FD_ACCOUNT_NUMBER), '')) AS NARRATION,\n" +
                                "       FN.VOUCHER_TYPE,\n" +
                                "       FN.VOUCHER_TYPE_NAME, FN.VOUCHER_DEFINITION_ID,\n" +
                                "       FN.LEDGER_GROUP,\n" +
                                "       FN.VOUCHER_SUB_TYPE,\n" +
                                "       FN.PARTICULAR_TYPE\n" +
                                "  FROM (SELECT MT.VOUCHER_ID,\n" +
                               "       MT.VOUCHER_NO,\n" +
                               "       MT.VOUCHER_DATE AS DATE,\n" +
                               "       ML.LEDGER_NAME AS PARTICULARS,\n" +
                               "       0 AS DEBIT,\n" +
                               "       SUM((VT.AMOUNT * IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1))) AS CREDIT,\n" +
                               "       MT.NARRATION,\n" +
                               "       CASE\n" +
                               "         WHEN MT.VOUCHER_TYPE = 'RC' THEN\n" +
                               "          'Receipt'\n" +
                               "     --    WHEN MT.VOUCHER_TYPE = 'PY' THEN\n" +
                               "     --     'Payment'\n" +
                               "       END AS VOUCHER_TYPE,\n" +
                               "       MV.VOUCHER_NAME AS VOUCHER_TYPE_NAME, MT.VOUCHER_DEFINITION_ID,\n" +
                               "       LG.LEDGER_GROUP,\n" +
                                "      MT.VOUCHER_SUB_TYPE,\n" +
                                " '" + DrillDownType.LEDGER_CASHBANK_VOUCHER + "' as PARTICULAR_TYPE\n" +
                               "\n" +
                               "  FROM master_ledger_GROUP LG\n" +
                               "\n" +
                               "  LEFT JOIN master_ledger ML\n" +
                               "    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                               "  LEFT JOIN voucher_trans VT\n" +
                               "    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                               "  LEFT JOIN voucher_master_trans MT\n" +
                               "    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                               "  LEFT JOIN master_voucher MV\n" +
                               "    ON MV.VOUCHER_ID = MT.VOUCHER_DEFINITION_ID\n" +
                               "\n" +
                               " WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                               "   AND MT.VOUCHER_TYPE IN ('RC')\n" +  //, 'PY'
                               "   AND VT.TRANS_MODE = 'CR'\n" +
                               "   AND MT.STATUS = 1 AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)\n" +
                               "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                               "   and lg.group_id not in (12, 13, 14)\n" +
                               " GROUP BY MT.VOUCHER_ID\n" +
                               "UNION\n" +
                               "SELECT MT.VOUCHER_ID,\n" +
                               "       MT.VOUCHER_NO,\n" +
                               "       MT.VOUCHER_DATE AS DATE,\n" +
                               "       ML.LEDGER_NAME AS PARTICULARS,\n" +
                               "       SUM((VT.AMOUNT * IF(MT.IS_MULTI_CURRENCY=1 {AND ?CURRENCY_COUNTRY_ID=0}, VT.EXCHANGE_RATE, 1))) AS DEBIT,\n" +
                               "       0 AS CREDIT,\n" +
                               "       MT.NARRATION,\n" +
                               "       CASE\n" +
                               "     --    WHEN MT.VOUCHER_TYPE = 'RC' THEN\n" +
                               "     --     'Receipt'\n" +
                               "         WHEN MT.VOUCHER_TYPE = 'PY' THEN\n" +
                               "          'Payment'\n" +
                               "       END AS VOUCHER_TYPE,\n" +
                               "       MV.VOUCHER_NAME AS VOUCHER_TYPE_NAME, MT.VOUCHER_DEFINITION_ID,\n" +
                               "       LG.LEDGER_GROUP,\n" +
                                "      MT.VOUCHER_SUB_TYPE,\n" +
                                " '" + DrillDownType.LEDGER_CASHBANK_VOUCHER + "' as PARTICULAR_TYPE\n" +
                               "\n" +
                               "  FROM master_ledger_GROUP LG\n" +
                               "\n" +
                               "  LEFT JOIN master_ledger ML\n" +
                               "    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                               "  LEFT JOIN voucher_trans VT\n" +
                               "    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                               "  LEFT JOIN voucher_master_trans MT\n" +
                               "    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                               "  LEFT JOIN master_voucher MV\n" +
                               "    ON MV.VOUCHER_ID = MT.VOUCHER_DEFINITION_ID\n" +
                               "\n" +
                               " WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                               "   AND MT.VOUCHER_TYPE IN ('PY')\n" +  //'RC', 
                               "   AND VT.TRANS_MODE = 'DR'\n" +
                               "   AND MT.STATUS = 1 AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)\n" +
                               "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                               "   and lg.group_id not in (12, 13, 14)\n" +
                               " GROUP BY MT.VOUCHER_ID\n" +
                               "\n" +
                               "UNION\n" +
                               "        SELECT MT.VOUCHER_ID,\n" +
                               "               MT.VOUCHER_NO,\n" +
                               "               MT.VOUCHER_DATE AS DATE,\n" +
                               "               ML.LEDGER_NAME,\n" +
                               "              SUM((VT.AMOUNT * IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1))) AS DEBIT,\n" +
                               "               0 AS CREDIT,\n" +
                               "               MT.NARRATION,\n" +
                               "               'Contra' as VOUCHER_TYPE,\n" +
                               "              MV.VOUCHER_NAME AS VOUCHER_TYPE_NAME, MT.VOUCHER_DEFINITION_ID, \n" +
                               "              LG.LEDGER_GROUP,\n" +
                                "             MT.VOUCHER_SUB_TYPE,\n" +
                                " '" + DrillDownType.LEDGER_CASHBANK_VOUCHER + "' as PARTICULAR_TYPE\n" +
                               "\n" +
                               "          FROM master_ledger_GROUP LG\n" +
                               "\n" +
                               "          LEFT JOIN master_ledger ML\n" +
                               "            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                               "          LEFT JOIN voucher_trans VT\n" +
                               "            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                               "          LEFT JOIN voucher_master_trans MT\n" +
                               "            ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                               "          LEFT JOIN master_voucher MV\n" +
                               "            ON MV.VOUCHER_ID = MT.VOUCHER_DEFINITION_ID\n" +
                               "\n" +
                               "         WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                               "           AND MT.VOUCHER_TYPE IN ('CN')\n" +
                               "           AND VT.TRANS_MODE = 'DR'\n" +
                               "           AND MT.STATUS = 1 AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)\n" +
                               "           AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                               "           and lg.group_id in (12, 13, 14)\n" +
                               "         GROUP BY MT.VOUCHER_ID \n" +
                               "UNION\n" +
                               "        SELECT MT.VOUCHER_ID,\n" +
                               "               MT.VOUCHER_NO,\n" +
                               "               MT.VOUCHER_DATE AS DATE,\n" +
                               "               ML.LEDGER_NAME,\n" +
                               "               SUM((VT.AMOUNT * IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1))) AS DEBIT,\n" +
                               "               0 AS CREDIT,\n" +
                               "               MT.NARRATION,\n" +
                               "               'Journal' as VOUCHER_TYPE,\n" +
                               "              MV.VOUCHER_NAME AS VOUCHER_TYPE_NAME, MT.VOUCHER_DEFINITION_ID, \n" +
                               "              LG.LEDGER_GROUP,\n" +
                                "             MT.VOUCHER_SUB_TYPE,\n" +
                                " '" + DrillDownType.LEDGER_JOURNAL_VOUCHER + "' as PARTICULAR_TYPE\n" +
                               "\n" +
                               "          FROM master_ledger_GROUP LG\n" +
                               "\n" +
                               "          LEFT JOIN master_ledger ML\n" +
                               "            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                               "          LEFT JOIN voucher_trans VT\n" +
                               "            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                               "          LEFT JOIN voucher_master_trans MT\n" +
                               "            ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                               "          LEFT JOIN master_voucher MV\n" +
                               "            ON MV.VOUCHER_ID = MT.VOUCHER_DEFINITION_ID\n" +
                               "\n" +
                               "         WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                               "           AND MT.VOUCHER_TYPE IN ('JN')\n" +
                               "           AND VT.TRANS_MODE = 'DR'\n" +
                               "           AND MT.STATUS = 1 AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)\n" +
                               "           AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                            //"           and lg.group_id NOT in (12, 13, 14)\n" +
                               "         GROUP BY MT.VOUCHER_ID) AS FN\n" +
                               " LEFT JOIN (SELECT FDA.FD_ACCOUNT_ID, 0 AS VOUCHER_ID, RNO.FD_INTEREST_VOUCHER_ID, RNO.FD_VOUCHER_ID,\n" +
                               "          RNO.RENEWAL_DATE, IFNULL(RNO.RECEIPT_NO,'') AS RECEIPT_NO,\n" +
                               "          CONCAT(FDA.FD_ACCOUNT_NUMBER,  IF(IFNULL(RNO.RECEIPT_NO,'')='', '', CONCAT(' (R: ', IFNULL(RNO.RECEIPT_NO,''),')')) ) AS FD_ACCOUNT_NUMBER\n" +
                               "          FROM FD_ACCOUNT AS FDA\n" +
                               "          INNER JOIN (SELECT FR.FD_ACCOUNT_ID, FR.FD_INTEREST_VOUCHER_ID, FR.FD_VOUCHER_ID,FR.RENEWAL_DATE, \n" +
                               "                   SUBSTRING_INDEX(GROUP_CONCAT(FR1.RECEIPT_NO ORDER BY FR1.RENEWAL_DATE DESC SEPARATOR '|'), '|', 1) AS RECEIPT_NO \n" +
                               "                   FROM FD_RENEWAL AS FR\n" +
                               "                   LEFT JOIN (SELECT FR1.FD_ACCOUNT_ID, FR1.RENEWAL_DATE AS RENEWAL_DATE, IFNULL(FR1.RECEIPT_NO, '') AS RECEIPT_NO\n" +
                               "                       FROM FD_RENEWAL AS FR1\n" +
                               "                       INNER JOIN FD_ACCOUNT FD1 ON FD1.FD_ACCOUNT_ID = FR1.FD_ACCOUNT_ID\n" +
                               "                       WHERE FD1.STATUS =1 AND FD1.PROJECT_ID IN (?PROJECT_ID) AND FR1.STATUS =1 AND FR1.FD_TYPE = 'RN' AND FR1.RENEWAL_DATE<=?DATE_TO) AS FR1\n" +
                               "                   ON FR1.FD_ACCOUNT_ID= FR.FD_ACCOUNT_ID AND FR1.RENEWAL_DATE<FR.RENEWAL_DATE\n" +
                               "                   WHERE STATUS =1 GROUP BY FR.FD_ACCOUNT_ID, FR.FD_RENEWAL_ID) AS RNO\n" + //FR1.RENEWAL_DATE
                               "           ON RNO.FD_ACCOUNT_ID = FDA.FD_ACCOUNT_ID WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)\n" +
                               "           UNION ALL SELECT FDA.FD_ACCOUNT_ID, FDA.FD_VOUCHER_ID, 0 AS FD_INTEREST_VOUCHER_ID, 0 AS FD_VOUCHER_ID, FDA.INVESTMENT_DATE, '' AS RECEIPT_NO, \n" +
                               "           FDA.FD_ACCOUNT_NUMBER FROM FD_ACCOUNT AS FDA WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)) AS FD\n" +
                               "    ON FD.VOUCHER_ID = FN.VOUCHER_ID OR FD.FD_INTEREST_VOUCHER_ID = FN.VOUCHER_ID OR FD.FD_VOUCHER_ID = FN.VOUCHER_ID\n" +
                               " LEFT JOIN (SELECT VT.VOUCHER_ID, IF(ML.GROUP_ID = 12,\n" +
                               "         CONCAT(ML.LEDGER_NAME, CONCAT(' - ' , CONCAT(MB.BANK, CONCAT(' - ', MB.BRANCH))),  ' ' , IFNULL(MB.IFSCCODE, '') ), ML.LEDGER_NAME) AS CASH_BANK,\n" +
                               "         SUM(VT.AMOUNT) AS CASH_BANK_AMOUNT\n" +
                               "         FROM VOUCHER_TRANS VT\n" +
                               "         INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                               "         LEFT JOIN MASTER_BANK_ACCOUNT BA ON BA.LEDGER_ID = ML.LEDGER_ID\n" +
                               "         LEFT JOIN MASTER_BANK MB ON BA.BANK_ID = MB.BANK_ID\n" +
                               "         WHERE ML.GROUP_ID IN (12, 13, 14)\n" +
                               "         GROUP BY VT.VOUCHER_ID) AS CB ON CB.VOUCHEr_ID = FN.VOUCHER_ID\n" +
                               " ORDER BY FN.DATE, VOUCHER_NO;";
                        break;
                    }
                #endregion

                #region ReferenceNo

                case ReportSQLCommand.BankReport.ReferenceNo:
                    {
                        query = "SELECT VT.VOUCHER_ID,VOUCHER_SUB_TYPE,\n" +
                                            "       VT.LEDGER_ID,\n" +
                                            "       DATE_FORMAT(VMT.VOUCHER_DATE, '%d/%m/%Y') AS DATE,\n" +
                                            "       VT.REFERENCE_NUMBER,\n" +
                                            "       ML.LEDGER_NAME AS PARTY_NAME,\n" +
                                            "       SUM(VT.AMOUNT) AS ACTUAL_AMOUNT,\n" +
                                            "       IFNULL(BILLING.AMOUNT, 0) AS PAID_AMOUNT,\n" +
                                            "       (SUM(VT.AMOUNT) - IFNULL(BILLING.AMOUNT, 0)) AS BALANCE_AMOUNT, IFNULL(BILLING.REC_PAY_VOUCHER_ID,'') AS REC_PAY_VOUCHER_ID\n" +
                                            "\n" +
                                            "  FROM VOUCHER_MASTER_TRANS VMT\n" +
                                            " INNER JOIN VOUCHER_TRANS VT\n" +
                                            "    ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                            " INNER JOIN MASTER_LEDGER ML\n" +
                                            "    ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                            "  LEFT JOIN (SELECT REF_VOUCHER_ID,\n" +
                                            "                    LEDGER_ID,\n" +
                                            "                    SUM(IFNULL(AMOUNT, 0)) AS AMOUNT, GROUP_CONCAT(VR.REC_PAY_VOUCHER_ID) as REC_PAY_VOUCHER_ID\n" +
                                            "               FROM VOUCHER_REFERENCE VR LEFT JOIN VOUCHER_MASTER_TRANS VMT\n" +
                                            "               ON VMT.VOUCHER_ID = VR.REC_PAY_VOUCHER_ID\n" +
                                            "              WHERE REC_PAY_VOUCHER_ID <> 0 AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO \n" +
                                            "              GROUP BY REF_VOUCHER_ID, LEDGER_ID) BILLING\n" +
                                            "    ON BILLING.REF_VOUCHER_ID = VT.VOUCHER_ID\n" +
                                            "   AND BILLING.LEDGER_ID = VT.LEDGER_ID\n" +
                                            " WHERE VMT.PROJECT_ID IN(?PROJECT_ID)\n" +
                                            "   AND VT.REFERENCE_NUMBER <> '' AND VMT.STATUS=1 \n" +
                                            "   AND VMT.VOUCHER_TYPE = '" + Utility.VoucherSubTypes.JN.ToString() + "'\n" +
                                            "   AND VT.TRANS_MODE = '" + Utility.TransSource.Cr.ToString() + "'\n" +
                                            "   AND ML.GROUP_ID IN (" + (Int32)Utility.TDSDefaultLedgers.SunderyCreditors + "," + (Int32)Utility.TDSDefaultLedgers.SundryDebtors + ")\n" +
                                            "   AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND\n" +
                                            "       ?DATE_TO\n" +
                                            " GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID, VT.REFERENCE_NUMBER\n" +
                                            " ORDER BY VMT.VOUCHER_DATE, VT.REFERENCE_NUMBER, ML.LEDGER_NAME";
                        break;
                    }
                #endregion

                #region Financial Positions
                case ReportSQLCommand.BankReport.FinancialPosition:
                    {
                        query = "SELECT ML.LEDGER_ID,\n" +
                                    "       MP.PROJECT_ID,\n" +
                                    "       MP.PROJECT,\n" +
                                    "       CONCAT(MB.BANK, CONCAT(' -', MB.BRANCH)) AS BANK, MB.IFSCCODE,\n" +
                                    "       LG.GROUP_ID,\n" +
                                    "       ML.LEDGER_NAME,\n" +
                                    "       MBA.OPERATED_BY,\n" +
                                     "      ML.NOTES AS PURPOSES,\n" +
                                    "       ABS(SUM(CASE\n" +
                                    "                 WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                                    "                  LB2.AMOUNT\n" +
                                    "                 ELSE\n" +
                                    "                  -LB2.AMOUNT\n" +
                                    "               END)) AS AMOUNT,\n" +
                                    "       SUM(CASE\n" +
                                    "             WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                                    "              LB2.AMOUNT\n" +
                                    "             ELSE\n" +
                                    "              0\n" +
                                    "           END) AS AMOUNT_DR,\n" +
                                    "       SUM(CASE\n" +
                                    "             WHEN LB2.TRANS_MODE = 'CR' THEN\n" +
                                    "              LB2.AMOUNT\n" +
                                    "             ELSE\n" +
                                    "              0\n" +
                                    "           END) AS AMOUNT_CR,\n" +
                                    "       CASE\n" +
                                    "         WHEN (SUM(CASE\n" +
                                    "                     WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                                    "                      LB2.AMOUNT\n" +
                                    "                     ELSE\n" +
                                    "                      -LB2.AMOUNT\n" +
                                    "                   END) >= 0) THEN\n" +
                                    "          'DR'\n" +
                                    "         ELSE\n" +
                                    "          'CR'\n" +
                                    "       END AS TRANS_MODE\n" +
                                    "  FROM MASTER_LEDGER AS ML\n" +
                                    " INNER JOIN MASTER_LEDGER_GROUP AS LG\n" +
                                    "    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                    "INNER JOIN PROJECT_LEDGER AS PL ON PL.PROJECT_ID IN (?PROJECT_ID) AND PL.LEDGER_ID = ML.LEDGER_ID" + //On 09/05/2017, To show zero value cash/bank/Fd Opening/Closing Balance Skip unmapped ledgers: Changed INNER JOIN with PROJECT_LEDGERS
                                    "  LEFT JOIN MASTER_BANK_ACCOUNT AS MBA\n" +
                                    "    ON ML.LEDGER_ID = MBA.LEDGER_ID\n" +
                                    "  LEFT JOIN MASTER_BANK AS MB\n" +
                                    "    ON MBA.BANK_ID = MB.BANK_ID\n" +
                                    "\n" +
                                    " LEFT JOIN (SELECT LB.BALANCE_DATE,\n" +
                                    "                    LB.PROJECT_ID,\n" +
                                    "                    LB.LEDGER_ID,\n" +
                                    "                    LB.AMOUNT,\n" +
                                    "                    LB.TRANS_MODE\n" +
                                    "               FROM LEDGER_BALANCE AS LB\n" +
                                    "               LEFT JOIN (SELECT LBA.PROJECT_ID,\n" +
                                    "                                LBA.LEDGER_ID,\n" +
                                    "                                MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
                                    "                           FROM LEDGER_BALANCE LBA\n" +
                                    "                          WHERE 1 = 1\n" +
                                    "                            {AND LBA.BALANCE_DATE <=?BALANCE_DATE}\n" +
                                    "                          GROUP BY LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB1\n" +
                                    "                 ON LB.PROJECT_ID = LB1.PROJECT_ID\n" +
                                    "                AND LB.LEDGER_ID = LB1.LEDGER_ID\n" +
                                    "              WHERE LB.PROJECT_ID IN (?PROJECT_ID)\n" +
                                    "                AND LB.BALANCE_DATE = LB1.BAL_DATE) LB2\n" +
                                    "    ON ML.LEDGER_ID = LB2.LEDGER_ID AND PL.PROJECT_ID = LB2.PROJECT_ID \n" +
                                    "  LEFT JOIN MASTER_PROJECT MP\n" +
                                    "    ON MP.PROJECT_ID = PL.PROJECT_ID\n" +
                                    " WHERE 1 = 1 {AND LG.GROUP_ID IN (?GROUP_ID)}\n" +
                                    " {AND ML.LEDGER_ID IN (?LEDGER_ID)}\n" +
                                    " GROUP BY ML.LEDGER_ID, MP.PROJECT_ID\n" +
                                    " ORDER BY MP.PROJECT,ML.LEDGER_NAME";
                        break;
                    }
                #endregion

                #region Negative Cash and Bank Balance
                case ReportSQLCommand.BankReport.NegativeCashBankBalance:
                    {
                        query = "SELECT MP.PROJECT_ID, ML.LEDGER_ID, ML.GROUP_ID, MP.PROJECT, BALANCE_DATE AS VOUCHER_DATE, ML.LEDGER_NAME,\n" +
                                "CASE WHEN ML.GROUP_ID = " + (int)FixedLedgerGroup.Cash + " THEN AMOUNT ELSE 0.00 END AS CASH,\n" +
                                "CASE WHEN ML.GROUP_ID = " + (int)FixedLedgerGroup.BankAccounts + " THEN AMOUNT ELSE 0.00 END AS BANK\n" +
                                "FROM LEDGER_BALANCE LB\n" +
                                "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = LB.LEDGER_ID\n" +
                                "INNER JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = LB.PROJECT_ID\n" +
                                "WHERE BALANCE_DATE BETWEEN ?DATE_FROM AND  ?DATE_TO AND TRANS_MODE = '" + TransactionMode.CR.ToString() + "'\n" +
                                " AND LB.PROJECT_ID IN (?PROJECT_ID) AND AMOUNT > 0 AND ML.GROUP_ID IN (" + (int)FixedLedgerGroup.Cash + "," + (int)FixedLedgerGroup.BankAccounts + ");";
                        break;
                    }
                #endregion

                #region Fixed Deposit
                case ReportSQLCommand.BankReport.FixedDepositStatement:
                    {
                        query = "SELECT FDA.FD_ACCOUNT_ID, MLG.FD_INVESTMENT_TYPE_ID, FDA.INVESTMENT_DATE AS INVESTED_ON,FDA.ACCOUNT_HOLDER,\n" +
                                "       IFNULL(FDRPO.RENEWAL_DATE, NULL) AS RENEWAL_DATE,\n" +
                                "       IF(MLG.FD_INVESTMENT_TYPE_ID = " + (int)FDInvestmentType.MutualFund + ", NULL,  IFNULL(FDRPO.MATURITY_DATE, FDA.MATURED_ON)) AS MATURITY_DATE,\n" +
                            //"       FDA.FD_ACCOUNT_NUMBER AS FD_NO,\n" +
                                "       CONCAT(FDA.FD_ACCOUNT_NUMBER, IF(IFNULL(FR_RECEIPT_NO.RECEIPT_NO,'')='' ,'',CONCAT(' (R: ',FR_RECEIPT_NO.RECEIPT_NO,')'))) AS FD_NO,\n" +
                                "       IFNULL(FDRPO.RECEIPT_NO,FDA.RECEIPT_NO) AS RECEIPT_NO,\n" +
                                "       CONCAT(MBK.BANK, ' (', MBK.BRANCH, ')') AS BANK,CLOSED_DATE,\n" +
                                "       MLG.LEDGER_NAME,\n" +
                                "       MLG.LEDGER_ID,\n" +
                                "       MPR.PROJECT,\n" +
                                "       IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) AS PRINCIPLE_AMOUNT,\n" +
                                "       IFNULL(FDR.INTEREST_AMOUNT, 0) AS INTEREST_AMOUNT,\n" +
                                "       IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                                "       FDA.AMOUNT + IFNULL(FDR.REINVESTED_AMOUNT, 0) + IFNULL(FDRO.REINVESTED_AMOUNT, 0) + \n" +
                                "       IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                "       IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) +\n" +
                                "       IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) AS TOTAL_AMOUNT,\n" +
                                "       IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) AS WITHDRAWAL_AMOUNT,\n" +
                                "       FDA.AMOUNT + IFNULL(FDR.REINVESTED_AMOUNT, 0) + IFNULL(FDRO.REINVESTED_AMOUNT, 0) + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                "       IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) +\n" +
                                "       IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                "       IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) AS AMOUNT,\n" +
                                "\n" +
                                "       IF(FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                "          IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) +\n" +
                                "          IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                "          IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) = 0,\n" +
                                "          'Closed',\n" +
                                "          'Active') AS CLOSING_STATUS\n" +
                                "  FROM FD_ACCOUNT AS FDA\n" +
                                "  LEFT JOIN (SELECT FR.FD_ACCOUNT_ID,\n" +
                                "                    MAX(FR.MATURITY_DATE) AS MATURITY_DATE,\n" +
                                "                    (FR.RECEIPT_NO) AS RECEIPT_NO,\n" +
                                "                    MAX(FR.RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                                "                    SUM(IF(FR.RENEWAL_TYPE = 'ACI', 0, FR.INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                                "                    SUM(IF(FR.RENEWAL_TYPE = 'ACI', FR.INTEREST_AMOUNT, 0) * IF(FR.RENEWAL_TYPE ='ACI' AND FR.FD_TRANS_MODE='CR', -1, 1) ) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                                "                    SUM(FR.WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT,\n" +
                                "                    SUM(IFNULL(FR.REINVESTED_AMOUNT,0)) AS REINVESTED_AMOUNT\n" +
                                "               FROM FD_RENEWAL FR\n" +
                                "              WHERE FR.STATUS = 1 AND FR.IS_DELETED=1 \n" +
                                "                AND FR.RENEWAL_DATE < ?DATE_FROM \n" +
                                "              GROUP BY FR.FD_ACCOUNT_ID HAVING MAX(FR.FD_RENEWAL_ID)) AS FDRO\n" +
                                "    ON FDA.FD_ACCOUNT_ID = FDRO.FD_ACCOUNT_ID\n" +
                                "\n" +
                                "  LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                                "                    MAX(MATURITY_DATE) AS MATURITY_DATE,\n" +
                                "                    (RECEIPT_NO) AS RECEIPT_NO,\n" +
                                "                    MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                                "                    INTEREST_RATE,\n" +
                                "                    SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                                "                    SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0) * IF(RENEWAL_TYPE ='ACI' AND FD_TRANS_MODE='CR', -1, 1) ) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                                "                    SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT,\n" +
                                "                    SUM(IFNULL(REINVESTED_AMOUNT,0)) AS REINVESTED_AMOUNT\n" +
                                "               FROM FD_RENEWAL\n" +
                                "              WHERE STATUS = 1  AND IS_DELETED=1 \n" +
                                "                AND RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO \n" +
                            //"                AND RENEWAL_DATE <= ?DATE_TO \n" +
                                "              GROUP BY FD_ACCOUNT_ID HAVING MAX(FD_RENEWAL_ID)) AS FDR\n" +
                                "    ON FDA.FD_ACCOUNT_ID = FDR.FD_ACCOUNT_ID\n" +

                                "  LEFT JOIN (SELECT FR.FD_ACCOUNT_ID,\n" +
                                "                    MAX(FR.MATURITY_DATE) AS MATURITY_DATE,\n" +
                                 "                   (FR.RECEIPT_NO) AS RECEIPT_NO,\n" +
                            //"                    MAX(FR.RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                                "                    RDATE.RENEWAL_DATE,\n" +
                                "                    FR.INTEREST_RATE,\n" +
                                "                    SUM(IF(FR.RENEWAL_TYPE = 'ACI', 0, FR.INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                                "                    SUM(IF(FR.RENEWAL_TYPE = 'ACI', FR.INTEREST_AMOUNT, 0) * IF(FR.RENEWAL_TYPE ='ACI' AND FR.FD_TRANS_MODE='CR', -1, 1) ) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                                "                    SUM(FR.WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT,\n" +
                                "                    SUM(IFNULL(FR.REINVESTED_AMOUNT,0)) AS REINVESTED_AMOUNT\n" +
                                "               FROM FD_RENEWAL FR\n" +
                                "               LEFT JOIN (SELECT FD_ACCOUNT_ID, MAX(RENEWAL_DATE) AS RENEWAL_DATE\n" +
                                "               FROM FD_RENEWAL WHERE STATUS = 1 AND IS_DELETED = 1\n" +
                                "                AND (RENEWAL_DATE <= ?DATE_FROM OR RENEWAL_DATE <=?DATE_TO)\n" +
                                "               GROUP BY FD_ACCOUNT_ID) AS RDATE ON RDATE.FD_ACCOUNT_ID = FR.FD_ACCOUNT_ID\n" +
                                "              WHERE FR.FD_TYPE<>'POI' AND FR.STATUS = 1  AND FR.IS_DELETED=1 \n" +
                                "                AND FR.RENEWAL_DATE <= ?DATE_FROM OR FR.RENEWAL_DATE <= ?DATE_TO \n" +
                                "              GROUP BY FR.FD_ACCOUNT_ID HAVING MAX(FR.FD_RENEWAL_ID) ORDER BY FR.FD_ACCOUNT_ID DESC ) AS FDRPO\n" +
                                "    ON FDA.FD_ACCOUNT_ID = FDRPO.FD_ACCOUNT_ID\n" +
                                "  LEFT JOIN (SELECT FDR.FD_ACCOUNT_ID,\n" +
                                "         MAX(MATURITY_DATE) AS MATURITY_DATE,\n" +
                                "         MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                                "         SUM(IF(RENEWAL_TYPE = 'ACI', 0, FDR.INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                                "         SUM(IF(RENEWAL_TYPE = 'ACI', FDR.INTEREST_AMOUNT, 0) * IF(RENEWAL_TYPE ='ACI' AND FD_TRANS_MODE='CR', -1, 1) ) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                                "         SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT,\n" +
                                "         SUM(AMOUNT) AS PRINCIPAL_AMOUNT,\n" +
                                "         SUM(IFNULL(REINVESTED_AMOUNT,0)) AS REINVESTED_AMOUNT,\n" +
                                 "         IF((SUM(AMOUNT) - SUM(WITHDRAWAL_AMOUNT)) = 0,\n" +
                                 "            RENEWAL_DATE,\n" +
                                 "            NULL) AS CLOSED_DATE\n" +
                                 "          FROM FD_RENEWAL FDR\n" +
                                 "         INNER JOIN FD_ACCOUNT FDA\n" +
                                 "            ON FDR.FD_ACCOUNT_ID = FDA.FD_ACCOUNT_ID\n" +
                                 "         WHERE FDR.STATUS = 1\n" +
                                 "           AND FD_TYPE <> 'POI'\n" +
                                 "           AND IS_DELETED = 1\n" +
                                 "           AND FD_TYPE = 'WD'\n" +
                                 "           AND RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                 "         GROUP BY FD_ACCOUNT_ID\n" +
                                 "         ORDER BY FD_ACCOUNT_ID DESC) FD\n" +
                                 "            ON FDA.FD_ACCOUNT_ID = FD.FD_ACCOUNT_ID\n" +
                                 "  LEFT JOIN (SELECT FR.FD_ACCOUNT_ID, IFNULL(FR.RECEIPT_NO,'') AS RECEIPT_NO\n" +
                                 "               FROM FD_RENEWAL FR\n" +
                                 "               INNER JOIN (SELECT FD_ACCOUNT_ID, MAX(RENEWAL_DATE) AS RENEWAL_DATE FROM FD_RENEWAL\n" +
                                 "               WHERE STATUS =1 AND FD_TYPE='RN' AND (RENEWAL_DATE <=?DATE_FROM OR RENEWAL_DATE <= ?DATE_TO) GROUP BY FD_ACCOUNT_ID) FR1 ON FR1.FD_ACCOUNT_ID = FR.FD_ACCOUNT_ID\n" +
                                 "               AND FR1.RENEWAL_DATE = FR.RENEWAL_DATE\n" +
                                 "               WHERE FR.STATUS = 1 AND FD_TYPE = 'RN') AS FR_RECEIPT_NO ON FR_RECEIPT_NO.FD_ACCOUNT_ID = FDA.FD_ACCOUNT_ID\n" +
                                 "  LEFT JOIN MASTER_BANK AS MBK\n" +
                                 "    ON FDA.BANK_ID = MBK.BANK_ID\n" +
                                 "  LEFT JOIN MASTER_PROJECT MPR\n" +
                                 "    ON FDA.PROJECT_ID = MPR.PROJECT_ID\n" +
                                 "  LEFT JOIN MASTER_LEDGER MLG\n" +
                                 "    ON FDA.LEDGER_ID = MLG.LEDGER_ID\n" +
                                 " WHERE FDA.STATUS = 1\n" +
                                 "   AND FDA.INVESTMENT_DATE <= ?DATE_TO \n" +
                                 " {AND MPR.PROJECT_ID IN (?PROJECT_ID)}\n" +
                                 " {AND MLG.FD_INVESTMENT_TYPE_ID= ?FD_INVESTMENT_TYPE_ID} { AND FDA.CURRENCY_COUNTRY_ID= ?CURRENCY_COUNTRY_ID}\n" +
                                 " AND FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                 "       IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) <> 0";
                        break;
                    }
                #endregion

                #region Bank Balance Statement
                case ReportSQLCommand.BankReport.BankBalanceStatement:
                    {
                        query = "SELECT LG.GROUP_ID,\n" +
                        "       MBA.BANK_ACCOUNT_ID, ML.LEDGER_ID, \n" +
                        "\n" +
                        "       LG.GROUP_CODE,\n" +
                        "       LG.LEDGER_GROUP,\n" +
                        "       MBA.ACCOUNT_NUMBER,\n" +
                        "       CONCAT(MB.BANK, ' - ', MB.BRANCH) AS 'BANK',\n" +
                        "       CONCAT(MD.DIVISION, ' - ', MP.PROJECT) AS 'PROJECT',\n" +
                        "       ABS(SUM(CASE\n" +
                        "                 WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                        "                  LB2.AMOUNT\n" +
                        "                 ELSE\n" +
                        "                  -LB2.AMOUNT\n" +
                        "               END)) AS AMOUNT,\n" +
                        "       SUM(CASE\n" +
                        "             WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                        "              LB2.AMOUNT\n" +
                        "             ELSE\n" +
                        "              0\n" +
                        "           END) AS AMOUNT_DR,\n" +
                        "       SUM(CASE\n" +
                        "             WHEN LB2.TRANS_MODE = 'CR' THEN\n" +
                        "              LB2.AMOUNT\n" +
                        "             ELSE\n" +
                        "              0\n" +
                        "           END) AS AMOUNT_CR,\n" +
                        "       CASE\n" +
                        "         WHEN (SUM(CASE\n" +
                        "                     WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                        "                      LB2.AMOUNT\n" +
                        "                     ELSE\n" +
                        "                      -LB2.AMOUNT\n" +
                        "                   END) >= 0) THEN\n" +
                        "          'DR'\n" +
                        "         ELSE\n" +
                        "          'CR'\n" +
                        "       END AS TRANS_MODE\n" +
                        "  FROM MASTER_LEDGER AS ML\n" +
                        " INNER JOIN MASTER_LEDGER_GROUP AS LG\n" +
                        "    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        " INNER JOIN (SELECT LB.BALANCE_DATE, LB.PROJECT_ID, LB.LEDGER_ID, IF(ML.CUR_COUNTRY_ID >0, LB.AMOUNT_FC ,LB.AMOUNT) AS AMOUNT, LB.TRANS_MODE\n" +
                        "               FROM LEDGER_BALANCE AS LB INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = LB.LEDGER_ID\n" +
                        "               LEFT JOIN (SELECT LBA.PROJECT_ID, LBA.LEDGER_ID, MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
                        "                           FROM LEDGER_BALANCE LBA\n" +
                        "                          WHERE 1 = 1 AND LBA.BALANCE_DATE <= ?DATE_FROM\n" +
                        "                          GROUP BY LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB1\n" +
                        "                 ON LB.PROJECT_ID = LB1.PROJECT_ID AND LB.LEDGER_ID = LB1.LEDGER_ID\n" +
                        "              WHERE LB.PROJECT_ID IN (?PROJECT_ID) AND LB.BALANCE_DATE = LB1.BAL_DATE) LB2\n" +
                        "    ON ML.LEDGER_ID = LB2.LEDGER_ID\n" +
                        " INNER JOIN MASTER_PROJECT MP ON LB2.PROJECT_ID = MP.PROJECT_ID\n" +
                        " INNER JOIN MASTER_DIVISION MD ON MP.DIVISION_ID = MD.DIVISION_ID\n" +
                        " INNER JOIN MASTER_BANK_ACCOUNT MBA ON ML.LEDGER_ID = MBA.LEDGER_ID\n" +
                        " INNER JOIN MASTER_BANK MB ON MBA.BANK_ID = MB.BANK_ID\n" +
                        " WHERE LG.GROUP_ID IN (12) AND ML.LEDGER_ID IN (?LEDGER_ID)\n" +
                        " GROUP BY ML.LEDGER_ID, MP.PROJECT_ID;";
                        break;
                    }
                #endregion

                #region Bank currect Closing Balance
                case ReportSQLCommand.BankReport.BankCurrentClosingBalance:
                    {
                        query = "SELECT LG.GROUP_ID,\n" +
                        "       MBA.BANK_ACCOUNT_ID,\n" +
                        "       LG.GROUP_CODE,\n" +
                        "       LG.LEDGER_GROUP,\n" +
                        "       ABS(SUM(CASE\n" +
                        "                 WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                        "                  LB2.AMOUNT\n" +
                        "                 ELSE\n" +
                        "                  -LB2.AMOUNT\n" +
                        "               END)) AS AMOUNT,\n" +
                        "       SUM(CASE\n" +
                        "             WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                        "              LB2.AMOUNT\n" +
                        "             ELSE\n" +
                        "              0\n" +
                        "           END) AS AMOUNT_DR,\n" +
                        "       SUM(CASE\n" +
                        "             WHEN LB2.TRANS_MODE = 'CR' THEN\n" +
                        "              LB2.AMOUNT\n" +
                        "             ELSE\n" +
                        "              0\n" +
                        "           END) AS AMOUNT_CR,\n" +
                        "       CASE\n" +
                        "         WHEN (SUM(CASE\n" +
                        "                     WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                        "                      LB2.AMOUNT\n" +
                        "                     ELSE\n" +
                        "                      -LB2.AMOUNT\n" +
                        "                   END) >= 0) THEN\n" +
                        "          'DR'\n" +
                        "         ELSE\n" +
                        "          'CR'\n" +
                        "       END AS TRANS_MODE\n" +
                        " FROM MASTER_LEDGER AS ML\n" +
                        " INNER JOIN MASTER_LEDGER_GROUP AS LG ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        " INNER JOIN (SELECT LB.BALANCE_DATE, LB.PROJECT_ID, LB.LEDGER_ID, IF(ML.CUR_COUNTRY_ID >0, LB.AMOUNT_FC, LB.AMOUNT) AS AMOUNT, LB.TRANS_MODE\n" +
                        "               FROM LEDGER_BALANCE AS LB INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = LB.LEDGER_ID\n" +
                        "               LEFT JOIN (SELECT LBA.PROJECT_ID, LBA.LEDGER_ID, MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
                        "                          FROM LEDGER_BALANCE LBA\n" +
                        "                          WHERE 1 = 1 AND LBA.BALANCE_DATE <= ?DATE_AS_ON\n" +
                        "                          GROUP BY LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB1\n" +
                        "                 ON LB.PROJECT_ID = LB1.PROJECT_ID\n" +
                        "                AND LB.LEDGER_ID = LB1.LEDGER_ID\n" +
                        "              WHERE LB.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "                AND LB.BALANCE_DATE = LB1.BAL_DATE) LB2\n" +
                        "    ON ML.LEDGER_ID = LB2.LEDGER_ID\n" +
                        " INNER JOIN MASTER_BANK_ACCOUNT MBA ON ML.LEDGER_ID = MBA.LEDGER_ID\n" +
                        " WHERE LG.GROUP_ID IN (12) AND MBA.LEDGER_ID IN (?LEDGER_ID)\n" +
                        " GROUP BY LG.GROUP_ID, LG.GROUP_CODE, LG.LEDGER_GROUP;";
                        break;
                    }
                #endregion

                #region Fetch FD Register Details
                case ReportSQLCommand.BankReport.FetchFDRegisterDetails:
                    {
                        query = "SELECT FDA.FD_ACCOUNT_ID,FDA.INVESTMENT_DATE,\n" +
                                "       FDA.PROJECT_ID, MLG.FD_INVESTMENT_TYPE_ID, FDA.FD_SCHEME,\n" +
                                "       IF(MLG.FD_INVESTMENT_TYPE_ID = " + (int)FDInvestmentType.MutualFund + ", NULL,  IFNULL(FDRR.MATURITY_DATE, FDA.MATURED_ON)) AS MATURITY_DATE,\n" +
                                "       IFNULL(FDRR.EXPECTED_MATURITY_VALUE, FDA.EXPECTED_MATURITY_VALUE) AS EXPECTED_MATURITY_VALUE,\n" +
                                "       IFNULL(FDRR.RENEWAL_DATE, NULL) AS RENEWAL_DATE,\n" +
                            //"       FDA.FD_ACCOUNT_NUMBER,\n" +
                            //"      IFNULL(CONCAT(FDA.FD_ACCOUNT_NUMBER, IF(FDRR.RECEIPT_NO='','',CONCAT(' (R: ',FDRR.RECEIPT_NO,')'))), FD_ACCOUNT_NUMBER) as FD_ACCOUNT_NUMBER,\n" +
                            //"      CASE WHEN (FDRR.RECEIPT_NO IS NULL || FDA.RECEIPT_NO IS NULL)\n" +
                            //"       THEN\n" +
                            //"     CONCAT(FDA.FD_ACCOUNT_NUMBER, IF((FDA.RECEIPT_NO='' || FDA.RECEIPT_NO IS NULL)  ,'',CONCAT(' (R: ',FDA.RECEIPT_NO,')')))\n" +
                            //"     ELSE\n" +
                            //"     CONCAT(FDA.FD_ACCOUNT_NUMBER, IF((FDRR.RECEIPT_NO='' || FDRR.RECEIPT_NO IS NULL)  ,'',CONCAT(' (R: ',FDRR.RECEIPT_NO,')')))\n" +
                            //"     END AS FD_ACCOUNT_NUMBER,\n" +
                                "       CONCAT(FDA.FD_ACCOUNT_NUMBER, IF(IFNULL(FR_RECEIPT_NO.RECEIPT_NO,'')='' ,'',CONCAT(' (R: ',FR_RECEIPT_NO.RECEIPT_NO,')'))) AS FD_ACCOUNT_NUMBER,\n" +
                                "       CONCAT(MBK.BANK, ' (', MBK.BRANCH, ')') AS BANK,\n" +
                                "       MLG.LEDGER_NAME,\n" +
                                "       MPR.PROJECT,\n" +
                                "       DATE(CLOSED_DATE) AS CLOSED_DATE,\n" +
                                "       IFNULL(FDR.INTEREST_RATE, FDA.INTEREST_RATE) AS INTEREST_RATE,\n" +
                                "       FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                "       IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) AS PRINCIPLE_AMOUNT, \n" +
                                "       ROUND(IFNULL(FDR.REINVESTED_AMOUNT, 0),2) AS REINVESTED_AMOUNT,\n" +
                                "       ROUND((IFNULL(FDRPOI.INTEREST_AMOUNT, 0) +\n" +
                                "             IFNULL(FDR.INTEREST_AMOUNT, 0)),\n" +
                                "             2) AS INTEREST_AMOUNT,\n" +
                                "       ROUND((IFNULL(FDRPOI.ACCUMULATED_INTEREST_AMOUNT, 0) +\n" +
                                "             IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0)),\n" +
                                "             2) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                                "       ROUND((IFNULL(FDRPOI.TDS_AMOUNT, 0) + IFNULL(FDR.TDS_AMOUNT, 0)),2) AS TDS_AMOUNT,\n" +
                                "       FDA.AMOUNT + ROUND(IFNULL(FDR.REINVESTED_AMOUNT, 0),2) + (IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) +\n" +
                                "       IFNULL(FDRPOI.ACCUMULATED_INTEREST_AMOUNT, 0)) -\n" +
                                "       (IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) +\n" +
                                "       IFNULL(FDRPOI.WITHDRAWAL_AMOUNT, 0) +\n" +
                                "       IFNULL(FDRPO.WITHDRAWAL_AMOUNT, 0)) +\n" +
                                "       IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) AS TOTAL_AMOUNT,\n" +
                                "       IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) AS WITHDRAWAL_AMOUNT,\n" +
                                "       FDA.AMOUNT+ ROUND(IFNULL(FDR.REINVESTED_AMOUNT, 0),2) + (IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) +\n" +
                                "       IFNULL(FDRPOI.ACCUMULATED_INTEREST_AMOUNT, 0)) -\n" +
                                "       (IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) +\n" +
                                "       IFNULL(FDRPOI.WITHDRAWAL_AMOUNT, 0) +\n" +
                                "       IFNULL(FDRPO.WITHDRAWAL_AMOUNT, 0)) +\n" +
                                "       IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                "       IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) AS BALANCE_AMOUNT,\n" +
                                "       IF(FDA.AMOUNT+ ROUND(IFNULL(FDR.REINVESTED_AMOUNT, 0),2) + (IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) +\n" +
                                "       IFNULL(FDRPOI.ACCUMULATED_INTEREST_AMOUNT, 0)) -\n" +
                                "       (IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) +\n" +
                                "       IFNULL(FDRPOI.WITHDRAWAL_AMOUNT, 0) +\n" +
                                "       IFNULL(FDRPO.WITHDRAWAL_AMOUNT, 0)) +\n" +
                                "       IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                "       IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) = 0,\n" +
                                "          'CLOSED',\n" +
                                "          'ACTIVE') AS CLOSING_STATUS, FDA.ACCOUNT_HOLDER \n" +
                                "  FROM FD_ACCOUNT AS FDA\n" +
                                "  LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                                "                    MAX(MATURITY_DATE) AS MATURITY_DATE,\n" +
                                "                    (RECEIPT_NO) AS RECEIPT_NO,\n" +
                                "                    MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                                "                    SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                                "                    SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0) * IF(RENEWAL_TYPE ='ACI' AND FD_TRANS_MODE='CR', -1, 1)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                                "                    IFNULL(SUM(TDS_AMOUNT),0) AS TDS_AMOUNT,\n" +
                                "                    SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT,\n" +
                                "                    SUM(IFNULL(REINVESTED_AMOUNT,0)) AS REINVESTED_AMOUNT\n" +
                                "               FROM FD_RENEWAL\n" +
                                "              WHERE STATUS = 1\n" +
                                "                AND FD_TYPE <> 'POI'\n" +
                                "                AND IS_DELETED = 1\n" +
                                "                AND RENEWAL_DATE < ?DATE_FROM\n" +
                                "              GROUP BY FD_ACCOUNT_ID HAVING MAX(FD_RENEWAL_ID)) AS FDRO\n" +
                                "    ON FDA.FD_ACCOUNT_ID = FDRO.FD_ACCOUNT_ID\n" +
                                "  LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                                "                    MAX(MATURITY_DATE) AS MATURITY_DATE,\n" +
                                "                    (RECEIPT_NO) AS RECEIPT_NO,\n" +
                                "                    MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                                "                    SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                                "                    SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0) * IF(RENEWAL_TYPE ='ACI' AND FD_TRANS_MODE='CR', -1, 1)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                                "                    IFNULL(SUM(TDS_AMOUNT),0) AS TDS_AMOUNT,\n" +
                                "                    SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                                "               FROM FD_RENEWAL\n" +
                                "              WHERE STATUS = 1\n" +
                                "                AND FD_TYPE = 'POI'\n" +
                                "                AND IS_DELETED = 1\n" +
                                "                AND RENEWAL_DATE <= ?DATE_TO\n" + //On 18/04/2024, MATURITY_DATE to have proper fd poi amount
                                "              GROUP BY FD_ACCOUNT_ID HAVING MAX(FD_RENEWAL_ID)) AS FDRPOI\n" +
                                "    ON FDA.FD_ACCOUNT_ID = FDRPOI.FD_ACCOUNT_ID\n" +
                                "  LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                                "                    MAX(MATURITY_DATE) AS MATURITY_DATE,\n" +
                                "                    (RECEIPT_NO) AS RECEIPT_NO,\n" +
                                "                    MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                                "                    INTEREST_RATE,\n" +
                                "                    SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                                "                    SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0) * IF(RENEWAL_TYPE ='ACI' AND FD_TRANS_MODE='CR', -1, 1)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                                "                    IFNULL(SUM(TDS_AMOUNT),0) AS TDS_AMOUNT,\n" +
                                "                    SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                                "               FROM FD_RENEWAL\n" +
                                "              WHERE STATUS = 1\n" +
                                "                AND FD_TYPE = 'POI'\n" +
                                "                AND IS_DELETED = 1\n" +
                                "                AND RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "              GROUP BY FD_ACCOUNT_ID HAVING MAX(FD_RENEWAL_ID)\n" +
                                "              ORDER BY FD_ACCOUNT_ID DESC) AS FDRPO\n" +
                                "    ON FDA.FD_ACCOUNT_ID = FDRPO.FD_ACCOUNT_ID\n" +
                                "  LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                                "                    MAX(MATURITY_DATE) AS MATURITY_DATE,\n" +
                                "                    (RECEIPT_NO) AS RECEIPT_NO,\n" +
                                "                    MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                                "                    INTEREST_RATE,\n" +
                                "                    SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                                "                    SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0) * IF(RENEWAL_TYPE ='ACI' AND FD_TRANS_MODE='CR', -1, 1)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                                "                    IFNULL(SUM(TDS_AMOUNT),0) AS TDS_AMOUNT,\n" +
                                "                    SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT,\n" +
                                "                    SUM(IFNULL(REINVESTED_AMOUNT,0)) AS REINVESTED_AMOUNT\n" +
                                "               FROM FD_RENEWAL\n" +
                                "              WHERE STATUS = 1\n" +
                                "                AND FD_TYPE <> 'POI'\n" +
                                "                AND IS_DELETED = 1\n" +
                                "                AND RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "              GROUP BY FD_ACCOUNT_ID HAVING MAX(FD_RENEWAL_ID)\n" +
                                "              ORDER BY FD_ACCOUNT_ID DESC) AS FDR\n" +
                                "    ON FDA.FD_ACCOUNT_ID = FDR.FD_ACCOUNT_ID\n" +
                                "  LEFT JOIN (SELECT FR.FD_ACCOUNT_ID,\n" +
                                "                    RDATE.MATURITY_DATE AS MATURITY_DATE,\n" +
                                "                    RDATE.EXPECTED_MATURITY_VALUE AS EXPECTED_MATURITY_VALUE,\n" +
                                "                    (FR.RECEIPT_NO) AS RECEIPT_NO,\n" +
                                "                    RDATE.RENEWAL_DATE AS RENEWAL_DATE,\n" +
                                "                    FR.INTEREST_RATE,\n" +
                                "                    SUM(IF(FR.RENEWAL_TYPE = 'ACI', 0, FR.INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                                "                    SUM(IF(FR.RENEWAL_TYPE = 'ACI', FR.INTEREST_AMOUNT, 0) * IF(RENEWAL_TYPE ='ACI' AND FD_TRANS_MODE='CR', -1, 1)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                                "                    IFNULL(SUM(FR.TDS_AMOUNT),0) AS TDS_AMOUNT,\n" +
                                "                    SUM(FR.WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT,\n" +
                                "                    SUM(IFNULL(FR.REINVESTED_AMOUNT,0)) AS REINVESTED_AMOUNT\n" +
                                "               FROM FD_RENEWAL FR\n" +
                            /* ON 25/06/2021
                            "               LEFT JOIN (SELECT FD_ACCOUNT_ID, MAX(RENEWAL_DATE) AS RENEWAL_DATE\n" +
                            "               FROM FD_RENEWAL WHERE FD_TYPE = 'RN' AND STATUS = 1 AND IS_DELETED = 1\n" +
                            "               AND (RENEWAL_DATE <=?DATE_FROM  OR RENEWAL_DATE <= ?DATE_TO)\n" +
                            "               GROUP BY FD_ACCOUNT_ID) AS RDATE ON RDATE.FD_ACCOUNT_ID = FR.FD_ACCOUNT_ID\n" + */

                                "   LEFT JOIN (SELECT FR.FD_ACCOUNT_ID, FR.RENEWAL_DATE, FR.MATURITY_DATE, FR.EXPECTED_MATURITY_VALUE\n" +
                                "               FROM FD_RENEWAL AS FR\n" +
                                "               INNER JOIN (SELECT FD_ACCOUNT_ID, MAX(RENEWAL_DATE) AS RENEWAL_DATE\n" +
                                "               FROM FD_RENEWAL\n" +
                                "               WHERE FD_TYPE = 'RN' AND STATUS = 1 AND IS_DELETED = 1 AND (RENEWAL_DATE <=?DATE_FROM OR RENEWAL_DATE <= ?DATE_TO)\n" +
                                "               GROUP BY FD_ACCOUNT_ID) AS FR1 ON FR1.FD_ACCOUNT_ID = FR.FD_ACCOUNT_ID AND FR1.RENEWAL_DATE = FR.RENEWAL_DATE\n" +
                                "               WHERE FR.FD_TYPE = 'RN' AND FR.STATUS = 1 AND FR.IS_DELETED = 1\n" +
                                "               AND (FR.RENEWAL_DATE <=?DATE_FROM OR FR.RENEWAL_DATE <= ?DATE_TO)) AS RDATE ON RDATE.FD_ACCOUNT_ID = FR.FD_ACCOUNT_ID\n" +

                                "              WHERE FR.STATUS = 1 AND FR.FD_TYPE <> 'POI' AND FR.IS_DELETED = 1\n" +
                            //"                AND MATURITY_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "              AND (FR.RENEWAL_DATE <=?DATE_FROM OR FR.RENEWAL_DATE <= ?DATE_TO)\n" +
                                "              GROUP BY FR.FD_ACCOUNT_ID HAVING MAX(FR.FD_RENEWAL_ID)\n" +
                                "              ORDER BY FR.FD_ACCOUNT_ID DESC) AS FDRR\n" +
                                "    ON FDA.FD_ACCOUNT_ID = FDRR.FD_ACCOUNT_ID\n" +
                                "  LEFT JOIN (SELECT FD_ACCOUNT_ID, CLOSED_DATE\n" +
                                "            FROM FD_RENEWAL\n" +
                                "            WHERE FD_TYPE <> 'POI'\n" +
                                "            AND IS_DELETED = 1\n" +
                                "            AND FD_TYPE = 'WD'\n" +
                                "            AND CLOSED_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "            GROUP BY FD_ACCOUNT_ID\n" +
                                "            ORDER BY FD_ACCOUNT_ID DESC) AS FDC\n" +
                                "    ON FDA.FD_ACCOUNT_ID = FDC.FD_ACCOUNT_ID\n" +
                                "   LEFT JOIN (SELECT FR.FD_ACCOUNT_ID, IFNULL(FR.RECEIPT_NO,'') AS RECEIPT_NO\n" +
                                "               FROM FD_RENEWAL FR\n" +
                                "               INNER JOIN (SELECT FD_ACCOUNT_ID, MAX(RENEWAL_DATE) AS RENEWAL_DATE FROM FD_RENEWAL\n" +
                                "               WHERE STATUS =1 AND FD_TYPE='RN' AND (RENEWAL_DATE <=?DATE_FROM OR RENEWAL_DATE <= ?DATE_TO) GROUP BY FD_ACCOUNT_ID) FR1 ON FR1.FD_ACCOUNT_ID = FR.FD_ACCOUNT_ID\n" +
                                "               AND FR1.RENEWAL_DATE = FR.RENEWAL_DATE\n" +
                                "               WHERE FR.STATUS = 1 AND FD_TYPE = 'RN') AS FR_RECEIPT_NO ON FR_RECEIPT_NO.FD_ACCOUNT_ID = FDA.FD_ACCOUNT_ID\n" +
                                "  LEFT JOIN MASTER_BANK AS MBK ON FDA.BANK_ID = MBK.BANK_ID\n" +
                                "  LEFT JOIN MASTER_PROJECT MPR ON FDA.PROJECT_ID = MPR.PROJECT_ID\n" +
                                "  LEFT JOIN MASTER_LEDGER MLG ON FDA.LEDGER_ID = MLG.LEDGER_ID\n" +
                                "  WHERE FDA.STATUS = 1 AND FDA.INVESTMENT_DATE <= ?DATE_TO {AND MPR.PROJECT_ID IN (?PROJECT_ID)}\n" +
                                "  {AND MLG.FD_INVESTMENT_TYPE_ID = ?FD_INVESTMENT_TYPE_ID} {AND FDA.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID}\n" +
                                "   AND FDA.AMOUNT + IFNULL(FDR.REINVESTED_AMOUNT, 0) + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) +\n" +
                                "       IFNULL(FDRPOI.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                "       (IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) +\n" +
                                "       IFNULL(FDRPOI.WITHDRAWAL_AMOUNT, 0)) <> 0;";

                        //"         ORDER BY MATURITY_DATE ASC;";
                        break;
                    }
                case ReportSQLCommand.BankReport.FetchFDInterestQuarterwiseRegister:
                    {

                        //On 21/03/2024, To have all Renewals and Investments (FRH.RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO
                        query = @"SELECT BASE_FD_ACCOUNT_ID AS FD_ACCOUNT_ID, 
                                    IF(BASE_RECEIPT_NO='', BASE_FD_ACCOUNT_NUMBER, CONCAT(BASE_FD_ACCOUNT_NUMBER, ' (R: ', BASE_RECEIPT_NO, ')')) AS FD_ACCOUNT_NUMBER,
                                    IFNULL(BASE_BANK, INTEREST_BANK.INTEREST_BANK) AS BANK,
                                    BASE_RENEWAL_DATE AS RENEWAL_DATE,
                                    BASE_MATURITY_DATE AS MATURITY_DATE, BSAE_PRINCIPLE_AMOUNT AS PRINCIPLE_AMOUNT,  BASE_INTEREST_RATE AS INTEREST_RATE,
                                    BASE_INTEREST_RATE AS INTEREST_RATE, BASE_EXPECTED_INTEREST_VALUE AS EXPECTED_INTEREST_VALUE, BASE_FD_TYPE,
                                    MAX(IF( (FRH.RENEWAL_DATE BETWEEN ?Q1_DATE_FROM AND ?Q1_DATE_TO) ,  FRH.RENEWAL_DATE, NULL)) AS Q1_RENEWAL_DATE,
                                    SUM(IF( (FRH.RENEWAL_DATE BETWEEN ?Q1_DATE_FROM AND ?Q1_DATE_TO) ,  IFNULL(FRH.INTEREST_AMOUNT,0), 0) * IF(FRH.RENEWAL_TYPE ='ACI' AND FRH.FD_TRANS_MODE='CR', -1, 1) ) AS Q1_INTEREST_AMOUNT,
                                    SUM(IF( (FRH.RENEWAL_DATE BETWEEN ?Q1_DATE_FROM AND ?Q1_DATE_TO) ,  IFNULL(FRH.TDS_AMOUNT,0), 0)) AS Q1_TDS,
                                    GROUP_CONCAT(IF( (FRH.RENEWAL_DATE BETWEEN ?Q1_DATE_FROM AND ?Q1_DATE_TO) ,  FRH.FD_TYPE, null)) Q1_FD_TYPE_HISTORY,

                                    MAX(IF( (FRH.RENEWAL_DATE BETWEEN ?Q2_DATE_FROM AND ?Q2_DATE_TO) ,  FRH.RENEWAL_DATE, NULL)) AS Q2_RENEWAL_DATE,
                                    SUM(IF( (FRH.RENEWAL_DATE BETWEEN ?Q2_DATE_FROM AND ?Q2_DATE_TO) ,  IFNULL(FRH.INTEREST_AMOUNT,0), 0) * IF(FRH.RENEWAL_TYPE ='ACI' AND FRH.FD_TRANS_MODE='CR', -1, 1) ) AS Q2_INTEREST_AMOUNT,
                                    SUM(IF( (FRH.RENEWAL_DATE BETWEEN ?Q2_DATE_FROM AND ?Q2_DATE_TO) ,  IFNULL(FRH.TDS_AMOUNT,0), 0)) AS Q2_TDS,
                                    GROUP_CONCAT(IF( (FRH.RENEWAL_DATE BETWEEN ?Q2_DATE_FROM AND ?Q2_DATE_TO) ,  FRH.FD_TYPE, null)) Q2_FD_TYPE_HISTORY,
        
                                    MAX(IF( (FRH.RENEWAL_DATE BETWEEN ?Q3_DATE_FROM AND ?Q3_DATE_TO) ,  FRH.RENEWAL_DATE, NULL)) AS Q3_RENEWAL_DATE,
                                    SUM(IF( (FRH.RENEWAL_DATE BETWEEN ?Q3_DATE_FROM AND ?Q3_DATE_TO) ,  IFNULL(FRH.INTEREST_AMOUNT,0), 0) * IF(FRH.RENEWAL_TYPE ='ACI' AND FRH.FD_TRANS_MODE='CR', -1, 1)) AS Q3_INTEREST_AMOUNT,
                                    SUM(IF( (FRH.RENEWAL_DATE BETWEEN ?Q3_DATE_FROM AND ?Q3_DATE_TO) ,  IFNULL(FRH.TDS_AMOUNT,0), 0)) AS Q3_TDS,
                                    GROUP_CONCAT(IF( (FRH.RENEWAL_DATE BETWEEN ?Q3_DATE_FROM AND ?Q3_DATE_TO) ,  FRH.FD_TYPE, null)) Q3_FD_TYPE_HISTORY,

                                    MAX(IF( (FRH.RENEWAL_DATE BETWEEN ?Q4_DATE_FROM AND ?Q4_DATE_TO) ,  FRH.RENEWAL_DATE, NULL)) AS Q4_RENEWAL_DATE,
                                    SUM(IF( (FRH.RENEWAL_DATE BETWEEN ?Q4_DATE_FROM AND ?Q4_DATE_TO) ,  IFNULL(FRH.INTEREST_AMOUNT,0), 0) * IF(FRH.RENEWAL_TYPE ='ACI' AND FRH.FD_TRANS_MODE='CR', -1, 1)) AS Q4_INTEREST_AMOUNT,
                                    SUM(IF( (FRH.RENEWAL_DATE BETWEEN ?Q4_DATE_FROM AND ?Q4_DATE_TO) ,  IFNULL(FRH.TDS_AMOUNT,0), 0)) AS Q4_TDS,
                                    GROUP_CONCAT(IF( (FRH.RENEWAL_DATE BETWEEN ?Q4_DATE_FROM AND ?Q4_DATE_TO) ,  FRH.FD_TYPE, null)) Q4_FD_TYPE_HISTORY,
                                    
                                    IFNULL(OPAC.ACCUMULATED_INTEREST_AMOUNT, 0) AS OP_ACCUMULATED_INTEREST_AMOUNT

                                    FROM (SELECT FA.PROJECT_ID AS BASE_PROJECT_ID, FA.FD_ACCOUNT_ID AS BASE_FD_ACCOUNT_ID, FA.FD_ACCOUNT_NUMBER AS BASE_FD_ACCOUNT_NUMBER,
                                    FRH.RENEWAL_DATE AS BASE_RENEWAL_DATE , FRH.MATURITY_DATE AS BASE_MATURITY_DATE, FA.AMOUNT AS BSAE_PRINCIPLE_AMOUNT, 
                                    FRH.INTEREST_RATE AS BASE_INTEREST_RATE, IFNULL(FRH.EXPECTED_INTEREST_VALUE, 0) AS BASE_EXPECTED_INTEREST_VALUE, FRH.FD_TYPE AS BASE_FD_TYPE,
                                    IF(MLRB.LEDGER_ID IS NULL, CONCAT(CONCAT(MLFB.LEDGER_NAME, ' - '), CONCAT(MBF.BANK, ' - '), MBF.BRANCH), 
                                    CONCAT(CONCAT(MLRB.LEDGER_NAME, ' - '), CONCAT(MBR.BANK, ' - '), MBR.BRANCH)) AS BASE_BANK, 
                                    IFNULL(FRH.RECEIPT_NO, '') AS BASE_RECEIPT_NO
                                    FROM FD_RENEWAL FRH
                                    INNER JOIN FD_ACCOUNT FA ON FA.FD_ACCOUNT_ID = FRH.FD_ACCOUNT_ID AND  FA.FD_ACCOUNT_ID = FRH.FD_ACCOUNT_ID
                                    INNER JOIN (SELECT FD_ACCOUNT_ID, FD_RENEWAL_ID FROM FD_RENEWAL WHERE RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND STATUS=1) FDI
                                            ON FDI.FD_ACCOUNT_ID=FRH.FD_ACCOUNT_ID AND FDI.FD_RENEWAL_ID = FRH.FD_RENEWAL_ID
                                    LEFT JOIN MASTER_LEDGER MLRB ON MLRB.LEDGER_ID = FRH.BANK_LEDGER_ID
                                    LEFT JOIN MASTER_BANK_ACCOUNT MBAR ON MBAR.LEDGER_ID = MLRB.LEDGER_ID
                                    LEFT JOIN MASTER_BANK MBR ON MBR.BANK_ID = MBAR.BANK_ID
                                    LEFT JOIN MASTER_LEDGER MLFB ON MLFB.LEDGER_ID = FA.BANK_LEDGER_ID
                                    LEFT JOIN MASTER_BANK_ACCOUNT MBAF ON MBAF.LEDGER_ID = MLFB.LEDGER_ID
                                    LEFT JOIN MASTER_BANK MBF ON MBF.BANK_ID = MBAF.BANK_ID

                                    WHERE FA.STATUS = 1 AND FRH.STATUS = 1 AND FRH.STATUS = 1 AND FA.PROJECT_ID IN (?PROJECT_ID) AND FRH.FD_TYPE = 'RN' 
                                        AND FRH.RENEWAL_DATE <=?DATE_TO
                                    UNION ALL
                                    SELECT FA.PROJECT_ID AS BASE_PROJECT_ID, FA.FD_ACCOUNT_ID AS BASE_FD_ACCOUNT_ID, FA.FD_ACCOUNT_NUMBER AS BASE_FD_ACCOUNT_NUMBER, 
                                    FA.INVESTMENT_DATE AS BASE_RENEWAL_DATE, FA.MATURED_ON AS BASE_MATURITY_DATE, FA.AMOUNT AS BSAE_PRINCIPLE_AMOUNT, 
                                    FA.INTEREST_RATE AS BASE_INTEREST_RATE, IFNULL(FA.EXPECTED_INTEREST_VALUE, 0) AS BASE_EXPECTED_INTEREST_VALUE, 'IN' AS BASE_FD_TYPE,
                                    CONCAT(CONCAT(MLFB.LEDGER_NAME, ' - '), CONCAT(MBF.BANK, ' - '), MBF.BRANCH) AS BASE_BANK, '' AS BASE_RECEIPT_NO
                                    FROM FD_ACCOUNT FA
                                    LEFT JOIN MASTER_LEDGER MLFB ON MLFB.LEDGER_ID = FA.BANK_LEDGER_ID
                                    LEFT JOIN MASTER_BANK_ACCOUNT MBAF ON MBAF.LEDGER_ID = MLFB.LEDGER_ID
                                    LEFT JOIN MASTER_BANK MBF ON MBF.BANK_ID = MBAF.BANK_ID
                                    WHERE FA.STATUS = 1 AND FA.PROJECT_ID IN (?PROJECT_ID) ) AS T
                                    LEFT JOIN FD_RENEWAL FRH ON FRH.FD_ACCOUNT_ID = T.BASE_FD_ACCOUNT_ID
                                            AND (FRH.RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO)
                                            AND ( ( (FRH.RENEWAL_DATE BETWEEN T.BASE_RENEWAL_DATE AND T.BASE_MATURITY_DATE) AND FRH.RENEWAL_DATE <> T.BASE_RENEWAL_DATE) 
                                                  OR (FRH.RENEWAL_DATE > T.BASE_MATURITY_DATE AND FRH.FD_TYPE = 'RN')
                                                  OR (FRH.MATURITY_DATE = T.BASE_MATURITY_DATE AND FRH.FD_TYPE = 'WD') )   
            
                                            AND FRH.STATUS=1 AND FRH.INTEREST_AMOUNT > 0

                                    LEFT JOIN (SELECT FR.FD_ACCOUNT_ID, SUM( IF(FR.RENEWAL_TYPE = 'ACI', IFNULL(FR.INTEREST_AMOUNT, 0), 0 ) * IF(FR.RENEWAL_TYPE ='ACI' AND FR.FD_TRANS_MODE='CR', -1, 1) ) AS ACCUMULATED_INTEREST_AMOUNT
                                                FROM FD_RENEWAL FR WHERE FR.STATUS=1
                                                AND FR.RENEWAL_DATE < ?DATE_FROM GROUP BY FR.FD_ACCOUNT_ID) OPAC ON OPAC.FD_ACCOUNT_ID = FRH.FD_ACCOUNT_ID

                                    LEFT JOIN (SELECT FRH.FD_ACCOUNT_ID, CONCAT(CONCAT(MLRB.LEDGER_NAME, ' - '), CONCAT(MBR.BANK, ' - '), MBR.BRANCH) AS INTEREST_BANK
                                    FROM FD_RENEWAL FRH
                                    LEFT JOIN MASTER_LEDGER MLRB ON MLRB.LEDGER_ID = FRH.BANK_LEDGER_ID
                                    LEFT JOIN MASTER_BANK_ACCOUNT MBAR ON MBAR.LEDGER_ID = MLRB.LEDGER_ID
                                    LEFT JOIN MASTER_BANK MBR ON MBR.BANK_ID = MBAR.BANK_ID
                                    WHERE FRH.STATUS = 1 AND FRH.RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO
                                    GROUP BY FRH.FD_ACCOUNT_ID) AS INTEREST_BANK ON INTEREST_BANK.FD_ACCOUNT_ID= T.BASE_FD_ACCOUNT_ID
                                    WHERE FRH.RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO
                                    GROUP BY T.BASE_FD_ACCOUNT_ID, T.BASE_RENEWAL_DATE
                                    ORDER BY T.BASE_FD_ACCOUNT_ID, T.BASE_RENEWAL_DATE;";
                        //AND FR.FD_ACCOUNT_ID = 46 AND FRH.FD_ACCOUNT_ID = 46  

                        /*AND ( ((FRH.RENEWAL_DATE BETWEEN T.BASE_RENEWAL_DATE AND T.BASE_MATURITY_DATE) AND ((FRH.RENEWAL_DATE <> T.BASE_RENEWAL_DATE ) ) )
                                                  OR (FRH.RENEWAL_DATE > T.BASE_MATURITY_DATE AND FRH.FD_TYPE IN ('RN'))
                                                  OR (FRH.MATURITY_DATE = T.BASE_MATURITY_DATE AND FRH.FD_TYPE IN ('WD')) ) */

                        break;
                    }
                case ReportSQLCommand.BankReport.FetchFDInterestAmountByRenewalDate:
                    {
                        query = @"SELECT FR.FD_ACCOUNT_ID, FR.RENEWAL_DATE, 
                                   SUM( IF(FR.RENEWAL_TYPE <> 'ACI', IFNULL(FR.INTEREST_AMOUNT, 0), 0) ) AS RECEIVED_INTEREST_AMOUNT,
                                   SUM( IF(FR.RENEWAL_TYPE = 'ACI', IFNULL(FR.INTEREST_AMOUNT, 0), 0) * IF(FR.RENEWAL_TYPE ='ACI' AND FR.FD_TRANS_MODE='CR', -1, 1) ) AS ACCUMULATED_INTEREST_AMOUNT
                                   FROM FD_RENEWAL FR WHERE FR.STATUS = 1 AND FR.RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO 
                                   GROUP BY FR.FD_ACCOUNT_ID, FR.RENEWAL_DATE;";
                        break;
                    }
                case ReportSQLCommand.BankReport.FetchFDInterestRegister:
                    {
                        query = @"SELECT FD.FD_ACCOUNT_ID, FR.FD_RENEWAL_ID, VM.VOUCHER_ID AS FD_VOUCHER_ID, FD.FD_ACCOUNT_NUMBER, FR.RENEWAL_DATE, 
                                    VM.VOUCHER_NO, VM.VOUCHER_SUB_TYPE, 
                                    CASE
                                        WHEN FR.RENEWAL_TYPE = 'PWD' THEN  'PWD'
                                        WHEN FR.RENEWAL_TYPE = 'WDI' THEN 'WD'
                                        WHEN FR.RENEWAL_TYPE = 'ACI' AND FR.FD_TYPE = 'RN' THEN 'RN'
                                        WHEN FR.RENEWAL_TYPE = 'ACI' AND FR.FD_TYPE = 'POI' THEN 'POI'
                                        WHEN FR.RENEWAL_TYPE = 'IRI' AND FR.FD_TYPE = 'RN' THEN 'RN'
                                        WHEN FR.RENEWAL_TYPE = 'IRI' AND FR.FD_TYPE = 'POI' THEN 'POI'
                                        WHEN FR.RENEWAL_TYPE = 'RIN' AND FR.FD_TYPE = 'RIN' THEN 'RIN' END AS FD_VOUCHER_TYPE,
                                    (CASE WHEN VM.VOUCHER_TYPE = 'RC' THEN 'Receipt' 
                                    WHEN VM.VOUCHER_TYPE = 'PY' THEN 'Payment' WHEN VM.VOUCHER_TYPE = 'JN' THEN 'Journal'
                                    WHEN VM.VOUCHER_TYPE = 'CN' THEN 'Contra' END) AS VOUCHER_TYPE,
                                    ML.LEDGER_NAME, IFNULL(FR.INTEREST_AMOUNT, 0 )  * IF(FR.RENEWAL_TYPE ='ACI' AND FR.FD_TRANS_MODE='CR', -1, 1) AS INTEREST_AMOUNT,
                                    IF(FR.RENEWAL_TYPE <> 'ACI', IFNULL(FR.INTEREST_AMOUNT, 0 ),0) AS RECEIVED_INTEREST_AMOUNT,
                                    IF(FR.RENEWAL_TYPE = 'ACI' , IFNULL(FR.INTEREST_AMOUNT, 0 ),0) * IF(FR.RENEWAL_TYPE ='ACI' AND FR.FD_TRANS_MODE='CR', -1, 1)  AS ACCUMULATED_INTEREST_AMOUNT,
                                    IFNULL(TDS_AMOUNT, 0) AS TDS_AMOUNT, VM.BANK, 
                                    CONCAT(VM.NARRATION, CONCAT(' FD: ', RNOFD.FD_ACCOUNT_NUMBER)) AS NARRATION
                                    FROM FD_ACCOUNT FD
                                    INNER JOIN FD_RENEWAL FR ON FR.FD_ACCOUNT_ID = FD.FD_ACCOUNT_ID AND FR.STATUS = 1
                                    INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = FR.INTEREST_LEDGER_ID
                                    INNER JOIN (SELECT VM.VOUCHER_ID,  ML.LEDGER_NAME, VM.VOUCHER_NO, VM.VOUCHER_TYPE, VM.VOUCHER_SUB_TYPE,
                                        IF(VOUCHER_TYPE='JN', ML.LEDGER_NAME,
                                        CONCAT(CONCAT(ML.LEDGER_NAME, ' - '), CONCAT(MB.BANK, ' - '), MB.BRANCH)) AS BANK, VT.AMOUNT, VM.NARRATION
                                        FROM VOUCHER_MASTER_TRANS VM
                                        INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VM.VOUCHER_ID
                                        INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID
                                        LEFT JOIN MASTER_BANK_ACCOUNT MBA ON MBA.LEDGER_ID = ML.LEDGER_ID AND MBA.LEDGER_ID = VT.LEDGER_ID
                                        LEFT JOIN MASTER_BANK MB ON MB.BANK_ID = MBA.BANK_ID
                                        WHERE VM.STATUS = 1 AND VM.PROJECT_ID IN (?PROJECT_ID) AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND 
                                        VOUCHER_SUB_TYPE= 'FD' AND IF(VOUCHER_TYPE='JN', (ML.GROUP_ID IN (14)), ML.GROUP_ID IN (12)) ) AS VM 
                                    ON VM.VOUCHER_ID = FR.FD_INTEREST_VOUCHER_ID
                                    LEFT JOIN (SELECT FDA.FD_ACCOUNT_ID, 0 AS VOUCHER_ID, RNO.FD_INTEREST_VOUCHER_ID, RNO.FD_VOUCHER_ID,+
                                            RNO.RENEWAL_DATE, IFNULL(RNO.RECEIPT_NO,'') AS RECEIPT_NO,
                                            CONCAT(FDA.FD_ACCOUNT_NUMBER,  IF(IFNULL(RNO.RECEIPT_NO,'')='', '', CONCAT(' (R: ', IFNULL(RNO.RECEIPT_NO,''),')')) ) AS FD_ACCOUNT_NUMBER
                                            FROM FD_ACCOUNT AS FDA
                                            INNER JOIN (SELECT FR.FD_ACCOUNT_ID, FR.FD_INTEREST_VOUCHER_ID, FR.FD_VOUCHER_ID,FR.RENEWAL_DATE,
                                            SUBSTRING_INDEX(GROUP_CONCAT(FR1.RECEIPT_NO ORDER BY FR1.RENEWAL_DATE DESC SEPARATOR '|'), '|', 1) AS RECEIPT_NO
                                            FROM FD_RENEWAL AS FR
                                            LEFT JOIN (SELECT FR1.FD_ACCOUNT_ID, FR1.RENEWAL_DATE AS RENEWAL_DATE, IFNULL(FR1.RECEIPT_NO, '') AS RECEIPT_NO
                                               FROM FD_RENEWAL AS FR1
                                               INNER JOIN FD_ACCOUNT FD1 ON FD1.FD_ACCOUNT_ID = FR1.FD_ACCOUNT_ID
                                               WHERE FD1.STATUS =1 AND FD1.PROJECT_ID IN (?PROJECT_ID) AND FR1.STATUS =1 AND FR1.FD_TYPE = 'RN' AND FR1.RENEWAL_DATE<=?DATE_TO) AS FR1
                                            ON FR1.FD_ACCOUNT_ID= FR.FD_ACCOUNT_ID AND FR1.RENEWAL_DATE<FR.RENEWAL_DATE
                                            WHERE STATUS =1 GROUP BY FR.FD_ACCOUNT_ID, FR.FD_RENEWAL_ID) AS RNO
                                        ON RNO.FD_ACCOUNT_ID = FDA.FD_ACCOUNT_ID WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)
                                    UNION ALL SELECT FDA.FD_ACCOUNT_ID, FDA.FD_VOUCHER_ID, 0 AS FD_INTEREST_VOUCHER_ID, 0 AS FD_VOUCHER_ID, FDA.INVESTMENT_DATE, '' AS RECEIPT_NO, 
                                    FDA.FD_ACCOUNT_NUMBER FROM FD_ACCOUNT AS FDA WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)) AS RNOFD
                                    ON RNOFD.VOUCHER_ID = VM.VOUCHER_ID OR RNOFD.FD_INTEREST_VOUCHER_ID = VM.VOUCHER_ID OR RNOFD.FD_VOUCHER_ID = VM.VOUCHER_ID
                                    WHERE FD.STATUS=1 AND FD.PROJECT_ID IN (?PROJECT_ID) {AND FD.CURRENCY_COUNTRY_ID =?CURRENCY_COUNTRY_ID} AND FR.RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO;"; //VT.TRANS_MODE='DR' AND 
                        break;
                    }
                case ReportSQLCommand.BankReport.FDInvestmentRegisterbyDateRange:
                    {
                        query = "SELECT FD.FD_ACCOUNT_ID, MP.PROJECT, ML.FD_INVESTMENT_TYPE_ID, FD.FD_ACCOUNT_NUMBER, MB.BANK, ML.LEDGER_NAME,\n" +
                                 " FD.ACCOUNT_HOLDER, FD.INVESTMENT_DATE, (IF(FD.TRANS_TYPE= 'OP', 0, FD.AMOUNT) + IFNULL(FDR.REINVESTED_AMOUNT,0)) AS AMOUNT,\n" +
                                 " FD.INTEREST_RATE, IF(ML.FD_INVESTMENT_TYPE_ID = " + (int)FDInvestmentType.MutualFund + ", NULL,  FD.MATURED_ON) AS MATURED_ON, FD.EXPECTED_MATURITY_VALUE\n" +
                                 " FROM FD_ACCOUNT FD INNER JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = FD.PROJECT_ID\n" +
                                 " INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = FD.LEDGER_ID\n" +
                                 " INNER JOIN MASTER_BANK MB ON MB.BANK_ID = FD.BANK_ID\n" +
                                 " LEFT JOIN (SELECT FD_ACCOUNT_ID, SUM(IFNULL(REINVESTED_AMOUNT,0)) AS REINVESTED_AMOUNT\n" +
                                 "       FROM FD_RENEWAL WHERE STATUS = 1 AND FD_TYPE = 'RIN' AND IS_DELETED = 1\n" +
                                 "       AND RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                 "       GROUP BY FD_ACCOUNT_ID) AS FDR\n" +
                                 " ON FDR.FD_ACCOUNT_ID = FD.FD_ACCOUNT_ID\n" +
                            //" WHERE FD.PROJECT_ID IN(?PROJECT_ID) AND FD.TRANS_TYPE= 'IN' AND FD.STATUS = 1 AND FD.INVESTMENT_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                 " WHERE FD.PROJECT_ID IN(?PROJECT_ID) AND FD.STATUS = 1\n" +
                                 " {AND FD.CURRENCY_COUNTRY_ID =?CURRENCY_COUNTRY_ID} AND\n" +
                                 " ((FD.TRANS_TYPE= 'IN' AND FD.INVESTMENT_DATE BETWEEN ?DATE_FROM AND ?DATE_TO) OR (FD.TRANS_TYPE= 'OP')) AND \n" +
                                 " (IF(FD.TRANS_TYPE= 'OP', 0, FD.AMOUNT) + IFNULL(FDR.REINVESTED_AMOUNT,0)) > 0\n" +
                                 " ORDER BY FD.INVESTMENT_DATE, FD.FD_ACCOUNT_NUMBER, MB.BANK, MP.PROJECT";
                        break;
                    }
                case ReportSQLCommand.BankReport.FetchMutualFundRegisterDetails:
                    {
                        query = @"SELECT FD.FD_ACCOUNT_ID, FD.FD_ACCOUNT_NUMBER, IFNULL(FR.RENEWAL_DATE, FD.INVESTMENT_DATE) AS INVESTMENT_DATE,
                                    FD.MF_FOLIO_NO, FD.MF_SCHEME_NAME, FD.MF_NAV_PER_UNIT, FD.MF_NO_OF_UNITS, FD.MF_MODE_OF_HOLDING, 
                                    FD.AMOUNT AS PRINCIPLE_AMOUNT, IFNULL(FR.ACCUMULATED_INTEREST_AMOUNT,0) AS ACCUMULATED_INTEREST_AMOUNT, IFNULL(FR.REINVESTED_AMOUNT, 0) AS REINVESTED_AMOUNT,
                                    IFNULL(FR.INTEREST_AMOUNT, 0) AS INTEREST_AMOUNT, IFNULL(FR.CHARGE_AMOUNT,0) AS CHARGE_AMOUNT, IFNULL(FR.TDS_AMOUNT, 0) AS TDS_AMOUNT,
                                    (FD.AMOUNT + IFNULL(FR.REINVESTED_AMOUNT, 0) + IFNULL(FR.ACCUMULATED_INTEREST_AMOUNT,0)) AS TOTAL_AMOUNT,
                                    IFNULL(FR.WITHDRAWAL_AMOUNT, 0) AS WITHDRAWAL_AMOUNT,
                                    ( (FD.AMOUNT + IFNULL(FR.REINVESTED_AMOUNT, 0) + IFNULL(FR.ACCUMULATED_INTEREST_AMOUNT,0)) -  IFNULL(FR.WITHDRAWAL_AMOUNT, 0) ) AS BALANCE_AMOUNT
                                    FROM FD_ACCOUNT FD
                                    INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = FD.LEDGER_ID AND ML.FD_INVESTMENT_TYPE_ID = " + (Int32)FDInvestmentType.MutualFund +
                                    @" LEFT JOIN (SELECT FD_ACCOUNT_ID, RECEIPT_NO AS RECEIPT_NO,
                                        MAX(RENEWAL_DATE) AS RENEWAL_DATE,
                                        IFNULL(SUM(IF(FD_TYPE = 'RIN', IFNULL(REINVESTED_AMOUNT, 0), 0)),0) AS REINVESTED_AMOUNT,
                                        IFNULL(SUM(INTEREST_AMOUNT), 0) AS INTEREST_AMOUNT,
                                        IFNULL(SUM(IF(RENEWAL_TYPE = 'ACI', IFNULL(INTEREST_AMOUNT, 0), 0) * IF(RENEWAL_TYPE ='ACI' AND FD_TRANS_MODE='CR', -1, 1)), 0) AS ACCUMULATED_INTEREST_AMOUNT,
                                        IFNULL(SUM(TDS_AMOUNT),0) AS TDS_AMOUNT,
                                        IFNULL(SUM(CHARGE_AMOUNT),0) AS CHARGE_AMOUNT,
                                        IFNULL(SUM(IF(FD_TYPE = 'WD', IFNULL(WITHDRAWAL_AMOUNT, 0), 0)),0) AS WITHDRAWAL_AMOUNT
                                        FROM FD_RENEWAL
                                        WHERE STATUS = 1 AND IS_DELETED = 1 AND RENEWAL_DATE <= ?DATE_TO
                                        GROUP BY FD_ACCOUNT_ID HAVING MAX(FD_RENEWAL_ID)) AS FR
                                    ON FD.FD_ACCOUNT_ID = FR.FD_ACCOUNT_ID
                                    WHERE FD.PROJECT_ID IN (?PROJECT_ID) AND  " + //AND FD.INVESTMENT_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND
                                        "ML.FD_INVESTMENT_TYPE_ID = " + (Int32)FDInvestmentType.MutualFund + @" AND FD.STATUS = 1
                                        AND FD.INVESTMENT_DATE <= ?DATE_TO ";

                        break;
                    }

                #endregion

                #region Fetch FD History
                case ReportSQLCommand.BankReport.FetchFDHistoryDetails:
                    {

                        query = "SELECT T.FD_ACCOUNT_ID,\n" +
                                "       T.FD_ACCOUNT_NUMBER, T.MF_FOLIO_NO, T.ACCOUNT_HOLDER, T.LEDGER_NAME,\n" +
                                "       T.RECEIPT_NO,\n" +  // Receipt No is added in the FD History Reports on 24.05.2017 to show the No
                                "       T.BANK,\n" +
                                "       DATE(CLOSED_DATE) AS CLOSED_DATE,\n" +
                                "       T.TRANS_TYPE,\n" +
                                "       IF(T.FD_VOUCHER_TYPE='WD', DATE(CLOSED_DATE), T.INVESTED_ON) AS INVESTMENT_DATE,\n" +
                                "       IF(FD_INVESTMENT_TYPE_ID = " + (int)FDInvestmentType.MutualFund + ", NULL, IF(T.FD_VOUCHER_TYPE IN ('OP', 'IN', 'RN'), T.MATURES_ON, CAST(@TEMP_MAT_DATE AS DATETIME))) AS MATURITY_DATE,\n" +
                                "       @PREVDATE := T.INVESTED_ON AS DV,\n" +
                                "       @TEMP_MAT_DATE:= IF(T.FD_VOUCHER_TYPE IN ('OP', 'IN', 'RN'), T.MATURES_ON, CAST(@TEMP_MAT_DATE AS DATETIME)) AS TMP_MAT_DATE,\n" +
                                "       @WQE := ROUND(IFNULL(T.PRINCIPAL_AMOUNT +\n" +
                                "                    (SELECT CASE\n" +
                                "                              WHEN RENEWAL_TYPE = 'ACI' THEN\n" +
                                "                               SUM(INTEREST_AMOUNT)\n" +
                                "                            END AS ACC\n" +
                                "                       FROM FD_RENEWAL\n" +
                                "                      WHERE RENEWAL_TYPE = 'ACI'\n" +
                                "                        AND RENEWAL_DATE < @PREVDATE\n" +
                                "                        AND STATUS = 1\n" +
                                "                        AND IS_DELETED = 1\n" +
                                "                        AND FD_ACCOUNT_ID = T.FD_ACCOUNT_ID),\n" + //On 30//12018 (IN (?FD_ACCOUNT_ID))
                                "                    T.PRINCIPAL_AMOUNT),\n" +
                                "             2) AS PRINCIPLE_AMOUNT, ROUND(IFNULL(T.REINVESTED_AMOUNT,0),2) AS REINVESTED_AMOUNT,\n" +
                                "       ROUND(IFNULL(T.INTEREST_RATE, 0), 2) AS INTEREST_RATE,\n" +
                                "       ROUND(IFNULL(T.INTEREST_AMOUNT, 0), 2) AS INTEREST_AMOUNT,\n" +
                                "       ROUND(IFNULL(T.TDS_AMOUNT,0),2) AS TDS_AMOUNT,\n" + //chinna (07.08.2017)
                                "       ROUND(IFNULL(T.CHARGE_AMOUNT,0),2) AS CHARGE_AMOUNT,\n" + //25/05/2022
                                "       CASE WHEN T.CHARGE_MODE=1 THEN 'Interest' WHEN T.CHARGE_MODE=2 THEN 'Principal' ELSE '' END AS CHARGE_MODE,\n" +
                                "       ROUND(IFNULL(T.WITHDRAWAL_AMOUNT, 0), 2) AS WITHDRAWAL_AMOUNT,\n" +
                                "       ROUND(IFNULL(T.ACC_AMOUNT, 0), 2) as ACCUMULATED_INTEREST_AMOUNT,\n" +
                                "       T.INTEREST_MODE, T.FD_RENEWAL_ID,\n" +
                            //"       IF(T.FD_RENEWAL_ID =\n" +
                            //"          (SELECT IF((FDA.AMOUNT + T1.ACC_AMOUNT =\n" +
                            //"                     SUM(FDR.WITHDRAWAL_AMOUNT)),\n" +
                            //"                     max(FD_RENEWAL_ID),\n" +
                            //"                     -1) AS FD_RENEWAL_ID\n" +
                            //"             FROM FD_RENEWAL FDR\n" +
                            //"            INNER JOIN FD_ACCOUNT FDA\n" +
                            //"               ON FDA.FD_ACCOUNT_ID = FDR.FD_ACCOUNT_ID\n" +
                            //"             JOIN (SELECT FDRO.FD_ACCOUNT_ID,\n" +
                            //"                         SUM(FDRO.INTEREST_AMOUNT) AS ACC_AMOUNT\n" +
                            //"                    FROM FD_RENEWAL FDRO\n" +
                            //"                   WHERE FD_ACCOUNT_ID IN (?FD_ACCOUNT_ID)\n" +
                            //"                     AND RENEWAL_TYPE = 'ACI'\n" +
                            //"                     AND RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                            //"                     AND STATUS = 1\n" +
                            //"                     AND IS_DELETED = 1) AS T1\n" +
                            //"               ON FDA.FD_ACCOUNT_ID = T1.FD_ACCOUNT_ID\n" +
                            //"            WHERE RENEWAL_TYPE = 'WDI'\n" +
                            //"              AND FDR.FD_ACCOUNT_ID IN (?FD_ACCOUNT_ID)\n" +
                            //"              AND FDR.STATUS = 1\n" +
                            //"              AND IS_DELETED = 1\n" +
                            //"              AND RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                            //"            GROUP BY FDA.FD_ACCOUNT_ID),\n" +
                            //"          'Closed',\n" +
                            //"          'Active') AS CLOSING_STATUS,\n" +
                                "       if(CLOSED_DATE='','Active','Closed') AS CLOSING_STATUS,\n" +
                                "       FD_VOUCHER_TYPE, FD_VOUCHER_ID, FD_INTEREST_VOUCHER_ID, T.FD_INVESTMENT_TYPE_ID\n" +
                                "  FROM (SELECT FDA.FD_ACCOUNT_ID, FDA.RECEIPT_NO, FDA.PROJECT_ID, 0 AS FD_RENEWAL_ID,\n" +
                                "               FDA.FD_ACCOUNT_NUMBER, FDA.MF_FOLIO_NO, FDA.ACCOUNT_HOLDER, ML.LEDGER_NAME, MBK.BANK,\n" +
                                "               '' AS CLOSED_DATE,\n" +
                                "               CASE\n" +
                                "                 WHEN FDA.TRANS_TYPE = 'OP' THEN\n" +
                                "                  'Opening Balance'\n" +
                                "                 WHEN FDA.TRANS_TYPE = 'IN' THEN\n" +
                                "                  'Newly Invested'\n" +
                                "               END AS TRANS_TYPE,\n" +
                                "               CASE\n" +
                                "                 WHEN FDA.TRANS_TYPE = 'OP' THEN\n" +
                                "                  'OP'\n" +
                                "                 WHEN FDA.TRANS_TYPE = 'IN' THEN\n" +
                                "                  'IN'\n" +
                                "               END AS FD_VOUCHER_TYPE,\n" +
                                "               FDA.INVESTMENT_DATE AS INVESTED_ON,\n" +
                                "               FDA.MATURED_ON AS MATURES_ON,\n" +
                                "               FDA.AMOUNT AS 'PRINCIPAL_AMOUNT', 0 AS REINVESTED_AMOUNT,\n" +
                                "               FDA.INTEREST_RATE AS INTEREST_RATE,\n" +
                                "               0 AS INTEREST_AMOUNT,\n" +
                                "               0 AS TDS_AMOUNT,\n" +     //chinna(07.08.2017)
                                "               0 AS CHARGE_AMOUNT, 0 AS CHARGE_MODE,\n" +  //chinna(25.05.2022)
                                "               0 AS WITHDRAWAL_AMOUNT,\n" +
                                "               CASE\n" +
                                "                 WHEN FDA.INTEREST_TYPE = 0 THEN\n" +
                                "                  'Simple'\n" +
                                "                 WHEN FDA.TRANS_TYPE = 1 THEN\n" +
                                "                  'Compound'\n" +
                                "               END AS INTEREST_MODE,\n" +
                                "               0 AS ACC_AMOUNT,\n" +
                                "               FDA.FD_VOUCHER_ID,\n" +
                                "               0 AS FD_INTEREST_VOUCHER_ID, ML.FD_INVESTMENT_TYPE_ID\n" +
                                "          FROM FD_ACCOUNT FDA\n" +
                                "          LEFT JOIN MASTER_BANK MBK\n" +
                                "            ON FDA.BANK_ID = MBK.BANK_ID\n" +
                                "          LEFT JOIN MASTER_LEDGER ML\n" +
                                "            ON ML.LEDGER_ID = FDA.LEDGER_ID\n" +
                                "         WHERE FDA.STATUS = 1\n" +
                                "           AND FDA.INVESTMENT_DATE <= ?DATE_TO\n" +
                                "        UNION ALL\n" +
                                "        SELECT FDR.FD_ACCOUNT_ID, FDR.RECEIPT_NO, FDA.PROJECT_ID, FDR.FD_RENEWAL_ID,\n" +
                                "                FDA.FD_ACCOUNT_NUMBER, FDA.MF_FOLIO_NO, FDA.ACCOUNT_HOLDER, ML.LEDGER_NAME, MBK.BANK,\n" +
                                "                IF(FDR.RENEWAL_TYPE = 'WDI',FDC.CLOSED_DATE,'') AS CLOSED_DATE,\n" +
                                "               CASE\n" +
                                "                 WHEN FDR.RENEWAL_TYPE = 'PWD' THEN\n" +
                                "                  'Partial Withdrawal'\n" +
                                "                 WHEN FDR.RENEWAL_TYPE = 'WDI' AND FDR.INTEREST_AMOUNT=0 THEN\n" +
                                "                  'Closed and No Received Interest'\n" +
                                "                 WHEN FDR.RENEWAL_TYPE = 'WDI' AND FDR.INTEREST_AMOUNT>0 THEN\n" +
                                "                  'Closed and Received Interest'\n" +
                                "                 WHEN FDR.RENEWAL_TYPE = 'ACI' AND FDR.FD_TYPE = 'RN' THEN\n" +
                                "                  CONCAT('Renewed ', IF(FDR.FD_TRANS_MODE = 'CR', ' and FD Adjustment', 'and Accumulated Interest')) \n" +
                                "                 WHEN FDR.RENEWAL_TYPE = 'ACI' AND FDR.FD_TYPE = 'POI' THEN\n" +
                                "                  CONCAT('Post ', IF (FDR.FD_TRANS_MODE='CR', '(FD Adjustment)', 'Interest  (Accumulated)'))\n" +
                                "                 WHEN FDR.RENEWAL_TYPE = 'IRI' AND FDR.FD_TYPE = 'RN' THEN\n" +
                                "                  'Renewed and Received Interest'\n" +
                                "                 WHEN FDR.RENEWAL_TYPE = 'IRI' AND FDR.FD_TYPE = 'POI' THEN\n" +
                                "                  'Post Interest (Received)'\n" +    //'Accural Interest received'\n" +
                                "                 WHEN FDR.RENEWAL_TYPE = 'RIN' AND FDR.FD_TYPE = 'RIN' THEN\n" +
                                "                  'Re-Invested'\n" +
                                "               END AS TRANS_TYPE,\n" +
                                "               CASE\n" +
                                "                 WHEN FDR.RENEWAL_TYPE = 'PWD' THEN\n" +
                                "                  'PWD'\n" +
                                "                 WHEN FDR.RENEWAL_TYPE = 'WDI' THEN\n" +
                                "                  'WD'\n" +
                                "                 WHEN FDR.RENEWAL_TYPE = 'ACI' AND FDR.FD_TYPE = 'RN' THEN\n" +
                                "                  'RN'\n" +
                                "                 WHEN FDR.RENEWAL_TYPE = 'ACI' AND FDR.FD_TYPE = 'POI' THEN\n" +
                                "                  'POI'\n" +
                                "                 WHEN FDR.RENEWAL_TYPE = 'IRI' AND FDR.FD_TYPE = 'RN' THEN\n" +
                                "                  'RN'\n" +
                                "                 WHEN FDR.RENEWAL_TYPE = 'IRI' AND FDR.FD_TYPE = 'POI' THEN\n" +
                                "                  'POI'\n" +
                                "                 WHEN FDR.RENEWAL_TYPE = 'RIN' AND FDR.FD_TYPE = 'RIN' THEN\n" +
                                "                  'RIN'\n" +
                                "               END AS FD_VOUCHER_TYPE,\n" +
                            //"               RENEWAL_DATE AS INVESTED_ON,\n" +
                                "               IF(FD_TYPE = 'WD' AND RENEWAL_TYPE ='WDI', null, RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                                "               MATURITY_DATE AS MATURED_ON,\n" +
                                "               IF(FDR.RENEWAL_TYPE = 'RIN' AND FDR.FD_TYPE = 'RIN', 0, FDA.AMOUNT) AS PRINCIPAL_AMOUNT, IFNULL(REINVESTED_AMOUNT,0) AS REINVESTED_AMOUNT, \n" +
                                "               FDR.INTEREST_RATE,\n" +
                                "               FDR.INTEREST_AMOUNT * IF(FDR.RENEWAL_TYPE = 'ACI' AND FDR.FD_TRANS_MODE='CR', -1 , 1) AS INTEREST_AMOUNT,\n" +
                                "               FDR.TDS_AMOUNT,\n" +  // chinna(07.08.2017)
                                "               FDR.CHARGE_AMOUNT, FDR.CHARGE_MODE,\n" + //25/05/2022
                                "               FDR.WITHDRAWAL_AMOUNT,\n" +
                                "               CASE\n" +
                                "                 WHEN FDR.INTEREST_TYPE = 0 THEN\n" +
                                "                  'Simple'\n" +
                                "                 WHEN FDR.INTEREST_TYPE = 1 THEN\n" +
                                "                  'Compound'\n" +
                                "               END AS INTEREST_MODE,\n" +
                                "               CASE\n" +
                                "                 WHEN FDR.RENEWAL_TYPE = 'ACI' THEN\n" +
                                "                  FDR.INTEREST_AMOUNT * IF(FDR.FD_TRANS_MODE='CR', -1 , 1) \n" +
                                "               END AS ACC_AMOUNT,\n" +
                                "               FDR.FD_VOUCHER_ID,\n" +
                                "               FDR.FD_INTEREST_VOUCHER_ID, ML.FD_INVESTMENT_TYPE_ID\n" +
                                "          FROM FD_RENEWAL FDR\n" +
                                "         INNER JOIN FD_ACCOUNT FDA\n" +
                                "            ON FDA.FD_ACCOUNT_ID = FDR.FD_ACCOUNT_ID\n" +
                                "          LEFT JOIN MASTER_BANK MBK\n" +
                                "            ON FDA.BANK_ID = MBK.BANK_ID\n" +
                                "          LEFT JOIN MASTER_LEDGER ML\n" +
                                "            ON ML.LEDGER_ID = FDA.LEDGER_ID\n" +
                                "          LEFT JOIN (SELECT FD_ACCOUNT_ID,CLOSED_DATE FROM FD_RENEWAL\n" +
                                "                                  WHERE FD_ACCOUNT_ID IN (?FD_ACCOUNT_ID)\n" +
                                "                                    AND RENEWAL_TYPE = 'WDI'\n" +
                                "                                    AND RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "                                    AND STATUS = 1\n" +
                                "                                    AND IS_DELETED = 1 \n" +
                                "                      GROUP BY FD_ACCOUNT_ID\n" +
                                "                      ORDER BY FD_ACCOUNT_ID DESC) AS FDC\n" +
                                "            ON FDA.FD_ACCOUNT_ID = FDC.FD_ACCOUNT_ID\n" +
                                "         WHERE FDR.STATUS = 1\n" +
                                "           AND IS_DELETED = 1\n" +
                                "           AND RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO) AS T,\n" +
                                "       (SELECT @PREVDATE := NULL) AS X,\n" +
                                "       (SELECT @WQE := 0) AS Y,\n" +
                                "       (SELECT @TEMP := 0) AS Z, (SELECT @TEMP_MAT_DATE := null) AS M\n" +
                                " WHERE T.FD_ACCOUNT_ID IN (?FD_ACCOUNT_ID) AND T.PROJECT_ID IN (?PROJECT_ID) {AND T.FD_INVESTMENT_TYPE_ID = ?FD_INVESTMENT_TYPE_ID}\n" +
                                " ORDER BY T.FD_ACCOUNT_ID, IF(T.FD_VOUCHER_TYPE='WD', DATE(CLOSED_DATE), T.INVESTED_ON)"; //T.FD_RENEWAL_ID
                        break;
                    }
                case ReportSQLCommand.BankReport.FetchFDDetailByVoucherId:
                    {
                        ////21/03/2017, To get FD_Account_Id, d_Type from (FD_Account or FD_RENEWAL Tables) execpts fd opening
                        query = "SELECT FD_ACCOUNT_ID, TRANS_TYPE as FD_TYPE FROM FD_ACCOUNT WHERE FD_VOUCHER_ID = ?VOUCHER_ID\n" +
                                  "UNION ALL\n" +
                                  "SELECT FD_ACCOUNT_ID, FD_TYPE FROM FD_RENEWAL WHERE FD_VOUCHER_ID = ?VOUCHER_ID  Or FD_INTEREST_VOUCHER_ID = ?VOUCHER_ID";

                        break;
                    }
                case ReportSQLCommand.BankReport.CheckInValidRenewalDetailByFDId:
                    {
                        //16/03/2017, 1. renewal (if fd_interest_voucher_id = 0, Intrest Amount>0) 2. fd_account for investment fd_voucher_id =0" +
                        //query = "SELECT FD_ACCOUNT_ID  FROM FD_RENEWAL\n" +
                        //        "WHERE CASE WHEN ?FD_TYPE='WD' THEN FD_VOUCHER_ID = 0  WHEN ?FD_TYPE='RN' THEN FD_INTEREST_VOUCHER_ID = 0 AND INTEREST_AMOUNT > 0 END and FD_ACCOUNT_ID =?FD_ACCOUNT_ID\n" +
                        //        "UNION ALL\n" +
                        //        "SELECT FD_ACCOUNT_ID FROM FD_ACCOUNT WHERE FD_SUB_TYPES='FD-I' AND FD_VOUCHER_ID = 0 AND FD_ACCOUNT_ID =?FD_ACCOUNT_ID";

                        query = "SELECT FD_ACCOUNT_ID  FROM FD_RENEWAL\n" +
                                "WHERE CASE WHEN ?FD_TYPE='WD' THEN FD_VOUCHER_ID = 0  WHEN ?FD_TYPE='RN' THEN FD_INTEREST_VOUCHER_ID = 0 END and FD_ACCOUNT_ID =?FD_ACCOUNT_ID\n" +
                                "UNION ALL\n" +
                                "SELECT FD_ACCOUNT_ID FROM FD_ACCOUNT WHERE FD_SUB_TYPES='FD-I' AND FD_VOUCHER_ID = 0 AND FD_ACCOUNT_ID =?FD_ACCOUNT_ID";
                        break;
                    }
                case ReportSQLCommand.BankReport.FetchFDAccountIDByVoucherId:
                    {
                        query = "SELECT FD_ACCOUNT_ID, FD_INTEREST_VOUCHER_ID, FD_RENEWAL_ID FROM FD_RENEWAL WHERE FD_INTEREST_VOUCHER_ID = ?VOUCHER_ID";
                        break;
                    }
                case ReportSQLCommand.BankReport.FetchFDAccounts:
                    {
                        query = "SELECT FD_ACCOUNT_ID, FD_ACCOUNT_NUMBER FROM FD_ACCOUNT WHERE STATUS = 1 {AND PROJECT_ID IN (?PROJECT_ID)}";
                        break;
                    }
                case ReportSQLCommand.BankReport.FetchFDMasterByFDAccountId:
                    {
                        query = "SELECT FDA.FD_ACCOUNT_ID,\n" +
                               "       FDA.PROJECT_ID,\n" +
                               "       FDA.LEDGER_ID,\n" +
                               "       FDA.FD_VOUCHER_ID,\n" +
                               "       FDA.BANK_ID,FDA.BANK_LEDGER_ID,\n" +
                               "       FDA.TRANS_TYPE,FDA.INTEREST_RATE,\n" +
                               "       FDA.AMOUNT AS 'PRINCIPAL_AMOUNT',\n" +
                               "       IFNULL(FDR.EXPECTED_MATURITY_VALUE, IFNULL(FDA.EXPECTED_MATURITY_VALUE, 0)) AS EXPECTED_MATURITY_VALUE,\n" +
                               "       IFNULL(FDR.EXPECTED_INTEREST_VALUE, IFNULL(FDA.EXPECTED_INTEREST_VALUE, 0)) AS EXPECTED_INTEREST_VALUE,\n" +
                               "       FDA.INVESTMENT_DATE,FDA.INTEREST_TYPE,\n" +
                               "       IFNULL(FDR.MATURITY_DATE, FDA.MATURED_ON) AS MATURITY_DATE,\n" +
                               "       FDA.FD_ACCOUNT_NUMBER, CONCAT(MBK.BANK, ' (', MBK.BRANCH, ')') AS BANK, MLG.LEDGER_NAME,\n" +
                               "       MPR.PROJECT,\n" +
                               "       FDA.AMOUNT + IFNULL(FDR.REINVESTED_AMOUNT,0) + IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) + IFNULL(FDRPO.ACCUMULATED_INTEREST_AMOUNT, 0) - IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) AS AMOUNT, " +
                               "       FDA.INTEREST_AMOUNT,\n" +
                               "       IFNULL(FDR.REINVESTED_AMOUNT,0) AS REINVESTED_AMOUNT,\n" +
                               "       IF(ROUND(FDA.AMOUNT + IFNULL(FDR.REINVESTED_AMOUNT,0)+ IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) + IFNULL(FDRPO.ACCUMULATED_INTEREST_AMOUNT, 0),2) -\n" +
                               "        ROUND(IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) + IFNULL(FDRPO.WITHDRAWAL_AMOUNT, 0),2) = 0,\n" +
                               "          'Closed', 'Active') AS CLOSING_STATUS, FDA.NOTES, FDR.RENEWAL_TYPE, IFNULL(MLG.FD_INVESTMENT_TYPE_ID,0) AS FD_INVESTMENT_TYPE_ID, FDA.STATUS\n" +
                               "  FROM FD_ACCOUNT AS FDA\n" +
                               "  LEFT JOIN (SELECT FD_RENEWAL.FD_ACCOUNT_ID, FD_TYPE," +
                               "                   RENEWAL_TYPE,\n" +
                               "                     (SELECT EXPECTED_MATURITY_VALUE FROM FD_RENEWAL FDR WHERE FDR.FD_RENEWAL_ID\n" +
                               "                            = (SELECT MAX(FD_RENEWAL_ID) FROM FD_RENEWAL FDR1 WHERE FDR1.FD_ACCOUNT_ID = FD_RENEWAL.FD_ACCOUNT_ID)\n" +
                               "                     ) AS EXPECTED_MATURITY_VALUE,\n" +
                               "                     (SELECT EXPECTED_INTEREST_VALUE FROM FD_RENEWAL FDR WHERE FDR.FD_RENEWAL_ID\n" +
                               "                            = (SELECT MAX(FD_RENEWAL_ID) FROM FD_RENEWAL FDR1 WHERE FDR1.FD_ACCOUNT_ID = FD_RENEWAL.FD_ACCOUNT_ID)\n" +
                               "                     ) AS EXPECTED_INTEREST_VALUE,\n" +
                               "                     SUM(REINVESTED_AMOUNT) AS REINVESTED_AMOUNT,\n" +
                               "                     MAX(MATURITY_DATE) AS MATURITY_DATE,\n" +
                               "                     MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                               "                     INTEREST_RATE,BANK_LEDGER_ID,\n" +
                               "                     SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                               "                     SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                               "                     SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                               "                FROM FD_RENEWAL AS FD_RENEWAL \n" +
                               "               WHERE STATUS = 1 AND FD_TYPE<>'POI' GROUP BY FD_ACCOUNT_ID HAVING MAX(FD_RENEWAL_ID)) AS FDR\n" +
                               "    ON FDA.FD_ACCOUNT_ID = FDR.FD_ACCOUNT_ID\n" +
                               "  LEFT JOIN (SELECT FD_ACCOUNT_ID, FD_TYPE,\n" +
                               "                    RENEWAL_TYPE,\n" +
                               "                    MAX(MATURITY_DATE) AS MATURITY_DATE,\n" +
                               "                    MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                               "                    INTEREST_RATE,BANK_LEDGER_ID,\n" +
                               "                    SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                               "                    SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                               "                    SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                               "               FROM FD_RENEWAL WHERE STATUS = 1 AND FD_TYPE='POI' GROUP BY FD_ACCOUNT_ID) AS FDRPO\n" +
                               "    ON FDA.FD_ACCOUNT_ID = FDRPO.FD_ACCOUNT_ID\n" +
                               "  LEFT JOIN MASTER_BANK AS MBK ON FDA.BANK_ID = MBK.BANK_ID\n" +
                               "  LEFT JOIN MASTER_PROJECT MPR ON FDA.PROJECT_ID = MPR.PROJECT_ID\n" +
                               "  LEFT JOIN MASTER_LEDGER MLG ON FDA.LEDGER_ID = MLG.LEDGER_ID\n" +
                               " WHERE  FDA.STATUS = 1 AND FDA.FD_ACCOUNT_ID IN (?FD_ACCOUNT_ID)" +
                               " { AND FDA.TRANS_TYPE IN (?TRANS_TYPE)} {AND FDA.FD_SCHEME =?FD_SCHEME} {AND MPR.PROJECT_ID IN(?PROJECT_ID)}";
                        break;
                    }
                case ReportSQLCommand.BankReport.FetchFDRenewalsByFDAccountId:
                    {
                        query = "SELECT FD_RENEWAL_ID,VMT.VOUCHER_NO,FR.FD_VOUCHER_ID,FR.FD_INTEREST_VOUCHER_ID,\n" +
                                "    FD_ACCOUNT_ID,\n" +
                                "    RENEWAL_DATE,\n" +
                                "    RECEIPT_NO,\n" +
                                "    INTEREST_RATE,FR.INTEREST_TYPE,\n" +
                                "    INTEREST_AMOUNT,\n" +
                                "    FR.TDS_AMOUNT,\n" +
                                "    MATURITY_DATE,\n" +
                                "    INTEREST_LEDGER_ID,\n" +
                                "    BANK_LEDGER_ID,\n" +
                                "    RENEWAL_TYPE, FR.FD_TRANS_MODE,\n" +
                                "    VMT.NARRATION,\n" +
                                "    EXPECTED_MATURITY_VALUE AS 'EXPECTED_MATURITY_VALUE', EXPECTED_INTEREST_VALUE\n" +
                                " FROM FD_RENEWAL AS FR\n" +
                                " LEFT JOIN VOUCHER_MASTER_TRANS  VMT ON\n" +
                                " FR.FD_VOUCHER_ID=VMT.VOUCHER_ID\n" +
                                " WHERE FD_ACCOUNT_ID IN(?FD_ACCOUNT_ID)";
                        break;
                    }

                case ReportSQLCommand.BankReport.JournalInvoiceStatus:
                    {
                        query = @"SELECT * FROM 
                                        (SELECT GIM.GST_INVOICE_ID, IFNULL(GIM.BOOKING_VOUCHER_ID, 0) AS VOUCHER_ID, GIM.GST_VENDOR_ID,
                                            GIM.GST_VENDOR_INVOICE_NO, GIM.GST_VENDOR_INVOICE_DATE,
                                            GROUP_CONCAT(GMD.ITEM_NAME) AS ITEM_NAME,GIM.DUE_DATE, ML.LEDGER_NAME AS PARTY_NAME,
                                            SUM(CASE WHEN VM.VOUCHER_TYPE = 'RC' AND GMD.TRANS_MODE='CR' THEN GMD.AMOUNT
                                            WHEN VM.VOUCHER_TYPE = 'PY' AND GMD.TRANS_MODE='DR' THEN GMD.AMOUNT
                                            ELSE GMD.AMOUNT END) AS INVOICE_AMOUNT,
                                            SUM(GMD.QUANTITY) AS QUANTITY, SUM(GMD.UNIT_AMOUNT) AS UNIT_AMOUNT
                                            FROM VOUCHER_MASTER_TRANS VM
                                            INNER JOIN GST_INVOICE_MASTER GIM ON GIM.BOOKING_VOUCHER_ID = VM.VOUCHER_ID
                                            INNER JOIN GST_INVOICE_MASTER_DETAILS GMD ON GMD.GST_INVOICE_ID = GIM.GST_INVOICE_ID
                                            INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = GMD.LEDGER_ID
                                            LEFT JOIN (SELECT VGI.GST_INVOICE_ID, VGI.VOUCHER_ID, VM.VOUCHER_DATE
                                                FROM VOUCHER_GST_INVOICE VGI
                                                INNER JOIN VOUCHER_MASTER_TRANS VM ON VM.VOUCHER_ID = VGI.VOUCHER_ID AND STATUS = 1
                                                WHERE VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO GROUP BY VGI.GST_INVOICE_ID) VGI ON VGI.GST_INVOICE_ID = GIM.GST_INVOICE_ID
  
                                            WHERE VM.PROJECT_ID IN (?PROJECT_ID) AND VM.STATUS =1 AND (VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO OR VGI.GST_INVOICE_ID IS NOT NULL )
                                                    {AND ML.LEDGER_ID IN (?LEDGER_ID)}     
                                                    AND VM.GST_VENDOR_ID > 0 AND ML.ACCESS_FLAG <> 2 AND GMD.LEDGER_GST_CLASS_ID >0
                                            GROUP BY GIM.GST_INVOICE_ID) AS GIM
                                        LEFT JOIN (SELECT VGI.GST_INVOICE_ID, VM.VOUCHER_DATE, IFNULL(VM.VOUCHER_NO, '') AS VOUCHER_NO,
                                            IF(ML.GROUP_ID = 12, CONCAT(ML.LEDGER_NAME, CONCAT(' - ',
                                            CONCAT(MB.BANK, CONCAT(' - ', MB.BRANCH))), ' ' , IFNULL(MB.IFSCCODE, '') ), ML.LEDGER_NAME) AS CASH_BANK,
                                            IFNULL(VGI.AMOUNT, 0) AS PAID_AMOUNT, CHEQUE_NO, MATERIALIZED_ON
                                            FROM VOUCHER_GST_INVOICE VGI
                                            INNER JOIN VOUCHER_MASTER_TRANS VM ON VM.VOUCHER_ID = VGI.VOUCHER_ID AND STATUS = 1
                                            INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VM.VOUCHER_ID
                                            INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID AND ML.GROUP_ID IN (12, 13)
                                            LEFT JOIN MASTER_BANK_ACCOUNT BA ON BA.LEDGER_ID = ML.LEDGER_ID
                                            LEFT JOIN MASTER_BANK MB ON BA.BANK_ID = MB.BANK_ID
                                            WHERE VM.PROJECT_ID IN (?PROJECT_ID) AND VM.STATUS =1  ) AS VGI ON VGI.GST_INVOICE_ID = GIM.GST_INVOICE_ID;";
                        break;
                    }

                #endregion

                #region Multi Column Cash/Bank
                case ReportSQLCommand.BankReport.MultiColumnCashbank:
                    {
                        query = "SELECT TT.VOUCHER_ID,\n" +
                                "       SORT_ID,\n" +
                                "       TT.VOUCHER_SUB_TYPE,\n" +
                                "       TT.PROJECT_ID,\n" +
                                "       TRIM(GROUP_CONCAT(TT.LEDGER_ID ORDER BY TT.sort_id DESC SEPARATOR '')) AS LEDGER_ID,\n" +
                            //"       CASE\n" +
                            //"         WHEN TT.VOUCHER_TYPE NOT IN('PY') AND (SUM(TT.R_COLUMN1)+SUM(TT.R_COLUMN2)+SUM(TT.R_COLUMN3))>0 THEN\n" +
                            //"          DATE(TT.VOUCHER_DATE)\n" +
                            //"         ELSE\n" +
                            //"          NULL\n" +
                            //"       END AS 'R_DATE',\n" +
                                "          DATE(TT.VOUCHER_DATE) as  'R_DATE',CONCAT(DATE_FORMAT(TT.VOUCHER_DATE, '%b') , CONCAT(' '  , DATE_FORMAT(TT.VOUCHER_DATE, '%Y'))) MONTH_YEAR_NAME, DATE_FORMAT(TT.VOUCHER_DATE,'%Y - %m') MONTH_YEAR,\n" +
                                "       TRIM(GROUP_CONCAT(TT.VOUCHER_NO ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS R_VNO,\n" +
                                "       TRIM(GROUP_CONCAT(TT.LEDGER_CODE ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS LEDGER_CODE,\n" +
                                "       TRIM(GROUP_CONCAT(TT.LEDGER_NAME ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS 'R_LEDGERNAME',\n" +
                                "       CASE\n" +
                                "          WHEN TT.VOUCHER_TYPE NOT IN('PY') AND (SUM(TT.R_COLUMN1)+SUM(TT.R_COLUMN2)+SUM(TT.R_COLUMN3))>0 THEN\n" +
                                "          TRIM(GROUP_CONCAT(TT.REC_LEDGER_AMOUNT ORDER BY TT.sort_id DESC\n" +
                                "                            SEPARATOR ' '))\n" +
                                "       END AS REC_LEDGER_AMOUNT,\n" +
                                "\n" +
                                "       SUM(TT.R_COLUMN1) AS R_COLUMN1,\n" +
                                "       SUM(TT.R_COLUMN2) AS R_COLUMN2,\n" +
                                "       SUM(TT.R_COLUMN3) AS R_COLUMN3,\n" +
                                "       SUM(TT.P_COLUMN1) AS P_COLUMN1,\n" +
                                "       SUM(TT.P_COLUMN2) AS P_COLUMN2,\n" +
                                "       SUM(TT.P_COLUMN3) AS P_COLUMN3,\n" +
                                "       TRIM(GROUP_CONCAT(TT.NARRATION ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS R_NARRATION,\n" +
                                "       TRIM(GROUP_CONCAT(TT.PAY_VOUCHER_ID ORDER BY TT.sort_id DESC\n" +
                                "                         SEPARATOR '')) AS PAY_VOUCHER_ID,\n" +
                            //"       CASE\n" +
                            //"          WHEN TT.VOUCHER_TYPE NOT IN('RC') AND (SUM(TT.P_COLUMN1)+SUM(TT.P_COLUMN2)+SUM(TT.P_COLUMN3))>0 THEN\n" +
                            //"          DATE(TT.VOUCHER_DATE)\n" +
                            //"         ELSE\n" +
                            //"          NULL\n" +
                            //"       END AS 'P_DATE',\n" +
                                "          DATE(TT.VOUCHER_DATE) as  'P_DATE',\n" +
                                "       TT.VOUCHER_PAYMENT_SUB_TYPE,\n" +
                                "       TRIM(GROUP_CONCAT(TT.PAY_VID ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS P_VNO,\n" +
                                "       TRIM(GROUP_CONCAT(TT.PAY_LED_ID ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS PAY_LED_ID,\n" +
                                "       TRIM(GROUP_CONCAT(TT.PAY_CODE ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS PAY_CODE,\n" +
                                "       TRIM(GROUP_CONCAT(TT.PAY_LEDGER ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS 'P_LEDGERNAME',\n" +
                                "       TRIM(GROUP_CONCAT(TT.PAY_LEDGER_AMOUNT ORDER BY TT.sort_id DESC\n" +
                                "                         SEPARATOR ' ')) AS PAY_LEDGER_AMOUNT,\n" +
                                "       SUM(TT.PAY_CASH) AS PAY_CASH,\n" +
                                "       SUM(TT.PAY_BANK) AS PAY_BANK,\n" +
                                "       TRIM(GROUP_CONCAT(TT.NAP ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS P_NARRATION,\n" +
                                "       TT.MULTICASHBANK,\n" +
                                "       CASE\n" +
                                "         WHEN TT.VOUCHER_TYPE = 'CN' THEN\n" +
                                "          'CN' WHEN TT.VOUCHER_NO<>'' THEN 'RC' ELSE ''\n" + //Ctra - CN, Recpt- RC
                                "       END AS 'R_VOUCHERTYPE',\n" +
                                "          CASE\n" +
                                "         WHEN TT.VOUCHER_TYPE = 'CN' THEN\n" +
                                "          'CN' ELSE 'PY' \n" + //Ctra - CN, Pymt - PY
                                "       END AS 'P_VOUCHERTYPE',TT.GROUP_ID,TT.MULTICASHBANKID, \n" +
                                "       SUBSTRING_INDEX(GROUP_CONCAT(R_V1 ORDER BY R_V1 DESC ), ',', 1) AS R_V1, \n" +
                                "       SUBSTRING_INDEX(GROUP_CONCAT(R_V2 ORDER BY R_V2 DESC ), ',', 1) AS R_V2, \n" +
                                "       SUBSTRING_INDEX(GROUP_CONCAT(R_V3 ORDER BY R_V3 DESC ), ',', 1) AS R_V3, \n" +
                                "       SUBSTRING_INDEX(GROUP_CONCAT(P_V1 ORDER BY P_V1 DESC ), ',', 1) AS P_V1, \n" +
                                "       SUBSTRING_INDEX(GROUP_CONCAT(P_V2 ORDER BY P_V2 DESC ), ',', 1) AS P_V2, \n" +
                                "       SUBSTRING_INDEX(GROUP_CONCAT(P_V3 ORDER BY P_V3 DESC ), ',', 1) AS P_V3 \n" +
                            //"       R_V1, R_V2, R_V3, P_V1, P_V2, P_V3\n" +
                                "  FROM (SELECT VT.VOUCHER_ID,\n" +
                                "               MT.VOUCHER_SUB_TYPE,\n" +
                                "               MT.PROJECT_ID,\n" +
                                "               VT.LEDGER_ID,\n" +
                                "               MT.VOUCHER_NO AS VOUCHER_NO,\n" + //GROUP_CONCAT(MT.VOUCHER_NO ORDER BY sort_id DESC SEPARATOR ' ')
                                "               ML.LEDGER_CODE AS LEDGER_CODE,\n" + //GROUP_CONCAT(ML.LEDGER_CODE ORDER BY sort_id DESC SEPARATOR ' ')
                                "               @row_num := IF(@prev_value = T.voucher_date, @row_num + 1, 1) AS sort_id,\n" +
                                "               @prev_value := T.voucher_date as VOUCHER_DATE,\n" +
                                "               @rrow_num :=\n" +
                                "               IF(@rprev_value = MT.VOUCHER_ID, @rrow_num + 1, 1) AS sort_id1,\n" +
                                "               @rprev_value := MT.VOUCHER_ID as v1,\n" +
                            //"               ML.LEDGER_NAME AS LEDGER_NAME,\n" +
                                "              IF(COUNT(*) > 1,\n" +
                                "                 GROUP_CONCAT(CONCAT(ML.LEDGER_NAME, ' ', CONCAT('Rs.', FORMAT(VT.AMOUNT, 2, 'en_IN')), ' ',VT.TRANS_MODE, '<br>')  ORDER BY VT.SEQUENCE_NO SEPARATOR ' '),\n" + //sort_id 
                                "                 GROUP_CONCAT(ML.LEDGER_NAME)) AS LEDGER_NAME, \n" +
                                "               IFNULL(VT.AMOUNT, 0.00) AS REC_LEDGER_AMOUNT,\n" +
                                "               CASE\n" +
                                "                 WHEN (T.CASH) > 0 AND @rrow_num <> 1 THEN\n" +
                                "                  0\n" +
                                "                 ELSE\n" +
                                "                  CASE\n" +
                                "                    WHEN (T.CASH) > 0 AND @rrow_num = 1 THEN\n" +
                                "                     T.CASH\n" +
                                "                    ELSE\n" +
                                "                     0\n" +
                                "                  END\n" +
                                "               END AS CASH,\n" +
                                "               CASE\n" +
                                "                 WHEN (T.BANK > 0) AND @rrow_num <> 1 THEN\n" +
                                "                  0\n" +
                                "                 ELSE\n" +
                                "                  CASE\n" +
                                "                    WHEN (T.BANK > 0) AND @rrow_num = 1 THEN\n" +
                                "                     T.BANK\n" +
                                "                    ELSE\n" +
                                "                     0\n" +
                                "                  END\n" +
                                "               END AS BANK,\n" +
                                "               '' AS PAY_VOUCHER_ID,\n" +
                                "               MT.VOUCHER_SUB_TYPE AS VOUCHER_PAYMENT_SUB_TYPE,\n" +
                                "               '' AS PAY_VID,\n" +
                                "               '' as PAY_LED_ID,\n" +
                                "               '' AS PAY_CODE,\n" +
                                "               '' AS PAY_LEDGER,\n" +
                                "               '' AS PAY_LEDGER_AMOUNT,\n" +
                                "               0 AS PAY_CASH,\n" +
                                "               0 AS PAY_BANK,\n" +
                                "     CONCAT(IFNULL(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION),''),\n" +
                                "     IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(MT.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', MT.NAME_ADDRESS),''),''),\n" +
                                "     IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(CHEQUE_NO,'')) > 0,CONCAT(' -- ', CHEQUE_NO),''),''),\n" +
                                "     IF(1=?INCLUDE_PAN_GST,IF(LENGTH(IFNULL(MT.PAN_NUMBER, '')) > 0, CONCAT(' -- PAN: ', MT.PAN_NUMBER), ''), ''),\n" +
                                "     IF(1=?INCLUDE_PAN_GST, IF(LENGTH(IFNULL(MT.GST_NUMBER, '')) > 0, CONCAT(' -- GST: ', MT.GST_NUMBER), ''), ''))  AS NARRATION,\n" +
                                "               '' AS NAP,\n" +
                                "               MULTICASHBANK,\n" +
                                "               MT.VOUCHER_TYPE,\n" +
                                "               CASE\n" +
                                "                 WHEN (R_COLUMN1) > 0 AND @rrow_num <> 1 THEN\n" +
                                "                  0\n" +
                                "                 ELSE\n" +
                                "                  CASE\n" +
                                "                    WHEN (R_COLUMN1) > 0 AND @rrow_num = 1 THEN\n" +
                                "                     R_COLUMN1\n" +
                                "                    ELSE\n" +
                                "                     0\n" +
                                "                  END\n" +
                                "               END AS R_COLUMN1,\n" +
                                "\n" +
                                "               CASE\n" +
                                "                 WHEN (R_COLUMN2) > 0 AND @rrow_num <> 1 THEN\n" +
                                "                  0\n" +
                                "                 ELSE\n" +
                                "                  CASE\n" +
                                "                    WHEN (R_COLUMN2) > 0 AND @rrow_num = 1 THEN\n" +
                                "                     R_COLUMN2\n" +
                                "                    ELSE\n" +
                                "                     0\n" +
                                "                  END\n" +
                                "               END AS R_COLUMN2,\n" +
                                "\n" +
                                "               CASE\n" +
                                "                 WHEN (R_COLUMN3) > 0 AND @rrow_num <> 1 THEN\n" +
                                "                  0\n" +
                                "                 ELSE\n" +
                                "                  CASE\n" +
                                "                    WHEN (R_COLUMN3) > 0 AND @rrow_num = 1 THEN\n" +
                                "                     R_COLUMN3\n" +
                                "                    ELSE\n" +
                                "                     0\n" +
                                "                  END\n" +
                                "               END AS R_COLUMN3,\n" +
                                "               0 AS P_COLUMN1,\n" +
                                "               0 AS P_COLUMN2,\n" +
                                "               0 AS P_COLUMN3,T.GROUP_ID,T.MULTICASHBANKID,\n" +
                                "               R_V1, R_V2, R_V3, 0 AS P_V1, 0 AS P_V2, 0 AS P_V3\n" +
                                "          FROM master_ledger_GROUP LG\n" +
                                "\n" +
                                "          LEFT JOIN master_ledger ML\n" +
                                "            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "          LEFT JOIN voucher_trans VT\n" +
                                "            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                "          LEFT JOIN voucher_master_trans MT\n" +
                                "            ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "\n" +
                                "          JOIN (SELECT CASHBANK.VOUCHER_DATE,\n" +
                                "                      CASHBANK.VOUCHER_SUB_TYPE,\n" +
                                "                      IFNULL(MBA.ACCOUNT_NUMBER, ' ') AS ACCOUNT_NUMBER,\n" +
                                "                      CASHBANK.VOUCHER_ID,\n" +
                                "                      CASHBANK.VOUCHER_NO,\n" +
                                "                      CASHBANK.LEDGER_ID,\n" +
                                "                      SUM(CASHBANK.CASH) AS CASH,\n" +
                                "                      SUM(CASHBANK.BANK) AS BANK,\n" +
                                "                      CASHBANK.LEDGER_CODE,\n" +
                                "                      CASHBANK.PROJECT_ID,\n" +
                                "                      CASE\n" +
                                "                        WHEN GROUP_ID = 12 THEN\n" +
                                "                         'BANK'\n" +
                                "                        WHEN GROUP_ID = 13 THEN\n" +
                                "                         'CASH'\n" +
                                "                      END AS CASHBANKNAME,\n" +
                                "                      CASHBANK.MULTICASHBANK,\n" +
                                "                     SUM(R_COLUMN1) AS R_COLUMN1,\n" +
                                "                     SUM(R_COLUMN2) AS R_COLUMN2,\n" +
                                "                     SUM(R_COLUMN3) AS R_COLUMN3,CASHBANK.GROUP_ID,CASHBANK.MULTICASHBANKID, R_V1, R_V2, R_V3\n" +
                                "                 FROM (SELECT MT.VOUCHER_DATE,\n" +
                                "                              MT.VOUCHER_SUB_TYPE,\n" +
                                "                              VT.VOUCHER_ID,\n" +
                                "                              MT.VOUCHER_NO,\n" +
                                "                              VT.LEDGER_ID,\n" +
                                "                              ML.LEDGER_CODE,\n" +
                                "                              LG.GROUP_ID,\n" +
                                "                              ML.LEDGER_NAME AS MULTICASHBANK,ML.LEDGER_ID AS MULTICASHBANKID,\n" +
                                "                              CASE\n" +
                                "                                WHEN LG.GROUP_ID = 13 THEN\n" +
                                "                                 SUM(VT.AMOUNT)\n" +
                                "                                ELSE\n" +
                                "                                 0\n" +
                                "                              END AS CASH,\n" +
                                "                              CASE\n" +
                                "                                WHEN LG.GROUP_ID = 12 THEN\n" +
                                "                                 SUM(VT.AMOUNT)\n" +
                                "                                ELSE\n" +
                                "                                 0\n" +
                                "                              END AS BANK,\n" +
                                "                              CASE\n" +
                                "                                WHEN LG.GROUP_ID = 13 THEN\n" +
                                "                                 SUM(VT.AMOUNT)\n" +
                                "                                ELSE\n" +
                                "                                 0\n" +
                                "                              END AS R_COLUMN1,\n" +
                                "                              CASE\n" +
                                "                                WHEN ML.LEDGER_ID = ?R_COLUMN2 THEN\n" +
                                "                                 SUM(VT.AMOUNT)\n" +
                                "                                ELSE\n" +
                                "                                 0\n" +
                                "                              END AS R_COLUMN2,\n" +
                                "                              CASE\n" +
                                "                                WHEN ML.LEDGER_ID = ?R_COLUMN3 THEN\n" +
                                "                                 SUM(VT.AMOUNT)\n" +
                                "                                ELSE\n" +
                                "                                 0\n" +
                                "                              END AS R_COLUMN3,\n" +
                                "                              MT.PROJECT_ID,\n" +
                                "                              IF(LG.GROUP_ID = 13, VT.VOUCHER_ID, 0) AS R_V1, IF(ML.LEDGER_ID = ?R_COLUMN2, VT.VOUCHER_ID, 0) AS R_V2,\n" +
                                "                              IF(ML.LEDGER_ID = ?R_COLUMN3, VT.VOUCHER_ID, 0) AS R_V3\n" +
                                "                         FROM MASTER_LEDGER_GROUP LG\n" +
                                "\n" +
                                "                         LEFT JOIN MASTER_LEDGER ML\n" +
                                "                           ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "                         LEFT JOIN VOUCHER_TRANS VT\n" +
                                "                           ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                "                         LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                                "                           ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "                        WHERE MT.VOUCHER_TYPE in ('RC') -- ,'PY'\n" +
                                "                          AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "                          AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                          and lg.group_id in (12, 13)\n" +
                                "\n" +
                                "                          AND MT.STATUS = 1\n" +
                                "                        GROUP BY MT.PROJECT_ID, VT.VOUCHER_ID, VT.LEDGER_ID\n" +
                                "                        ORDER BY MT.PROJECT_ID,\n" +
                                "                                 MT.VOUCHER_DATE,\n" +
                                "                                 MT.VOUCHER_NO,\n" +
                                "                                 VT.SEQUENCE_NO) AS CASHBANK\n" +
                                "                 LEFT JOIN MASTER_BANK_ACCOUNT MBA\n" +
                                "                   ON MBA.LEDGER_ID = CASHBANK.LEDGER_ID\n" +
                                "                 LEFT JOIN MASTER_BANK MB\n" +
                                "                   ON MB.BANK_ID = MBA.BANK_ID\n" +
                                "                GROUP BY CASHBANK.VOUCHER_ID\n" +
                                "                ORDER BY CASHBANK.PROJECT_ID,\n" +
                                "                         CASHBANK.VOUCHER_DATE,\n" +
                                "                         CASHBANK.VOUCHER_NO) AS T\n" +
                                "            ON MT.VOUCHER_ID = T.VOUCHER_ID, (SELECT @row_num := 1) x,\n" +
                                "         (SELECT @prev_value := null) y, (SELECT @rrow_num := 1) x1,\n" +
                                "         (SELECT @rprev_value := null) y1\n" +
                                "         WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "           AND MT.VOUCHER_TYPE IN ('RC') -- ,'PY'\n" +
                                "           AND VT.TRANS_MODE IN ('DR', 'CR')\n" +
                                "           AND MT.STATUS = 1\n" +
                                "           AND T.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "           AND LG.GROUP_ID NOT IN (12, 13)\n" +
                                "         GROUP BY MT.PROJECT_ID,\n" +
                                "                  MT.VOUCHER_DATE,\n" +
                                "                  VT.VOUCHER_ID\n" +
                            //"                  VT.SEQUENCE_NO\n" +
                                "\n" +
                                "        UNION ALL\n" +
                                "\n" +
                                "        SELECT '' AS VOUCHER_ID,\n" +
                                "               MT.VOUCHER_SUB_TYPE,\n" +
                                "               MT.PROJECT_ID,\n" +
                                "               '' AS LEDGER_ID,\n" +
                                "               '' AS VOUCHER_NO,\n" +
                                "               '' AS LEDGER_CODE,\n" +
                                "               @row_number :=\n" +
                                "               IF(@prev_val = T.voucher_date, @row_number + 1, 1) AS sort_id,\n" +
                                "               @prev_val := T.voucher_date as VOUCHER_DATE,\n" +
                                "               @prow_num :=\n" +
                                "               IF(@pprev_value = MT.VOUCHER_ID, @prow_num + 1, 1) AS sort_id1,\n" +
                                "               @pprev_value := MT.VOUCHER_ID as v1,\n" +
                                "               '' AS LEDGER_NAME,\n" +
                                "               0.00 AS REC_LEDGER_AMOUNT,\n" +
                                "               0 AS CASH,\n" +
                                "               0 AS BANK,\n" +
                                "               VT.VOUCHER_ID AS PAY_VOUCHER_ID,\n" +
                                "               MT.VOUCHER_SUB_TYPE AS VOUCHER_PAYMENT_SUB_TYPE,\n" +
                                "               T.VOUCHER_NO AS PAY_VID,\n" + //GROUP_CONCAT(T.VOUCHER_NO ORDER BY sort_id DESC SEPARATOR '') 
                                "               VT.LEDGER_ID as PAY_LED_ID,\n" +
                                "               ML.LEDGER_CODE AS PAY_CODE,\n" + //GROUP_CONCAT(ML.LEDGER_CODE ORDER BY sort_id DESC SEPARATOR '')
                            //"               ML.LEDGER_NAME AS PAY_LEDGER,\n" + //GROUP_CONCAT(ML.LEDGER_NAME ORDER BY sort_id DESC SEPARATOR ' ') 
                                "              IF(COUNT(*) > 1,\n" +
                                "                  GROUP_CONCAT(CONCAT(ML.LEDGER_NAME, ' ', CONCAT('Rs.', FORMAT(VT.AMOUNT, 2, 'en_IN')), ' ', VT.TRANS_MODE ,'<br>') ORDER BY VT.SEQUENCE_NO SEPARATOR ' '),\n" + //@row_number 
                                "                  GROUP_CONCAT(ML.LEDGER_NAME)) AS PAY_LEDGER,\n" +
                                "\n" +
                                "               VT.AMOUNT AS PAY_LEDGER_AMOUNT,\n" +
                                "               CASE\n" +
                                "                 WHEN (T.CASH) > 0 AND @prow_num <> 1 THEN\n" +
                                "                  0\n" +
                                "                 ELSE\n" +
                                "                  CASE\n" +
                                "                    WHEN (T.CASH) > 0 AND @prow_num = 1 THEN\n" +
                                "                     T.CASH\n" +
                                "                    ELSE\n" +
                                "                     0\n" +
                                "                  END\n" +
                                "               END AS PAY_CASH,\n" +
                                "               CASE\n" +
                                "                 WHEN (T.BANK > 0) AND @prow_num <> 1 THEN\n" +
                                "                  0\n" +
                                "                 ELSE\n" +
                                "                  CASE\n" +
                                "                    WHEN (T.BANK > 0) AND @prow_num = 1 THEN\n" +
                                "                     T.BANK\n" +
                                "                    ELSE\n" +
                                "                     0\n" +
                                "                  END\n" +
                                "               END AS PAY_BANK,\n" +
                                "               '' AS NARRATION,\n" +
                                "     CONCAT(CONCAT(IFNULL(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION),''),\n" +
                                "     IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(MT.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', MT.NAME_ADDRESS),''),''),\n" +
                                "     IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(CHEQUE_NO,'')) > 0,CONCAT(' -- ', CHEQUE_NO),''),'')),\n" +
                                "    IF(1=?INCLUDE_PAN_GST,IF(LENGTH(IFNULL(MT.PAN_NUMBER, '')) > 0, CONCAT(' -- PAN: ', MT.PAN_NUMBER), ''), ''),\n" +
                                "    IF(1=?INCLUDE_PAN_GST,IF(LENGTH(IFNULL(MT.GST_NUMBER, '')) > 0, CONCAT(' -- GST: ', MT.GST_NUMBER), ''), ''),\n" +
                                "    IF(TRIM(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION))<>'' AND TRIM(REF.REFERENCE_NUMBER)<>'',\n" +
                                "    IF(TRIM(REF.REFERENCE_NUMBER)<>'', CONCAT('-REF ' , IFNULL(REF.REFERENCE_NUMBER,'')), '') ,  IF(TRIM(REF.REFERENCE_NUMBER)<>'', CONCAT('REF ' , IFNULL(REF.REFERENCE_NUMBER,'')), '') ) )  AS NAP,\n" +
                                "               MULTICASHBANK,\n" +
                                "               MT.VOUCHER_TYPE,\n" +
                                "               0 AS R_COLUMN1,\n" +
                                "               0 AS R_COLUMN2,\n" +
                                "               0 AS R_COLUMN3,\n" +
                                "               CASE\n" +
                                "                 WHEN (P_COLUMN1) > 0 AND @prow_num <> 1 THEN\n" +
                                "                  0\n" +
                                "                 ELSE\n" +
                                "                  CASE\n" +
                                "                    WHEN (P_COLUMN1) > 0 AND @prow_num = 1 THEN\n" +
                                "                     P_COLUMN1\n" +
                                "                    ELSE\n" +
                                "                     0\n" +
                                "                  END\n" +
                                "               END AS P_COLUMN1,\n" +
                                "\n" +
                                "               CASE\n" +
                                "                 WHEN (P_COLUMN2) > 0 AND @prow_num <> 1 THEN\n" +
                                "                  0\n" +
                                "                 ELSE\n" +
                                "                  CASE\n" +
                                "                    WHEN (P_COLUMN2) > 0 AND @prow_num = 1 THEN\n" +
                                "                     P_COLUMN2\n" +
                                "                    ELSE\n" +
                                "                     0\n" +
                                "                  END\n" +
                                "               END AS P_COLUMN2,\n" +
                                "\n" +
                                "               CASE\n" +
                                "                 WHEN (P_COLUMN3) > 0 AND @prow_num <> 1 THEN\n" +
                                "                  0\n" +
                                "                 ELSE\n" +
                                "                  CASE\n" +
                                "                    WHEN (P_COLUMN3) > 0 AND @prow_num = 1 THEN\n" +
                                "                     P_COLUMN3\n" +
                                "                    ELSE\n" +
                                "                     0\n" +
                                "                  END\n" +
                                "               END AS P_COLUMN3,\n" +
                                "               T.GROUP_ID,T.MULTICASHBANKID, 0 AS R_V1, 0 AS R_V2, 0 AS R_V3, P_V1, P_V2, P_V3\n" +
                                "          FROM MASTER_LEDGER_GROUP LG\n" +
                                "\n" +
                                "          LEFT JOIN MASTER_LEDGER ML\n" +
                                "            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "          LEFT JOIN VOUCHER_TRANS VT\n" +
                                "            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                "          LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                                "            ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "  LEFT JOIN (SELECT VR.REC_PAY_VOUCHER_ID, VR.LEDGER_ID, GROUP_CONCAT(VT.REFERENCE_NUMBER) AS REFERENCE_NUMBER FROM VOUCHER_REFERENCE VR\n" +
                                " INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VR.REF_VOUCHER_ID AND VT.LEDGER_ID = VR.LEDGER_ID GROUP BY VR.REC_PAY_VOUCHER_ID, VR.LEDGER_ID) AS REF ON\n" +
                                " REF.REC_PAY_VOUCHER_ID = MT.VOUCHER_ID AND REF.LEDGER_ID = VT.LEDGER_ID\n" +
                                "          JOIN (SELECT CASHBANK.VOUCHER_DATE,\n" +
                                "                       CASHBANK.VOUCHER_SUB_TYPE,\n" +
                                "\n" +
                                "                       IFNULL(MBA.ACCOUNT_NUMBER, ' ') AS ACCOUNT_NUMBER,\n" +
                                "                       CASHBANK.VOUCHER_ID,\n" +
                                "                       CASHBANK.LEDGER_ID,\n" +
                                "                       SUM(CASHBANK.CASH) AS CASH,\n" +
                                "                       SUM(CASHBANK.BANK) AS BANK,\n" +
                                "                       CASHBANK.VOUCHER_NO,\n" +
                                "                       CASHBANK.LEDGER_CODE,\n" +
                                "                       CASHBANK.PROJECT_ID,\n" +
                                "                       CASE\n" +
                                "                         WHEN GROUP_ID = 12 THEN\n" +
                                "                          'BANK'\n" +
                                "                         WHEN GROUP_ID = 13 THEN\n" +
                                "                          'CASH'\n" +
                                "                       END AS CASHBANKNAME,\n" +
                                "                       CASHBANK.MULTICASHBANK,\n" +
                                "                     SUM(P_COLUMN1) AS P_COLUMN1,\n" +
                                "                     SUM(P_COLUMN2) AS P_COLUMN2,\n" +
                                "                     SUM( P_COLUMN3) AS P_COLUMN3,CASHBANK.GROUP_ID,CASHBANK.MULTICASHBANKID, P_V1, P_V2, P_V3\n" +
                                "                  FROM (SELECT MT.VOUCHER_DATE,\n" +
                                "                               MT.VOUCHER_SUB_TYPE,\n" +
                                "                               VT.VOUCHER_ID,\n" +
                                "                               MT.VOUCHER_NO,\n" +
                                "                               VT.LEDGER_ID,\n" +
                                "                               ML.LEDGER_CODE,\n" +
                                "                               LG.GROUP_ID,\n" +
                                "                               ML.LEDGER_NAME AS MULTICASHBANK,ML.LEDGER_ID AS MULTICASHBANKID,\n" +
                                "\n" +
                                "                               CASE\n" +
                                "                                 WHEN LG.GROUP_ID = 13 THEN\n" +
                                "                                  SUM(VT.AMOUNT)\n" +
                                "                                 ELSE\n" +
                                "                                  0\n" +
                                "                               END AS CASH,\n" +
                                "                               CASE\n" +
                                "                                 WHEN LG.GROUP_ID = 12 THEN\n" +
                                "                                  SUM(VT.AMOUNT)\n" +
                                "                                 ELSE\n" +
                                "                                  0\n" +
                                "                               END AS BANK,\n" +
                                "                               CASE\n" +
                                "                                 WHEN LG.GROUP_ID = 13 THEN\n" +
                                "                                  SUM(VT.AMOUNT)\n" +
                                "                                 ELSE\n" +
                                "                                  0\n" +
                                "                               END AS P_COLUMN1,\n" +
                                "                               CASE\n" +
                                "                                 WHEN ML.LEDGER_ID = ?R_COLUMN2 THEN\n" +
                                "                                  SUM(VT.AMOUNT)\n" +
                                "                                 ELSE\n" +
                                "                                  0\n" +
                                "                               END AS P_COLUMN2,\n" +
                                "                               CASE\n" +
                                "                                 WHEN ML.LEDGER_ID = ?R_COLUMN3 THEN\n" +
                                "                                  SUM(VT.AMOUNT)\n" +
                                "                                 ELSE\n" +
                                "                                  0\n" +
                                "                               END AS P_COLUMN3,\n" +
                                "                               MT.PROJECT_ID,\n" +
                                "                               IF(LG.GROUP_ID = 13, VT.VOUCHER_ID, 0) AS P_V1, IF(ML.LEDGER_ID = ?R_COLUMN2, VT.VOUCHER_ID,0) AS P_V2,\n" +
                               "                                IF(ML.LEDGER_ID = ?R_COLUMN3, VT.VOUCHER_ID,0) AS P_V3\n" +
                                "                          FROM MASTER_LEDGER_GROUP LG\n" +
                                "\n" +
                                "                          LEFT JOIN MASTER_LEDGER ML\n" +
                                "\n" +
                                "                            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "                          LEFT JOIN VOUCHER_TRANS VT\n" +
                                "                            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                "                          LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                                "                            ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "                         WHERE MT.VOUCHER_TYPE IN ('PY')\n" +
                                "                           AND mt.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "                           AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                           and lg.group_id in (12, 13)\n" +
                                "\n" +
                                "                           AND MT.STATUS = 1\n" +
                                "                         GROUP BY MT.PROJECT_ID, MT.VOUCHER_ID, VT.LEDGER_ID\n" +
                                "                         ORDER BY MT.PROJECT_ID,\n" +
                                "                                  MT.VOUCHER_DATE,\n" +
                                "                                  MT.VOUCHER_NO,\n" +
                                "                                  VT.SEQUENCE_NO) AS CASHBANK\n" +
                                "                  LEFT JOIN MASTER_BANK_ACCOUNT MBA\n" +
                                "                    ON MBA.LEDGER_ID = CASHBANK.LEDGER_ID\n" +
                                "                  LEFT JOIN MASTER_BANK MB\n" +
                                "                    ON MB.BANK_ID = MBA.BANK_ID\n" +
                                "                 GROUP BY CASHBANK.VOUCHER_ID\n" +
                                "                 ORDER BY CASHBANK.PROJECT_ID,\n" +
                                "                          CASHBANK.VOUCHER_DATE,\n" +
                                "                          CASHBANK.VOUCHER_NO) AS T\n" +
                                "            ON MT.VOUCHER_ID = T.VOUCHER_ID, (SELECT @row_number := 1) x,\n" +
                                "         (SELECT @prev_val := null) y, (SELECT @prow_num := 1) x1,\n" +
                                "         (SELECT @pprev_value := null) y1\n" +
                                "         WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "           AND MT.VOUCHER_TYPE IN ('PY') -- 'RC',\n" +
                                "           AND VT.TRANS_MODE IN ('CR', 'DR')\n" +
                                "           AND MT.STATUS = 1\n" +
                                "           AND T.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "           AND LG.GROUP_ID NOT IN (12, 13)\n" +
                                "         GROUP BY MT.PROJECT_ID,\n" +
                                "                  MT.VOUCHER_DATE,\n" +
                                "                  VT.VOUCHER_ID\n" +
                            //"                  VT.SEQUENCE_NO,\n" +
                            //"                  ML.LEDGER_ID\n" +
                                "        UNION ALL\n" +
                                "        SELECT TT.VOUCHER_ID,\n" +
                                "               TT.VOUCHER_SUB_TYPE,\n" +
                                "               TT.PROJECT_ID,\n" +
                                "               GROUP_CONCAT(TT.LEDGER_ID ORDER BY TT.LEDGER_ID DESC\n" +
                                "                            SEPARATOR '') AS LEDGER_ID,\n" +
                                "               GROUP_CONCAT(TT.VOUCHER_NO ORDER BY TT.VOUCHER_ID DESC\n" +
                                "                            SEPARATOR ' ') AS VOUCHER_NO,\n" +
                                "               GROUP_CONCAT(TT.LEDGER_CODE ORDER BY TT.VOUCHER_ID DESC\n" +
                                "                            SEPARATOR ' ') AS LEDGER_CODE,\n" +
                                "               @row_numC :=\n" +
                                "               IF(@prev_valueC = TT.voucher_date, @row_numC + 1, 10000000) AS sort_id,\n" +
                                "               @prev_valueC := TT.voucher_date as VOUCHER_DATE,\n" +
                                "               @crow_num :=\n" +
                                "               IF(@cprev_value = TT.VOUCHER_ID, @row_num + 1, 1) AS sort_id1,\n" +
                                "               @cprev_value := TT.VOUCHER_ID as v1,\n" +
                                "               CASE\n" +
                                "                 WHEN IFNULL(SUM(TT.BANK), 0) > 0 AND\n" +
                                "                      IFNULL(SUM(TT.PAY_CASH), 0) > 0 THEN\n" +
                                "                  CONCAT(GROUP_CONCAT(TT.LEDGER_NAME ORDER BY TT.VOUCHER_ID DESC\n" +
                                "                                      SEPARATOR ' '),\n" +
                                "                         ' (CASH DEPOSIT)')\n" +
                                "                 WHEN IFNULL(SUM(TT.CASH), 0) > 0 AND\n" +
                                "                      IFNULL(SUM(TT.PAY_BANK), 0) > 0 THEN\n" +
                                "                  CONCAT(GROUP_CONCAT(TT.LEDGER_NAME ORDER BY TT.VOUCHER_ID DESC\n" +
                                "                                      SEPARATOR ' '),\n" +
                                "                         ' (CASH WITHDRAWAL)')\n" +
                                "                 WHEN IFNULL(SUM(TT.BANK), 0) > 0 AND\n" +
                                "                      IFNULL(SUM(TT.PAY_BANK), 0) > 0 THEN\n" +
                                "                  CONCAT(GROUP_CONCAT(TT.LEDGER_NAME ORDER BY TT.VOUCHER_ID DESC\n" +
                                "                                      SEPARATOR ' '),\n" +
                                "                         ' (BANK TRANSFER)')\n" +
                                "                 WHEN IFNULL(SUM(TT.CASH > 0), 0) AND\n" +
                                "                      IFNULL(SUM(TT.PAY_CASH), 0) > 0 THEN\n" +
                                "                  CONCAT(GROUP_CONCAT(TT.LEDGER_NAME ORDER BY TT.VOUCHER_ID DESC\n" +
                                "                                      SEPARATOR ' '),\n" +
                                "                         ' (CASH TRANSFER)')\n" +
                                "                 WHEN IFNULL(SUM(TT.BANK > 0), 0) AND\n" +
                                "                      IFNULL(SUM(TT.PAY_BANK), 0) = 0 THEN\n" +
                                "                  CONCAT(GROUP_CONCAT(TT.LEDGER_NAME ORDER BY TT.VOUCHER_ID DESC\n" +
                                "                                      SEPARATOR ' '),\n" +
                                "                         '')\n" + //(FD WITHDRAWAL)
                                "                 ELSE\n" +
                                "                  CONCAT(GROUP_CONCAT(TT.LEDGER_NAME ORDER BY TT.VOUCHER_ID DESC\n" +
                                "                                      SEPARATOR ' '),\n" +
                                "                         ' ')\n" +
                                "               END AS LEDGER_NAME,\n" +
                                "               '' AS REC_LEDGER_AMOUNT,\n" +
                                "               SUM(TT.CASH) AS CASH,\n" +
                                "               SUM(TT.BANK) AS BANK,\n" +
                                "               GROUP_CONCAT(TT.PAY_VOUCHER_ID ORDER BY TT.PAY_VOUCHER_ID DESC\n" +
                                "                            SEPARATOR ' ') AS PAY_VOUCHER_ID,\n" +
                                "               TT.VOUCHER_SUB_TYPE AS VOUCHER_PAYMENT_SUB_TYPE,\n" +
                                "               GROUP_CONCAT(TT.PAY_VID ORDER BY TT.VOUCHER_ID DESC SEPARATOR ' ') AS PAY_VID,\n" +
                                "               GROUP_CONCAT(TT.PAY_LED_ID ORDER BY TT.PAY_LED_ID DESC\n" +
                                "                            SEPARATOR '') AS PAY_LED_ID,\n" +
                                "               GROUP_CONCAT(TT.PAY_CODE ORDER BY TT.VOUCHER_ID DESC\n" +
                                "                            SEPARATOR ' ') AS PAY_CODE,\n" +
                                "               CASE\n" +
                                "                 WHEN IFNULL(SUM(TT.BANK), 0) > 0 AND\n" +
                                "                      IFNULL(SUM(TT.PAY_CASH), 0) > 0 THEN\n" +
                                "                  CONCAT(GROUP_CONCAT(TT.PAY_LEDGER ORDER BY TT.VOUCHER_ID DESC\n" +
                                "                                      SEPARATOR ' '),\n" +
                                "                         '(CASH DEPOSIT)')\n" +
                                "                 WHEN IFNULL(SUM(TT.CASH), 0) > 0 AND\n" +
                                "                      IFNULL(SUM(TT.PAY_BANK), 0) > 0 THEN\n" +
                                "                  CONCAT(GROUP_CONCAT(TT.PAY_LEDGER ORDER BY TT.VOUCHER_ID DESC\n" +
                                "                                      SEPARATOR ' '),\n" +
                                "                         '(CASH WITHDRAWAL)')\n" +
                                "                 WHEN IFNULL(SUM(TT.BANK), 0) > 0 AND\n" +
                                "                      IFNULL(SUM(TT.PAY_BANK), 0) > 0 THEN\n" +
                                "                  CONCAT(GROUP_CONCAT(TT.PAY_LEDGER ORDER BY TT.VOUCHER_ID DESC\n" +
                                "                                      SEPARATOR ' '),\n" +
                                "                         '(BANK TRANSFER)')\n" +
                                "                 WHEN IFNULL(SUM(TT.CASH > 0), 0) AND\n" +
                                "                      IFNULL(SUM(TT.PAY_CASH), 0) > 0 THEN\n" +
                                "                  CONCAT(GROUP_CONCAT(TT.PAY_LEDGER ORDER BY TT.VOUCHER_ID DESC\n" +
                                "                                      SEPARATOR ' '),\n" +
                                "                         '(CASH TRANSFER)')\n" +
                                "                 WHEN IFNULL(SUM(TT.PAY_BANK > 0), 0) AND\n" +
                                "                      IFNULL(SUM(TT.BANK), 0) = 0 THEN\n" +
                                "                  CONCAT(GROUP_CONCAT(TT.PAY_LEDGER ORDER BY TT.VOUCHER_ID DESC\n" +
                                "                                      SEPARATOR ' '),\n" +
                                "                         '')\n" + // (FD INVESTMENT)
                                "                 ELSE\n" +
                                "                  CONCAT(GROUP_CONCAT(TT.PAY_LEDGER ORDER BY TT.VOUCHER_ID DESC\n" +
                                "                                      SEPARATOR ' '),\n" +
                                "                         ' ')\n" +
                                "               END AS PAY_LEDGER,\n" +
                                "               '' AS PAY_LEDGER_AMOUNT,\n" +
                                "               SUM(TT.PAY_CASH) AS PAY_CASH,\n" +
                                "               SUM(TT.PAY_BANK) AS PAY_BANK,\n" +
                                "               TT.NARRATION,\n" +
                                "               TT.NAP,\n" +
                                "               TT.multicashbank,\n" +
                                "               TT.VOUCHER_TYPE,\n" +
                                "               sum(tt.r_column1) AS R_COLUMN1,\n" +
                                "               sum(tt.r_column2) AS R_COLUMN2,\n" +
                                "               sum(tt.r_column3) AS R_COLUMN3,\n" +
                                "               sum(tt.P_column1) AS P_COLUMN1,\n" +
                                "               sum(tt.P_column2) AS P_COLUMN2,\n" +
                                "               sum(tt.P_column3) AS P_COLUMN3,\n" +
                                "               0 as group_id,TT.MULTICASHBANKID,\n" +
                                "               SUBSTRING_INDEX(GROUP_CONCAT(R_V1 ORDER BY R_V1 DESC ), ',', 1) AS R_V1, \n" +
                                "               SUBSTRING_INDEX(GROUP_CONCAT(R_V2 ORDER BY R_V2 DESC ), ',', 1) AS R_V2, \n" +
                                "               SUBSTRING_INDEX(GROUP_CONCAT(R_V3 ORDER BY R_V3 DESC ), ',', 1) AS R_V3, \n" +
                                "               SUBSTRING_INDEX(GROUP_CONCAT(P_V1 ORDER BY P_V1 DESC ), ',', 1) AS P_V1, \n" +
                                "               SUBSTRING_INDEX(GROUP_CONCAT(P_V2 ORDER BY P_V2 DESC ), ',', 1) AS P_V2, \n" +
                                "               SUBSTRING_INDEX(GROUP_CONCAT(P_V3 ORDER BY P_V3 DESC ), ',', 1) AS P_V3 \n" +
                            //"               R_V1, R_V2, R_V3, P_V1, P_V2, P_V3\n" +
                                "          FROM (SELECT T.VOUCHER_ID,\n" +
                                "                       T.VOUCHER_SUB_TYPE,\n" +
                                "                       T.PROJECT_ID,\n" +
                                "                       T.LEDGER_ID,\n" +
                                "                       T.LEDGER_CODE,\n" +
                                "                       T.VOUCHER_NO,\n" +
                                "                       T.VOUCHER_DATE,\n" +
                                "                       T.LEDGER_NAME,\n" +
                                "                       IFNULL(T.CASH, 0) AS CASH,\n" +
                                "                       IFNULL(T.BANK, 0) AS BANK,\n" +
                                "                       '' AS PAY_VOUCHER_ID,\n" +
                                "                       T.VOUCHER_SUB_TYPE AS VOUCHER_PAYMENT_SUB_TYPE,\n" +
                                "                       T.SEQUENCE_NO,\n" +
                                "                       '' AS PAY_VID,\n" +
                                "                       '' AS PAY_LED_ID,\n" +
                                "                       '' AS PAY_CODE,\n" +
                                "                       '' AS PAY_LEDGER,\n" +
                                "                       0 AS PAY_CASH,\n" +
                                "                       0 AS PAY_BANK,\n" +
                                "                       T.NARRATION,\n" +
                                "                       '' AS NAP,\n" +
                                "                       r_column1,\n" +
                                "                       r_column2,\n" +
                                "                       r_column3,\n" +
                                "                       P_COLUMN1,\n" +
                                "                       P_COLUMN2,\n" +
                                "                       P_COLUMN3,T.VOUCHER_TYPE,T.MULTICASHBANK,T.MULTICASHBANKID, R_V1, R_V2, R_V3, P_V1, P_V2, P_V3\n" +
                                "                  FROM (SELECT\n" +
                                "\n" +
                                "                         VT.VOUCHER_ID,\n" +
                                "                         MT.VOUCHER_SUB_TYPE,\n" +
                                "                         MT.VOUCHER_NO,\n" +
                                "                         VTCH.LEDGER_CODE,\n" +
                                "                         VT.TRANS_MODE,\n" +
                                "                         VTCH.LEDGER_NAME,\n" +
                                "                         VT.SEQUENCE_NO,\n" +
                                "                         MT.PROJECT_ID,\n" +
                                "                         VT.LEDGER_ID,\n" +
                                "                         MT.VOUCHER_DATE,\n" +
                                "                         LG.GROUP_ID,\n" +
                                "                         MT.VOUCHER_TYPE,\n" +
                                "                         CASE\n" +
                                "                           WHEN LG.GROUP_ID IN (12, 14) THEN\n" +
                                "                            IFNULL(VT.AMOUNT, 0)\n" +
                                "                         END AS BANK,\n" +
                                "                         CASE\n" +
                                "                           WHEN LG.GROUP_ID = 13 THEN\n" +
                                "                            IFNULL(VT.AMOUNT, 0)\n" +
                                "                         END AS CASH,\n" +
                                "                         CASE\n" +
                                "                           WHEN LG.GROUP_ID = 13 THEN\n" +
                                "                            (VT.AMOUNT)\n" +
                                "                           ELSE\n" +
                                "                            0\n" +
                                "                         END AS R_COLUMN1,\n" +
                                "                         CASE\n" +
                                "                           WHEN ML.LEDGER_ID = ?R_COLUMN2 THEN\n" +
                                "                            (VT.AMOUNT)\n" +
                                "                           ELSE\n" +
                                "                            0\n" +
                                "                         END AS R_COLUMN2,\n" +
                                "                         CASE\n" +
                                "                           WHEN ML.LEDGER_ID = ?R_COLUMN3 THEN\n" +
                                "                            (VT.AMOUNT)\n" +
                                "                           ELSE\n" +
                                "                            0\n" +
                                "                         END AS R_COLUMN3,\n" +
                                "                         0 AS P_COLUMN1,\n" +
                                "                         0 AS P_COLUMN2,\n" +
                                "                         0 AS P_COLUMN3,\n" +
                                "                         CONCAT(IFNULL(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION),''),\n" +
                                "                         IF(1= ?INCLUDE_NARRATION_NAMEADDRESS, IF(LENGTH(IFNULL(MT.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', MT.NAME_ADDRESS),''),''),\n" +
                                "                         IF(1= ?INCLUDE_NARRATION_REFNO, IF(LENGTH(IFNULL(CHEQUE_NO,'')) > 0,CONCAT(' -- ', CHEQUE_NO),''),'')) AS NARRATION,\n" +
                                "                           ML.LEDGER_NAME AS MULTICASHBANK,ML.LEDGER_ID AS MULTICASHBANKID,\n" +
                                "                         IF(LG.GROUP_ID = 13, VT.VOUCHER_ID,0) AS R_V1,\n" +
                                "                         IF(ML.LEDGER_ID = ?R_COLUMN2, VT.VOUCHER_ID,0) AS R_V2,\n" +
                                "                         IF(ML.LEDGER_ID = ?R_COLUMN3, VT.VOUCHER_ID,0) AS R_V3,\n" +
                                "                         IF(LG.GROUP_ID = 13, VT.VOUCHER_ID,0) AS P_V1,\n" +
                                "                         IF(ML.LEDGER_ID = ?R_COLUMN2, VT.VOUCHER_ID,0) AS P_V2,\n" +
                                "                         IF(ML.LEDGER_ID = ?R_COLUMN3, VT.VOUCHER_ID,0) AS P_V3\n" +
                                "\n" +
                                "                          FROM MASTER_LEDGER_GROUP LG\n" +
                                "\n" +
                                "                          LEFT JOIN MASTER_LEDGER ML\n" +
                                "                            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "                          LEFT JOIN VOUCHER_TRANS VT\n" +
                                "                            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                "                          LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                                "                            ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "                          LEFT JOIN (SELECT VT.VOUCHER_ID, ML.LEDGER_ID, ML.LEDGER_CODE, ML.LEDGER_NAME, VT.AMOUNT, VT.TRANS_MODE\n" +
                                "                                FROM VOUCHER_TRANS VT\n" +
                                "                                INNER JOIN MASTER_LEDGER ML ON VT.LEDGER_ID = ML.LEDGER_ID WHERE VT.TRANS_MODE = 'CR') AS VTCH ON VTCH.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "                         WHERE VT.TRANS_MODE = 'DR'\n" +
                                "                           AND MT.VOUCHER_TYPE = 'CN'\n" +
                                "                           AND PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                           AND MT.STATUS = 1\n" +
                                "                           AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "                         ORDER BY VT.VOUCHER_ID ASC) AS T\n" +
                                "                 WHERE T.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                   AND T.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "                   AND T.GROUP_ID IN (12, 13)\n" +
                                "                   AND T.VOUCHER_TYPE = 'CN'\n" +
                                "                   AND (R_COLUMN1+R_COLUMN2+R_COLUMN3)>0\n" +
                                "                 GROUP BY T.PROJECT_ID,\n" +
                                "                          T.VOUCHER_DATE,\n" +
                                "                          T.VOUCHER_ID,\n" +
                                "                          T.LEDGER_ID\n" +
                                "\n" +
                                "                UNION\n" +
                                "\n" +
                                "                SELECT T.VOUCHER_ID AS VOUCHER_ID,\n" +
                                "                       T.VOUCHER_SUB_TYPE,\n" +
                                "                       T.PROJECT_ID,\n" +
                                "                       '' AS LEDGER_ID,\n" +
                                "                       '' AS LEDGER_CODE,\n" +
                                "                       '' AS VOUCHER_NO,\n" +
                                "                       T.VOUCHER_DATE,\n" +
                                "                       '' AS LEDGER_NAME,\n" +
                                "                       0 AS CASH,\n" +
                                "                       0 AS BANK,\n" +
                                "                       T.VOUCHER_ID AS PAY_VOUCHER_ID,\n" +
                                "                       T.VOUCHER_SUB_TYPE AS VOUCHER_PAYMENT_SUB_TYPE,\n" +
                                "                       T.SEQUENCE_NO,\n" +
                                "                       T.VOUCHER_NO AS PAY_VID,\n" +
                                "                       T.LEDGER_ID AS PAY_LED_ID,\n" +
                                "                       T.LEDGER_CODE AS PAY_CODE,\n" +
                                "                       T.LEDGER_NAME AS PAY_LEDGER,\n" +
                                "                       SUM(IFNULL(T.CASH, 0)) AS PAY_CASH,\n" +
                                "                       SUM(IFNULL(T.BANK, 0)) AS PAY_BANK,\n" +
                                "                       '' AS NARRATION,\n" +
                                "                       T.NARRATION AS NAP,\n" +
                                "                       0 AS r_column1,\n" +
                                "                       0 AS r_column2,\n" +
                                "                       0 AS r_column3,\n" +
                                "                       P_column1,\n" +
                                "                       P_column2,\n" +
                                "                       P_column3,T.VOUCHER_TYPE,T.MULTICASHBANK,T.MULTICASHBANKID, R_V1, R_V2, R_V3, P_V1, P_V2, P_V3\n" +
                                "                  FROM (SELECT VT.VOUCHER_ID,\n" +
                                "                               MT.VOUCHER_SUB_TYPE,\n" +
                                "                               VTCH.LEDGER_CODE,\n" +
                                "                               MT.VOUCHER_NO,\n" +
                                "                               VT.TRANS_MODE,\n" +
                                "                               VTCH.LEDGER_NAME,\n" +
                                "                               VT.SEQUENCE_NO,\n" +
                                "                               MT.PROJECT_ID,\n" +
                                "                               VT.LEDGER_ID,\n" +
                                "                               MT.VOUCHER_DATE,\n" +
                                "                               LG.GROUP_ID,\n" +
                                "                               MT.VOUCHER_TYPE,\n" +
                                "                               CASE\n" +
                                "                                 WHEN LG.GROUP_ID IN (12, 14) THEN\n" +
                                "                                  IFNULL(VT.AMOUNT, 0)\n" +
                                "                               END AS BANK,\n" +
                                "                               CASE\n" +
                                "                                 WHEN LG.GROUP_ID = 13 THEN\n" +
                                "                                  IFNULL(VT.AMOUNT, 0)\n" +
                                "                               END AS CASH,\n" +
                                "                               CASE\n" +
                                "                                 WHEN LG.GROUP_ID = 13 THEN\n" +
                                "                                  (VT.AMOUNT)\n" +
                                "                                 ELSE\n" +
                                "                                  0\n" +
                                "                               END AS P_COLUMN1,\n" +
                                "                               CASE\n" +
                                "                                 WHEN ML.LEDGER_ID = ?R_COLUMN2 THEN\n" +
                                "                                  (VT.AMOUNT)\n" +
                                "                                 ELSE\n" +
                                "                                  0\n" +
                                "                               END AS P_COLUMN2,\n" +
                                "                               CASE\n" +
                                "                                 WHEN ML.LEDGER_ID = ?R_COLUMN3 THEN\n" +
                                "                                  (VT.AMOUNT)\n" +
                                "                                 ELSE\n" +
                                "                                  0\n" +
                                "                               END AS P_COLUMN3,\n" +
                                "\n" +
                                "                               MT.NARRATION,ML.LEDGER_NAME AS MULTICASHBANK,ML.LEDGER_ID AS MULTICASHBANKID,\n" +
                                "     IF(LG.GROUP_ID = 13, VT.VOUCHER_ID,0) AS R_V1,\n" +
                                "     IF(ML.LEDGER_ID = ?R_COLUMN2, VT.VOUCHER_ID,0) AS R_V2,\n" +
                                "     IF(ML.LEDGER_ID = ?R_COLUMN3, VT.VOUCHER_ID,0) AS R_V3,\n" +
                                "     IF(LG.GROUP_ID = 13, VT.VOUCHER_ID,0) AS P_V1,\n" +
                                "     IF(ML.LEDGER_ID = ?R_COLUMN2, VT.VOUCHER_ID,0) AS P_V2,\n" +
                                "     IF(ML.LEDGER_ID = ?R_COLUMN3, VT.VOUCHER_ID,0) AS P_V3\n" +
                                "                          FROM MASTER_LEDGER_GROUP LG\n" +
                                "\n" +
                                "                          LEFT JOIN MASTER_LEDGER ML\n" +
                                "                            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "                          LEFT JOIN VOUCHER_TRANS VT\n" +
                                "                            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                "                          LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                                "                            ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "                          LEFT JOIN (SELECT VT.VOUCHER_ID, ML.LEDGER_ID, ML.LEDGER_CODE, ML.LEDGER_NAME, VT.AMOUNT, VT.TRANS_MODE\n" +
                                "                                FROM VOUCHER_TRANS VT\n" +
                                "                                INNER JOIN MASTER_LEDGER ML ON VT.LEDGER_ID = ML.LEDGER_ID WHERE VT.TRANS_MODE = 'DR') AS VTCH ON VTCH.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "                         WHERE VT.TRANS_MODE = 'CR'\n" +
                                "                           AND MT.VOUCHER_TYPE = 'CN'\n" +
                                "                           AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                           AND MT.STATUS = 1\n" +
                                "                           AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "                         ORDER BY VT.VOUCHER_ID ASC) AS T\n" +
                                "                 WHERE T.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                   AND T.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "                   AND T.GROUP_ID IN (12, 13)\n" +
                                "                   AND T.VOUCHER_TYPE = 'CN'\n" +
                                "                   AND (P_COLUMN1+P_COLUMN2+P_COLUMN3)>0\n" +
                                "                 GROUP BY T.PROJECT_ID,\n" +
                                "                          T.VOUCHER_DATE,\n" +
                                "                          T.VOUCHER_ID,\n" +
                                "                          T.LEDGER_ID) AS TT,\n" +
                                "               (SELECT @row_numC := 1000000) x,\n" +
                                "               (SELECT @prev_valueC := null) y,\n" +
                                "               (SELECT @crow_num := 1) x1,\n" +
                                "               (SELECT @cprev_value := null) y1\n" +
                                "         GROUP BY TT.VOUCHER_DATE, tt.VOUCHER_ID) AS TT\n" +
                                " GROUP BY TT.PROJECT_ID,\n" +
                                "          TT.VOUCHER_DATE,\n" +   //  tt.voucher_id,tt.pay_voucher_id,
                                "          tt.SORT_ID\n" +
                                " ORDER BY TT.PROJECT_ID, TT.VOUCHER_DATE,LENGTH(TT.VOUCHER_NO) DESC,TT.VOUCHER_NO,LENGTH(TT.PAY_VID),\n" +
                                "TT.PAY_VID,IF(LENGTH(GROUP_CONCAT(TT.PAY_VOUCHER_ID))=0, TT.VOUCHER_ID, TT.PAY_VOUCHER_ID)";
                        //" ORDER BY TT.PROJECT_ID,\n" +
                        //"          TT.VOUCHER_DATE,\n" +
                        //"          TT.PAY_VOUCHER_ID,\n" +
                        //"          TT.VOUCHER_ID,\n" +
                        //"          LENGTH(TT.VOUCHER_NO) DESC,\n" +
                        //"          TT.VOUCHER_NO,\n" +
                        //"          LENGTH(TT.PAY_VID),\n" +
                        //"          TT.PAY_VID";

                        break;
                    }
                #endregion

                #region Fetch FD Closing Balance
                case ReportSQLCommand.BankReport.FetchFDClosingBalanceByFDId:
                    {
                        query = "SELECT FDA.FD_ACCOUNT_ID,\n" +
                               " SUM(FDA.AMOUNT + (IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0)+IFNULL(FDRPOI.ACCUMULATED_INTEREST_AMOUNT, 0)) -\n" +
                               " (IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0)+IFNULL(FDRPOI.WITHDRAWAL_AMOUNT, 0) +IFNULL(FDRPO.WITHDRAWAL_AMOUNT, 0)) +\n" +
                               " IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                               " IFNULL(FDR.WITHDRAWAL_AMOUNT, 0)) AS BALANCE_AMOUNT\n" +

                               " FROM FD_ACCOUNT AS FDA\n" +

                               " LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                               " MAX(MATURITY_DATE) AS MATURITY_DATE,\n" +
                               " MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                               " SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                               " SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                               " SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                               " FROM FD_RENEWAL\n" +
                               " WHERE STATUS = 1 AND FD_TYPE<>'POI' AND IS_DELETED=1\n" +
                               " AND RENEWAL_DATE < ?DATE_FROM \n" +
                               " GROUP BY FD_ACCOUNT_ID) AS FDRO\n" +
                               " ON FDA.FD_ACCOUNT_ID = FDRO.FD_ACCOUNT_ID\n" +

                               " LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                               " MAX(MATURITY_DATE) AS MATURITY_DATE,\n" +
                               " MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                               " SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                               " SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                               " SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                               " FROM FD_RENEWAL\n" +
                               " WHERE STATUS = 1 AND FD_TYPE='POI' AND IS_DELETED=1\n" +
                            //" AND RENEWAL_DATE < ?DATE_FROM \n" +
                               " AND MATURITY_DATE <=?DATE_AS_ON \n" +
                               " GROUP BY FD_ACCOUNT_ID) AS FDRPOI\n" +
                               " ON FDA.FD_ACCOUNT_ID = FDRPOI.FD_ACCOUNT_ID\n" +

                                " LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                               " MAX(MATURITY_DATE) AS MATURITY_DATE,\n" +
                               " MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                               " INTEREST_RATE,\n" +
                               " SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                               " SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                               " SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                               " FROM FD_RENEWAL\n" +
                               " WHERE STATUS = 1 AND FD_TYPE='POI' AND IS_DELETED=1\n" +
                               " AND RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_AS_ON \n" +
                               " GROUP BY FD_ACCOUNT_ID ORDER BY FD_ACCOUNT_ID DESC) AS FDRPO\n" +
                               " ON FDA.FD_ACCOUNT_ID = FDRPO.FD_ACCOUNT_ID\n" +

                               " LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                               " MAX(MATURITY_DATE) AS MATURITY_DATE,\n" +
                               " MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                               " INTEREST_RATE,\n" +
                               " SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                               " SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                               " SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                               " FROM FD_RENEWAL\n" +
                               " WHERE STATUS = 1 AND FD_TYPE<>'POI' AND IS_DELETED=1\n" +
                               " AND RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_AS_ON \n" +
                               " GROUP BY FD_ACCOUNT_ID ORDER BY FD_ACCOUNT_ID DESC) AS FDR\n" +
                               " ON FDA.FD_ACCOUNT_ID = FDR.FD_ACCOUNT_ID\n" +
                               " LEFT JOIN MASTER_BANK AS MBK\n" +
                               " ON FDA.BANK_ID = MBK.BANK_ID\n" +
                               " LEFT JOIN MASTER_PROJECT MPR\n" +
                               " ON FDA.PROJECT_ID = MPR.PROJECT_ID\n" +
                               " LEFT JOIN MASTER_LEDGER MLG\n" +
                               " ON FDA.LEDGER_ID = MLG.LEDGER_ID\n" +
                               " WHERE FDA.STATUS = 1 \n" +
                               " AND FDA.INVESTMENT_DATE <= ?DATE_AS_ON \n" +
                               " AND MPR.PROJECT_ID IN (?PROJECT_ID)\n" +
                               " AND FDA.FD_ACCOUNT_ID IN (?FD_ACCOUNT_ID)\n" +
                               " AND FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) + IFNULL(FDRPOI.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                               " (IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0)+IFNULL(FDRPOI.WITHDRAWAL_AMOUNT, 0)) <> 0";
                        break;
                    }
                #endregion

                #region GStPaymentChellan
                case ReportSQLCommand.BankReport.GStPaymentChellan:
                    {
                        query = "SELECT SUM(CGST) AS CGST, SUM(SGST) AS SGST, SUM(IGST) AS IGST\n" +
                                    "  FROM VOUCHER_TRANS VT\n" +
                                    " INNER JOIN VOUCHER_MASTER_TRANS VMT\n" +
                                    "    ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                    " WHERE PROJECT_ID IN(?PROJECT_ID)\n" +
                                    "   AND (VOUCHER_TYPE = 'RC' OR (VOUCHER_TYPE = 'JN' AND TRANS_MODE='CR'))\n" +
                                    "   AND VMT.STATUS = 1 \n" +
                                    "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO";
                        break;
                    }
                case ReportSQLCommand.BankReport.GSTReturn:
                    {
                        query = "SELECT VM.VOUCHER_ID, GST_AMOUNT.VOUCHER_TYPE, GST_AMOUNT.AMOUNT, GST_AMOUNT.GST AS GST_RATE, GST_AMOUNT.CGST, GST_AMOUNT.SGST, GST_AMOUNT.IGST, VM.GST_VENDOR_INVOICE_NO,\n" +
                                    "VM.GST_VENDOR_INVOICE_DATE, IF(VM.GST_VENDOR_INVOICE_TYPE=0,'Regular','Composition') AS GST_VENDOR_INVOICE_TYPE, \n" +
                                    "ASV.VENDOR, ASV.ADDRESS, VM.NARRATION,ASV.VENDOR, ASV.PAN_NO, ASV.GST_NO, ASV.ADDRESS\n" +
                                    "FROM VOUCHER_MASTER_TRANS VM\n" +
                                    "INNER JOIN ASSET_STOCK_VENDOR ASV ON ASV.VENDOR_ID = VM.GST_VENDOR_ID\n" +
                                    "INNER JOIN (SELECT VT.VOUCHER_ID, SUM(IF(VM1.VOUCHER_TYPE ='RC' AND VT.TRANS_MODE = 'DR', -VT.AMOUNT,  VT.AMOUNT)) AS AMOUNT,GC.GST,\n" +
                                    "SUM(VT.CGST) AS CGST, SUM(VT.SGST) AS SGST, SUM(VT.IGST) AS IGST, IF(VM1.VOUCHER_TYPE='JN', IF(VT.TRANS_MODE = 'CR', 'RC', 'PY'), VM1.VOUCHER_TYPE) AS VOUCHER_TYPE\n" +
                                    "FROM VOUCHER_TRANS VT\n" +
                                    "INNER JOIN VOUCHER_MASTER_TRANS VM1 ON VM1.VOUCHER_ID = VT.VOUCHER_ID\n" +
                            //"INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID AND ML.GROUP_ID NOT IN (12, 13, 14)\n" +
                            //"INNER JOIN TDS_CREDTIORS_PROFILE LP ON LP.LEDGER_ID = ML.LEDGER_ID\n" +
                                    "INNER JOIN MASTER_GST_CLASS GC ON GC.GST_ID = VT.LEDGER_GST_CLASS_ID\n" +  //LP.GST_ID
                                      "WHERE VM1.STATUS= 1 AND VM1.VOUCHER_TYPE IN ('RC','PY', 'JN') AND VT.LEDGER_GST_CLASS_ID<> ?LEDGER_GST_CLASS_ID AND GC.GST>0 AND \n" + //on 25/02/2020, to skip 0 gst value
                                      "VM1.PROJECT_ID IN (?PROJECT_ID) AND VM1.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                      "GROUP BY VT.VOUCHER_ID, VT.LEDGER_GST_CLASS_ID) AS GST_AMOUNT ON GST_AMOUNT.VOUCHER_ID = VM.VOUCHER_ID\n" +
                                    "WHERE VM.STATUS= 1 AND VM.VOUCHER_TYPE IN ('RC','PY', 'JN') AND \n" +
                                    "VM.PROJECT_ID IN (?PROJECT_ID) AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                    "AND LENGTH(VM.GST_VENDOR_INVOICE_NO) > 0 AND LENGTH(VM.GST_VENDOR_INVOICE_DATE) > 0 ORDER BY GST_VENDOR_INVOICE_DATE";
                        //"ORDER BY VM.VOUCHER_TYPE DESC, ASV.VENDOR, VM.GST_VENDOR_INVOICE_NO";
                        break;
                    }
                case ReportSQLCommand.BankReport.GSTExemptionInvoices:
                    {
                        query = @"SELECT GIM.GST_VENDOR_INVOICE_NO, GIM.GST_VENDOR_INVOICE_NO, GIM.GST_VENDOR_INVOICE_DATE,
                                    IF(GIM.GST_VENDOR_INVOICE_TYPE=0,'REGULAR','COMPOSITION') AS GST_VENDOR_INVOICE_TYPE,
                                    ASV.VENDOR, ASV.ADDRESS, ASV.VENDOR, ASV.PAN_NO, ASV.GST_NO, ASV.ADDRESS, GIM.TOTAL_AMOUNT AS AMOUNT, VM.NARRATION
                                    FROM GST_INVOICE_MASTER GIM
                                    INNER JOIN GST_INVOICE_MASTER_DETAILS GMD ON GMD.GST_INVOICE_ID = GIM.GST_INVOICE_ID
                                    INNER JOIN VOUCHER_MASTER_TRANS VM ON VM.VOUCHER_ID = GIM.BOOKING_VOUCHER_ID AND VM.GST_VENDOR_INVOICE_NO IS NOT NULL
                                    INNER JOIN ASSET_STOCK_VENDOR ASV ON ASV.VENDOR_ID = GIM.GST_VENDOR_ID
                                    WHERE VM.STATUS=1 AND VM.PROJECT_ID IN (?PROJECT_ID) AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND 
                                    (GIM.TOTAL_CGST_AMOUNT + GIM.TOTAL_SGST_AMOUNT + GIM.TOTAL_IGST_AMOUNT) = 0;";
                        break;
                    }
                #endregion

                case ReportSQLCommand.BankReport.GSTInsPreference:
                    {
                        query = "SELECT SOCIETYNAME,GST_NO,EMAIL,PHONE,ADDRESS AS ADDRESS FROM MASTER_INSTI_PERFERENCE";
                        break;
                    }
                case ReportSQLCommand.BankReport.TotalReceiptsPayments:
                    {
                        query = "SELECT VM.VOUCHER_ID, VM.VOUCHER_DATE, VM.VOUCHER_NO, VM.VOUCHER_TYPE, VM.VOUCHER_SUB_TYPE,\n" +
                                 "IF(VT.NARRATION IS NULL OR VT.NARRATION='', VM.NARRATION, VT.NARRATION) AS NARRATION,\n" +
                                 "CASE\n" +
                                   "WHEN ML.LEDGER_SUB_TYPE = 'BK' THEN\n" +
                                        "CONCAT(CONCAT(ML.LEDGER_NAME, ' - '), CONCAT(MB.BANK, ' - '),MB.BRANCH)\n" +
                                    "ELSE ML.LEDGER_NAME END AS CASH_BANK,PARTICULARS.LEDGER_NAME AS LEDGER_NAME,\n" +
                                    "MB.BANK,BRANCH, VT.AMOUNT AS AMOUNT, CHEQUE_NO, TRANS_MODE,\n" +
                                    " '" + DrillDownType.LEDGER_CASHBANK_VOUCHER + "' as PARTICULAR_TYPE\n" +
                                "FROM VOUCHER_TRANS VT\n" +
                                "INNER JOIN VOUCHER_MASTER_TRANS VM ON VT.VOUCHER_ID = VM.VOUCHER_ID\n" +
                                "INNER JOIN MASTER_LEDGER ML  ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                "INNER JOIN MASTER_LEDGER_GROUP MLG  ON MLG.GROUP_ID = ML.GROUP_ID\n" +
                                "LEFT JOIN MASTER_BANK_ACCOUNT MBA  ON MBA.LEDGER_ID = ML.LEDGER_ID\n" +
                                "LEFT JOIN MASTER_BANK MB  ON MB.BANK_ID = MBA.BANK_ID\n" +
                                "LEFT JOIN (SELECT T.VOUCHER_ID, T.LEDGER_NAME, SUM(T.AMOUNT) AS AMOUNT\n" +
                                "FROM (SELECT VT.VOUCHER_ID,\n" +
                                            "CASE\n" +
                                                "WHEN ML.LEDGER_SUB_TYPE = 'BK' THEN CONCAT(CONCAT(ML.LEDGER_NAME, ' - '),\n" +
                                                        "CONCAT(MB.BANK, ' - '),MB.BRANCH)\n" +
                                                "ELSE ML.LEDGER_NAME END AS LEDGER_NAME, VT.TRANS_MODE,VT.AMOUNT\n" +
                                        "FROM VOUCHER_TRANS VT\n" +
                                        "INNER JOIN VOUCHER_MASTER_TRANS VM  ON VT.VOUCHER_ID = VM.VOUCHER_ID\n" +
                                        "LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                        "LEFT JOIN MASTER_LEDGER_GROUP MLG ON MLG.GROUP_ID = ML.GROUP_ID\n" +
                                        "LEFT JOIN MASTER_BANK_ACCOUNT MBA ON MBA.LEDGER_ID = ML.LEDGER_ID\n" +
                                        "LEFT JOIN MASTER_BANK MB ON MB.BANK_ID = MBA.BANK_ID\n" +
                                        "WHERE VM.PROJECT_ID IN (?PROJECT_ID) AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                        "AND IF(VM.VOUCHER_TYPE = 'CN',VT.TRANS_MODE = 'CR',ML.GROUP_ID NOT IN (12, 13))\n" +
                                        "ORDER BY VT.VOUCHER_ID, VT.SEQUENCE_NO) AS T\n" +
                                "GROUP BY T.VOUCHER_ID) AS PARTICULARS ON PARTICULARS.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                "WHERE VM.STATUS= 1 AND VM.PROJECT_ID IN (?PROJECT_ID) AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                  "AND ML.GROUP_ID IN (13, 12) AND \n" +
                                  "(VM.VOUCHER_TYPE IN (?VOUCHER_TYPE) OR (VM.VOUCHER_TYPE ='CN' AND VM.VOUCHER_SUB_TYPE= 'FD' AND IF(?VOUCHER_TYPE='RC', TRANS_MODE = 'DR', TRANS_MODE = 'CR')))\n" +
                                "ORDER BY VM.VOUCHER_DATE, LENGTH(VM.VOUCHER_NO), VM.VOUCHER_NO ASC;";
                        break;
                    }

                case ReportSQLCommand.BankReport.BankRegister:
                    query = "SELECT MT.VOUCHER_ID,MT.VOUCHER_SUB_TYPE,\n" +
                                 "       MT.VOUCHER_DATE AS DATE, \n" +
                                 "       CONCAT(DATE_FORMAT(MT.VOUCHER_DATE, '%b') , CONCAT(' '  , DATE_FORMAT(MT.VOUCHER_DATE, '%Y'))) MONTH_YEAR_NAME,\n" +
                                 "       DATE_FORMAT(MT.VOUCHER_DATE,'%Y - %m') MONTH_YEAR,\n" +
                                 "       MT.VOUCHER_NO,\n" +
                                 "       ML.LEDGER_CODE,\n" +
                                 "       CHEQUE_NO,\n" +
                                 "        CASE\n" +
                                 "           WHEN AGAINST_TRANS.GROUP_ID = 14 THEN\n" +
                                 "               CONCAT(ML.LEDGER_NAME, IF(?TRANS_MODE = '" + TransSource.Dr.ToString() + "',' (FD REALIZED)', ' (FD INVESTMENT)'))\n" +
                                 "           WHEN AGAINST_TRANS.GROUP_ID = 12 THEN\n" +
                                 "             CONCAT(AGAINST_TRANS.LEDGER_NAME, ' (TRANSFER)' )\n" +
                                 "           WHEN AGAINST_TRANS.GROUP_ID = 13 THEN\n" +
                                 "             IF(?TRANS_MODE = '" + TransSource.Dr.ToString() + "',ML.LEDGER_NAME , AGAINST_TRANS.LEDGER_NAME)\n" +
                                 "           ELSE ML.LEDGER_NAME\n" +
                                 "        END AS LEDGER_NAME,\n" +
                        //"     CASE WHEN IFNULL(SUM(VT.AMOUNT), 0) > 0 AND VT.TRANS_MODE='CR' AND MT.VOUCHER_SUB_TYPE='FD' AND ML.GROUP_ID=12 THEN\n" +
                        //"         CONCAT(GROUP_CONCAT(ML.LEDGER_NAME ORDER BY VT.VOUCHER_ID DESC\n" +
                        //"                              SEPARATOR ' '),\n" +
                        //"                 ' (FD INVESTMENT) ')\n" +
                        //"       WHEN IFNULL(SUM(VT.AMOUNT), 0) > 0 AND VT.TRANS_MODE='DR' AND MT.VOUCHER_SUB_TYPE='FD' AND ML.GROUP_ID=12 THEN\n" +
                        //"         CONCAT(GROUP_CONCAT(ML.LEDGER_NAME ORDER BY VT.VOUCHER_ID DESC\n" +
                        //"                              SEPARATOR ' '),\n" +
                        //"                 ' (FD WITHDRAWAL) ')\n" +
                        //"    ELSE\n" +
                        //"      CONCAT(CONCAT(CONCAT(CONCAT(ML.LEDGER_NAME,' - '),MB.BANK),' - '),MB.BRANCH) END AS LEDGER_NAME,\n" +
                                 "IFNULL(SUM(VT.AMOUNT), 0) AS AMOUNT,\n" +
                                 "   --  CONCAT(IFNULL(MT.NARRATION,''),\n" +
                                 " CONCAT( MT.NARRATION,\n" +
                                 " CONCAT(IF(LENGTH(IFNULL(MT.NAME_ADDRESS,'')) > 0,CONCAT(' -- ', MT.NAME_ADDRESS),''),''),\n" +
                        //" IF(LENGTH(IFNULL(CHEQUE_NO,'')) > 0,CONCAT(' -- ', CHEQUE_NO),''))   AS NARRATION1,\n" +
                                 " CONCAT(IF(LENGTH(IFNULL(CHEQUE_NO,'')) > 0,CONCAT(' -- ', CHEQUE_NO),'')), IF(MT.VOUCHER_SUB_TYPE='FD', CONCAT(' FD: ', FD.FD_ACCOUNT_NUMBER), '')) AS NARRATION\n" +
                                 "  FROM MASTER_LEDGER_GROUP LG\n" +
                                 "\n" +
                                 "  LEFT JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                 "  LEFT JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                 "  LEFT JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                 "  LEFT JOIN MASTER_BANK_ACCOUNT MBA ON MBA.LEDGER_ID=VT.LEDGER_ID \n" +
                                 "  LEFT JOIN MASTER_BANK MB ON MB.BANK_ID=MBA.BANK_ID\n" +
                                 "  LEFT JOIN (SELECT VM.VOUCHER_ID, ML.LEDGER_NAME, ML.GROUP_ID\n" +
                                 "       FROM VOUCHER_MASTER_TRANS VM\n" +
                                 "       INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VM.VOUCHER_ID\n" +
                                 "       INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                 "       WHERE VM.PROJECT_ID IN (?PROJECT_ID) AND \n" +
                                 "       VM.VOUCHER_TYPE IN ('CN') AND\n" +
                                 "       VT.TRANS_MODE = IF(?TRANS_MODE = '" + TransSource.Cr.ToString() + "','" + TransSource.Dr.ToString() + "', '" + TransSource.Cr.ToString() + "')) AS AGAINST_TRANS\n" +
                                 "  ON AGAINST_TRANS.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                 " LEFT JOIN (SELECT FDA.FD_ACCOUNT_ID, 0 AS VOUCHER_ID, RNO.FD_INTEREST_VOUCHER_ID, RNO.FD_VOUCHER_ID,\n" +
                                 "          RNO.RENEWAL_DATE, IFNULL(RNO.RECEIPT_NO,'') AS RECEIPT_NO,\n" +
                                 "          CONCAT(FDA.FD_ACCOUNT_NUMBER,  IF(IFNULL(RNO.RECEIPT_NO,'')='', '', CONCAT(' (R: ', IFNULL(RNO.RECEIPT_NO,''),')')) ) AS FD_ACCOUNT_NUMBER\n" +
                                 "          FROM FD_ACCOUNT AS FDA\n" +
                                 "          INNER JOIN (SELECT FR.FD_ACCOUNT_ID, FR.FD_INTEREST_VOUCHER_ID, FR.FD_VOUCHER_ID,FR.RENEWAL_DATE, \n" +
                                 "                   SUBSTRING_INDEX(GROUP_CONCAT(FR1.RECEIPT_NO ORDER BY FR1.RENEWAL_DATE DESC SEPARATOR '|'), '|', 1) AS RECEIPT_NO \n" +
                                 "                   FROM FD_RENEWAL AS FR\n" +
                                 "                   LEFT JOIN (SELECT FR1.FD_ACCOUNT_ID, FR1.RENEWAL_DATE AS RENEWAL_DATE, IFNULL(FR1.RECEIPT_NO, '') AS RECEIPT_NO\n" +
                                 "                       FROM FD_RENEWAL AS FR1\n" +
                                 "                       INNER JOIN FD_ACCOUNT FD1 ON FD1.FD_ACCOUNT_ID = FR1.FD_ACCOUNT_ID\n" +
                                 "                       WHERE FD1.STATUS =1 AND FD1.PROJECT_ID IN (?PROJECT_ID) AND FR1.STATUS =1 AND FR1.FD_TYPE = 'RN' AND FR1.RENEWAL_DATE<=?DATE_TO) AS FR1\n" +
                                 "                   ON FR1.FD_ACCOUNT_ID= FR.FD_ACCOUNT_ID AND FR1.RENEWAL_DATE<FR.RENEWAL_DATE\n" +
                                 "                   WHERE STATUS =1 GROUP BY FR.FD_ACCOUNT_ID, FR.FD_RENEWAL_ID) AS RNO\n" + //FR1.RENEWAL_DATE
                                 "           ON RNO.FD_ACCOUNT_ID = FDA.FD_ACCOUNT_ID WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)\n" +
                                 "           UNION ALL SELECT FDA.FD_ACCOUNT_ID, FDA.FD_VOUCHER_ID, 0 AS FD_INTEREST_VOUCHER_ID, 0 AS FD_VOUCHER_ID, FDA.INVESTMENT_DATE, '' AS RECEIPT_NO, \n" +
                                 "           FDA.FD_ACCOUNT_NUMBER FROM FD_ACCOUNT AS FDA WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)) AS FD\n" +
                                 "    ON FD.VOUCHER_ID = MT.VOUCHER_ID OR FD.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID OR FD.FD_VOUCHER_ID = MT.VOUCHER_ID\n" +
                                 "  WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                 "   AND MT.VOUCHER_TYPE IN ('CN')\n" +
                                 "   AND VT.TRANS_MODE = ?TRANS_MODE \n" +
                                 "   AND MT.STATUS = 1\n" +
                                 "   AND ML.LEDGER_ID IN (?LEDGER_ID)\n" +
                                 "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                 "   AND LG.GROUP_ID NOT IN (13) AND AGAINST_TRANS.GROUP_ID IN (?GROUP_ID)\n" +
                                 "  GROUP BY MT.VOUCHER_DATE, VT.VOUCHER_ID, IF(?CONSOLIDATED=0,VT.LEDGER_ID,'')\n" +
                                 "ORDER BY MT.VOUCHER_DATE, MT.VOUCHER_NO";
                    break;
                #endregion
            }
            return query;
        }
    }

    public class ReportFinalAccounts
    {
        private SettingProperty settingproperty = null;

        public SettingProperty AppSetting
        {
            get
            {
                if (settingproperty == null) { settingproperty = new SettingProperty(); }
                return settingproperty;
            }
        }

        public string GetReportSQL(ReportSQLCommand.FinalAccounts queryId)
        {
            string query = string.Empty;
            switch (queryId)
            {
                #region ReceiptsPayments
                case ReportSQLCommand.FinalAccounts.ReceiptsPayments:
                    {
                        query = "SELECT T.VOUCHER_ID,\n" +
                                "       T.SORT_ID,\n" +
                                "       T.LEDGER_ID,\n" +
                                "       GROUP_CONCAT(T.GROUP_CODE ORDER BY T.VOUCHER_ID DESC SEPARATOR '') AS GROUP_CODE,\n" +
                                "       GROUP_CONCAT(T.LEDGER_GROUP ORDER BY T.VOUCHER_ID DESC SEPARATOR '') AS LEDGER_GROUP,\n" +
                                "       TRIM(GROUP_CONCAT(T.LEDGER_CODE ORDER BY T.VOUCHER_ID DESC\n" +
                                "                         SEPARATOR ' ')) AS LEDGER_CODE,\n" +
                                "\n" +
                                "       GROUP_CONCAT(T.LEDGER_NAME ORDER BY T.VOUCHER_ID DESC SEPARATOR '') AS LEDGER_NAME,\n" +
                                "       IFNULL(SUM(T.RECEIPT), 0) AS AMOUNT,\n" +
                                "       GROUP_CONCAT(T.GROUPCODE ORDER BY T.VOUCHER_ID DESC SEPARATOR '') AS PAYMENT_GROUP_CODE,\n" +
                                "       GROUP_CONCAT(T.GROUPNAME ORDER BY T.VOUCHER_ID DESC SEPARATOR '') AS PAYMENT_GROUP_NAME,\n" +
                                "       GROUP_CONCAT(T.PAY_CODE ORDER BY T.VOUCHER_ID DESC SEPARATOR '') AS PAYMENT_CODE,\n" +
                                "       GROUP_CONCAT(T.PAY_LEDGER ORDER BY T.VOUCHER_ID DESC SEPARATOR '') AS PAYMENT_LEDGER_NAME,\n" +
                                "       IFNULL(SUM(T.PAYMENT), 0) AS PAYMENT_AMOUNT\n" +
                                "\n" +
                                "  FROM (SELECT VT.VOUCHER_ID,\n" +
                                "               @row_numC := @row_numC + 1 AS sort_id,\n" +
                                "               VT.LEDGER_ID as LEDGER_ID,\n" +
                                "               ML.LEDGER_CODE,\n" +
                                "               ML.LEDGER_NAME,\n" +
                                "               LG.GROUP_CODE,\n" +
                                "               LG.LEDGER_GROUP,\n" +
                                "               SUM(VT.AMOUNT) AS RECEIPT,\n" +
                                "               '' as PAY_CODE,\n" +
                                "               '' AS PAY_LEDGER,\n" +
                                "               0 AS PAYMENT,\n" +
                                "               '' AS 'GROUPCODE',\n" +
                                "               '' AS 'GROUPNAME'\n" +
                                "\n" +
                                "          FROM master_ledger_GROUP LG\n" +
                                "\n" +
                                "          LEFT JOIN master_ledger ML\n" +
                                "            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "          LEFT JOIN voucher_trans VT\n" +
                                "            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                "          LEFT JOIN voucher_master_trans MT\n" +
                                "            ON VT.VOUCHER_ID = MT.VOUCHER_ID, (SELECT @row_numC := 0) X\n" +
                                "\n" +
                                "         WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "           AND MT.VOUCHER_TYPE = 'RC'\n" +
                                "           AND MT.STATUS = 1\n" +
                                "           AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO \n" +
                                "           AND LG.GROUP_ID NOT IN (12, 13)\n" +
                                "         GROUP BY VT.LEDGER_ID\n" +
                                "\n" +
                                "        UNION ALL\n" +
                                "\n" +
                                "        SELECT VT.VOUCHER_ID,\n" +
                                "               @row_num := @row_num + 1 AS sort_id,\n" +
                                "               VT.LEDGER_ID as LEDGER_ID,\n" +
                                "               '' AS 'LEDGER_CODE',\n" +
                                "               '' AS 'LEDGER_NAME',\n" +
                                "               '' AS GROUP_CODE,\n" +
                                "               '' AS LEDGER_GROUP,\n" +
                                "               0 AS RECEIPT,\n" +
                                "\n" +
                                "               ML.LEDGER_CODE AS PAY_CODE,\n" +
                                "               ML.LEDGER_NAME AS PAY_LEDGER,\n" +
                                "               SUM(VT.AMOUNT) AS PAYMENT,\n" +
                                "               LG.GROUP_CODE,\n" +
                                "               LG.LEDGER_GROUP AS GROUP_NAME\n" +
                                "\n" +
                                "          FROM master_ledger_GROUP LG\n" +
                                "\n" +
                                "          LEFT JOIN master_ledger ML\n" +
                                "            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "          LEFT JOIN voucher_trans VT\n" +
                                "            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                "          LEFT JOIN voucher_master_trans MT\n" +
                                "            ON VT.VOUCHER_ID = MT.VOUCHER_ID, (SELECT @row_num := 0) Y\n" +
                                "         WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "           AND MT.VOUCHER_TYPE = 'PY'\n" +
                                "           AND MT.STATUS = 1\n" +
                                "           AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO \n" +
                                "           AND LG.GROUP_ID NOT IN (12, 13)\n" +
                                "         GROUP BY VT.LEDGER_ID) AS T\n" +
                                " GROUP BY SORT_ID\n" +
                                " ORDER BY SORT_ID ASC";
                        break;
                    }
                #endregion

                #region Payments
                case ReportSQLCommand.FinalAccounts.Payments:
                    {
                        //On 06/04/2020, to have second level group order (CONCAT(LG.LEDGER_GROUP))
                        query = @"SELECT ML.LEDGER_ID,ML.GROUP_ID,
                                   IF(?SHOW_GENERALATE IN (0,1),  LG.GROUP_CODE,CL.CON_LEDGER_CODE) AS GROUP_CODE,
                                  --  IF(?SHOW_GENERALATE IN (0,1),  '',CL1.CON_LEDGER_CODE) AS PARENT_CODE, 
                                  CASE
                                   WHEN PG.GROUP_ID IN (1,2,3,4) THEN
                                    IF(?SHOW_GENERALATE IN (0,1), LG.GROUP_CODE,CL1.CON_LEDGER_CODE)
                                    ELSE
                                      IF(?SHOW_GENERALATE IN (0,1), PG.GROUP_CODE,CL1.CON_LEDGER_CODE) END PARENT_CODE,
                                   IF(?SHOW_GENERALATE IN (0,1),  '',LEFT(IFNULL(CL1.CON_LEDGER_CODE,'999'),3)) AS PARENT_CODE1, LG.SORT_ORDER,
                                                                CASE
                                WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN
                                IF(?SHOW_GENERALATE IN (0,1), LG.LEDGER_GROUP,IFNULL(CL1.CON_LEDGER_NAME,'-- UnMapped --'))       
                                ELSE
                                IF(?SHOW_GENERALATE IN (0,1), PG.LEDGER_GROUP,IFNULL(CL1.CON_LEDGER_NAME, '-- UnMapped --'))
                                END AS PARENT_GROUP,
                                       IF(?SHOWGROUPCODE = 1 OR ?SHOWLEDGERCODE = 1,
                                       CASE
                                         WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN
                                          CONCAT('    ', IF(?SHOW_GENERALATE IN (0,1), LG.LEDGER_GROUP,CL.CON_LEDGER_NAME))
                                         ELSE
                                       CONCAT('   ',IF(?SHOW_GENERALATE IN (0,1), LG.LEDGER_GROUP,CL.CON_LEDGER_NAME))
                                       END,IF(?SHOW_GENERALATE IN (0,1), LG.LEDGER_GROUP,CL.CON_LEDGER_NAME)) AS LEDGER_GROUP,

                                      IF(?SHOWGROUPCODE = 1 AND ?SHOWLEDGERCODE = 1,
                                          CASE
                                            WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN
                                             CONCAT('   ', ML.LEDGER_NAME)
                                            ELSE
                                             CONCAT('      ', ML.LEDGER_NAME)
                                         END,
                                         ML.LEDGER_NAME) AS LEDGER_NAME,
                                   IF(?SHOW_GENERALATE IN (0,1),ML.LEDGER_CODE, CL.CON_LEDGER_CODE) AS LEDGER_CODE,
                                   IFNULL(SUM( (VT.AMOUNT * IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)) ),0) AS PAYMENTAMT,
                                   ?CURRENCY_COUNTRY_ID AS CURRENCY_COUNTRY_ID
                              FROM MASTER_LEDGER_GROUP LG
                              INNER JOIN MASTER_LEDGER_GROUP PG ON LG.PARENT_GROUP_ID=PG.GROUP_ID
                              LEFT JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID
                              LEFT JOIN PORTAL_CONGREGATION_LEDGER_MAP CLM ON ML.LEDGER_ID = CLM.LEDGER_ID
                              LEFT JOIN PORTAL_CONGREGATION_LEDGER AS CL ON CL.CON_LEDGER_ID = CLM.CON_LEDGER_ID
                              LEFT JOIN PORTAL_CONGREGATION_LEDGER AS CL1 ON CL1.CON_LEDGER_ID = CL.CON_PARENT_LEDGER_ID
                              LEFT JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID
                              LEFT JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID

                             WHERE MT.PROJECT_ID IN (?PROJECT_ID) AND MT.STATUS = 1 AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND LG.GROUP_ID NOT IN (12, 13, 14) AND
                                ( (MT.VOUCHER_TYPE in ('RC','PY') AND VT.TRANS_MODE='DR') OR (MT.VOUCHER_TYPE IN ('JN','CN') AND MT.VOUCHER_SUB_TYPE ='FD' AND VT.TRANS_MODE ='DR') OR (MT.VOUCHER_TYPE ='JN' AND MT.IS_CASH_BANK_STATUS=1 AND VT.TRANS_MODE ='DR'))  
                                AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1) 
                             GROUP BY VT.LEDGER_ID ORDER BY SORT_ORDER;";

                        break;
                    }
                case ReportSQLCommand.FinalAccounts.PaymentsPreviousYear:
                    {
                        query = @"SELECT ML.LEDGER_ID,ML.GROUP_ID,
                                   LG.GROUP_CODE,LG.SORT_ORDER,
                                                                CASE
                                WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN
                                LG.LEDGER_GROUP
                                ELSE
                                PG.LEDGER_GROUP
                                END AS PARENT_GROUP,
                                       IF(?SHOWGROUPCODE = 1 OR ?SHOWLEDGERCODE = 1,
                                       CASE
                                         WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN
                                          CONCAT(LG.LEDGER_GROUP)
                                         ELSE
                                       CONCAT('   ',LG.LEDGER_GROUP)
                                       END,LG.LEDGER_GROUP) AS LEDGER_GROUP,

                                      IF(?SHOWGROUPCODE = 1 AND ?SHOWLEDGERCODE = 1,
                                          CASE
                                            WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN
                                             CONCAT('   ', ML.LEDGER_NAME)
                                            ELSE
                                             CONCAT('      ', ML.LEDGER_NAME)
                                         END,
                                         ML.LEDGER_NAME) AS LEDGER_NAME,
                                   ML.LEDGER_CODE,
                                  IFNULL(SUM( IF(VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO, VT.AMOUNT, 0) ),0) AS PAYMENTAMT,
                                  IFNULL(SUM(IF(VOUCHER_DATE BETWEEN ?YEAR_FROM_PREVIOUS_YEAR AND ?YEAR_TO_PREVIOUS_YEAR, VT.AMOUNT, 0)),0) AS PAYMENTAMTPREVIOUS
                              FROM MASTER_LEDGER_GROUP LG
                              INNER JOIN MASTER_LEDGER_GROUP PG ON LG.PARENT_GROUP_ID=PG.GROUP_ID
                              LEFT JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID
                              LEFT JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID
                              LEFT JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID
                              WHERE MT.PROJECT_ID IN (?PROJECT_ID) AND MT.STATUS = 1 AND VOUCHER_DATE BETWEEN ?YEAR_FROM_PREVIOUS_YEAR AND ?YEAR_TO AND LG.GROUP_ID NOT IN (12, 13, 14)
                              AND ( (MT.VOUCHER_TYPE in ('RC','PY') AND VT.TRANS_MODE='DR') OR (MT.VOUCHER_TYPE IN ('JN','CN') AND MT.VOUCHER_SUB_TYPE ='FD' AND VT.TRANS_MODE ='DR') )                        
                             GROUP BY VT.LEDGER_ID ORDER BY SORT_ORDER;";
                        break;
                    }
                #endregion

                #region Receipts
                case ReportSQLCommand.FinalAccounts.Receipts:
                    {
                        ///On 06/04/2020, to have second level group order (CONCAT(LG.LEDGER_GROUP))
                        query = @"SELECT ML.LEDGER_ID,ML.GROUP_ID,
                                  IF(?SHOW_GENERALATE IN (0,1),LG.GROUP_CODE,CL.CON_LEDGER_CODE) AS GROUP_CODE,
                                 --  IF(?SHOW_GENERALATE IN (0,1),PG.GROUP_CODE,CL1.CON_LEDGER_CODE) AS PARENT_CODE,
                                 CASE
                                   WHEN PG.GROUP_ID IN (1,2,3,4) THEN
                                    IF(?SHOW_GENERALATE IN (0,1), LG.GROUP_CODE,CL1.CON_LEDGER_CODE)
                                    ELSE
                                      IF(?SHOW_GENERALATE IN (0,1), PG.GROUP_CODE,CL1.CON_LEDGER_CODE) END PARENT_CODE,
                                  IF(?SHOW_GENERALATE IN (0,1),'',LEFT(IFNULL(CL1.CON_LEDGER_CODE,'999'),3)) AS PARENT_CODE1, LG.SORT_ORDER,
                                 CASE
                                WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN
                                IF(?SHOW_GENERALATE IN (0,1),LG.LEDGER_GROUP,IFNULL(CL1.CON_LEDGER_NAME,'-- UnMapped --')) --  IFNULL(CL1.CON_LEDGER_NAME,'-- UnMapped --')
                                ELSE
                                IF(?SHOW_GENERALATE IN (0,1),PG.LEDGER_GROUP,IFNULL(CL1.CON_LEDGER_NAME,'-- UnMapped --'))  --  IFNULL(CL1.CON_LEDGER_NAME,'-- UnMapped --')
                                END AS PARENT_GROUP,
                                       IF(?SHOWGROUPCODE = 1 OR ?SHOWLEDGERCODE = 1,
                                       CASE
                                         WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN
                                          CONCAT('    ',IF(?SHOW_GENERALATE IN (0,1),LG.LEDGER_GROUP,CL.CON_LEDGER_NAME))
                                         ELSE
                                       CONCAT('   ',IF(?SHOW_GENERALATE IN (0,1),LG.LEDGER_GROUP,CL.CON_LEDGER_NAME))
                                       END,IF(?SHOW_GENERALATE IN (0,1),LG.LEDGER_GROUP,CL.CON_LEDGER_NAME)) AS LEDGER_GROUP,
                                      IF(?SHOWGROUPCODE = 1 AND ?SHOWLEDGERCODE = 1,
                                          CASE
                                            WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN
                                             CONCAT('   ', ML.LEDGER_NAME)
                                            ELSE
                                             CONCAT('      ', ML.LEDGER_NAME)
                                         END,
                                         ML.LEDGER_NAME) AS LEDGER_NAME,
                                        IF(?SHOW_GENERALATE IN (0,1),ML.LEDGER_CODE,CL.CON_LEDGER_CODE) AS LEDGER_CODE,
                                  -- CAST(IFNULL(SUM(VT.AMOUNT),0) as DECIMAL) AS RECEIPTAMT  
                                  CAST( IFNULL(SUM( (VT.AMOUNT * IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)) ),0) as DECIMAL(15,2))  AS RECEIPTAMT,
                                  ?CURRENCY_COUNTRY_ID AS CURRENCY_COUNTRY_ID
                              FROM MASTER_LEDGER_GROUP LG
                              INNER JOIN MASTER_LEDGER_GROUP PG ON LG.PARENT_GROUP_ID=PG.GROUP_ID
                              LEFT JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID
                              LEFT JOIN PORTAL_CONGREGATION_LEDGER_MAP CLM ON ML.LEDGER_ID = CLM.LEDGER_ID
                              LEFT JOIN PORTAL_CONGREGATION_LEDGER AS CL ON CL.CON_LEDGER_ID = CLM.CON_LEDGER_ID
                              LEFT JOIN PORTAL_CONGREGATION_LEDGER AS CL1 ON CL1.CON_LEDGER_ID = CL.CON_PARENT_LEDGER_ID
                              LEFT JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID
                              LEFT JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                
                             WHERE MT.PROJECT_ID IN (?PROJECT_ID) AND MT.STATUS = 1 AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND LG.GROUP_ID NOT IN (12, 13, 14)
                                AND ( (MT.VOUCHER_TYPE in ('RC','PY') AND VT.TRANS_MODE='CR') OR (MT.VOUCHER_TYPE = 'JN' AND MT.VOUCHER_SUB_TYPE ='FD' AND VT.TRANS_MODE ='CR') OR (MT.VOUCHER_TYPE ='JN' AND MT.IS_CASH_BANK_STATUS=1 AND VT.TRANS_MODE ='CR'))
                                AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1) 
                             GROUP BY VT.LEDGER_ID ORDER BY SORT_ORDER";

                        //                        //On 06/04/2020, to have second level group order (CONCAT(LG.LEDGER_GROUP))
                        //                        query = @"SELECT ML.LEDGER_ID,ML.GROUP_ID,
                        //                                   LG.GROUP_CODE,LG.SORT_ORDER,
                        //                                 CASE
                        //                                WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN
                        //                                LG.LEDGER_GROUP
                        //                                ELSE
                        //                                PG.LEDGER_GROUP
                        //                                END AS PARENT_GROUP,
                        //                                       IF(?SHOWGROUPCODE = 1 OR ?SHOWLEDGERCODE = 1,
                        //                                       CASE
                        //                                         WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN
                        //                                          CONCAT('    ',LG.LEDGER_GROUP)
                        //                                         ELSE
                        //                                       CONCAT('   ',LG.LEDGER_GROUP)
                        //                                       END,LG.LEDGER_GROUP) AS LEDGER_GROUP,
                        //                                      IF(?SHOWGROUPCODE = 1 AND ?SHOWLEDGERCODE = 1,
                        //                                          CASE
                        //                                            WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN
                        //                                             CONCAT('   ', ML.LEDGER_NAME)
                        //                                            ELSE
                        //                                             CONCAT('      ', ML.LEDGER_NAME)
                        //                                         END,
                        //                                         ML.LEDGER_NAME) AS LEDGER_NAME,
                        //                                        ML.LEDGER_CODE,
                        //                                  -- CAST(IFNULL(SUM(VT.AMOUNT),0) as DECIMAL) AS RECEIPTAMT  
                        //                                  CAST( IFNULL(SUM(VT.AMOUNT),0) as DECIMAL(15,2))  AS RECEIPTAMT
                        //
                        //                              FROM MASTER_LEDGER_GROUP LG
                        //                                INNER JOIN MASTER_LEDGER_GROUP PG
                        //                                ON LG.PARENT_GROUP_ID=PG.GROUP_ID
                        //                              LEFT JOIN MASTER_LEDGER ML
                        //                                ON ML.GROUP_ID = LG.GROUP_ID
                        //                              LEFT JOIN VOUCHER_TRANS VT
                        //                                ON VT.LEDGER_ID = ML.LEDGER_ID
                        //                              LEFT JOIN VOUCHER_MASTER_TRANS MT
                        //                                ON VT.VOUCHER_ID = MT.VOUCHER_ID
                        //                             WHERE MT.PROJECT_ID IN (?PROJECT_ID) AND MT.STATUS = 1 AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND LG.GROUP_ID NOT IN (12, 13, 14)
                        //                                AND ( (MT.VOUCHER_TYPE in ('RC','PY') AND VT.TRANS_MODE='CR') OR (MT.VOUCHER_TYPE = 'JN' AND MT.VOUCHER_SUB_TYPE ='FD' AND VT.TRANS_MODE ='CR') )
                        //                             GROUP BY VT.LEDGER_ID ORDER BY SORT_ORDER";
                        break;
                    }
                case ReportSQLCommand.FinalAccounts.ReceiptsPreviousYear:
                    {
                        query = @"SELECT ML.LEDGER_ID,ML.GROUP_ID,
                                   LG.GROUP_CODE,LG.SORT_ORDER,
                                 CASE
                                WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN
                                LG.LEDGER_GROUP
                                ELSE
                                PG.LEDGER_GROUP
                                END AS PARENT_GROUP,
                                       IF(?SHOWGROUPCODE = 1 OR ?SHOWLEDGERCODE = 1,
                                       CASE
                                         WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN
                                          CONCAT(LG.LEDGER_GROUP)
                                         ELSE
                                       CONCAT('   ',LG.LEDGER_GROUP)
                                       END,LG.LEDGER_GROUP) AS LEDGER_GROUP,
                                      IF(?SHOWGROUPCODE = 1 AND ?SHOWLEDGERCODE = 1,
                                          CASE
                                            WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN
                                             CONCAT('   ', ML.LEDGER_NAME)
                                            ELSE
                                             CONCAT('      ', ML.LEDGER_NAME)
                                         END,
                                         ML.LEDGER_NAME) AS LEDGER_NAME,
                                        ML.LEDGER_CODE,
                                  -- CAST(IFNULL(SUM(VT.AMOUNT),0) as DECIMAL) AS RECEIPTAMT  
                                  CAST( IFNULL(SUM( IF(VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO, VT.AMOUNT, 0) ),0) as DECIMAL(15,2))  AS RECEIPTAMT,
                                  CAST( IFNULL(SUM(IF(VOUCHER_DATE BETWEEN ?YEAR_FROM_PREVIOUS_YEAR AND ?YEAR_TO_PREVIOUS_YEAR, VT.AMOUNT, 0)),0) as DECIMAL(15,2))  AS RECEIPTAMTPREVIOUS

                              FROM MASTER_LEDGER_GROUP LG
                                INNER JOIN MASTER_LEDGER_GROUP PG
                                ON LG.PARENT_GROUP_ID=PG.GROUP_ID
                              LEFT JOIN MASTER_LEDGER ML
                                ON ML.GROUP_ID = LG.GROUP_ID
                              LEFT JOIN VOUCHER_TRANS VT
                                ON VT.LEDGER_ID = ML.LEDGER_ID
                              LEFT JOIN VOUCHER_MASTER_TRANS MT
                                ON VT.VOUCHER_ID = MT.VOUCHER_ID
                             WHERE MT.PROJECT_ID IN (?PROJECT_ID) AND MT.STATUS = 1 AND VOUCHER_DATE BETWEEN ?YEAR_FROM_PREVIOUS_YEAR AND ?YEAR_TO AND LG.GROUP_ID NOT IN (12, 13, 14)
                               AND ( (MT.VOUCHER_TYPE in ('RC','PY') AND VT.TRANS_MODE='CR') OR (MT.VOUCHER_TYPE = 'JN' AND MT.VOUCHER_SUB_TYPE ='FD' AND VT.TRANS_MODE = 'CR'))  
                             GROUP BY VT.LEDGER_ID ORDER BY SORT_ORDER";
                        break;
                    }
                case ReportSQLCommand.FinalAccounts.IEReceitpsAmt:
                    {
                        query = @"SELECT IFNULL(SUM( (VT.AMOUNT *IF(MT.IS_MULTI_CURRENCY=1 {AND ?CURRENCY_COUNTRY_ID=0}, VT.EXCHANGE_RATE, 1)) ), 0) +
                                   (SELECT IFNULL(SUM(AMOUNT), 0.0) AS AMOUNT
                                      FROM LEDGER_BALANCE AS LB
                                      LEFT JOIN MASTER_LEDGER AS ML ON LB.LEDGER_ID = ML.LEDGER_ID
                                      LEFT JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID
                                     WHERE PROJECT_ID IN (?PROJECT_ID) AND TRANS_FLAG = 'OP' AND LB.AMOUNT > 0
                                       AND LG.GROUP_ID NOT IN (12, 14, 13) AND LG.NATURE_ID NOT IN (3,4)
                                       AND TRANS_MODE = 'CR' AND BALANCE_DATE <=?YEAR_FROM) AS RECEIPTAMT
                              FROM MASTER_LEDGER_GROUP LG
                              LEFT JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID
                              LEFT JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID
                              LEFT JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID
                              WHERE MT.PROJECT_ID IN (?PROJECT_ID) AND MT.VOUCHER_TYPE = 'RC' AND MT.STATUS = 1
                                {AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)}
                                AND LG.NATURE_ID NOT IN (3,4) AND VOUCHER_DATE <=?YEAR_FROM AND LG.GROUP_ID NOT IN (12, 13)";
                        break;
                    }
                case ReportSQLCommand.FinalAccounts.IEPaymentsAmt:
                    {
                        query = @"SELECT IFNULL(SUM( (VT.AMOUNT *IF(MT.IS_MULTI_CURRENCY=1 {AND ?CURRENCY_COUNTRY_ID=0}, VT.EXCHANGE_RATE, 1)) ), 0) +
                                       (SELECT IFNULL(SUM( AMOUNT), 0.0) AS AMOUNT
                                          FROM LEDGER_BALANCE AS LB LEFT JOIN MASTER_LEDGER AS ML
                                            ON LB.LEDGER_ID = ML.LEDGER_ID LEFT JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID
                                         WHERE PROJECT_ID IN (?PROJECT_ID) AND TRANS_FLAG = 'OP' AND LB.AMOUNT > 0
                                           AND LG.GROUP_ID NOT IN (12, 14, 13) AND LG.NATURE_ID NOT IN (3,4)
                                           AND TRANS_MODE = 'DR' AND BALANCE_DATE <=?YEAR_FROM)
                                       AS  PAYMENTAMT
                                  FROM MASTER_LEDGER_GROUP LG
                                  LEFT JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID
                                  LEFT JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID
                                  LEFT JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                 WHERE MT.PROJECT_ID IN (?PROJECT_ID) AND MT.VOUCHER_TYPE = 'PY'
                                   AND MT.STATUS = 1 AND LG.NATURE_ID NOT IN (3,4) {AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)}
                                   AND VOUCHER_DATE <=?YEAR_FROM AND LG.GROUP_ID NOT IN (12, 13)";
                        break;
                    }
                #endregion

                #region Trail Balancecurrect Amount


                case ReportSQLCommand.FinalAccounts.TrialBalaceCurrent:
                    {
                        query = @"SELECT
                                FN.GROUP_CODE,FN.LEDGER_GROUP,FN.LEDGER_CODE,FN.LEDGER_NAME,
                                SUM(FN.CASH_IN_HAND_CREDIT) AS CASH_IN_HAND_CREDIT,
                                SUM(FN.CASH_IN_HAND_DEBIT) AS CASH_IN_HAND_DEBIT,
                                SUM(FN.BANK_ACCOUNT_CREDIT) AS BANK_ACCOUNT_CREDIT,
                                SUM(FN.BANK_ACCOUNT_DEBIT) AS BANK_ACCOUNT_DEBIT
                                 FROM
                                 (SELECT             LG.GROUP_CODE, LG.LEDGER_GROUP, ML.LEDGER_CODE, ML.LEDGER_NAME,
                                                      '' AS 'CASH_IN_HAND_CREDIT', ''  AS 'BANK_ACCOUNT_CREDIT',
                                                      CASE
                                                          WHEN LG.GROUP_ID=13 AND TRANS_MODE='CR' THEN 
                                                            (IFNULL(VT.AMOUNT,0.0)*IF(MT.IS_MULTI_CURRENCY=1 {AND ?CURRENCY_COUNTRY_ID=0}, VT.EXCHANGE_RATE, 1))
                                                          ELSE 0.0
                                                      END AS 'CASH_IN_HAND_DEBIT',
                                                      CASE
                                                        WHEN LG.GROUP_ID=12 AND TRANS_MODE='CR' THEN 
                                                            (IFNULL(VT.AMOUNT,0.0)*IF(MT.IS_MULTI_CURRENCY=1 {AND ?CURRENCY_COUNTRY_ID=0}, VT.EXCHANGE_RATE, 1))
                                                        ELSE 0.0
                                                      END AS 'BANK_ACCOUNT_DEBIT'
                                                      FROM MASTER_LEDGER_GROUP LG
                                                      LEFT JOIN MASTER_LEDGER ML
                                                      ON ML.GROUP_ID = LG.GROUP_ID
                                                      LEFT JOIN VOUCHER_TRANS VT
                                                      ON VT.LEDGER_ID = ML.LEDGER_ID
                                                      LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                      ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                      WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                      AND LG.GROUP_ID IN(12,13)
                                                      AND MT.STATUS = 1 {AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)}
                                                      AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO

                                                      UNION ALL

                                                      SELECT LG.GROUP_CODE, LG.LEDGER_GROUP, ML.LEDGER_CODE, ML.LEDGER_NAME,                                                                                
                                                              CASE
                                                                WHEN LG.GROUP_ID=13 AND TRANS_MODE='DR' THEN 
                                                                    (IFNULL(VT.AMOUNT,0.0)*IF(MT.IS_MULTI_CURRENCY=1 {AND ?CURRENCY_COUNTRY_ID=0}, VT.EXCHANGE_RATE, 1))
                                                                ELSE 0.0
                                                              END AS 'CASH_IN_HAND_CREDIT',
                                                              CASE
                                                                WHEN LG.GROUP_ID=12 AND TRANS_MODE='DR' THEN 
                                                                    (IFNULL(VT.AMOUNT,0.0) *IF(MT.IS_MULTI_CURRENCY=1 {AND ?CURRENCY_COUNTRY_ID=0}, VT.EXCHANGE_RATE, 1))
                                                                ELSE 0.0
                                                              END AS 'BANK_ACCOUNT_CREDIT',
                                                              '' AS 'CASH_IN_HAND_DEBIT',
                                                              '' AS 'BANK_ACCOUNT_DEBIT'
                                                      FROM MASTER_LEDGER_GROUP LG
                                                      LEFT JOIN MASTER_LEDGER ML
                                                      ON ML.GROUP_ID = LG.GROUP_ID
                                                      LEFT JOIN VOUCHER_TRANS VT
                                                      ON VT.LEDGER_ID = ML.LEDGER_ID
                                                      LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                      ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                      WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                      AND LG.GROUP_ID IN(12,13)
                                                      AND MT.STATUS = 1 {AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)}
                                                      AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO) as fn
                                GROUP BY FN.LEDGER_CODE";

                        break;
                    }

                #endregion

                #region Trial Balances
                case ReportSQLCommand.FinalAccounts.TrialBalanceList:
                    {
                        // in the T Receipts and Payments sub query of Opening Balance I replaced ?Year_TO from Date_From
                        // int the T Receipts and Payments sub query Voucher Date between Date_from to Begin_from Replaced into Date_From all the sub query of T 
                        query = @"SELECT FN.GROUP_ID,CASE WHEN NATURE_ID = 3 THEN 1 WHEN NATURE_ID = 4 THEN 2
                                               WHEN NATURE_ID = 2 THEN 3  WHEN NATURE_ID = 1 THEN 4 END AS SORT_ORDER,
                                               FN.LEDGER_ID,
                                               FN.NATURE_ID,
                                                FN.GROUP_CODE,
                                                FN.LEDGER_GROUP,
                                                FN.LEDGER_CODE,
                                                FN.LEDGER_NAME,
                                                SUM(FN.OP_DEBIT) AS OP_DEBIT,
                                                SUM(FN.OP_CREDIT) AS OP_CREDIT,
                                                SUM(FN.CUR_DEBIT) AS CURRENTTRANS_DEBIT,
                                                SUM(FN.CUR_CREDIT) AS CURRENTTRANS_CREDIT, ?CURRENCY_COUNTRY_ID AS CURRENCY_COUNTRY_ID
                                                FROM (SELECT T.GROUP_ID,T.SORT_ORDER,
                                                           T.LEDGER_ID,
                                                           T.NATURE_ID,
                                                           T.GROUP_CODE,
                                                           T.LEDGER_GROUP,
                                                           T.LEDGER_CODE,
                                                           T.LEDGER_NAME,
                                                          CASE
                                                             WHEN SUM(T.OP_DEBIT) > SUM(T.OP_CREDIT) THEN
                                                              SUM(T.OP_DEBIT) - SUM(T.OP_CREDIT)
                                                             ELSE
                                                              0.00
                                                           END AS OP_DEBIT,
                                                           CASE
                                                             WHEN SUM(T.OP_CREDIT) > SUM(T.OP_DEBIT) THEN
                                                              SUM(T.OP_CREDIT) - SUM(T.OP_DEBIT)
                                                             ELSE
                                                              0.00
                                                           END AS OP_CREDIT,
                                                           '' AS 'CUR_DEBIT',
                                                           '' As 'CUR_CREDIT'
                                                       FROM (SELECT LG.GROUP_ID,LG.SORT_ORDER, ML.LEDGER_ID,
                                                                   MN.NATURE_ID,
                                                                   LG.GROUP_CODE,
                                                                   LG.LEDGER_GROUP,
                                                                   ML.LEDGER_CODE,
                                                                   ML.LEDGER_NAME,
                                                                   SUM(CASE
                                                                         WHEN LB2.TRANS_MODE = 'DR' THEN
                                                                          LB2.AMOUNT
                                                                         ELSE
                                                                          0
                                                                       END) AS 'OP_DEBIT',
                                                                   SUM(CASE
                                                                         WHEN LB2.TRANS_MODE = 'CR' THEN
                                                                          LB2.AMOUNT
                                                                         ELSE
                                                                          0
                                                                       END) AS 'OP_CREDIT',
                                                                   '' AS 'CUR_DEBIT',
                                                                   '' As 'CUR_CREDIT'
                                                              FROM MASTER_LEDGER AS ML
                                                             INNER JOIN MASTER_LEDGER_GROUP AS LG
                                                                ON ML.GROUP_ID = LG.GROUP_ID
                                                             INNER JOIN (SELECT LB.BALANCE_DATE,
                                                                               LB.PROJECT_ID,
                                                                               LB.LEDGER_ID,
                                                                               IF(ML.GROUP_ID IN (12, 13, 14) {AND ?CURRENCY_COUNTRY_ID>0}, LB.AMOUNT_FC, LB.AMOUNT) AS AMOUNT,
                                                                               IF(ML.GROUP_ID IN (12, 13, 14) {AND ?CURRENCY_COUNTRY_ID>0}, LB.TRANS_FC_MODE, LB.TRANS_MODE) AS TRANS_MODE
                                                                          FROM LEDGER_BALANCE AS LB
                                                                          INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = LB.LEDGER_ID AND 
                                                                                IF(?CURRENCY_COUNTRY_ID>0 AND ML.CUR_COUNTRY_ID > 0, ML.CUR_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)
                                                                          LEFT JOIN (SELECT LBA.PROJECT_ID,
                                                                                           LBA.LEDGER_ID,
                                                                                           MAX(LBA.BALANCE_DATE) AS BAL_DATE
                                                                                     FROM LEDGER_BALANCE LBA
                                                                                     WHERE 1 = 1
                                                                                 --    AND LBA.BALANCE_DATE <?DATE_FROM   
                                                                                       AND LBA.BALANCE_DATE <= ?YEAR_TO
                                                                                    AND LBA.TRANS_FLAG= 'OP'
                                                                                     GROUP BY LBA.PROJECT_ID,
                                                                                              LBA.LEDGER_ID) AS LB1
                                                                            ON LB.PROJECT_ID = LB1.PROJECT_ID
                                                                           AND LB.LEDGER_ID = LB1.LEDGER_ID
                                                                         WHERE LB.PROJECT_ID IN (?PROJECT_ID)
                                                                           AND LB.TRANS_FLAG = 'OP'
                                                                        AND LB.BALANCE_DATE = LB1.BAL_DATE ) LB2
                                                                ON ML.LEDGER_ID = LB2.LEDGER_ID
                                                                 LEFT JOIN MASTER_NATURE MN
                                                                 ON MN.NATURE_ID = LG.NATURE_ID
                                                             WHERE 1 = 1 AND ML.STATUS=0
                                                               AND LG.GROUP_ID NOT IN (12, 13, 14)
                                                               AND MN.NATURE_ID IN (1,2)
                                                             GROUP BY ML.LEDGER_ID
                                                            UNION ALL
                                                            SELECT LG.GROUP_ID,LG.SORT_ORDER,
                                                                   ML.LEDGER_ID,
                                                                   MN.NATURE_ID,
                                                                   LG.GROUP_CODE,
                                                                   LG.LEDGER_GROUP,
                                                                   ML.LEDGER_CODE,
                                                                   ML.LEDGER_NAME,
                                                                   CASE
                                                                     WHEN VOUCHER_TYPE IN ('PY') AND VT.TRANS_MODE = 'DR' THEN
                                                                      IFNULL(SUM( (VT.AMOUNT*IF(MT.IS_MULTI_CURRENCY=1 {AND ?CURRENCY_COUNTRY_ID=0}, VT.EXCHANGE_RATE, 1)) ), 0.0)
                                                                     ELSE
                                                                      '0.0'
                                                                   END AS 'OP_DEBIT',
                                                                   CASE
                                                                     WHEN VOUCHER_TYPE IN ('RC') AND VT.TRANS_MODE = 'CR' THEN
                                                                      IFNULL(SUM( (VT.AMOUNT*IF(MT.IS_MULTI_CURRENCY=1 {AND ?CURRENCY_COUNTRY_ID=0}, VT.EXCHANGE_RATE, 1)) ), 0.0)
                                                                     ELSE
                                                                      '0.0'
                                                                   END AS 'OP_CREDIT',
                                                                   '' AS 'CUR_DEBIT',
                                                                   '' As 'CUR_CREDIT'
                                                              FROM MASTER_LEDGER_GROUP LG

                                                              LEFT JOIN MASTER_LEDGER ML
                                                                ON ML.GROUP_ID = LG.GROUP_ID
                                                              LEFT JOIN VOUCHER_TRANS VT
                                                                ON VT.LEDGER_ID = ML.LEDGER_ID
                                                              LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                                ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                               LEFT JOIN MASTER_NATURE MN
                                                               ON MN.NATURE_ID = LG.NATURE_ID
                                                             WHERE MT.PROJECT_ID IN (?PROJECT_ID) {AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)}
                                                               AND MT.STATUS = 1 AND ML.STATUS=0
                                                              --   AND VOUCHER_DATE <?DATE_FROM
                                                                AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?BEGIN_FROM
                                                               AND LG.GROUP_ID NOT IN (12, 13)
                                                               AND MN.NATURE_ID IN (1,2)
                                                             GROUP BY VT.LEDGER_ID,VT.TRANS_MODE
                                                            UNION ALL
                                                            SELECT LG.GROUP_ID,LG.SORT_ORDER,
                                                                   ML.LEDGER_ID,
                                                                   MN.NATURE_ID,
                                                                   LG.GROUP_CODE,
                                                                   LG.LEDGER_GROUP,
                                                                   ML.LEDGER_CODE,
                                                                   ML.LEDGER_NAME,
                                                                        CASE
                                                                        WHEN VT.TRANS_MODE = 'DR' THEN
                                                                          IFNULL(SUM( (VT.AMOUNT*IF(MT.IS_MULTI_CURRENCY=1 {AND ?CURRENCY_COUNTRY_ID=0}, VT.EXCHANGE_RATE, 1)) ), 0.0)
                                                                        ELSE
                                                                          '0.0'
                                                                        END AS 'OP_DEBIT',
                                                                        CASE
                                                                        WHEN VT.TRANS_MODE = 'CR' THEN
                                                                          IFNULL(SUM( (VT.AMOUNT*IF(MT.IS_MULTI_CURRENCY=1 {AND ?CURRENCY_COUNTRY_ID=0}, VT.EXCHANGE_RATE, 1)) ), 0.0)
                                                                        ELSE
                                                                        '0.0'
                                                                       END AS  'OP_CREDIT',
                                                                   '' AS 'CUR_DEBIT',
                                                                   '' As 'CUR_CREDIT'
                                                              FROM MASTER_LEDGER_GROUP LG
                                                              LEFT JOIN MASTER_LEDGER ML
                                                                ON ML.GROUP_ID = LG.GROUP_ID
                                                              LEFT JOIN VOUCHER_TRANS VT
                                                                ON VT.LEDGER_ID = ML.LEDGER_ID
                                                              LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                                ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                               LEFT JOIN MASTER_NATURE MN
                                                               ON MN.NATURE_ID = LG.NATURE_ID
                                                             WHERE MT.PROJECT_ID IN (?PROJECT_ID) {AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)}
                                                               AND MT.STATUS = 1 AND ML.STATUS=0
                                                             --   AND VOUCHER_DATE < ?DATE_FROM 
                                                              AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?BEGIN_FROM
                                                               AND VOUCHER_TYPE IN ('JN')
                                                               AND LG.GROUP_ID NOT IN (12, 13)
                                                               AND MN.NATURE_ID IN (1,2)
                                                             GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID, VT.TRANS_MODE) AS T
                                                     GROUP BY T.LEDGER_ID
                                                UNION ALL
                                                  SELECT TT.GROUP_ID,
                                                   TT.SORT_ORDER,
                                                   TT.LEDGER_ID,
                                                   TT.NATURE_ID,
                                                   TT.GROUP_CODE,
                                                   TT.LEDGER_GROUP,
                                                   TT.LEDGER_CODE,
                                                   TT.LEDGER_NAME,
                                                   CASE
                                                     WHEN SUM(TT.OP_DEBIT) > SUM(TT.OP_CREDIT) THEN
                                                      SUM(TT.OP_DEBIT) - SUM(TT.OP_CREDIT)
                                                     ELSE
                                                      0.00
                                                   END AS OP_DEBIT,
                                                   CASE
                                                     WHEN SUM(TT.OP_CREDIT) > SUM(TT.OP_DEBIT) THEN
                                                      SUM(TT.OP_CREDIT) - SUM(TT.OP_DEBIT)
                                                     ELSE
                                                      0.00
                                                   END AS OP_CREDIT,
                                                   '' AS 'CUR_DEBIT',
                                                   '' As 'CUR_CREDIT'
                                              FROM (SELECT LG.GROUP_ID,
                                                           LG.SORT_ORDER,
                                                           ML.LEDGER_ID,
                                                           MN.NATURE_ID,
                                                           LG.GROUP_CODE,
                                                           LG.LEDGER_GROUP,
                                                           ML.LEDGER_CODE,
                                                           ML.LEDGER_NAME,
                                                           SUM(CASE
                                                                 WHEN LB2.TRANS_MODE = 'DR' THEN
                                                                  LB2.AMOUNT
                                                                 ELSE
                                                                  0
                                                               END) AS OP_DEBIT,
                                                           SUM(CASE
                                                                 WHEN LB2.TRANS_MODE = 'CR' THEN
                                                                  LB2.AMOUNT
                                                                 ELSE
                                                                  0
                                                               END) AS OP_CREDIT,
                                                           '' AS 'CUR_DEBIT',
                                                           '' As 'CUR_CREDIT'
                                                      FROM MASTER_LEDGER AS ML
                                                     INNER JOIN MASTER_LEDGER_GROUP AS LG
                                                        ON ML.GROUP_ID = LG.GROUP_ID
                                                     INNER JOIN (SELECT LB.BALANCE_DATE, LB.PROJECT_ID, LB.LEDGER_ID,
                                                                       IF(ML.GROUP_ID IN (12, 13, 14) {AND ?CURRENCY_COUNTRY_ID>0}, LB.AMOUNT_FC, LB.AMOUNT) AS AMOUNT,
                                                                       IF(ML.GROUP_ID IN (12, 13, 14) {AND ?CURRENCY_COUNTRY_ID>0}, LB.TRANS_FC_MODE, LB.TRANS_MODE) AS TRANS_MODE
                                                                  FROM LEDGER_BALANCE AS LB
                                                                  INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = LB.LEDGER_ID AND
                                                                    IF(?CURRENCY_COUNTRY_ID>0 AND ML.CUR_COUNTRY_ID > 0, ML.CUR_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)
                                                                  LEFT JOIN (SELECT LBA.PROJECT_ID,
                                                                                   LBA.LEDGER_ID,
                                                                                   MAX(LBA.BALANCE_DATE) AS BAL_DATE
                                                                              FROM LEDGER_BALANCE LBA
                                                                             WHERE 1 = 1
                                                                               AND LBA.BALANCE_DATE <?DATE_FROM
                                                                            -- '2012-03-31 00:00:00'
                                                                             GROUP BY LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB1
                                                                    ON LB.PROJECT_ID = LB1.PROJECT_ID
                                                                   AND LB.LEDGER_ID = LB1.LEDGER_ID
                                                                   AND LB.AMOUNT > 0
                                                                 WHERE LB.PROJECT_ID IN (?PROJECT_ID)
                                                                   AND LB.TRANS_FLAG = 'OP'
                                                                   AND LB.BALANCE_DATE <= LB1.BAL_DATE) LB2
                                                        ON ML.LEDGER_ID = LB2.LEDGER_ID
                                                      LEFT JOIN MASTER_NATURE MN
                                                        ON MN.NATURE_ID = LG.NATURE_ID
                                                     WHERE LG.GROUP_ID IN (SELECT LG.GROUP_ID
                                                                             FROM MASTER_LEDGER ML
                                                                            INNER JOIN PROJECT_LEDGER PL
                                                                               ON ML.LEDGER_ID = PL.LEDGER_ID
                                                                            INNER JOIN MASTER_LEDGER_GROUP LG
                                                                               ON ML.GROUP_ID = LG.GROUP_ID
                                                                            WHERE PL.PROJECT_ID IN (?PROJECT_ID)
                                                                              AND LG.NATURE_ID IN (3, 4)
                                                                              AND ML.STATUS = 0)
                                                       AND LG.GROUP_ID NOT IN (12, 13)
                                                      --  AND ML.LEDGER_ID NOT IN (3)
                                                       AND ML.STATUS = 0
                                                     GROUP BY ML.LEDGER_ID
                                                    UNION ALL
                                                    SELECT LG.GROUP_ID,
                                                           LG.SORT_ORDER,
                                                           ML.LEDGER_ID,
                                                           MN.NATURE_ID,
                                                           LG.GROUP_CODE,
                                                           LG.LEDGER_GROUP,
                                                           ML.LEDGER_CODE,
                                                           ML.LEDGER_NAME,
                                                        -- FD Investment amount is not calculated so Mismatched the FD Amount (Chinna)
                                                           CASE   
                                                             WHEN VOUCHER_TYPE IN ('PY','RC',IF(VOUCHER_SUB_TYPE ='FD','CN','')) AND VT.TRANS_MODE = 'DR' THEN
                                                              IFNULL((VT.AMOUNT *IF(MT.IS_MULTI_CURRENCY=1 {AND ?CURRENCY_COUNTRY_ID=0}, VT.EXCHANGE_RATE, 1)), 0.0)
                                                             ELSE  
                                                              '0.0'
                                                           END AS 'OP_DEBIT',
                                                           CASE
                                                             WHEN VOUCHER_TYPE IN ('RC','PY',IF(VOUCHER_SUB_TYPE ='FD','CN','')) AND VT.TRANS_MODE = 'CR' THEN
                                                              IFNULL((VT.AMOUNT *IF(MT.IS_MULTI_CURRENCY=1 {AND ?CURRENCY_COUNTRY_ID=0}, VT.EXCHANGE_RATE, 1)), 0.0)
                                                             ELSE
                                                              '0.0'
                                                           END AS 'OP_CREDIT',
                                                           '' AS 'CUR_DEBIT',
                                                           '' As 'CUR_CREDIT'
                                                      FROM MASTER_LEDGER_GROUP LG
        
                                                      LEFT JOIN MASTER_LEDGER ML
                                                        ON ML.GROUP_ID = LG.GROUP_ID
                                                      LEFT JOIN VOUCHER_TRANS VT
                                                        ON VT.LEDGER_ID = ML.LEDGER_ID
                                                      LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                        ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                      LEFT JOIN MASTER_NATURE MN
                                                        ON MN.NATURE_ID = LG.NATURE_ID
                                                     WHERE MT.PROJECT_ID IN (?PROJECT_ID) {AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)}
                                                       AND MT.STATUS = 1
                                                       AND ML.STATUS = 0
                                                       AND VOUCHER_DATE < ?DATE_FROM
                                                       AND LG.GROUP_ID NOT IN (12, 13)
                                                       AND MN.NATURE_ID IN (3, 4)
                                                    --  GROUP BY VT.LEDGER_ID,VT.TRANS_MODE  
                                                    UNION ALL
                                                    SELECT LG.GROUP_ID,
                                                           LG.SORT_ORDER,
                                                           ML.LEDGER_ID,
                                                           MN.NATURE_ID,
                                                           LG.GROUP_CODE,
                                                           LG.LEDGER_GROUP,
                                                           ML.LEDGER_CODE,
                                                           ML.LEDGER_NAME,
                                                           CASE
                                                             WHEN VT.TRANS_MODE = 'DR' THEN
                                                              IFNULL(SUM( (VT.AMOUNT*IF(MT.IS_MULTI_CURRENCY=1 {AND ?CURRENCY_COUNTRY_ID=0}, VT.EXCHANGE_RATE, 1)) ), 0.0)
                                                             ELSE
                                                              '0.0'
                                                           END AS 'OP_DEBIT',
                                                           CASE
                                                             WHEN VT.TRANS_MODE = 'CR' THEN
                                                              IFNULL(SUM( (VT.AMOUNT*IF(MT.IS_MULTI_CURRENCY=1 {AND ?CURRENCY_COUNTRY_ID=0}, VT.EXCHANGE_RATE, 1)) ), 0.0)
                                                             ELSE
                                                              '0.0'
                                                           END AS 'OP_CREDIT',
                                                           '' AS 'CUR_DEBIT',
                                                           '' As 'CUR_CREDIT'
                                                      FROM MASTER_LEDGER_GROUP LG
                                                      LEFT JOIN MASTER_LEDGER ML
                                                        ON ML.GROUP_ID = LG.GROUP_ID
                                                      LEFT JOIN VOUCHER_TRANS VT
                                                        ON VT.LEDGER_ID = ML.LEDGER_ID
                                                      LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                        ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                      LEFT JOIN MASTER_NATURE MN
                                                        ON MN.NATURE_ID = LG.NATURE_ID
                                                     WHERE MT.PROJECT_ID IN (?PROJECT_ID) {AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)}
                                                       AND MT.STATUS = 1
                                                       AND ML.STATUS = 0
                                                       AND VOUCHER_DATE < ?DATE_FROM
                                                       AND VOUCHER_TYPE IN ('JN')
                                                       AND LG.GROUP_ID NOT IN (12, 13)
                                                       AND MN.NATURE_ID IN (3, 4)
                                                     GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID, VT.TRANS_MODE) AS TT
                                             GROUP BY TT.LEDGER_ID
                                                UNION ALL
                                               SELECT T.GROUP_ID,T.SORT_ORDER,
                                                           T.LEDGER_ID,
                                                           T.NATURE_ID,
                                                           T.GROUP_CODE,
                                                           T.LEDGER_GROUP,
                                                           T.LEDGER_CODE,
                                                           T.LEDGER_NAME,
                                                           CASE
                                                             WHEN SUM(T.OP_DEBIT) > SUM(T.OP_CREDIT) THEN
                                                              SUM(T.OP_DEBIT) - SUM(T.OP_CREDIT)
                                                             ELSE
                                                              0.00
                                                           END AS OP_DEBIT,
                                                           CASE
                                                             WHEN SUM(T.OP_CREDIT) > SUM(T.OP_DEBIT) THEN
                                                              SUM(T.OP_CREDIT) - SUM(T.OP_DEBIT)
                                                             ELSE
                                                              0.00
                                                           END AS OP_CREDIT,
                                                           T.CUR_DEBIT,
                                                           T.CUR_CREDIT
                                                      FROM (SELECT LG.GROUP_ID,LG.SORT_ORDER,
                                                                   ML.LEDGER_ID,
                                                                   MN.NATURE_ID,
                                                                   LG.GROUP_CODE,
                                                                   LG.LEDGER_GROUP,
                                                                   ML.LEDGER_CODE,
                                                                   ML.LEDGER_NAME,
                                                                   SUM(CASE
                                                                   WHEN LB2.TRANS_MODE = 'DR' THEN
                                                                   LB2.AMOUNT +
                                                                   (SELECT IFNULL(SUM(VT.AMOUNT), 0) +
                                                                           (SELECT IFNULL(SUM(AMOUNT), 0.0) AS AMOUNT
                                                                              FROM LEDGER_BALANCE AS LB
                                                                              LEFT JOIN MASTER_LEDGER AS ML
                                                                                ON LB.LEDGER_ID = ML.LEDGER_ID
                                                                              LEFT JOIN MASTER_LEDGER_GROUP LG
                                                                                ON LG.GROUP_ID = ML.GROUP_ID
                                                                             WHERE PROJECT_ID IN (?PROJECT_ID)
                                                                               AND TRANS_FLAG = 'OP'
                                                                               AND LB.AMOUNT > 0 AND ML.STATUS=0
                                                                               AND LG.GROUP_ID NOT IN (12, 14, 13)
                                                                               AND LG.NATURE_ID IN (1,2)
                                                                               AND TRANS_MODE = 'DR'
                                                                               AND BALANCE_DATE <?YEAR_FROM) AS PAYMENTAMT
                                                                      FROM MASTER_LEDGER_GROUP LG
                                                                      LEFT JOIN MASTER_LEDGER ML
                                                                        ON ML.GROUP_ID = LG.GROUP_ID
                                                                      LEFT JOIN VOUCHER_TRANS VT
                                                                        ON VT.LEDGER_ID = ML.LEDGER_ID
                                                                      LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                                        ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                                     WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                                       AND MT.VOUCHER_TYPE = 'PY' AND ML.STATUS=0
                                                                       AND MT.STATUS = 1
                                                                       AND LG.NATURE_ID IN (1,2)
                                                                       AND VOUCHER_DATE <?YEAR_FROM
                                                                       AND LG.GROUP_ID NOT IN (12, 13)) 
                                                                       ELSE
                                                                          0
                                                                       END) AS OP_DEBIT,
                                                                   SUM(CASE
                                                                         WHEN LB2.TRANS_MODE = 'CR' THEN
                                                                          LB2.AMOUNT +
                                                                          (SELECT IFNULL(SUM(VT.AMOUNT), 0) +
                                                                                  (SELECT IFNULL(SUM(AMOUNT), 0.0) AS AMOUNT
                                                                                     FROM LEDGER_BALANCE AS LB
                                                                                     LEFT JOIN MASTER_LEDGER AS ML
                                                                                       ON LB.LEDGER_ID = ML.LEDGER_ID
                                                                                     LEFT JOIN MASTER_LEDGER_GROUP LG
                                                                                       ON LG.GROUP_ID = ML.GROUP_ID
                                                                                    WHERE PROJECT_ID IN (?PROJECT_ID)
                                                                                      AND TRANS_FLAG = 'OP'
                                                                                      AND LB.AMOUNT > 0 AND ML.STATUS=0
                                                                                      AND LG.GROUP_ID NOT IN (12, 14, 13)
                                                                                      AND LG.NATURE_ID NOT IN (1,2)
                                                                                      AND TRANS_MODE = 'CR'
                                                                                      AND BALANCE_DATE <?YEAR_FROM) AS RECEIPTAMT
                                                                             FROM MASTER_LEDGER_GROUP LG
                                                                             LEFT JOIN MASTER_LEDGER ML
                                                                               ON ML.GROUP_ID = LG.GROUP_ID
                                                                             LEFT JOIN VOUCHER_TRANS VT
                                                                               ON VT.LEDGER_ID = ML.LEDGER_ID
                                                                             LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                                               ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                                            WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                                              AND MT.VOUCHER_TYPE = 'RC' AND ML.STATUS=0
                                                                              AND MT.STATUS = 1
                                                                              AND LG.NATURE_ID NOT IN (1,2)
                                                                              AND VOUCHER_DATE <?YEAR_FROM
                                                                              AND LG.GROUP_ID NOT IN (12, 13))

                                                                         ELSE
                                                                          0
                                                                       END) AS OP_CREDIT,
                                                                   '' AS 'CUR_DEBIT',
                                                                   '' As 'CUR_CREDIT'

                                                              FROM MASTER_LEDGER AS ML
                                                             INNER JOIN MASTER_LEDGER_GROUP AS LG
                                                                ON ML.GROUP_ID = LG.GROUP_ID
                                                             INNER JOIN (SELECT LB.BALANCE_DATE,
                                                                               LB.PROJECT_ID,
                                                                               LB.LEDGER_ID,
                                                                               LB.AMOUNT,
                                                                               LB.TRANS_MODE
                                                                          FROM LEDGER_BALANCE AS LB
                                                                          LEFT JOIN (SELECT LBA.PROJECT_ID,
                                                                                           LBA.LEDGER_ID,
                                                                                           MAX(LBA.BALANCE_DATE) AS BAL_DATE
                                                                                      FROM LEDGER_BALANCE LBA
                                                                                     WHERE 1 = 1
                                                                                       AND LBA.BALANCE_DATE <
                                                                                              LBA.LEDGER_ID) AS LB1
                                                                            ON LB.PROJECT_ID = LB1.PROJECT_ID
                                                                           AND LB.LEDGER_ID = LB1.LEDGER_ID
                                                                           AND LB.AMOUNT > 0
                                                                         WHERE LB.PROJECT_ID IN (?PROJECT_ID)
                                                                           AND LB.BALANCE_DATE = LB1.BAL_DATE) LB2
                                                                ON ML.LEDGER_ID = LB2.LEDGER_ID
                                                             LEFT JOIN MASTER_NATURE MN
                                                             ON MN.NATURE_ID = LG.NATURE_ID
                                                             WHERE LG.GROUP_ID IN
                                                                   (SELECT LG.GROUP_ID
                                                                      FROM MASTER_LEDGER ML
                                                                     INNER JOIN PROJECT_LEDGER PL
                                                                        ON ML.LEDGER_ID = PL.LEDGER_ID
                                                                     INNER JOIN MASTER_LEDGER_GROUP LG
                                                                        ON ML.GROUP_ID = LG.GROUP_ID
                                                                     WHERE PL.PROJECT_ID IN (?PROJECT_ID)
                                                                       AND LG.NATURE_ID IN (3, 4) AND ML.STATUS=0)
                                                               and LG.GROUP_ID NOT IN (12, 13, 14)
                                                               AND ML.LEDGER_ID = 3
                                                             GROUP BY ML.LEDGER_ID) AS T
                                                 UNION ALL     -- added by chinna in order to have sum the CR And Dr in the One Amount....

                                                  SELECT T.GROUP_ID,
                                                           T.SORT_ORDER,
                                                           T.LEDGER_ID,
                                                           T.NATURE_ID,
                                                           T.GROUP_CODE,
                                                           T.LEDGER_GROUP,
                                                           T.LEDGER_CODE,
                                                           T.LEDGER_NAME,
                                                           T.OP_CREDIT,
                                                           T.OP_DEBIT,
                                                           SUM(T.CURRENTTRANS_DEBIT) AS CURRENTTRANS_DEBIT,
                                                           SUM(T.CURRENTTRANS_CREDIT) AS CURRENTTRANS_CREDIT
                                                      FROM (SELECT LG.GROUP_ID,
                                                                   LG.SORT_ORDER,
                                                                   ML.LEDGER_ID,
                                                                   MN.NATURE_ID,
                                                                   LG.GROUP_CODE,
                                                                   LG.LEDGER_GROUP,
                                                                   ML.LEDGER_CODE,
                                                                   ML.LEDGER_NAME,
                                                                   '' AS 'OP_CREDIT',
                                                                   '' AS 'OP_DEBIT',
                                                                   CASE
                                                                     WHEN VOUCHER_TYPE IN ('RC', 'PY') AND VT.TRANS_MODE = 'DR' THEN
                                                                      IFNULL(SUM( (VT.AMOUNT*IF(MT.IS_MULTI_CURRENCY=1 {AND ?CURRENCY_COUNTRY_ID=0}, VT.EXCHANGE_RATE, 1)) ), 0.0)
                                                                     ELSE
                                                                      '0.0'
                                                                   END AS 'CURRENTTRANS_DEBIT',
                                                                   CASE
                                                                     WHEN VOUCHER_TYPE IN ('RC', 'PY') AND VT.TRANS_MODE = 'CR' THEN
                                                                      IFNULL(SUM( (VT.AMOUNT *IF(MT.IS_MULTI_CURRENCY=1 {AND ?CURRENCY_COUNTRY_ID=0}, VT.EXCHANGE_RATE, 1) )), 0.0)
                                                                     ELSE
                                                                      '0.0'
                                                                   END AS 'CURRENTTRANS_CREDIT'
                                                              FROM MASTER_LEDGER_GROUP LG

                                                              LEFT JOIN MASTER_LEDGER ML
                                                                ON ML.GROUP_ID = LG.GROUP_ID
                                                              LEFT JOIN VOUCHER_TRANS VT
                                                                ON VT.LEDGER_ID = ML.LEDGER_ID
                                                              LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                                ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                              LEFT JOIN MASTER_NATURE MN
                                                                ON MN.NATURE_ID = LG.NATURE_ID
                                                             WHERE MT.PROJECT_ID IN (?PROJECT_ID) {AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)}
                                                               AND MT.STATUS = 1
                                                               AND ML.STATUS = 0
                                                               AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO
                                                               AND LG.GROUP_ID NOT IN (12, 13)
                                                             GROUP BY VT.LEDGER_ID, VT.VOUCHER_ID, VT.TRANS_MODE) AS T
                                                     GROUP BY T.LEDGER_ID

                                                 UNION ALL
         
                                                 SELECT LG.GROUP_ID,LG.SORT_ORDER,ML.LEDGER_ID,MN.NATURE_ID,
                                                        LG.GROUP_CODE,
                                                        LG.LEDGER_GROUP,
                                                        ML.LEDGER_CODE,
                                                        ML.LEDGER_NAME,
                                                        '' AS 'OP_CREDIT',
                                                        '' AS 'OP_DEBIT',
                                                        CASE
                                                          WHEN VT.TRANS_MODE = 'DR' THEN
                                                           IFNULL(SUM((VT.AMOUNT*IF(MT.IS_MULTI_CURRENCY=1 {AND ?CURRENCY_COUNTRY_ID=0}, VT.EXCHANGE_RATE, 1)) ), 0.0)
                                                          ELSE
                                                           '0.0'
                                                        END AS 'CURRENTTRANS_DEBIT',
                                                        CASE
                                                          WHEN VT.TRANS_MODE = 'CR' THEN
                                                           IFNULL(SUM( (VT.AMOUNT*IF(MT.IS_MULTI_CURRENCY=1 {AND ?CURRENCY_COUNTRY_ID=0}, VT.EXCHANGE_RATE, 1)) ), 0.0)
                                                          ELSE
                                                           '0.0'
                                                        END AS 'CURRENTTRANS_CREDIT'
                                                   FROM MASTER_LEDGER_GROUP LG
                                                   LEFT JOIN MASTER_LEDGER ML
                                                     ON ML.GROUP_ID = LG.GROUP_ID
                                                   LEFT JOIN VOUCHER_TRANS VT
                                                     ON VT.LEDGER_ID = ML.LEDGER_ID
                                                   LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                     ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                    LEFT JOIN MASTER_NATURE MN
                                                    ON MN.NATURE_ID = LG.NATURE_ID
                                                  WHERE MT.PROJECT_ID IN (?PROJECT_ID) {AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)}
                                                    AND MT.STATUS = 1 AND ML.STATUS=0
                                                    AND VOUCHER_DATE BETWEEN ?DATE_FROM AND
                                                        ?DATE_TO
                                                    and VOUCHER_TYPE IN ('JN','CN') AND VOUCHER_SUB_TYPE ='FD'
                                                    AND LG.GROUP_ID NOT IN (12, 13)
                                                  GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID, VT.TRANS_MODE

                                                UNION ALL
         
                                                 SELECT LG.GROUP_ID,LG.SORT_ORDER,ML.LEDGER_ID,MN.NATURE_ID,
                                                                                 LG.GROUP_CODE,
                                                                                 LG.LEDGER_GROUP,
                                                                                 ML.LEDGER_CODE,
                                                                                 ML.LEDGER_NAME,
                                                                                '' AS 'OP_CREDIT',
                                                                                '' AS 'OP_DEBIT',
                                                                                CASE
                                                                                  WHEN VT.TRANS_MODE = 'DR' THEN
                                                                                   IFNULL(SUM( (VT.AMOUNT*IF(MT.IS_MULTI_CURRENCY=1 {AND ?CURRENCY_COUNTRY_ID=0}, VT.EXCHANGE_RATE, 1)) ), 0.0)
                                                                                  ELSE
                                                                                   '0.0'
                                                                                END AS 'CURRENTTRANS_DEBIT',
                                                                                CASE
                                                                                  WHEN VT.TRANS_MODE = 'CR' THEN
                                                                                   IFNULL(SUM( (VT.AMOUNT*IF(MT.IS_MULTI_CURRENCY=1 {AND ?CURRENCY_COUNTRY_ID=0}, VT.EXCHANGE_RATE, 1)) ), 0.0)
                                                                                  ELSE
                                                                                   '0.0'
                                                                                END AS 'CURRENTTRANS_CREDIT'
                                                                           FROM MASTER_LEDGER_GROUP LG
                                                                           LEFT JOIN MASTER_LEDGER ML
                                                                             ON ML.GROUP_ID = LG.GROUP_ID
                                                                           LEFT JOIN VOUCHER_TRANS VT
                                                                             ON VT.LEDGER_ID = ML.LEDGER_ID
                                                                           LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                                             ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                                            LEFT JOIN MASTER_NATURE MN
                                                                            ON MN.NATURE_ID = LG.NATURE_ID
                                                                          WHERE MT.PROJECT_ID IN (?PROJECT_ID) {AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)}
                                                                            AND MT.STATUS = 1 AND ML.STATUS=0
                                                                             AND VOUCHER_DATE BETWEEN ?DATE_FROM AND
                                                                            ?DATE_TO
                                                                          and voucher_type in ('JN')  and voucher_sub_type not in('fd')
                                                                           AND LG.GROUP_ID NOT IN (12, 13)
                                                                          GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID, VT.TRANS_MODE) AS FN
                                                                      GROUP BY FN.GROUP_ID, FN.LEDGER_ID HAVING SUM(FN.OP_DEBIT)>0 || SUM(FN.OP_CREDIT)>0 
                                                                      || SUM(FN.CUR_DEBIT)>0|| SUM(FN.CUR_CREDIT)>0 ORDER BY FIELD(NATURE_ID,3,4,2,1)";

                        // COMMENTED BY CHINNA

                        //                        query = @"SELECT FN.GROUP_ID,CASE WHEN NATURE_ID = 3 THEN 1 WHEN NATURE_ID = 4 THEN 2
                        //                                               WHEN NATURE_ID = 2 THEN 3  WHEN NATURE_ID = 1 THEN 4 END AS SORT_ORDER,
                        //                                               FN.LEDGER_ID,
                        //                                               FN.NATURE_ID,
                        //                                                FN.GROUP_CODE,
                        //                                                FN.LEDGER_GROUP,
                        //                                                FN.LEDGER_CODE,
                        //                                                FN.LEDGER_NAME,
                        //                                                SUM(FN.OP_DEBIT) AS OP_DEBIT,
                        //                                                SUM(FN.OP_CREDIT) AS OP_CREDIT,
                        //                                                SUM(FN.CUR_DEBIT) AS CURRENTTRANS_DEBIT,
                        //                                                SUM(FN.CUR_CREDIT) AS CURRENTTRANS_CREDIT        
                        //                                                FROM (SELECT T.GROUP_ID,T.SORT_ORDER,
                        //                                                           T.LEDGER_ID,
                        //                                                           T.NATURE_ID,
                        //                                                           T.GROUP_CODE,
                        //                                                           T.LEDGER_GROUP,
                        //                                                           T.LEDGER_CODE,
                        //                                                           T.LEDGER_NAME,
                        //                                                          CASE
                        //                                                             WHEN SUM(T.OP_DEBIT) > SUM(T.OP_CREDIT) THEN
                        //                                                              SUM(T.OP_DEBIT) - SUM(T.OP_CREDIT)
                        //                                                             ELSE
                        //                                                              0.00
                        //                                                           END AS OP_DEBIT,
                        //                                                           CASE
                        //                                                             WHEN SUM(T.OP_CREDIT) > SUM(T.OP_DEBIT) THEN
                        //                                                              SUM(T.OP_CREDIT) - SUM(T.OP_DEBIT)
                        //                                                             ELSE
                        //                                                              0.00
                        //                                                           END AS OP_CREDIT,
                        //                                                           '' AS 'CUR_DEBIT',
                        //                                                           '' As 'CUR_CREDIT'
                        //                                                       FROM (SELECT LG.GROUP_ID,LG.SORT_ORDER, ML.LEDGER_ID,
                        //                                                                   MN.NATURE_ID,
                        //                                                                   LG.GROUP_CODE,
                        //                                                                   LG.LEDGER_GROUP,
                        //                                                                   ML.LEDGER_CODE,
                        //                                                                   ML.LEDGER_NAME,
                        //                                                                   SUM(CASE
                        //                                                                         WHEN LB2.TRANS_MODE = 'DR' THEN
                        //                                                                          LB2.AMOUNT
                        //                                                                         ELSE
                        //                                                                          0
                        //                                                                       END) AS 'OP_DEBIT',
                        //                                                                   SUM(CASE
                        //                                                                         WHEN LB2.TRANS_MODE = 'CR' THEN
                        //                                                                          LB2.AMOUNT
                        //                                                                         ELSE
                        //                                                                          0
                        //                                                                       END) AS 'OP_CREDIT',
                        //                                                                   '' AS 'CUR_DEBIT',
                        //                                                                   '' As 'CUR_CREDIT'
                        //                                                              FROM MASTER_LEDGER AS ML
                        //                                                             INNER JOIN MASTER_LEDGER_GROUP AS LG
                        //                                                                ON ML.GROUP_ID = LG.GROUP_ID
                        //                                                             INNER JOIN (SELECT LB.BALANCE_DATE,
                        //                                                                               LB.PROJECT_ID,
                        //                                                                               LB.LEDGER_ID,
                        //                                                                               LB.AMOUNT,
                        //                                                                               LB.TRANS_MODE
                        //                                                                          FROM LEDGER_BALANCE AS LB
                        //                                                                          LEFT JOIN (SELECT LBA.PROJECT_ID,
                        //                                                                                           LBA.LEDGER_ID,
                        //                                                                                           MAX(LBA.BALANCE_DATE) AS BAL_DATE
                        //                                                                                      FROM LEDGER_BALANCE LBA
                        //                                                                                     WHERE 1 = 1
                        //                                                                                    AND LBA.BALANCE_DATE <= ?YEAR_TO
                        //                                                                                    AND LBA.TRANS_FLAG= 'OP'
                        //                                                                                     GROUP BY LBA.PROJECT_ID,
                        //                                                                                              LBA.LEDGER_ID) AS LB1
                        //                                                                            ON LB.PROJECT_ID = LB1.PROJECT_ID
                        //                                                                           AND LB.LEDGER_ID = LB1.LEDGER_ID
                        //                                                                         WHERE LB.PROJECT_ID IN (?PROJECT_ID)
                        //                                                                           AND LB.TRANS_FLAG = 'OP'
                        //                                                                        AND LB.BALANCE_DATE = LB1.BAL_DATE ) LB2
                        //                                                                ON ML.LEDGER_ID = LB2.LEDGER_ID
                        //                                                                 LEFT JOIN MASTER_NATURE MN
                        //                                                                 ON MN.NATURE_ID = LG.NATURE_ID
                        //                                                             WHERE 1 = 1 AND ML.STATUS=0
                        //                                                               AND LG.GROUP_ID NOT IN (12, 13, 14)
                        //                                                               AND MN.NATURE_ID IN (1,2)
                        //                                                             GROUP BY ML.LEDGER_ID
                        //                                                            UNION ALL
                        //                                                            SELECT LG.GROUP_ID,LG.SORT_ORDER,
                        //                                                                   ML.LEDGER_ID,
                        //                                                                   MN.NATURE_ID,
                        //                                                                   LG.GROUP_CODE,
                        //                                                                   LG.LEDGER_GROUP,
                        //                                                                   ML.LEDGER_CODE,
                        //                                                                   ML.LEDGER_NAME,
                        //                                                                   CASE
                        //                                                                     WHEN VOUCHER_TYPE IN ('PY') AND VT.TRANS_MODE = 'DR' THEN
                        //                                                                      IFNULL(SUM(VT.AMOUNT), 0.0)
                        //                                                                     ELSE
                        //                                                                      '0.0'
                        //                                                                   END AS 'OP_DEBIT',
                        //                                                                   CASE
                        //                                                                     WHEN VOUCHER_TYPE IN ('RC') AND VT.TRANS_MODE = 'CR' THEN
                        //                                                                      IFNULL(SUM(VT.AMOUNT), 0.0)
                        //                                                                     ELSE
                        //                                                                      '0.0'
                        //                                                                   END AS 'OP_CREDIT',
                        //                                                                   '' AS 'CUR_DEBIT',
                        //                                                                   '' As 'CUR_CREDIT'
                        //                                                              FROM MASTER_LEDGER_GROUP LG
                        //
                        //                                                              LEFT JOIN MASTER_LEDGER ML
                        //                                                                ON ML.GROUP_ID = LG.GROUP_ID
                        //                                                              LEFT JOIN VOUCHER_TRANS VT
                        //                                                                ON VT.LEDGER_ID = ML.LEDGER_ID
                        //                                                              LEFT JOIN VOUCHER_MASTER_TRANS MT
                        //                                                                ON VT.VOUCHER_ID = MT.VOUCHER_ID
                        //                                                               LEFT JOIN MASTER_NATURE MN
                        //                                                               ON MN.NATURE_ID = LG.NATURE_ID
                        //                                                             WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                        //                                                               AND MT.STATUS = 1 AND ML.STATUS=0
                        //                                                                AND VOUCHER_DATE BETWEEN ?DATE_FROM AND
                        //                                                                   ?BEGIN_FROM
                        //                                                               AND LG.GROUP_ID NOT IN (12, 13)
                        //                                                               AND MN.NATURE_ID IN (1,2)
                        //                                                             GROUP BY VT.LEDGER_ID,VT.TRANS_MODE
                        //                                                            UNION ALL
                        //                                                            SELECT LG.GROUP_ID,LG.SORT_ORDER,
                        //                                                                   ML.LEDGER_ID,
                        //                                                                   MN.NATURE_ID,
                        //                                                                   LG.GROUP_CODE,
                        //                                                                   LG.LEDGER_GROUP,
                        //                                                                   ML.LEDGER_CODE,
                        //                                                                   ML.LEDGER_NAME,
                        //                                                                        CASE
                        //                                                                        WHEN VT.TRANS_MODE = 'DR' THEN
                        //                                                                        IFNULL(SUM(VT.AMOUNT), 0.0)
                        //                                                                        ELSE
                        //                                                                       '0.0'
                        //                                                                        END AS 'OP_DEBIT',
                        //                                                                        CASE
                        //                                                                        WHEN VT.TRANS_MODE = 'CR' THEN
                        //                                                                        IFNULL(SUM(VT.AMOUNT), 0.0)
                        //                                                                        ELSE
                        //                                                                        '0.0'
                        //                                                                       END AS  'OP_CREDIT',
                        //                                                                   '' AS 'CUR_DEBIT',
                        //                                                                   '' As 'CUR_CREDIT'
                        //                                                              FROM MASTER_LEDGER_GROUP LG
                        //                                                              LEFT JOIN MASTER_LEDGER ML
                        //                                                                ON ML.GROUP_ID = LG.GROUP_ID
                        //                                                              LEFT JOIN VOUCHER_TRANS VT
                        //                                                                ON VT.LEDGER_ID = ML.LEDGER_ID
                        //                                                              LEFT JOIN VOUCHER_MASTER_TRANS MT
                        //                                                                ON VT.VOUCHER_ID = MT.VOUCHER_ID
                        //                                                               LEFT JOIN MASTER_NATURE MN
                        //                                                               ON MN.NATURE_ID = LG.NATURE_ID
                        //                                                             WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                        //                                                               AND MT.STATUS = 1 AND ML.STATUS=0
                        //                                                               AND VOUCHER_DATE BETWEEN ?DATE_FROM AND
                        //                                                                     ?BEGIN_FROM
                        //                                                               AND VOUCHER_TYPE IN ('JN')
                        //                                                               AND LG.GROUP_ID NOT IN (12, 13)
                        //                                                               AND MN.NATURE_ID IN (1,2)
                        //                                                             GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID, VT.TRANS_MODE) AS T
                        //                                                     GROUP BY T.LEDGER_ID
                        //                                                UNION ALL
                        //                                                  SELECT TT.GROUP_ID,
                        //                                                   TT.SORT_ORDER,
                        //                                                   TT.LEDGER_ID,
                        //                                                   TT.NATURE_ID,
                        //                                                   TT.GROUP_CODE,
                        //                                                   TT.LEDGER_GROUP,
                        //                                                   TT.LEDGER_CODE,
                        //                                                   TT.LEDGER_NAME,
                        //                                                   CASE
                        //                                                     WHEN SUM(TT.OP_DEBIT) > SUM(TT.OP_CREDIT) THEN
                        //                                                      SUM(TT.OP_DEBIT) - SUM(TT.OP_CREDIT)
                        //                                                     ELSE
                        //                                                      0.00
                        //                                                   END AS OP_DEBIT,
                        //                                                   CASE
                        //                                                     WHEN SUM(TT.OP_CREDIT) > SUM(TT.OP_DEBIT) THEN
                        //                                                      SUM(TT.OP_CREDIT) - SUM(TT.OP_DEBIT)
                        //                                                     ELSE
                        //                                                      0.00
                        //                                                   END AS OP_CREDIT,
                        //                                                   '' AS 'CUR_DEBIT',
                        //                                                   '' As 'CUR_CREDIT'
                        //                                              FROM (SELECT LG.GROUP_ID,
                        //                                                           LG.SORT_ORDER,
                        //                                                           ML.LEDGER_ID,
                        //                                                           MN.NATURE_ID,
                        //                                                           LG.GROUP_CODE,
                        //                                                           LG.LEDGER_GROUP,
                        //                                                           ML.LEDGER_CODE,
                        //                                                           ML.LEDGER_NAME,
                        //                                                           SUM(CASE
                        //                                                                 WHEN LB2.TRANS_MODE = 'DR' THEN
                        //                                                                  LB2.AMOUNT
                        //                                                                 ELSE
                        //                                                                  0
                        //                                                               END) AS OP_DEBIT,
                        //                                                           SUM(CASE
                        //                                                                 WHEN LB2.TRANS_MODE = 'CR' THEN
                        //                                                                  LB2.AMOUNT
                        //                                                                 ELSE
                        //                                                                  0
                        //                                                               END) AS OP_CREDIT,
                        //                                                           '' AS 'CUR_DEBIT',
                        //                                                           '' As 'CUR_CREDIT'
                        //                                                      FROM MASTER_LEDGER AS ML
                        //                                                     INNER JOIN MASTER_LEDGER_GROUP AS LG
                        //                                                        ON ML.GROUP_ID = LG.GROUP_ID
                        //                                                     INNER JOIN (SELECT LB.BALANCE_DATE,
                        //                                                                       LB.PROJECT_ID,
                        //                                                                       LB.LEDGER_ID,
                        //                                                                       LB.AMOUNT,
                        //                                                                       LB.TRANS_MODE
                        //                                                                  FROM LEDGER_BALANCE AS LB
                        //                                                                  LEFT JOIN (SELECT LBA.PROJECT_ID,
                        //                                                                                   LBA.LEDGER_ID,
                        //                                                                                   MAX(LBA.BALANCE_DATE) AS BAL_DATE
                        //                                                                              FROM LEDGER_BALANCE LBA
                        //                                                                             WHERE 1 = 1
                        //                                                                               AND LBA.BALANCE_DATE <?DATE_FROM
                        //                                                                            -- '2012-03-31 00:00:00'
                        //                                                                             GROUP BY LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB1
                        //                                                                    ON LB.PROJECT_ID = LB1.PROJECT_ID
                        //                                                                   AND LB.LEDGER_ID = LB1.LEDGER_ID
                        //                                                                   AND LB.AMOUNT > 0
                        //                                                                 WHERE LB.PROJECT_ID IN (?PROJECT_ID)
                        //                                                                   AND LB.TRANS_FLAG = 'OP'
                        //                                                                   AND LB.BALANCE_DATE <= LB1.BAL_DATE) LB2
                        //                                                        ON ML.LEDGER_ID = LB2.LEDGER_ID
                        //                                                      LEFT JOIN MASTER_NATURE MN
                        //                                                        ON MN.NATURE_ID = LG.NATURE_ID
                        //                                                     WHERE LG.GROUP_ID IN (SELECT LG.GROUP_ID
                        //                                                                             FROM MASTER_LEDGER ML
                        //                                                                            INNER JOIN PROJECT_LEDGER PL
                        //                                                                               ON ML.LEDGER_ID = PL.LEDGER_ID
                        //                                                                            INNER JOIN MASTER_LEDGER_GROUP LG
                        //                                                                               ON ML.GROUP_ID = LG.GROUP_ID
                        //                                                                            WHERE PL.PROJECT_ID IN (?PROJECT_ID)
                        //                                                                              AND LG.NATURE_ID IN (3, 4)
                        //                                                                              AND ML.STATUS = 0)
                        //                                                       AND LG.GROUP_ID NOT IN (12, 13, 14)
                        //                                                       AND ML.LEDGER_ID NOT IN (3)
                        //                                                       AND ML.STATUS = 0
                        //                                                     GROUP BY ML.LEDGER_ID
                        //                                                    UNION ALL
                        //                                                    SELECT LG.GROUP_ID,
                        //                                                           LG.SORT_ORDER,
                        //                                                           ML.LEDGER_ID,
                        //                                                           MN.NATURE_ID,
                        //                                                           LG.GROUP_CODE,
                        //                                                           LG.LEDGER_GROUP,
                        //                                                           ML.LEDGER_CODE,
                        //                                                           ML.LEDGER_NAME,
                        //                                                           CASE
                        //                                                             WHEN VOUCHER_TYPE IN ('PY') AND VT.TRANS_MODE = 'DR' THEN
                        //                                                              IFNULL(SUM(VT.AMOUNT), 0.0)
                        //                                                             ELSE
                        //                                                              '0.0'
                        //                                                           END AS 'OP_DEBIT',
                        //                                                           CASE
                        //                                                             WHEN VOUCHER_TYPE IN ('RC') AND VT.TRANS_MODE = 'CR' THEN
                        //                                                              IFNULL(SUM(VT.AMOUNT), 0.0)
                        //                                                             ELSE
                        //                                                              '0.0'
                        //                                                           END AS 'OP_CREDIT',
                        //                                                           '' AS 'CUR_DEBIT',
                        //                                                           '' As 'CUR_CREDIT'
                        //                                                      FROM MASTER_LEDGER_GROUP LG
                        //        
                        //                                                      LEFT JOIN MASTER_LEDGER ML
                        //                                                        ON ML.GROUP_ID = LG.GROUP_ID
                        //                                                      LEFT JOIN VOUCHER_TRANS VT
                        //                                                        ON VT.LEDGER_ID = ML.LEDGER_ID
                        //                                                      LEFT JOIN VOUCHER_MASTER_TRANS MT
                        //                                                        ON VT.VOUCHER_ID = MT.VOUCHER_ID
                        //                                                      LEFT JOIN MASTER_NATURE MN
                        //                                                        ON MN.NATURE_ID = LG.NATURE_ID
                        //                                                     WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                        //                                                       AND MT.STATUS = 1
                        //                                                       AND ML.STATUS = 0
                        //                                                       AND VOUCHER_DATE < ?DATE_FROM
                        //                                                       AND LG.GROUP_ID NOT IN (12, 13)
                        //                                                       AND MN.NATURE_ID IN (3, 4)
                        //                                                     GROUP BY VT.LEDGER_ID,VT.TRANS_MODE  
                        //                                                    UNION ALL
                        //                                                    SELECT LG.GROUP_ID,
                        //                                                           LG.SORT_ORDER,
                        //                                                           ML.LEDGER_ID,
                        //                                                           MN.NATURE_ID,
                        //                                                           LG.GROUP_CODE,
                        //                                                           LG.LEDGER_GROUP,
                        //                                                           ML.LEDGER_CODE,
                        //                                                           ML.LEDGER_NAME,
                        //                                                           CASE
                        //                                                             WHEN VT.TRANS_MODE = 'DR' THEN
                        //                                                              IFNULL(SUM(VT.AMOUNT), 0.0)
                        //                                                             ELSE
                        //                                                              '0.0'
                        //                                                           END AS 'OP_DEBIT',
                        //                                                           CASE
                        //                                                             WHEN VT.TRANS_MODE = 'CR' THEN
                        //                                                              IFNULL(SUM(VT.AMOUNT), 0.0)
                        //                                                             ELSE
                        //                                                              '0.0'
                        //                                                           END AS 'OP_CREDIT',
                        //                                                           '' AS 'CUR_DEBIT',
                        //                                                           '' As 'CUR_CREDIT'
                        //                                                      FROM MASTER_LEDGER_GROUP LG
                        //                                                      LEFT JOIN MASTER_LEDGER ML
                        //                                                        ON ML.GROUP_ID = LG.GROUP_ID
                        //                                                      LEFT JOIN VOUCHER_TRANS VT
                        //                                                        ON VT.LEDGER_ID = ML.LEDGER_ID
                        //                                                      LEFT JOIN VOUCHER_MASTER_TRANS MT
                        //                                                        ON VT.VOUCHER_ID = MT.VOUCHER_ID
                        //                                                      LEFT JOIN MASTER_NATURE MN
                        //                                                        ON MN.NATURE_ID = LG.NATURE_ID
                        //                                                     WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                        //                                                       AND MT.STATUS = 1
                        //                                                       AND ML.STATUS = 0
                        //                                                       AND VOUCHER_DATE < ?DATE_FROM
                        //                                                       AND VOUCHER_TYPE IN ('JN')
                        //                                                       AND LG.GROUP_ID NOT IN (12, 13)
                        //                                                       AND MN.NATURE_ID IN (3, 4)
                        //                                                     GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID, VT.TRANS_MODE) AS TT
                        //                                             GROUP BY TT.LEDGER_ID
                        //                                                UNION ALL
                        //                                               SELECT T.GROUP_ID,T.SORT_ORDER,
                        //                                                           T.LEDGER_ID,
                        //                                                           T.NATURE_ID,
                        //                                                           T.GROUP_CODE,
                        //                                                           T.LEDGER_GROUP,
                        //                                                           T.LEDGER_CODE,
                        //                                                           T.LEDGER_NAME,
                        //                                                           CASE
                        //                                                             WHEN SUM(T.OP_DEBIT) > SUM(T.OP_CREDIT) THEN
                        //                                                              SUM(T.OP_DEBIT) - SUM(T.OP_CREDIT)
                        //                                                             ELSE
                        //                                                              0.00
                        //                                                           END AS OP_DEBIT,
                        //                                                           CASE
                        //                                                             WHEN SUM(T.OP_CREDIT) > SUM(T.OP_DEBIT) THEN
                        //                                                              SUM(T.OP_CREDIT) - SUM(T.OP_DEBIT)
                        //                                                             ELSE
                        //                                                              0.00
                        //                                                           END AS OP_CREDIT,
                        //                                                           T.CUR_DEBIT,
                        //                                                           T.CUR_CREDIT
                        //                                                      FROM (SELECT LG.GROUP_ID,LG.SORT_ORDER,
                        //                                                                   ML.LEDGER_ID,
                        //                                                                   MN.NATURE_ID,
                        //                                                                   LG.GROUP_CODE,
                        //                                                                   LG.LEDGER_GROUP,
                        //                                                                   ML.LEDGER_CODE,
                        //                                                                   ML.LEDGER_NAME,
                        //                                                                   SUM(CASE
                        //                                                                   WHEN LB2.TRANS_MODE = 'DR' THEN
                        //                                                                   LB2.AMOUNT +
                        //                                                                   (SELECT IFNULL(SUM(VT.AMOUNT), 0) +
                        //                                                                           (SELECT IFNULL(SUM(AMOUNT), 0.0) AS AMOUNT
                        //                                                                              FROM LEDGER_BALANCE AS LB
                        //                                                                              LEFT JOIN MASTER_LEDGER AS ML
                        //                                                                                ON LB.LEDGER_ID = ML.LEDGER_ID
                        //                                                                              LEFT JOIN MASTER_LEDGER_GROUP LG
                        //                                                                                ON LG.GROUP_ID = ML.GROUP_ID
                        //                                                                             WHERE PROJECT_ID IN (?PROJECT_ID)
                        //                                                                               AND TRANS_FLAG = 'OP'
                        //                                                                               AND LB.AMOUNT > 0 AND ML.STATUS=0
                        //                                                                               AND LG.GROUP_ID NOT IN (12, 14, 13)
                        //                                                                               AND LG.NATURE_ID IN (1,2)
                        //                                                                               AND TRANS_MODE = 'DR'
                        //                                                                               AND BALANCE_DATE <?YEAR_FROM) AS PAYMENTAMT
                        //                                                                      FROM MASTER_LEDGER_GROUP LG
                        //                                                                      LEFT JOIN MASTER_LEDGER ML
                        //                                                                        ON ML.GROUP_ID = LG.GROUP_ID
                        //                                                                      LEFT JOIN VOUCHER_TRANS VT
                        //                                                                        ON VT.LEDGER_ID = ML.LEDGER_ID
                        //                                                                      LEFT JOIN VOUCHER_MASTER_TRANS MT
                        //                                                                        ON VT.VOUCHER_ID = MT.VOUCHER_ID
                        //                                                                     WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                        //                                                                       AND MT.VOUCHER_TYPE = 'PY' AND ML.STATUS=0
                        //                                                                       AND MT.STATUS = 1
                        //                                                                       AND LG.NATURE_ID IN (1,2)
                        //                                                                       AND VOUCHER_DATE <?YEAR_FROM
                        //                                                                       AND LG.GROUP_ID NOT IN (12, 13)) 
                        //                                                                       ELSE
                        //                                                                          0
                        //                                                                       END) AS OP_DEBIT,
                        //                                                                   SUM(CASE
                        //                                                                         WHEN LB2.TRANS_MODE = 'CR' THEN
                        //                                                                          LB2.AMOUNT +
                        //                                                                          (SELECT IFNULL(SUM(VT.AMOUNT), 0) +
                        //                                                                                  (SELECT IFNULL(SUM(AMOUNT), 0.0) AS AMOUNT
                        //                                                                                     FROM LEDGER_BALANCE AS LB
                        //                                                                                     LEFT JOIN MASTER_LEDGER AS ML
                        //                                                                                       ON LB.LEDGER_ID = ML.LEDGER_ID
                        //                                                                                     LEFT JOIN MASTER_LEDGER_GROUP LG
                        //                                                                                       ON LG.GROUP_ID = ML.GROUP_ID
                        //                                                                                    WHERE PROJECT_ID IN (?PROJECT_ID)
                        //                                                                                      AND TRANS_FLAG = 'OP'
                        //                                                                                      AND LB.AMOUNT > 0 AND ML.STATUS=0
                        //                                                                                      AND LG.GROUP_ID NOT IN (12, 14, 13)
                        //                                                                                      AND LG.NATURE_ID NOT IN (1,2)
                        //                                                                                      AND TRANS_MODE = 'CR'
                        //                                                                                      AND BALANCE_DATE <?YEAR_FROM) AS RECEIPTAMT
                        //                                                                             FROM MASTER_LEDGER_GROUP LG
                        //                                                                             LEFT JOIN MASTER_LEDGER ML
                        //                                                                               ON ML.GROUP_ID = LG.GROUP_ID
                        //                                                                             LEFT JOIN VOUCHER_TRANS VT
                        //                                                                               ON VT.LEDGER_ID = ML.LEDGER_ID
                        //                                                                             LEFT JOIN VOUCHER_MASTER_TRANS MT
                        //                                                                               ON VT.VOUCHER_ID = MT.VOUCHER_ID
                        //                                                                            WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                        //                                                                              AND MT.VOUCHER_TYPE = 'RC' AND ML.STATUS=0
                        //                                                                              AND MT.STATUS = 1
                        //                                                                              AND LG.NATURE_ID NOT IN (1,2)
                        //                                                                              AND VOUCHER_DATE <?YEAR_FROM
                        //                                                                              AND LG.GROUP_ID NOT IN (12, 13))
                        //
                        //                                                                         ELSE
                        //                                                                          0
                        //                                                                       END) AS OP_CREDIT,
                        //                                                                   '' AS 'CUR_DEBIT',
                        //                                                                   '' As 'CUR_CREDIT'
                        //
                        //                                                              FROM MASTER_LEDGER AS ML
                        //                                                             INNER JOIN MASTER_LEDGER_GROUP AS LG
                        //                                                                ON ML.GROUP_ID = LG.GROUP_ID
                        //                                                             INNER JOIN (SELECT LB.BALANCE_DATE,
                        //                                                                               LB.PROJECT_ID,
                        //                                                                               LB.LEDGER_ID,
                        //                                                                               LB.AMOUNT,
                        //                                                                               LB.TRANS_MODE
                        //                                                                          FROM LEDGER_BALANCE AS LB
                        //                                                                          LEFT JOIN (SELECT LBA.PROJECT_ID,
                        //                                                                                           LBA.LEDGER_ID,
                        //                                                                                           MAX(LBA.BALANCE_DATE) AS BAL_DATE
                        //                                                                                      FROM LEDGER_BALANCE LBA
                        //                                                                                     WHERE 1 = 1
                        //                                                                                       AND LBA.BALANCE_DATE <
                        //                                                                                              LBA.LEDGER_ID) AS LB1
                        //                                                                            ON LB.PROJECT_ID = LB1.PROJECT_ID
                        //                                                                           AND LB.LEDGER_ID = LB1.LEDGER_ID
                        //                                                                           AND LB.AMOUNT > 0
                        //                                                                         WHERE LB.PROJECT_ID IN (?PROJECT_ID)
                        //                                                                           AND LB.BALANCE_DATE = LB1.BAL_DATE) LB2
                        //                                                                ON ML.LEDGER_ID = LB2.LEDGER_ID
                        //                                                             LEFT JOIN MASTER_NATURE MN
                        //                                                             ON MN.NATURE_ID = LG.NATURE_ID
                        //                                                             WHERE LG.GROUP_ID IN
                        //                                                                   (SELECT LG.GROUP_ID
                        //                                                                      FROM MASTER_LEDGER ML
                        //                                                                     INNER JOIN PROJECT_LEDGER PL
                        //                                                                        ON ML.LEDGER_ID = PL.LEDGER_ID
                        //                                                                     INNER JOIN MASTER_LEDGER_GROUP LG
                        //                                                                        ON ML.GROUP_ID = LG.GROUP_ID
                        //                                                                     WHERE PL.PROJECT_ID IN (?PROJECT_ID)
                        //                                                                       AND LG.NATURE_ID IN (3, 4) AND ML.STATUS=0)
                        //                                                               and LG.GROUP_ID NOT IN (12, 13, 14)
                        //                                                               AND ML.LEDGER_ID = 3
                        //                                                             GROUP BY ML.LEDGER_ID) AS T
                        //                                                 UNION ALL
                        //         
                        //                                                   SELECT LG.GROUP_ID,LG.SORT_ORDER,
                        //                                                        ML.LEDGER_ID,
                        //                                                        MN.NATURE_ID,
                        //                                                        LG.GROUP_CODE,
                        //                                                        LG.LEDGER_GROUP,
                        //                                                        ML.LEDGER_CODE,
                        //                                                        ML.LEDGER_NAME,
                        //                                                        '' AS 'OP_CREDIT',
                        //                                                        '' AS 'OP_DEBIT',
                        //                                                        CASE
                        //                                                          WHEN VOUCHER_TYPE IN ('RC','PY') AND VT.TRANS_MODE = 'DR' THEN
                        //                                                           IFNULL(SUM(VT.AMOUNT), 0.0)
                        //                                                          ELSE
                        //                                                           '0.0'
                        //                                                        END AS 'CURRENTTRANS_DEBIT',
                        //                                                        CASE
                        //                                                          WHEN VOUCHER_TYPE IN ('RC','PY') AND VT.TRANS_MODE = 'CR' THEN
                        //                                                           IFNULL(SUM(VT.AMOUNT), 0.0)
                        //                                                          ELSE
                        //                                                           '0.0'
                        //                                                        END AS 'CURRENTTRANS_CREDIT'
                        //                                                   FROM MASTER_LEDGER_GROUP LG
                        //         
                        //                                                   LEFT JOIN MASTER_LEDGER ML
                        //                                                     ON ML.GROUP_ID = LG.GROUP_ID
                        //                                                   LEFT JOIN VOUCHER_TRANS VT
                        //                                                     ON VT.LEDGER_ID = ML.LEDGER_ID
                        //                                                   LEFT JOIN VOUCHER_MASTER_TRANS MT
                        //                                                     ON VT.VOUCHER_ID = MT.VOUCHER_ID
                        //                                                    LEFT JOIN MASTER_NATURE MN ON MN.NATURE_ID = LG.NATURE_ID
                        //                                                  WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                        //                                                    AND MT.STATUS = 1 AND ML.STATUS=0
                        //                                                    AND VOUCHER_DATE BETWEEN ?DATE_FROM AND
                        //                                                        ?DATE_TO
                        //                                                    AND LG.GROUP_ID NOT IN (12, 13)
                        //                                                  GROUP BY VT.LEDGER_ID, VT.VOUCHER_ID
                        //         
                        //                                                 UNION ALL
                        //         
                        //                                                 SELECT LG.GROUP_ID,LG.SORT_ORDER,ML.LEDGER_ID,MN.NATURE_ID,
                        //                                                        LG.GROUP_CODE,
                        //                                                        LG.LEDGER_GROUP,
                        //                                                        ML.LEDGER_CODE,
                        //                                                        ML.LEDGER_NAME,
                        //                                                        '' AS 'OP_CREDIT',
                        //                                                        '' AS 'OP_DEBIT',
                        //                                                        CASE
                        //                                                          WHEN VT.TRANS_MODE = 'DR' THEN
                        //                                                           IFNULL(SUM(VT.AMOUNT), 0.0)
                        //                                                          ELSE
                        //                                                           '0.0'
                        //                                                        END AS 'CURRENTTRANS_DEBIT',
                        //                                                        CASE
                        //                                                          WHEN VT.TRANS_MODE = 'CR' THEN
                        //                                                           IFNULL(SUM(VT.AMOUNT), 0.0)
                        //                                                          ELSE
                        //                                                           '0.0'
                        //                                                        END AS 'CURRENTTRANS_CREDIT'
                        //                                                   FROM MASTER_LEDGER_GROUP LG
                        //                                                   LEFT JOIN MASTER_LEDGER ML
                        //                                                     ON ML.GROUP_ID = LG.GROUP_ID
                        //                                                   LEFT JOIN VOUCHER_TRANS VT
                        //                                                     ON VT.LEDGER_ID = ML.LEDGER_ID
                        //                                                   LEFT JOIN VOUCHER_MASTER_TRANS MT
                        //                                                     ON VT.VOUCHER_ID = MT.VOUCHER_ID
                        //                                                    LEFT JOIN MASTER_NATURE MN
                        //                                                    ON MN.NATURE_ID = LG.NATURE_ID
                        //                                                  WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                        //                                                    AND MT.STATUS = 1 AND ML.STATUS=0
                        //                                                    AND VOUCHER_DATE BETWEEN ?DATE_FROM AND
                        //                                                        ?DATE_TO
                        //                                                    and voucher_type in ('JN')
                        //                                                    AND LG.GROUP_ID NOT IN (12, 13)
                        //                                                  GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID, VT.TRANS_MODE
                        //         
                        //                                                 ) AS FN
                        //                                          GROUP BY FN.GROUP_ID, FN.LEDGER_ID HAVING SUM(FN.OP_DEBIT)>0 || SUM(FN.OP_CREDIT)>0 
                        //                                          || SUM(FN.CUR_DEBIT)>0|| SUM(FN.CUR_CREDIT)>0 ORDER BY FIELD(NATURE_ID,3,4,2,1)";

                        break;
                    }
                case ReportSQLCommand.FinalAccounts.TrialBalanceListVerification:
                    {
                        // in the T Receipts and Payments sub query of Opening Balance I replaced ?Year_TO from Date_From
                        // int the T Receipts and Payments sub query Voucher Date between Date_from to Begin_from Replaced into Date_From all the sub query of T 
                        query = @"SELECT FN.GROUP_ID,CASE WHEN NATURE_ID = 3 THEN 1 WHEN NATURE_ID = 4 THEN 2
                                               WHEN NATURE_ID = 2 THEN 3  WHEN NATURE_ID = 1 THEN 4 END AS SORT_ORDER,
                                               FN.LEDGER_ID,
                                               FN.NATURE_ID,
                                                FN.GROUP_CODE,
                                                FN.LEDGER_GROUP,
                                                FN.LEDGER_CODE,
                                                FN.LEDGER_NAME,
                                                SUM(FN.OP_DEBIT) AS OP_DEBIT,
                                                SUM(FN.OP_CREDIT) AS OP_CREDIT,
                                                SUM(FN.CUR_DEBIT) AS CURRENTTRANS_DEBIT1,
                                                SUM(FN.CUR_CREDIT) AS CURRENTTRANS_CREDIT1        
                                                FROM (SELECT T.GROUP_ID,T.SORT_ORDER,
                                                           T.LEDGER_ID,
                                                           T.NATURE_ID,
                                                           T.GROUP_CODE,
                                                           T.LEDGER_GROUP,
                                                           T.LEDGER_CODE,
                                                           T.LEDGER_NAME,
                                                          CASE
                                                             WHEN SUM(T.OP_DEBIT) > SUM(T.OP_CREDIT) THEN
                                                              SUM(T.OP_DEBIT) - SUM(T.OP_CREDIT)
                                                             ELSE
                                                              0.00
                                                           END AS OP_DEBIT,
                                                           CASE
                                                             WHEN SUM(T.OP_CREDIT) > SUM(T.OP_DEBIT) THEN
                                                              SUM(T.OP_CREDIT) - SUM(T.OP_DEBIT)
                                                             ELSE
                                                              0.00
                                                           END AS OP_CREDIT,
                                                           '' AS 'CUR_DEBIT',
                                                           '' As 'CUR_CREDIT'
                                                       FROM (SELECT LG.GROUP_ID,LG.SORT_ORDER, ML.LEDGER_ID,
                                                                   MN.NATURE_ID,
                                                                   LG.GROUP_CODE,
                                                                   LG.LEDGER_GROUP,
                                                                   ML.LEDGER_CODE,
                                                                   ML.LEDGER_NAME,
                                                                   SUM(CASE
                                                                         WHEN LB2.TRANS_MODE = 'DR' THEN
                                                                          LB2.AMOUNT
                                                                         ELSE
                                                                          0
                                                                       END) AS 'OP_DEBIT',
                                                                   SUM(CASE
                                                                         WHEN LB2.TRANS_MODE = 'CR' THEN
                                                                          LB2.AMOUNT
                                                                         ELSE
                                                                          0
                                                                       END) AS 'OP_CREDIT',
                                                                   '' AS 'CUR_DEBIT',
                                                                   '' As 'CUR_CREDIT'
                                                              FROM MASTER_LEDGER AS ML
                                                             INNER JOIN MASTER_LEDGER_GROUP AS LG
                                                                ON ML.GROUP_ID = LG.GROUP_ID
                                                             INNER JOIN (SELECT LB.BALANCE_DATE,
                                                                               LB.PROJECT_ID,
                                                                               LB.LEDGER_ID,
                                                                               LB.AMOUNT,
                                                                               LB.TRANS_MODE
                                                                          FROM LEDGER_BALANCE AS LB
                                                                          LEFT JOIN (SELECT LBA.PROJECT_ID,
                                                                                           LBA.LEDGER_ID,
                                                                                           MAX(LBA.BALANCE_DATE) AS BAL_DATE
                                                                                      FROM LEDGER_BALANCE LBA
                                                                                     WHERE 1 = 1
                                                                                 --    AND LBA.BALANCE_DATE <?DATE_FROM   
                                                                                       AND LBA.BALANCE_DATE <= ?YEAR_TO
                                                                                    AND LBA.TRANS_FLAG= 'OP'
                                                                                     GROUP BY LBA.PROJECT_ID,
                                                                                              LBA.LEDGER_ID) AS LB1
                                                                            ON LB.PROJECT_ID = LB1.PROJECT_ID
                                                                           AND LB.LEDGER_ID = LB1.LEDGER_ID
                                                                         WHERE LB.PROJECT_ID IN (?PROJECT_ID)
                                                                           AND LB.TRANS_FLAG = 'OP'
                                                                        AND LB.BALANCE_DATE = LB1.BAL_DATE ) LB2
                                                                ON ML.LEDGER_ID = LB2.LEDGER_ID
                                                                 LEFT JOIN MASTER_NATURE MN
                                                                 ON MN.NATURE_ID = LG.NATURE_ID
                                                             WHERE 1 = 1 AND ML.STATUS=0
                                                               AND LG.GROUP_ID NOT IN (12, 13, 14)
                                                               AND MN.NATURE_ID IN (1,2)
                                                             GROUP BY ML.LEDGER_ID
                                                            UNION ALL
                                                            SELECT LG.GROUP_ID,LG.SORT_ORDER,
                                                                   ML.LEDGER_ID,
                                                                   MN.NATURE_ID,
                                                                   LG.GROUP_CODE,
                                                                   LG.LEDGER_GROUP,
                                                                   ML.LEDGER_CODE,
                                                                   ML.LEDGER_NAME,
                                                                   CASE
                                                                     WHEN VOUCHER_TYPE IN ('PY') AND VT.TRANS_MODE = 'DR' THEN
                                                                      IFNULL(SUM(VT.AMOUNT), 0.0)
                                                                     ELSE
                                                                      '0.0'
                                                                   END AS 'OP_DEBIT',
                                                                   CASE
                                                                     WHEN VOUCHER_TYPE IN ('RC') AND VT.TRANS_MODE = 'CR' THEN
                                                                      IFNULL(SUM(VT.AMOUNT), 0.0)
                                                                     ELSE
                                                                      '0.0'
                                                                   END AS 'OP_CREDIT',
                                                                   '' AS 'CUR_DEBIT',
                                                                   '' As 'CUR_CREDIT'
                                                              FROM MASTER_LEDGER_GROUP LG

                                                              LEFT JOIN MASTER_LEDGER ML
                                                                ON ML.GROUP_ID = LG.GROUP_ID
                                                              LEFT JOIN VOUCHER_TRANS VT
                                                                ON VT.LEDGER_ID = ML.LEDGER_ID
                                                              LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                                ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                               LEFT JOIN MASTER_NATURE MN
                                                               ON MN.NATURE_ID = LG.NATURE_ID
                                                             WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                               AND MT.STATUS = 1 AND ML.STATUS=0
                                                              --   AND VOUCHER_DATE <?DATE_FROM
                                                                AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?BEGIN_FROM
                                                               AND LG.GROUP_ID NOT IN (12, 13)
                                                               AND MN.NATURE_ID IN (1,2)
                                                             GROUP BY VT.LEDGER_ID,VT.TRANS_MODE
                                                            UNION ALL
                                                            SELECT LG.GROUP_ID,LG.SORT_ORDER,
                                                                   ML.LEDGER_ID,
                                                                   MN.NATURE_ID,
                                                                   LG.GROUP_CODE,
                                                                   LG.LEDGER_GROUP,
                                                                   ML.LEDGER_CODE,
                                                                   ML.LEDGER_NAME,
                                                                        CASE
                                                                        WHEN VT.TRANS_MODE = 'DR' THEN
                                                                        IFNULL(SUM(VT.AMOUNT), 0.0)
                                                                        ELSE
                                                                       '0.0'
                                                                        END AS 'OP_DEBIT',
                                                                        CASE
                                                                        WHEN VT.TRANS_MODE = 'CR' THEN
                                                                        IFNULL(SUM(VT.AMOUNT), 0.0)
                                                                        ELSE
                                                                        '0.0'
                                                                       END AS  'OP_CREDIT',
                                                                   '' AS 'CUR_DEBIT',
                                                                   '' As 'CUR_CREDIT'
                                                              FROM MASTER_LEDGER_GROUP LG
                                                              LEFT JOIN MASTER_LEDGER ML
                                                                ON ML.GROUP_ID = LG.GROUP_ID
                                                              LEFT JOIN VOUCHER_TRANS VT
                                                                ON VT.LEDGER_ID = ML.LEDGER_ID
                                                              LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                                ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                               LEFT JOIN MASTER_NATURE MN
                                                               ON MN.NATURE_ID = LG.NATURE_ID
                                                             WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                               AND MT.STATUS = 1 AND ML.STATUS=0
                                                             --   AND VOUCHER_DATE < ?DATE_FROM 
                                                              AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?BEGIN_FROM
                                                               AND VOUCHER_TYPE IN ('JN')
                                                               AND LG.GROUP_ID NOT IN (12, 13)
                                                               AND MN.NATURE_ID IN (1,2)
                                                             GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID, VT.TRANS_MODE) AS T
                                                     GROUP BY T.LEDGER_ID
                                                UNION ALL
                                                  SELECT TT.GROUP_ID,
                                                   TT.SORT_ORDER,
                                                   TT.LEDGER_ID,
                                                   TT.NATURE_ID,
                                                   TT.GROUP_CODE,
                                                   TT.LEDGER_GROUP,
                                                   TT.LEDGER_CODE,
                                                   TT.LEDGER_NAME,
                                                   CASE
                                                     WHEN SUM(TT.OP_DEBIT) > SUM(TT.OP_CREDIT) THEN
                                                      SUM(TT.OP_DEBIT) - SUM(TT.OP_CREDIT)
                                                     ELSE
                                                      0.00
                                                   END AS OP_DEBIT,
                                                   CASE
                                                     WHEN SUM(TT.OP_CREDIT) > SUM(TT.OP_DEBIT) THEN
                                                      SUM(TT.OP_CREDIT) - SUM(TT.OP_DEBIT)
                                                     ELSE
                                                      0.00
                                                   END AS OP_CREDIT,
                                                   '' AS 'CUR_DEBIT',
                                                   '' As 'CUR_CREDIT'
                                              FROM (SELECT LG.GROUP_ID,
                                                           LG.SORT_ORDER,
                                                           ML.LEDGER_ID,
                                                           MN.NATURE_ID,
                                                           LG.GROUP_CODE,
                                                           LG.LEDGER_GROUP,
                                                           ML.LEDGER_CODE,
                                                           ML.LEDGER_NAME,
                                                           SUM(CASE
                                                                 WHEN LB2.TRANS_MODE = 'DR' THEN
                                                                  LB2.AMOUNT
                                                                 ELSE
                                                                  0
                                                               END) AS OP_DEBIT,
                                                           SUM(CASE
                                                                 WHEN LB2.TRANS_MODE = 'CR' THEN
                                                                  LB2.AMOUNT
                                                                 ELSE
                                                                  0
                                                               END) AS OP_CREDIT,
                                                           '' AS 'CUR_DEBIT',
                                                           '' As 'CUR_CREDIT'
                                                      FROM MASTER_LEDGER AS ML
                                                     INNER JOIN MASTER_LEDGER_GROUP AS LG
                                                        ON ML.GROUP_ID = LG.GROUP_ID
                                                     INNER JOIN (SELECT LB.BALANCE_DATE,
                                                                       LB.PROJECT_ID,
                                                                       LB.LEDGER_ID,
                                                                       LB.AMOUNT,
                                                                       LB.TRANS_MODE
                                                                  FROM LEDGER_BALANCE AS LB
                                                                  LEFT JOIN (SELECT LBA.PROJECT_ID,
                                                                                   LBA.LEDGER_ID,
                                                                                   MAX(LBA.BALANCE_DATE) AS BAL_DATE
                                                                              FROM LEDGER_BALANCE LBA
                                                                             WHERE 1 = 1
                                                                               AND LBA.BALANCE_DATE <?DATE_FROM
                                                                            -- '2012-03-31 00:00:00'
                                                                             GROUP BY LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB1
                                                                    ON LB.PROJECT_ID = LB1.PROJECT_ID
                                                                   AND LB.LEDGER_ID = LB1.LEDGER_ID
                                                                   AND LB.AMOUNT > 0
                                                                 WHERE LB.PROJECT_ID IN (?PROJECT_ID)
                                                                   AND LB.TRANS_FLAG = 'OP'
                                                                   AND LB.BALANCE_DATE <= LB1.BAL_DATE) LB2
                                                        ON ML.LEDGER_ID = LB2.LEDGER_ID
                                                      LEFT JOIN MASTER_NATURE MN
                                                        ON MN.NATURE_ID = LG.NATURE_ID
                                                     WHERE LG.GROUP_ID IN (SELECT LG.GROUP_ID
                                                                             FROM MASTER_LEDGER ML
                                                                            INNER JOIN PROJECT_LEDGER PL
                                                                               ON ML.LEDGER_ID = PL.LEDGER_ID
                                                                            INNER JOIN MASTER_LEDGER_GROUP LG
                                                                               ON ML.GROUP_ID = LG.GROUP_ID
                                                                            WHERE PL.PROJECT_ID IN (?PROJECT_ID)
                                                                              AND LG.NATURE_ID IN (3, 4)
                                                                              AND ML.STATUS = 0)
                                                       AND LG.GROUP_ID NOT IN (12, 13)
                                                      --  AND ML.LEDGER_ID NOT IN (3)
                                                       AND ML.STATUS = 0
                                                     GROUP BY ML.LEDGER_ID
                                                    UNION ALL
                                                    SELECT LG.GROUP_ID,
                                                           LG.SORT_ORDER,
                                                           ML.LEDGER_ID,
                                                           MN.NATURE_ID,
                                                           LG.GROUP_CODE,
                                                           LG.LEDGER_GROUP,
                                                           ML.LEDGER_CODE,
                                                           ML.LEDGER_NAME,
                                                        -- FD Investment amount is not calculated so Mismatched the FD Amount (Chinna)
                                                           CASE   
                                                             WHEN VOUCHER_TYPE IN ('PY','RC',IF(VOUCHER_SUB_TYPE ='FD','CN','')) AND VT.TRANS_MODE = 'DR' THEN
                                                              IFNULL((VT.AMOUNT), 0.0)
                                                             ELSE  
                                                              '0.0'
                                                           END AS 'OP_DEBIT',
                                                           CASE
                                                             WHEN VOUCHER_TYPE IN ('RC','PY',IF(VOUCHER_SUB_TYPE ='FD','CN','')) AND VT.TRANS_MODE = 'CR' THEN
                                                              IFNULL((VT.AMOUNT), 0.0)
                                                             ELSE
                                                              '0.0'
                                                           END AS 'OP_CREDIT',
                                                           '' AS 'CUR_DEBIT',
                                                           '' As 'CUR_CREDIT'
                                                      FROM MASTER_LEDGER_GROUP LG
        
                                                      LEFT JOIN MASTER_LEDGER ML
                                                        ON ML.GROUP_ID = LG.GROUP_ID
                                                      LEFT JOIN VOUCHER_TRANS VT
                                                        ON VT.LEDGER_ID = ML.LEDGER_ID
                                                      LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                        ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                      LEFT JOIN MASTER_NATURE MN
                                                        ON MN.NATURE_ID = LG.NATURE_ID
                                                     WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                       AND MT.STATUS = 1
                                                       AND ML.STATUS = 0
                                                       AND VOUCHER_DATE < ?DATE_FROM
                                                       AND LG.GROUP_ID NOT IN (12, 13)
                                                       AND MN.NATURE_ID IN (3, 4)
                                                    --  GROUP BY VT.LEDGER_ID,VT.TRANS_MODE  
                                                    UNION ALL
                                                    SELECT LG.GROUP_ID,
                                                           LG.SORT_ORDER,
                                                           ML.LEDGER_ID,
                                                           MN.NATURE_ID,
                                                           LG.GROUP_CODE,
                                                           LG.LEDGER_GROUP,
                                                           ML.LEDGER_CODE,
                                                           ML.LEDGER_NAME,
                                                           CASE
                                                             WHEN VT.TRANS_MODE = 'DR' THEN
                                                              IFNULL(SUM(VT.AMOUNT), 0.0)
                                                             ELSE
                                                              '0.0'
                                                           END AS 'OP_DEBIT',
                                                           CASE
                                                             WHEN VT.TRANS_MODE = 'CR' THEN
                                                              IFNULL(SUM(VT.AMOUNT), 0.0)
                                                             ELSE
                                                              '0.0'
                                                           END AS 'OP_CREDIT',
                                                           '' AS 'CUR_DEBIT',
                                                           '' As 'CUR_CREDIT'
                                                      FROM MASTER_LEDGER_GROUP LG
                                                      LEFT JOIN MASTER_LEDGER ML
                                                        ON ML.GROUP_ID = LG.GROUP_ID
                                                      LEFT JOIN VOUCHER_TRANS VT
                                                        ON VT.LEDGER_ID = ML.LEDGER_ID
                                                      LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                        ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                      LEFT JOIN MASTER_NATURE MN
                                                        ON MN.NATURE_ID = LG.NATURE_ID
                                                     WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                       AND MT.STATUS = 1
                                                       AND ML.STATUS = 0
                                                       AND VOUCHER_DATE < ?DATE_FROM
                                                       AND VOUCHER_TYPE IN ('JN')
                                                       AND LG.GROUP_ID NOT IN (12, 13)
                                                       AND MN.NATURE_ID IN (3, 4)
                                                     GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID, VT.TRANS_MODE) AS TT
                                             GROUP BY TT.LEDGER_ID
                                                UNION ALL
                                               SELECT T.GROUP_ID,T.SORT_ORDER,
                                                           T.LEDGER_ID,
                                                           T.NATURE_ID,
                                                           T.GROUP_CODE,
                                                           T.LEDGER_GROUP,
                                                           T.LEDGER_CODE,
                                                           T.LEDGER_NAME,
                                                           CASE
                                                             WHEN SUM(T.OP_DEBIT) > SUM(T.OP_CREDIT) THEN
                                                              SUM(T.OP_DEBIT) - SUM(T.OP_CREDIT)
                                                             ELSE
                                                              0.00
                                                           END AS OP_DEBIT,
                                                           CASE
                                                             WHEN SUM(T.OP_CREDIT) > SUM(T.OP_DEBIT) THEN
                                                              SUM(T.OP_CREDIT) - SUM(T.OP_DEBIT)
                                                             ELSE
                                                              0.00
                                                           END AS OP_CREDIT,
                                                           T.CUR_DEBIT,
                                                           T.CUR_CREDIT
                                                      FROM (SELECT LG.GROUP_ID,LG.SORT_ORDER,
                                                                   ML.LEDGER_ID,
                                                                   MN.NATURE_ID,
                                                                   LG.GROUP_CODE,
                                                                   LG.LEDGER_GROUP,
                                                                   ML.LEDGER_CODE,
                                                                   ML.LEDGER_NAME,
                                                                   SUM(CASE
                                                                   WHEN LB2.TRANS_MODE = 'DR' THEN
                                                                   LB2.AMOUNT +
                                                                   (SELECT IFNULL(SUM(VT.AMOUNT), 0) +
                                                                           (SELECT IFNULL(SUM(AMOUNT), 0.0) AS AMOUNT
                                                                              FROM LEDGER_BALANCE AS LB
                                                                              LEFT JOIN MASTER_LEDGER AS ML
                                                                                ON LB.LEDGER_ID = ML.LEDGER_ID
                                                                              LEFT JOIN MASTER_LEDGER_GROUP LG
                                                                                ON LG.GROUP_ID = ML.GROUP_ID
                                                                             WHERE PROJECT_ID IN (?PROJECT_ID)
                                                                               AND TRANS_FLAG = 'OP'
                                                                               AND LB.AMOUNT > 0 AND ML.STATUS=0
                                                                               AND LG.GROUP_ID NOT IN (12, 14, 13)
                                                                               AND LG.NATURE_ID IN (1,2)
                                                                               AND TRANS_MODE = 'DR'
                                                                               AND BALANCE_DATE <?YEAR_FROM) AS PAYMENTAMT
                                                                      FROM MASTER_LEDGER_GROUP LG
                                                                      LEFT JOIN MASTER_LEDGER ML
                                                                        ON ML.GROUP_ID = LG.GROUP_ID
                                                                      LEFT JOIN VOUCHER_TRANS VT
                                                                        ON VT.LEDGER_ID = ML.LEDGER_ID
                                                                      LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                                        ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                                     WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                                       AND MT.VOUCHER_TYPE = 'PY' AND ML.STATUS=0
                                                                       AND MT.STATUS = 1
                                                                       AND LG.NATURE_ID IN (1,2)
                                                                       AND VOUCHER_DATE <?YEAR_FROM
                                                                       AND LG.GROUP_ID NOT IN (12, 13)) 
                                                                       ELSE
                                                                          0
                                                                       END) AS OP_DEBIT,
                                                                   SUM(CASE
                                                                         WHEN LB2.TRANS_MODE = 'CR' THEN
                                                                          LB2.AMOUNT +
                                                                          (SELECT IFNULL(SUM(VT.AMOUNT), 0) +
                                                                                  (SELECT IFNULL(SUM(AMOUNT), 0.0) AS AMOUNT
                                                                                     FROM LEDGER_BALANCE AS LB
                                                                                     LEFT JOIN MASTER_LEDGER AS ML
                                                                                       ON LB.LEDGER_ID = ML.LEDGER_ID
                                                                                     LEFT JOIN MASTER_LEDGER_GROUP LG
                                                                                       ON LG.GROUP_ID = ML.GROUP_ID
                                                                                    WHERE PROJECT_ID IN (?PROJECT_ID)
                                                                                      AND TRANS_FLAG = 'OP'
                                                                                      AND LB.AMOUNT > 0 AND ML.STATUS=0
                                                                                      AND LG.GROUP_ID NOT IN (12, 14, 13)
                                                                                      AND LG.NATURE_ID NOT IN (1,2)
                                                                                      AND TRANS_MODE = 'CR'
                                                                                      AND BALANCE_DATE <?YEAR_FROM) AS RECEIPTAMT
                                                                             FROM MASTER_LEDGER_GROUP LG
                                                                             LEFT JOIN MASTER_LEDGER ML
                                                                               ON ML.GROUP_ID = LG.GROUP_ID
                                                                             LEFT JOIN VOUCHER_TRANS VT
                                                                               ON VT.LEDGER_ID = ML.LEDGER_ID
                                                                             LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                                               ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                                            WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                                              AND MT.VOUCHER_TYPE = 'RC' AND ML.STATUS=0
                                                                              AND MT.STATUS = 1
                                                                              AND LG.NATURE_ID NOT IN (1,2)
                                                                              AND VOUCHER_DATE <?YEAR_FROM
                                                                              AND LG.GROUP_ID NOT IN (12, 13))

                                                                         ELSE
                                                                          0
                                                                       END) AS OP_CREDIT,
                                                                   '' AS 'CUR_DEBIT',
                                                                   '' As 'CUR_CREDIT'

                                                              FROM MASTER_LEDGER AS ML
                                                             INNER JOIN MASTER_LEDGER_GROUP AS LG
                                                                ON ML.GROUP_ID = LG.GROUP_ID
                                                             INNER JOIN (SELECT LB.BALANCE_DATE,
                                                                               LB.PROJECT_ID,
                                                                               LB.LEDGER_ID,
                                                                               LB.AMOUNT,
                                                                               LB.TRANS_MODE
                                                                          FROM LEDGER_BALANCE AS LB
                                                                          LEFT JOIN (SELECT LBA.PROJECT_ID,
                                                                                           LBA.LEDGER_ID,
                                                                                           MAX(LBA.BALANCE_DATE) AS BAL_DATE
                                                                                      FROM LEDGER_BALANCE LBA
                                                                                     WHERE 1 = 1
                                                                                       AND LBA.BALANCE_DATE <
                                                                                              LBA.LEDGER_ID) AS LB1
                                                                            ON LB.PROJECT_ID = LB1.PROJECT_ID
                                                                           AND LB.LEDGER_ID = LB1.LEDGER_ID
                                                                           AND LB.AMOUNT > 0
                                                                         WHERE LB.PROJECT_ID IN (?PROJECT_ID)
                                                                           AND LB.BALANCE_DATE = LB1.BAL_DATE) LB2
                                                                ON ML.LEDGER_ID = LB2.LEDGER_ID
                                                             LEFT JOIN MASTER_NATURE MN
                                                             ON MN.NATURE_ID = LG.NATURE_ID
                                                             WHERE LG.GROUP_ID IN
                                                                   (SELECT LG.GROUP_ID
                                                                      FROM MASTER_LEDGER ML
                                                                     INNER JOIN PROJECT_LEDGER PL
                                                                        ON ML.LEDGER_ID = PL.LEDGER_ID
                                                                     INNER JOIN MASTER_LEDGER_GROUP LG
                                                                        ON ML.GROUP_ID = LG.GROUP_ID
                                                                     WHERE PL.PROJECT_ID IN (?PROJECT_ID)
                                                                       AND LG.NATURE_ID IN (3, 4) AND ML.STATUS=0)
                                                               and LG.GROUP_ID NOT IN (12, 13, 14)
                                                               AND ML.LEDGER_ID = 3
                                                             GROUP BY ML.LEDGER_ID) AS T
                                                 UNION ALL     -- added by chinna in order to have sum the CR And Dr in the One Amount....

                                                  SELECT T.GROUP_ID,
                                                           T.SORT_ORDER,
                                                           T.LEDGER_ID,
                                                           T.NATURE_ID,
                                                           T.GROUP_CODE,
                                                           T.LEDGER_GROUP,
                                                           T.LEDGER_CODE,
                                                           T.LEDGER_NAME,
                                                           T.OP_CREDIT,
                                                           T.OP_DEBIT,
                                                           SUM(T.CURRENTTRANS_DEBIT) AS CURRENTTRANS_DEBIT,
                                                           SUM(T.CURRENTTRANS_CREDIT) AS CURRENTTRANS_CREDIT
                                                      FROM (SELECT LG.GROUP_ID,
                                                                   LG.SORT_ORDER,
                                                                   ML.LEDGER_ID,
                                                                   MN.NATURE_ID,
                                                                   LG.GROUP_CODE,
                                                                   LG.LEDGER_GROUP,
                                                                   ML.LEDGER_CODE,
                                                                   ML.LEDGER_NAME,
                                                                   '' AS 'OP_CREDIT',
                                                                   '' AS 'OP_DEBIT',
                                                                   CASE
                                                                     WHEN VOUCHER_TYPE IN ('RC', 'PY') AND VT.TRANS_MODE = 'DR' THEN
                                                                      IFNULL(SUM(VT.AMOUNT), 0.0)
                                                                     ELSE
                                                                      '0.0'
                                                                   END AS 'CURRENTTRANS_DEBIT',
                                                                   CASE
                                                                     WHEN VOUCHER_TYPE IN ('RC', 'PY') AND VT.TRANS_MODE = 'CR' THEN
                                                                      IFNULL(SUM(VT.AMOUNT), 0.0)
                                                                     ELSE
                                                                      '0.0'
                                                                   END AS 'CURRENTTRANS_CREDIT'
                                                              FROM MASTER_LEDGER_GROUP LG

                                                              LEFT JOIN MASTER_LEDGER ML
                                                                ON ML.GROUP_ID = LG.GROUP_ID
                                                              LEFT JOIN VOUCHER_TRANS VT
                                                                ON VT.LEDGER_ID = ML.LEDGER_ID
                                                              LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                                ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                              LEFT JOIN MASTER_NATURE MN
                                                                ON MN.NATURE_ID = LG.NATURE_ID
                                                             WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                               AND MT.STATUS = 1
                                                               AND ML.STATUS = 0
                                                               AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO
                                                               AND LG.GROUP_ID NOT IN (12, 13)
                                                             GROUP BY VT.LEDGER_ID, VT.VOUCHER_ID, VT.TRANS_MODE) AS T
                                                     GROUP BY T.LEDGER_ID

                                                 UNION ALL
         
                                                 SELECT LG.GROUP_ID,LG.SORT_ORDER,ML.LEDGER_ID,MN.NATURE_ID,
                                                        LG.GROUP_CODE,
                                                        LG.LEDGER_GROUP,
                                                        ML.LEDGER_CODE,
                                                        ML.LEDGER_NAME,
                                                        '' AS 'OP_CREDIT',
                                                        '' AS 'OP_DEBIT',
                                                        CASE
                                                          WHEN VT.TRANS_MODE = 'DR' THEN
                                                           IFNULL(SUM(VT.AMOUNT), 0.0)
                                                          ELSE
                                                           '0.0'
                                                        END AS 'CURRENTTRANS_DEBIT',
                                                        CASE
                                                          WHEN VT.TRANS_MODE = 'CR' THEN
                                                           IFNULL(SUM(VT.AMOUNT), 0.0)
                                                          ELSE
                                                           '0.0'
                                                        END AS 'CURRENTTRANS_CREDIT'
                                                   FROM MASTER_LEDGER_GROUP LG
                                                   LEFT JOIN MASTER_LEDGER ML
                                                     ON ML.GROUP_ID = LG.GROUP_ID
                                                   LEFT JOIN VOUCHER_TRANS VT
                                                     ON VT.LEDGER_ID = ML.LEDGER_ID
                                                   LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                     ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                    LEFT JOIN MASTER_NATURE MN
                                                    ON MN.NATURE_ID = LG.NATURE_ID
                                                  WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                    AND MT.STATUS = 1 AND ML.STATUS=0
                                                    AND VOUCHER_DATE BETWEEN ?DATE_FROM AND
                                                        ?DATE_TO
                                                    and VOUCHER_TYPE IN ('JN','CN') AND VOUCHER_SUB_TYPE ='FD'
                                                    AND LG.GROUP_ID NOT IN (12, 13)
                                                  GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID, VT.TRANS_MODE

                                                UNION ALL
         
                                                 SELECT LG.GROUP_ID,LG.SORT_ORDER,ML.LEDGER_ID,MN.NATURE_ID,
                                                                                 LG.GROUP_CODE,
                                                                                 LG.LEDGER_GROUP,
                                                                                 ML.LEDGER_CODE,
                                                                                 ML.LEDGER_NAME,
                                                                                '' AS 'OP_CREDIT',
                                                                                '' AS 'OP_DEBIT',
                                                                                CASE
                                                                                  WHEN VT.TRANS_MODE = 'DR' THEN
                                                                                   IFNULL(SUM(VT.AMOUNT), 0.0)
                                                                                  ELSE
                                                                                   '0.0'
                                                                                END AS 'CURRENTTRANS_DEBIT',
                                                                                CASE
                                                                                  WHEN VT.TRANS_MODE = 'CR' THEN
                                                                                   IFNULL(SUM(VT.AMOUNT), 0.0)
                                                                                  ELSE
                                                                                   '0.0'
                                                                                END AS 'CURRENTTRANS_CREDIT'
                                                                           FROM MASTER_LEDGER_GROUP LG
                                                                           LEFT JOIN MASTER_LEDGER ML
                                                                             ON ML.GROUP_ID = LG.GROUP_ID
                                                                           LEFT JOIN VOUCHER_TRANS VT
                                                                             ON VT.LEDGER_ID = ML.LEDGER_ID
                                                                           LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                                             ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                                            LEFT JOIN MASTER_NATURE MN
                                                                            ON MN.NATURE_ID = LG.NATURE_ID
                                                                          WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                                            AND MT.STATUS = 1 AND ML.STATUS=0
                                                                             AND VOUCHER_DATE BETWEEN ?DATE_FROM AND
                                                                            ?DATE_TO
                                                                          and voucher_type in ('JN')  and voucher_sub_type not in('fd')
                                                                           AND LG.GROUP_ID NOT IN (12, 13)
                                                                          GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID, VT.TRANS_MODE) AS FN
                                                                      GROUP BY FN.GROUP_ID, FN.LEDGER_ID HAVING SUM(FN.OP_DEBIT)>0 || SUM(FN.OP_CREDIT)>0 
                                                                      || SUM(FN.CUR_DEBIT)>0|| SUM(FN.CUR_CREDIT)>0 ORDER BY FIELD(NATURE_ID,3,4,2,1)";
                        break;
                    }
                case ReportSQLCommand.FinalAccounts.GeneralateVerification:
                    {  // ?FIRST_FY_DATE_FROM = ?DATE_FROM AND -- ?FIRST_FY_DATE_FROM = ?DATE_FROM AND 
                        // @OPBal:= ((IFNULL(LB_OP.AMOUNT, 0) - IFNULL(OP_BASE.OP_AMOUNT,0)) + IFNULL(OP_BASE.AMOUNT,0)) AS OP,
                        // @OPPevBal:= ((IFNULL(LB_OP_PREV.AMOUNT, 0) - IFNULL(OP_BASE.OP_AMOUNT,0)) + IFNULL(OP_BASE.AMOUNT,0)) AS OPPRev,
                        query = @"SELECT IFNULL(GFAD.CON_LEDGER_ID,0) AS CON_LEDGER_ID, LG.GROUP_ID, ML.LEDGER_ID, MN.NATURE_ID, 
                                    LG.GROUP_CODE, GFAD.CON_LEDGER_CODE, LG.LEDGER_GROUP, ML.LEDGER_CODE, ML.LEDGER_NAME,
                                    @OPBal:= CASE WHEN OP_BASE.CON_LEDGER_CODE NOT IN ('E', 'F')
                                      THEN ((IFNULL(LB_OP.AMOUNT, 0) - IFNULL(OP_BASE.OP_AMOUNT,0)) + IFNULL(OP_BASE.AMOUNT,0))
                                      WHEN OP_BASE.CON_LEDGER_CODE IN ('E', 'F') AND ?FIRST_FY_DATE_FROM = ?DATE_FROM THEN IFNULL(OP_BASE.AMOUNT,0)
                                      ELSE 0 END AS OP,
                                    @OPPevBal:= CASE WHEN OP_BASE.CON_LEDGER_CODE NOT IN ('E', 'F')
                                      THEN ((IFNULL(LB_OP_PREV.AMOUNT, 0) - IFNULL(OP_BASE.OP_AMOUNT,0)) + IFNULL(OP_BASE.AMOUNT,0))
                                      WHEN OP_BASE.CON_LEDGER_CODE IN ('E', 'F') AND ?FIRST_FY_DATE_FROM = ?PREVIOUS_FY_DATE_FROM THEN IFNULL(OP_BASE.AMOUNT,0)
                                      ELSE 0 END AS OPPRev,

                                    CASE WHEN GFAD.LEDGER_ID IS NULL THEN IFNULL(VMT.CUR_DEBIT, 0) +
                                          CASE WHEN OP_BASE.CON_LEDGER_CODE IN ('A') THEN IF(LB_OP.AMOUNT>0, IFNULL(LB_OP.AMOUNT, 0), 0)
                                          ELSE IF(@OPBal>0, @OPBal, 0) END
                                    ELSE GFAD.DEBIT END AS DEBIT,

                                    ABS(CASE WHEN GFAD.LEDGER_ID IS NULL THEN IFNULL(VMT.CUR_CREDIT, 0) +
                                            CASE WHEN OP_BASE.CON_LEDGER_CODE IN ('A') THEN IF(LB_OP.AMOUNT<=0, (IFNULL(LB_OP.AMOUNT,0) * -1), 0)
                                            ELSE IF(@OPBal<=0, (@OPBal * -1), 0) END
                                        ELSE GFAD.CREDIT END) AS CREDIT,

                                    CASE WHEN GFAD.LEDGER_ID IS NULL THEN IFNULL(VMT.PREV_DEBIT, 0) +
                                         CASE WHEN OP_BASE.CON_LEDGER_CODE IN ('A') THEN IF(LB_OP_PREV.AMOUNT>0, IFNULL(LB_OP_PREV.AMOUNT, 0), 0)
                                         ELSE IF(@OPPevBal>0, @OPPevBal, 0) END
                                    ELSE GFAD.DEBIT_PREVIOUS END AS DEBIT_PREVIOUS,
                                    
                                    ABS(CASE WHEN GFAD.LEDGER_ID IS NULL THEN IFNULL(VMT.PREV_CREDIT, 0) +
                                          CASE WHEN OP_BASE.CON_LEDGER_CODE IN ('A') THEN IF(LB_OP_PREV.AMOUNT<=0, (IFNULL(LB_OP_PREV.AMOUNT,0) * -1), 0)
                                          ELSE IF(@OPPevBal<=0, (@OPPevBal * -1), 0) END
                                        ELSE GFAD.CREDIT_PREVIOUS END) AS CREDIT_PREVIOUS, GFAD.GN_OP_BALANCE

                                    FROM MASTER_LEDGER ML
                                    INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID
                                    INNER JOIN MASTER_NATURE MN ON MN.NATURE_ID = LG.NATURE_ID
                                    LEFT JOIN (SELECT VT.LEDGER_ID, 
                                               SUM(IF(VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND VT.TRANS_MODE = 'DR', IFNULL(VT.AMOUNT,0), 0.0)) AS CUR_DEBIT,
                                               SUM(IF(VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND VT.TRANS_MODE = 'CR', IFNULL(VT.AMOUNT,0), 0.0)) AS CUR_CREDIT,
                                               SUM(IF(VOUCHER_DATE BETWEEN ?PREVIOUS_FY_DATE_FROM AND ?PREVIOUS_FY_DATE_TO AND VT.TRANS_MODE = 'DR', IFNULL(VT.AMOUNT,0), 0.0)) AS PREV_DEBIT,
                                               SUM(IF(VOUCHER_DATE BETWEEN ?PREVIOUS_FY_DATE_FROM AND ?PREVIOUS_FY_DATE_TO AND VT.TRANS_MODE = 'CR', IFNULL(VT.AMOUNT,0), 0.0)) AS PREV_CREDIT
                                               FROM VOUCHER_TRANS VT
                                               LEFT JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                               WHERE MT.PROJECT_ID IN (?PROJECT_ID) AND MT.STATUS = 1
                                               AND VOUCHER_DATE BETWEEN ?PREVIOUS_FY_DATE_FROM AND ?DATE_TO
                                               GROUP BY VT.LEDGER_ID ) AS VMT ON VMT.LEDGER_ID = ML.LEDGER_ID

                                    LEFT JOIN (SELECT LB.LEDGER_ID, SUM(IF(LB.TRANS_MODE ='DR', IFNULL(LB.AMOUNT, 0), -IFNULL(LB.AMOUNT, 0)))  AS AMOUNT
                                               FROM LEDGER_BALANCE AS LB
                                               INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = LB.LEDGER_ID
                                               INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID
                                               INNER JOIN MASTER_NATURE MN ON MN.NATURE_ID = LG.NATURE_ID
                                               LEFT JOIN (SELECT LBA.PROJECT_ID, LBA.LEDGER_ID, MAX(LBA.BALANCE_DATE) AS BAL_DATE
                                                   FROM LEDGER_BALANCE LBA
                                                   WHERE 1 = 1 AND LBA.BALANCE_DATE <= DATE_ADD(?DATE_FROM, INTERVAL -1 DAY)
                                                   GROUP BY LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB1
                                               ON LB.PROJECT_ID = LB1.PROJECT_ID AND LB.LEDGER_ID = LB1.LEDGER_ID
                                               WHERE LB.PROJECT_ID IN (?PROJECT_ID) AND MN.NATURE_ID IN (3, 4) AND LB.BALANCE_DATE = LB1.BAL_DATE
                                               GROUP BY LB.LEDGER_ID) AS LB_OP ON LB_OP.LEDGER_ID = ML.LEDGER_ID

                                    LEFT JOIN (SELECT LB.LEDGER_ID, SUM(IF(LB.TRANS_MODE ='DR', IFNULL(LB.AMOUNT, 0), -IFNULL(LB.AMOUNT, 0)))  AS AMOUNT
                                               FROM LEDGER_BALANCE AS LB
                                               INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = LB.LEDGER_ID
                                               INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID
                                               INNER JOIN MASTER_NATURE MN ON MN.NATURE_ID = LG.NATURE_ID
                                               LEFT JOIN (SELECT LBA.PROJECT_ID, LBA.LEDGER_ID, MAX(LBA.BALANCE_DATE) AS BAL_DATE
                                                   FROM LEDGER_BALANCE LBA
                                                   WHERE 1 = 1 AND LBA.BALANCE_DATE <= DATE_ADD(?PREVIOUS_FY_DATE_FROM, INTERVAL -1 DAY)
                                                   GROUP BY LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB1
                                               ON LB.PROJECT_ID = LB1.PROJECT_ID AND LB.LEDGER_ID = LB1.LEDGER_ID
                                               WHERE LB.PROJECT_ID IN (?PROJECT_ID) AND MN.NATURE_ID IN (3, 4) AND LB.BALANCE_DATE = LB1.BAL_DATE
                                               GROUP BY LB.LEDGER_ID) AS LB_OP_PREV ON LB_OP_PREV.LEDGER_ID = ML.LEDGER_ID

                                    LEFT JOIN (SELECT ML.LEDGER_ID, IF(BCLM.LEDGER_ID IS NULL, 0, 1) AS GN_MAPPED, IFNULL(BCL.CON_LEDGER_CODE, '') AS CON_LEDGER_CODE, 
                                               IF( (BCLM.LEDGER_ID IS NULL OR BCL.CON_LEDGER_CODE IN ('A')),
                                                  SUM(IF(LB.TRANS_MODE ='DR', IFNULL(LB.AMOUNT, 0), -IFNULL(LB.AMOUNT, 0))),
                                                  SUM((IFNULL(CON_OP_AMOUNT, 0) * IF(BCLM.CON_OP_TRANS_MODE = 'DR', 1, -1)) )) AS AMOUNT,
                                                  SUM(IF(LB.TRANS_MODE ='DR', IFNULL(LB.AMOUNT, 0), -IFNULL(LB.AMOUNT, 0))) AS OP_AMOUNT
                                               FROM MASTER_LEDGER ML  
                                               LEFT JOIN LEDGER_BALANCE LB ON LB.LEDGER_ID = ML.LEDGER_ID AND LB.TRANS_FLAG = 'OP' AND LB.PROJECT_ID IN (?PROJECT_ID)
                                               LEFT JOIN BRANCH_CONGREGATION_LEDGER_MAP BCLM ON BCLM.LEDGER_ID = ML.LEDGER_ID
                                               LEFT JOIN BRANCH_CONGREGATION_LEDGER BCL ON BCL.CON_LEDGER_ID = BCLM.CON_LEDGER_ID
                                               GROUP BY ML.LEDGER_ID) AS OP_BASE ON OP_BASE.LEDGER_ID = ML.LEDGER_ID

                                    LEFT JOIN (SELECT BCLM.CON_LEDGER_ID, BCLM.LEDGER_ID, BCL.CON_LEDGER_CODE,
                                                ((IFNULL(CON_OP_AMOUNT, 0) * IF(BCLM.CON_OP_TRANS_MODE = 'DR', 1, -1)) )  AS CON_OP_AMOUNT,
                                                @PYBalance:= ((IFNULL(PRV_BALANCE,0) + ((IFNULL(CON_OP_AMOUNT, 0) * IF(BCLM.CON_OP_TRANS_MODE = 'DR', 1, -1)) ))) AS PY_BALANCE,
                                        
                                                IFNULL(BCFD.DEBIT, 0) + IF(@PYBalance>0, @PYBalance, 0) AS DEBIT,
                                                IFNULL(BCFD.CREDIT, 0) + + IF(@PYBalance<0, @PYBalance, 0) AS CREDIT,
                                                IFNULL(BCFD.DEBIT_PREVIOUS, 0) + IF(BCLM.CON_OP_TRANS_MODE = 'DR', IFNULL(CON_OP_AMOUNT, 0), 0)  AS DEBIT_PREVIOUS,
                                                IFNULL(BCFD.CREDIT_PREVIOUS, 0) + IF(BCLM.CON_OP_TRANS_MODE = 'CR', -IFNULL(CON_OP_AMOUNT, 0), 0) AS CREDIT_PREVIOUS,
                                                IF(BCLM.CON_OP_TRANS_MODE = 'DR', IFNULL(CON_OP_AMOUNT, 0), -IFNULL(CON_OP_AMOUNT, 0))  AS GN_OP_BALANCE
                                                FROM BRANCH_CONGREGATION_LEDGER_MAP BCLM
                                                INNER JOIN BRANCH_CONGREGATION_LEDGER BCL ON BCL.CON_LEDGER_ID = BCLM.CON_LEDGER_ID
                                                LEFT JOIN (SELECT CON_LEDGER_ID, LEDGER_ID,
                                                  SUM( IF( ( (?DATE_FROM BETWEEN VOUCHER_DATE_FROM AND VOUCHER_DATE_TO) OR (?DATE_TO BETWEEN VOUCHER_DATE_FROM AND VOUCHER_DATE_TO) ),  IFNULL(DEBIT, 0), 0) ) AS DEBIT,
                                                  SUM( IF( ( (?DATE_FROM BETWEEN VOUCHER_DATE_FROM AND VOUCHER_DATE_TO) OR (?DATE_TO BETWEEN VOUCHER_DATE_FROM AND VOUCHER_DATE_TO) ),  IFNULL(CREDIT, 0), 0) ) AS CREDIT,
                                                  SUM( IF( (VOUCHER_DATE_TO <= ?PREVIOUS_FY_DATE_TO),  IFNULL(DEBIT, 0), 0) ) AS DEBIT_PREVIOUS,
                                                  SUM( IF( (VOUCHER_DATE_TO <= ?PREVIOUS_FY_DATE_TO),  IFNULL(CREDIT, 0), 0) ) AS CREDIT_PREVIOUS,
                                                  (SUM( IF( (VOUCHER_DATE_TO <= ?PREVIOUS_FY_DATE_TO),  IFNULL(DEBIT, 0), 0) ) -
                                                       SUM( IF( (VOUCHER_DATE_TO <= ?PREVIOUS_FY_DATE_TO),  IFNULL(CREDIT, 0), 0) )) AS PRV_BALANCE
                                                  FROM BRANCH_CONGREGATION_FIXEDASSET_DETAILS
                                                  WHERE VOUCHER_DATE_TO <= ?YEAR_TO
                                                  GROUP BY CON_LEDGER_ID, LEDGER_ID) AS BCFD ON BCFD.CON_LEDGER_ID = BCLM.CON_LEDGER_ID AND BCFD.LEDGER_ID = BCLM.LEDGER_ID
                                                  ,(SELECT @PrevYearBalance := 0) AS PYBalance, (SELECT @OPBal := 0, @OPPevBal := 0) AS OPBal
                                                  WHERE BCL.CON_LEDGER_CODE IN ('B', 'G')) GFAD ON GFAD.LEDGER_ID = ML.LEDGER_ID;";
                        break;
                    }
                case ReportSQLCommand.FinalAccounts.ForexSplitDetails:
                    {
                        /*query = @"SELECT VM.CURRENCY_COUNTRY_ID, VM.VOUCHER_TYPE, MC.CURRENCY_NAME, IFNULL(MC.CURRENCY_SYMBOL, '') AS CURRENCY_SYMBOL, 
                                    IFNULL(CUR.EXCHANGE_RATE,1) AS AVG_EXCHANGE_RATE, IFNULL(VM.EXCHANGE_RATE,0) AS EXCHANGE_RATE,
                                    SUM(VM.CONTRIBUTION_AMOUNT) AS CONTRIBUTION_AMOUNT, SUM(VM.ACTUAL_AMOUNT) AS ACTUAL_AMOUNT,
                                    @paymentmode:= IF( (VM.VOUCHER_TYPE='PY' AND IFNULL(VM.EXCHANGE_RATE,0) <> IFNULL(CUR.EXCHANGE_RATE,1)), -1, 1) as PAYMENT_MODE,    
                                    ( (SUM(VM.ACTUAL_AMOUNT) - SUM(VM.CONTRIBUTION_AMOUNT * IFNULL(CUR.EXCHANGE_RATE,1)))
                                        * IF( (VM.VOUCHER_TYPE='PY' AND IFNULL(VM.EXCHANGE_RATE,0) <> IFNULL(CUR.EXCHANGE_RATE,1)), -1, 1) ) AS FOREX_DIFF

                                    FROM VOUCHER_MASTER_TRANS VM
                                    LEFT JOIN (SELECT MCCE.COUNTRY_ID, MCCE.APPLICABLE_FROM, MCCE.APPLICABLE_TO,
                                        IF(MCCE.EXCHANGE_RATE = 0 OR MCCE.EXCHANGE_RATE IS NULL, 1, MCCE.EXCHANGE_RATE) AS EXCHANGE_RATE
                                        FROM MASTER_COUNTRY_CURRENCY_EXCHANGE_RATE MCCE WHERE 1 = 1
                                        GROUP BY MCCE.COUNTRY_ID, MCCE.APPLICABLE_FROM, MCCE.APPLICABLE_TO) CUR ON CUR.COUNTRY_ID = VM.CURRENCY_COUNTRY_ID
                                        AND (VM.VOUCHER_DATE BETWEEN CUR.APPLICABLE_FROM AND CUR.APPLICABLE_TO)
                                    LEFT JOIN MASTER_COUNTRY MC ON MC.COUNTRY_ID = VM.CURRENCY_COUNTRY_ID
                                    WHERE VM.STATUS = 1 AND VM.PROJECT_ID IN (?PROJECT_ID) AND VM.VOUCHER_TYPE IN ('RC', 'PY') {AND VM.VOUCHER_DATE <= ?DATE_AS_ON}
                                    {AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO}    
                                    AND VM.EXCHANGE_RATE <> IFNULL(CUR.EXCHANGE_RATE,1) GROUP BY VM.VOUCHER_TYPE, VM.CURRENCY_COUNTRY_ID, VM.EXCHANGE_RATE;";*/

                        query = @"SELECT VM.CURRENCY_COUNTRY_ID, VM.VOUCHER_TYPE, MC.CURRENCY_NAME, IFNULL(MC.CURRENCY_SYMBOL, '') AS CURRENCY_SYMBOL, 
                                    IFNULL(VT.LIVE_EXCHANGE_RATE,1) AS LIVE_EXCHANGE_RATE, IFNULL(VM.EXCHANGE_RATE,0) AS EXCHANGE_RATE,
                                    SUM(VT.AMOUNT) AS CONTRIBUTION_AMOUNT, SUM(VT.ACTUAL_AMOUNT) AS ACTUAL_AMOUNT,
                                    @paymentmode:= IF( (VM.VOUCHER_TYPE='PY' AND IFNULL(VT.EXCHANGE_RATE,1) <> IFNULL(VT.LIVE_EXCHANGE_RATE,1)), -1, 1) as PAYMENT_MODE,    
                                    ( (SUM(VT.ACTUAL_AMOUNT) - SUM(VT.AMOUNT * IFNULL(VT.LIVE_EXCHANGE_RATE,1)))
                                        * IF( (VM.VOUCHER_TYPE='PY' AND IFNULL(VT.EXCHANGE_RATE,1) <> IFNULL(VT.LIVE_EXCHANGE_RATE,1)), -1, 1) ) AS FOREX_DIFF

                                    FROM VOUCHER_MASTER_TRANS VM
                                    INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VM.VOUCHER_ID
                                    INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID
                                    LEFT JOIN MASTER_COUNTRY MC ON MC.COUNTRY_ID = VM.CURRENCY_COUNTRY_ID
                                    WHERE VM.STATUS = 1 AND VM.PROJECT_ID IN (?PROJECT_ID) AND VM.VOUCHER_TYPE IN ('RC', 'PY') AND ML.GROUP_ID NOT IN (12, 13, 14)
                                    {AND VM.VOUCHER_DATE <= ?DATE_AS_ON}
                                    {AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO}    
                                    AND VT.EXCHANGE_RATE <> VT.LIVE_EXCHANGE_RATE GROUP BY VM.VOUCHER_TYPE, VM.CURRENCY_COUNTRY_ID, VT.EXCHANGE_RATE";

                        break;
                    }
                case ReportSQLCommand.FinalAccounts.GeneralateReportStatementAccounts:
                    {
                        //For Cash/Bank/FD take Credit and Debit sepately
                        //For AL ledgers, take closing balance (It means adding Opening balances)
                        //For IE ledgers, take Credit and Debit Separately, 
                        //If First, take current year opening balance as previous year opening balance  
                        query = "SELECT IFNULL(BCL.CON_NATURE_ID, 0) AS CON_NATURE_ID, IFNULL(LG.NATURE_ID, 0) AS NATURE_ID, IFNULL(ML.LEDGER_ID, 0) AS LEDGER_ID, \n" +
                                    "IFNULL(ML.GROUP_ID, 0) AS GROUP_ID, IFNULL(ML.IS_DEPRECIATION_LEDGER, 0) AS IS_DEPRECIATION_LEDGER,\n" +
                                    "IF(ML.GROUP_ID =13, 0, IF(ML.GROUP_ID =12, 1, IF(ML.GROUP_ID = 14, 2, 3)) ) AS IS_CASH_BANK_FD_ORDER,\n" +
                                    "BCL.CON_LEDGER_CODE, BCL.CON_LEDGER_NAME, ML.LEDGER_CODE, ML.LEDGER_NAME AS LEDGER_NAME,\n" +
                                    " \n" +
                                    "IF(CON_LEDGER_CODE IN ('B', 'G'), IFNULL(BCFA.DEBIT, 0), IFNULL(MT.AMOUNT_DR, 0)) AS DEBIT_CUR,\n" +
                                    "IF(CON_LEDGER_CODE IN ('B', 'G'), IFNULL(BCFA.CREDIT, 0), IFNULL(MT.AMOUNT_CR, 0)) AS CREDIT_CUR,\n" +
                                    "IF(CON_LEDGER_CODE IN ('B', 'G'), IFNULL(BCFA.DEBIT_PREVIOUS, 0), IFNULL(MT.AMOUNT_DR_PREVIOUS, 0)) AS DEBIT_PREV,\n" +
                                    "IF(CON_LEDGER_CODE IN ('B', 'G'), IFNULL(BCFA.CREDIT_PREVIOUS, 0), IFNULL(MT.AMOUNT_CR_PREVIOUS, 0)) AS CREDIT_PREV,\n" +
                                    " \n" +
                                    "CASE WHEN CON_LEDGER_CODE = 'A' THEN IFNULL(CY_LBOP.AMOUNT, 0) WHEN CON_LEDGER_CODE IN ('B', 'G') THEN IFNULL(BCFA.OP_AMOUNT, 0) ELSE\n" +
                                    " (IFNULL(CY_LBOP.AMOUNT, 0) -  IFNULL(LB.AMOUNT,0)) + (IFNULL(BCLG.CON_OP_AMOUNT, 0) * IF(BCLG.CON_OP_TRANS_MODE = 'DR', 1, -1)) END AS OP_AMOUNT,\n" +
                                    "CASE WHEN CON_LEDGER_CODE = 'A' THEN IFNULL(PY_LBOP.AMOUNT, 0) WHEN CON_LEDGER_CODE IN ('B', 'G') THEN IFNULL(BCFA.OP_AMOUNT_PREVIOUS, 0) ELSE\n" +
                                    " (IFNULL(PY_LBOP.AMOUNT, 0) -  IFNULL(LB.AMOUNT,0)) + (IFNULL(BCLG.CON_OP_AMOUNT, 0) * IF(BCLG.CON_OP_TRANS_MODE = 'DR', 1, -1)) END AS OP_AMOUNT_PREVIOUS\n" +
                                    "FROM BRANCH_CONGREGATION_LEDGER BCL\n" +
                                    "LEFT JOIN BRANCH_CONGREGATION_LEDGER_MAP BCLG ON BCLG.CON_LEDGER_ID = BCL.CON_LEDGER_ID\n" +
                                    "LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = BCLG.LEDGER_ID\n" +
                                    "LEFT JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID\n" +
                                    "LEFT JOIN (SELECT VT.LEDGER_ID,\n" +
                                    "     SUM(IF(VT.TRANS_MODE = 'CR' AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO , IFNULL(VT.AMOUNT, 0), 0)) AS AMOUNT_CR,\n" +
                                    "     SUM(IF(VT.TRANS_MODE = 'DR' AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO , IFNULL(VT.AMOUNT, 0), 0)) AS AMOUNT_DR,\n" +
                                    "     SUM(IF(VT.TRANS_MODE = 'CR' AND VM.VOUCHER_DATE BETWEEN DATE_ADD(?DATE_FROM, INTERVAL -1 YEAR) AND DATE_ADD(?DATE_TO, INTERVAL -1 YEAR), IFNULL(VT.AMOUNT, 0), 0)) AS AMOUNT_CR_PREVIOUS,\n" +
                                    "     SUM(IF(VT.TRANS_MODE = 'DR' AND VM.VOUCHER_DATE BETWEEN DATE_ADD(?DATE_FROM, INTERVAL -1 YEAR) AND DATE_ADD(?DATE_TO, INTERVAL -1 YEAR), IFNULL(VT.AMOUNT, 0), 0)) AS AMOUNT_DR_PREVIOUS\n" +
                                    "     FROM VOUCHER_MASTER_TRANS VM\n" +
                                    "     INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VM.VOUCHER_ID\n" +
                                    "     INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                    "     WHERE VM.VOUCHER_DATE BETWEEN DATE_ADD(?DATE_FROM, INTERVAL -1 YEAR) AND ?DATE_TO AND VM.PROJECT_ID IN (?PROJECT_ID) AND VM.STATUS = 1\n" +
                                    "     GROUP BY VT.LEDGER_ID ) AS MT ON MT.LEDGER_ID = BCLG.LEDGER_ID\n" +
                                    "LEFT JOIN (SELECT LB.LEDGER_ID, SUM(CASE WHEN LB.TRANS_MODE = 'DR' THEN IFNULL(LB.AMOUNT,0) ELSE - IFNULL(LB.AMOUNT,0) END) AS AMOUNT\n" +
                                    "     FROM LEDGER_BALANCE AS LB\n" +
                                    "          LEFT JOIN (SELECT LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID, MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
                                    "                FROM LEDGER_BALANCE LBA\n" +
                                    "                WHERE 1 = 1 AND LBA.BALANCE_DATE < ?DATE_FROM AND LBA.PROJECT_ID IN (?PROJECT_ID)\n" +
                                    "                GROUP BY LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB1 ON LB1.BRANCH_ID = LB.BRANCH_ID\n" +
                                    "          AND LB1.PROJECT_ID = LB.PROJECT_ID AND LB1.LEDGER_ID = LB.LEDGER_ID\n" +
                                    "     WHERE LB.BRANCH_ID IN (0) AND LB.PROJECT_ID IN (?PROJECT_ID) AND LB.BALANCE_DATE = LB1.BAL_DATE GROUP BY LB.LEDGER_ID) AS CY_LBOP\n" +
                                    "ON CY_LBOP.LEDGER_ID = ML.LEDGER_ID\n" +
                                    "LEFT JOIN (SELECT LB.LEDGER_ID, SUM(CASE WHEN LB.TRANS_MODE = 'DR' THEN IFNULL(LB.AMOUNT,0) ELSE - IFNULL(LB.AMOUNT,0) END) AS AMOUNT\n" +
                                    "          FROM LEDGER_BALANCE AS LB\n" +
                                    "             LEFT JOIN (SELECT LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID, MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
                                    "                FROM LEDGER_BALANCE LBA\n" +
                                    "                WHERE 1 = 1 AND LBA.BALANCE_DATE < IF(?DATE_FROM = ?BEGIN_FROM, ?DATE_FROM, DATE_ADD(?DATE_FROM, INTERVAL -1 YEAR)) AND LBA.PROJECT_ID IN (?PROJECT_ID)\n" +
                                    "                GROUP BY LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB1 ON LB1.BRANCH_ID = LB.BRANCH_ID\n" +
                                    "          AND LB1.PROJECT_ID = LB.PROJECT_ID AND LB1.LEDGER_ID = LB.LEDGER_ID\n" +
                                    "     WHERE LB.BRANCH_ID IN (0) AND LB.PROJECT_ID IN (?PROJECT_ID) AND LB.BALANCE_DATE = LB1.BAL_DATE GROUP BY LB.LEDGER_ID) AS PY_LBOP\n" +
                                    "ON PY_LBOP.LEDGER_ID = ML.LEDGER_ID\n" +
                                    "LEFT JOIN (SELECT BCLM.LEDGER_ID,\n" +
                                    "        SUM( IF( (BCFA.VOUCHER_DATE_FROM >= ?DATE_FROM AND BCFA.VOUCHER_DATE_TO <= ?DATE_TO),  IFNULL(BCFA.DEBIT, 0), 0) ) AS DEBIT,\n" +
                                    "        SUM( IF( (BCFA.VOUCHER_DATE_FROM >= ?DATE_FROM AND BCFA.VOUCHER_DATE_TO <= ?DATE_TO),  IFNULL(BCFA.CREDIT, 0), 0) ) AS CREDIT,\n" +
                                    "        SUM( IF( (BCFA.VOUCHER_DATE_FROM >= DATE_ADD(?DATE_FROM, INTERVAL -1 YEAR) AND BCFA.VOUCHER_DATE_TO <= DATE_ADD(?DATE_TO, INTERVAL -1 YEAR)),  IFNULL(BCFA.DEBIT, 0), 0) ) AS DEBIT_PREVIOUS,\n" +
                                    "        SUM( IF( (BCFA.VOUCHER_DATE_FROM >= DATE_ADD(?DATE_FROM, INTERVAL -1 YEAR) AND BCFA.VOUCHER_DATE_TO <= DATE_ADD(?DATE_TO, INTERVAL -1 YEAR)),  IFNULL(BCFA.CREDIT, 0), 0) ) AS CREDIT_PREVIOUS,\n" +
                                    "    \n" +
                                    "        (IFNULL(CON_OP_AMOUNT, 0) * IF(BCLM.CON_OP_TRANS_MODE = 'DR', 1, -1)) +\n" +
                                    "        (SUM( IF( (BCFA.VOUCHER_DATE_TO <= DATE_ADD(?DATE_TO, INTERVAL -1 YEAR)),  IFNULL(BCFA.DEBIT, 0), 0) ) -\n" +
                                    "         SUM( IF( (BCFA.VOUCHER_DATE_TO <= DATE_ADD(?DATE_TO, INTERVAL -1 YEAR)),  IFNULL(BCFA.CREDIT, 0), 0) )) AS OP_AMOUNT,\n" +
                                    "\n" +
                                    "        (IFNULL(CON_OP_AMOUNT, 0) * IF(BCLM.CON_OP_TRANS_MODE = 'DR', 1, -1)) +\n" +
                                    "        (SUM( IF( (BCFA.VOUCHER_DATE_TO < DATE_ADD(?DATE_FROM, INTERVAL -1 YEAR)),  IFNULL(BCFA.DEBIT, 0), 0) ) -\n" +
                                    "         SUM( IF( (BCFA.VOUCHER_DATE_TO < DATE_ADD(?DATE_FROM, INTERVAL -1 YEAR)),  IFNULL(BCFA.CREDIT, 0), 0) )) AS OP_AMOUNT_PREVIOUS\n" +
                                    "\n" +
                                    "        FROM BRANCH_CONGREGATION_LEDGER_MAP BCLM\n" +
                                    "        LEFT JOIN BRANCH_CONGREGATION_FIXEDASSET_DETAILS BCFA ON BCFA.LEDGER_ID = BCLM.LEDGER_ID AND VOUCHER_DATE_TO <= ?DATE_TO\n" +
                                    "        GROUP BY LEDGER_ID) AS BCFA \n" +
                                    "ON BCFA.LEDGER_ID =  ML.LEDGER_ID\n" +
                                    "LEFT JOIN (SELECT LB.LEDGER_ID , SUM(IF(LB.TRANS_MODE='DR', LB.AMOUNT, -LB.AMOUNT)) AS AMOUNT\n" +
                                    "  FROM LEDGER_BALANCE LB WHERE LB.TRANS_FLAG = 'OP' AND LB.PROJECT_ID IN (?PROJECT_ID) GROUP BY LEDGER_ID) AS LB ON LB.LEDGER_ID = ML.LEDGER_ID";
                        break;
                    }

                case ReportSQLCommand.FinalAccounts.TrialBalanceExcessDifference:
                    {
                        query = "SELECT CASE\n" +
                        "         WHEN SUM(IFNULL(FINAL.CREDIT, 0)) > SUM(IFNULL(FINAL.DEBIT, 0)) THEN\n" +
                        "          SUM(IFNULL(FINAL.CREDIT, 0)) - SUM(IFNULL(FINAL.DEBIT, 0))\n" +
                        "         ELSE\n" +
                        "          0.00\n" +
                        "       END AS CREDIT,\n" +
                        "       CASE\n" +
                        "         WHEN SUM(IFNULL(FINAL.DEBIT, 0)) > SUM(IFNULL(FINAL.CREDIT, 0)) THEN\n" +
                        "          SUM(IFNULL(FINAL.DEBIT, 0)) - SUM(IFNULL(FINAL.CREDIT, 0))\n" +
                        "         ELSE\n" +
                        "          0.00\n" +
                        "       END AS DEBIT\n" +
                        "  FROM (SELECT T.LEDGER_ID, T.RECEIPTAMT AS CREDIT, T.PAYMENTAMT AS DEBIT\n" +
                        "          FROM (SELECT ML.LEDGER_ID,\n" +
                        "                       LG.SORT_ORDER,\n" +
                        "                       (CASE\n" +
                        "                         WHEN SUM(CASE\n" +
                        "                                    WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                        "                                     (VT.AMOUNT)\n" +
                        "                                    ELSE\n" +
                        "                                     -(VT.AMOUNT)\n" +
                        "                                  END) < 0 THEN\n" +
                        "                          ABS(SUM(CASE\n" +
                        "                                    WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                        "                                     (VT.AMOUNT)\n" +
                        "                                    ELSE\n" +
                        "                                     -(VT.AMOUNT)\n" +
                        "                                  END))\n" +
                        "                          END) *IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1) AS RECEIPTAMT,\n" +
                        "                       (CASE\n" +
                        "                         WHEN SUM(CASE\n" +
                        "                                    WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                        "                                     (VT.AMOUNT)\n" +
                        "                                    ELSE\n" +
                        "                                     -(VT.AMOUNT)\n" +
                        "                                  END) > 0 THEN\n" +
                        "                          ABS(SUM(CASE\n" +
                        "                                    WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                        "                                     (VT.AMOUNT)\n" +
                        "                                    ELSE\n" +
                        "                                     -(VT.AMOUNT)\n" +
                        "                                  END))\n" +
                        "                       END) *IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1) AS PAYMENTAMT\n" +
                        "                  FROM MASTER_LEDGER_GROUP LG\n" +
                        "                 INNER JOIN MASTER_LEDGER_GROUP PG\n" +
                        "                    ON LG.PARENT_GROUP_ID = PG.GROUP_ID\n" +
                        "                  LEFT JOIN MASTER_LEDGER ML\n" +
                        "                    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "                  LEFT JOIN VOUCHER_TRANS VT\n" +
                        "                    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "                  LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                        "                    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "                 WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "                   AND MT.STATUS = 1 AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)\n" +
                        "                   AND VOUCHER_DATE <?DATE_FROM\n" +
                        "                   AND LG.GROUP_ID NOT IN (12, 13)\n" +
                        "                   AND LG.NATURE_ID NOT IN (3, 4)\n" +
                        "                 GROUP BY VT.LEDGER_ID) AS T\n" +
                        "         GROUP BY LEDGER_ID\n" +
                        "        UNION ALL\n" +
                        "\n" +
                        "        SELECT LEDGER_ID, CREDIT, DEBIT\n" +
                        "          FROM (SELECT ML.LEDGER_ID,\n" +
                        "                       SUM(If(TRANS_MODE = 'CR', AMOUNT, 0)) AS CREDIT,\n" +
                        "                       SUM(If(TRANS_MODE = 'DR', AMOUNT, 0)) AS DEBIT\n" +
                        "                  FROM LEDGER_BALANCE LB\n" +
                        "                 INNER JOIN MASTER_LEDGER ML\n" +
                        "                    ON ML.LEDGER_Id = LB.LEDGER_ID\n" +
                        "                 INNER JOIN MASTER_LEDGER_GROUP LG\n" +
                        "                    ON LG.GROUP_ID = ML.GROUP_ID\n" +
                        "                 Where Trans_flag = 'OP'\n" +
                        "                   AND LG.NATURE_ID IN (1, 2)\n" +
                        "                   AND PROJECT_ID IN (?PROJECT_ID)\n" +
                        "                 GROUP BY LEDGER_ID) AS T\n" +
                        "         GROUP BY LEDGER_ID) AS FINAL";



                        //query = "SELECT CASE\n" +
                        //"         WHEN SUM(IFNULL(T.RECEIPTAMT,0)) > SUM(IFNULL(T.PAYMENTAMT,0)) THEN\n" +
                        //"         SUM(IFNULL(T.RECEIPTAMT,0)) - SUM(IFNULL(T.PAYMENTAMT,0))\n" +
                        //"         ELSE\n" +
                        //"          0.00\n" +
                        //"       END AS CREDIT,\n" +
                        //"        CASE\n" +
                        //"         WHEN SUM(IFNULL(T.PAYMENTAMT,0)) > SUM(IFNULL(T.RECEIPTAMT,0)) THEN\n" +
                        //"          SUM(IFNULL(T.PAYMENTAMT,0)) - SUM(IFNULL(T.RECEIPTAMT,0))\n" +
                        //"        ELSE\n" +
                        //"          0.00\n" +
                        //"        END AS DEBIT\n" +
                        //"  FROM (SELECT ML.LEDGER_ID,\n" +
                        //"               ML.GROUP_ID,\n" +
                        //"               LG.GROUP_CODE,\n" +
                        //"               CASE\n" +
                        //"                 WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                        //"                  LG.LEDGER_GROUP\n" +
                        //"                 ELSE\n" +
                        //"                  PG.LEDGER_GROUP\n" +
                        //"               END AS PARENT_GROUP,\n" +
                        //"               IF(0 = 1 OR 0 = 1,\n" +
                        //"                  CASE\n" +
                        //"                    WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                        //"                     CONCAT(LG.LEDGER_GROUP)\n" +
                        //"                    ELSE\n" +
                        //"                     CONCAT('   ', LG.LEDGER_GROUP)\n" +
                        //"                  END,\n" +
                        //"                  LG.LEDGER_GROUP) AS LEDGER_GROUP,\n" +
                        //"\n" +
                        //"               IF(0 = 1 AND 0 = 1,\n" +
                        //"                  CASE\n" +
                        //"                    WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                        //"                     CONCAT('   ', ML.LEDGER_NAME)\n" +
                        //"                    ELSE\n" +
                        //"                     CONCAT('      ', ML.LEDGER_NAME)\n" +
                        //"                  END,\n" +
                        //"                  ML.LEDGER_NAME) AS LEDGER_NAME,\n" +
                        //"               ML.LEDGER_CODE,\n" +
                        //"               LG.SORT_ORDER,\n" +
                        //"               CASE\n" +
                        //"                 WHEN SUM(CASE\n" +
                        //"                            WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                        //"                             VT.AMOUNT\n" +
                        //"                            ELSE\n" +
                        //"                             -VT.AMOUNT\n" +
                        //"                          END) < 0 THEN\n" +
                        //"                  ABS(SUM(CASE\n" +
                        //"                            WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                        //"                             VT.AMOUNT\n" +
                        //"                            ELSE\n" +
                        //"                             -VT.AMOUNT\n" +
                        //"                          END))\n" +
                        //"               END AS RECEIPTAMT,\n" +
                        //"               CASE\n" +
                        //"                 WHEN SUM(CASE\n" +
                        //"                            WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                        //"                             VT.AMOUNT\n" +
                        //"                            ELSE\n" +
                        //"                             -VT.AMOUNT\n" +
                        //"                          END) > 0 THEN\n" +
                        //"                  ABS(SUM(CASE\n" +
                        //"                            WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                        //"                             VT.AMOUNT\n" +
                        //"                            ELSE\n" +
                        //"                             -VT.AMOUNT\n" +
                        //"                          END))\n" +
                        //"               END AS PAYMENTAMT\n" +
                        //"          FROM MASTER_LEDGER_GROUP LG\n" +
                        //"         INNER JOIN MASTER_LEDGER_GROUP PG\n" +
                        //"            ON LG.PARENT_GROUP_ID = PG.GROUP_ID\n" +
                        //"          LEFT JOIN MASTER_LEDGER ML\n" +
                        //"            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        //"          LEFT JOIN VOUCHER_TRANS VT\n" +
                        //"            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        //"          LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                        //"            ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        //"         WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //"           AND MT.STATUS = 1\n" +
                        //"           AND VOUCHER_DATE <=?DATE_FROM\n" +
                        //"           AND LG.GROUP_ID NOT IN (12, 13)\n" +
                        //"           AND LG.NATURE_ID NOT IN (3, 4)\n" +
                        //"         GROUP BY VT.LEDGER_ID) AS T\n" +
                        //" WHERE T.RECEIPTAMT > 0\n" +
                        //"    OR T.PAYMENTAMT > 0\n" +
                        //" ORDER BY SORT_ORDER";

                        break;
                    }
                case ReportSQLCommand.FinalAccounts.BalanceSheetExcessDifference:
                    {
                        query = @"SELECT SUM(AMOUNT_ACTUAL) AS IESUM
                                                            FROM (SELECT ML.LEDGER_ID,SUM( IF(TRANS_MODE = 'CR', -IFNULL(LB.AMOUNT,0), IFNULL(LB.AMOUNT,0)) ) AMOUNT_ACTUAL
                                                            FROM (SELECT LB1.LEDGER_ID, LB1.PROJECT_ID, LB1.BALANCE_DATE, LB1.AMOUNT, LB1.TRANS_MODE
                                                                FROM LEDGER_BALANCE AS LB1
                                                            LEFT JOIN (SELECT LBA.PROJECT_ID, LBA.LEDGER_ID, MAX(LBA.BALANCE_DATE) AS BAL_DATE
                                                            FROM LEDGER_BALANCE LBA
                                                            WHERE 1 = 1 AND LBA.BALANCE_DATE <=?DATE_FROM
                                                            GROUP BY LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB2
                                                            ON LB1.PROJECT_ID = LB2.PROJECT_ID AND LB1.LEDGER_ID = LB2.LEDGER_ID
                                                            WHERE LB1.PROJECT_ID IN (?PROJECT_ID) AND LB1.BALANCE_DATE = LB2.BAL_DATE) LB
                                                            INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = LB.LEDGER_ID
                                                            INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUp_ID = ML.GROUP_ID
                                                            WHERE LG.NATURE_ID IN (1,2) AND LB.PROJECT_ID IN (?PROJECT_ID)
                                                            GROUP BY ML.LEDGER_ID) AS BALANCE_IE;";
                        break;
                    }
                case ReportSQLCommand.FinalAccounts.BalanceSheetExcessDifferenceForMultiCurrency:
                    {
                        query = @"SELECT SUM(IF(VT.TRANS_MODE='CR', -VT.AMOUNT, VT.AMOUNT) *IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1) )
                                         + SUM( IF(LB.TRANS_MODE = 'CR', -IFNULL(LB.AMOUNT,0), IFNULL(LB.AMOUNT,0)) ) AS IESUM 
                                    FROM VOUCHER_TRANS VT
                                    INNER JOIN VOUCHER_MASTER_TRANS VMT ON VMT.VOUCHER_ID = VT.VOUCHER_ID AND VMT.STATUS=1 AND VMT.PROJECT_ID IN (PROJECT_ID)
                                      AND VMT.VOUCHER_DATE <=?DATE_FROM
                                    INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID
                                    INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID
                                    LEFT JOIN LEDGER_BALANCE LB ON LB.LEDGER_ID = ML.LEDGER_ID AND LB.TRANS_FLAG = 'OP'
                                    WHERE LG.NATURE_ID IN (1,2) AND VMT.PROJECT_ID IN (?PROJECT_ID);";
                        break;
                    }
                case ReportSQLCommand.FinalAccounts.BalanceSheetExcessOpeningPeriod:
                    {
                        query = "SELECT CASE\n" +
                                   "         WHEN SUM(IFNULL(FINAL.CREDIT, 0)) > SUM(IFNULL(FINAL.DEBIT, 0)) THEN\n" +
                                   "          SUM(IFNULL(FINAL.CREDIT, 0)) - SUM(IFNULL(FINAL.DEBIT, 0))\n" +
                                   "         ELSE\n" +
                                   "          0.00\n" +
                                   "       END AS CREDIT,\n" +
                                   "       CASE\n" +
                                   "         WHEN SUM(IFNULL(FINAL.DEBIT, 0)) > SUM(IFNULL(FINAL.CREDIT, 0)) THEN\n" +
                                   "          SUM(IFNULL(FINAL.DEBIT, 0)) - SUM(IFNULL(FINAL.CREDIT, 0))\n" +
                                   "         ELSE\n" +
                                   "          0.00\n" +
                                   "       END AS DEBIT\n" +
                                   "  FROM (SELECT T.LEDGER_ID, T.RECEIPTAMT AS CREDIT, T.PAYMENTAMT AS DEBIT\n" +
                                   "          FROM (SELECT ML.LEDGER_ID,\n" +
                                   "                       LG.SORT_ORDER,\n" +
                                   "                       (CASE\n" +
                                   "                         WHEN SUM(CASE\n" +
                                   "                                    WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                                   "                                     (VT.AMOUNT)\n" +
                                   "                                    ELSE\n" +
                                   "                                     -(VT.AMOUNT)\n" +
                                   "                                  END) < 0 THEN\n" +
                                   "                          ABS(SUM(CASE\n" +
                                   "                                    WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                                   "                                     (VT.AMOUNT)\n" +
                                   "                                    ELSE\n" +
                                   "                                     -(VT.AMOUNT)\n" +
                                   "                                  END))\n" +
                                   "                       END) *IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1) AS RECEIPTAMT,\n" +
                                   "                       (CASE\n" +
                                   "                         WHEN SUM(CASE\n" +
                                   "                                    WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                                   "                                     (VT.AMOUNT)\n" +
                                   "                                    ELSE\n" +
                                   "                                     -(VT.AMOUNT)\n" +
                                   "                                  END) > 0 THEN\n" +
                                   "                          ABS(SUM(CASE\n" +
                                   "                                    WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                                   "                                     (VT.AMOUNT)\n" +
                                   "                                    ELSE\n" +
                                   "                                     -(VT.AMOUNT)\n" +
                                   "                                  END))\n" +
                                   "                       END)*IF(MT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1) AS PAYMENTAMT\n" +
                                   "                  FROM MASTER_LEDGER_GROUP LG\n" +
                                   "                 INNER JOIN MASTER_LEDGER_GROUP PG\n" +
                                   "                    ON LG.PARENT_GROUP_ID = PG.GROUP_ID\n" +
                                   "                  LEFT JOIN MASTER_LEDGER ML\n" +
                                   "                    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                   "                  LEFT JOIN VOUCHER_TRANS VT\n" +
                                   "                    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                   "                  LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                                   "                    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                   "                 WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                   "                   AND MT.STATUS = 1 AND IF(?CURRENCY_COUNTRY_ID > 0, MT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)\n" +
                                   "                 {  AND VOUCHER_DATE <=?DATE_AS_ON}\n" +
                                   "                 { AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO}\n" +
                                   "                   AND LG.GROUP_ID NOT IN (12, 13)\n" +
                                   "                   AND LG.NATURE_ID NOT IN (3, 4)\n" +
                                   "                 GROUP BY VT.LEDGER_ID) AS T\n" +
                                   "         GROUP BY LEDGER_ID\n" +
                                   "        UNION ALL\n" +
                                   "\n" +
                                   "        SELECT LEDGER_ID, CREDIT, DEBIT\n" +
                                   "          FROM (SELECT ML.LEDGER_ID,\n" +
                                   "                       SUM(If(TRANS_MODE = 'CR', AMOUNT, 0)) AS CREDIT,\n" +
                                   "                       SUM(If(TRANS_MODE = 'DR', AMOUNT, 0)) AS DEBIT\n" +
                                   "                  FROM LEDGER_BALANCE LB\n" +
                                   "                 INNER JOIN MASTER_LEDGER ML\n" +
                                   "                    ON ML.LEDGER_Id = LB.LEDGER_ID\n" +
                                   "                 INNER JOIN MASTER_LEDGER_GROUP LG\n" +
                                   "                    ON LG.GROUP_ID = ML.GROUP_ID\n" +
                                   "                 Where Trans_flag = ?TRANS_MODE\n" +
                                   "                   AND LG.NATURE_ID IN (1, 2)\n" +
                                   "                   AND PROJECT_ID IN (?PROJECT_ID)\n" +
                                   "                 GROUP BY LEDGER_ID) AS T\n" +
                                   "         GROUP BY LEDGER_ID) AS FINAL";
                        break;
                    }
                #endregion

                #region CurrentFinancialYear
                case ReportSQLCommand.FinalAccounts.IsFirstFinancialYear:
                    {
                        query = @"SELECT COUNT(*) AS COUNT FROM ACCOUNTING_YEAR WHERE
                        IS_FIRST_ACCOUNTING_YEAR AND ?DATE_FROM <= BOOKS_BEGINNING_FROM ";

                        // CHINNA ON 04.07.2018 AT 10 30 
                        //query = @"SELECT COUNT(*) AS COUNT FROM ACCOUNTING_YEAR WHERE
                        //IS_FIRST_ACCOUNTING_YEAR AND ?DATE_FROM <= YEAR_TO ";

                        //     query = @"SELECT count(*) AS COUNT FROM ACCOUNTING_YEAR WHERE IS_FIRST_ACCOUNTING_YEAR AND YEAR_FROM>=?DATE_FROM AND
                        //      YEAR_TO<=?DATE_TO;";
                        break;
                    }

                case ReportSQLCommand.FinalAccounts.IsNatures:
                    {
                        query = "SELECT NATURE_ID FROM MASTER_LEDGER ML INNER JOIN MASTER_LEDGER_GROUP MLG\n" +
                          " ON MLG.GROUP_ID = ML.GROUP_ID WHERE ML.LEDGER_ID IN (?LEDGER_ID);";
                        break;
                    }
                //                case ReportSQLCommand.FinalAccounts.IsAccountingYearFrom:
                //                    {
                //                        query = @"SELECT YEAR_FROM FROM ACCOUNTING_YEAR WHERE YEAR_FROM<=?DATE_FROM AND
                //                                YEAR_TO>=?DATE_TO;";
                //                        break;
                //                    }
                #endregion

                #region BalanceSheet
                case ReportSQLCommand.FinalAccounts.BalanceSheet:
                    {
                        query = "SELECT\n" +
                         "ML.LEDGER_ID,ML.GROUP_ID, IF(?SHOW_GENERALATE IN (0,1), LG.GROUP_CODE, CL.CON_LEDGER_CODE) AS GROUP_CODE,\n" +
                         " -- IF(?SHOW_GENERALATE IN (0,1),'',CL1.CON_LEDGER_CODE) AS PARENT_CODE,\n" +
                         " CASE\n" +
                         "         WHEN PG.GROUP_ID IN (1,2,3,4) THEN\n" +
                         "          IF(?SHOW_GENERALATE IN (0,1), LG.GROUP_CODE,CL1.CON_LEDGER_CODE)\n" +
                         "          ELSE\n" +
                         "            IF(?SHOW_GENERALATE IN (0,1), PG.GROUP_CODE,CL1.CON_LEDGER_CODE) END PARENT_CODE,\n" +
                         " IF(?SHOW_GENERALATE IN (0,1),  '',LEFT(IFNULL(CL1.CON_LEDGER_CODE,'999'),3)) AS PARENT_CODE1,LG.SORT_ORDER,\n" +
                        "CASE\n" +
                        "  WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                        "  IF(?SHOW_GENERALATE IN (0,1), LG.LEDGER_GROUP, IFNULL(CL1.CON_LEDGER_NAME, '-- UnMapped --')) \n" +
                        "  ELSE\n" +
                        "  IF(?SHOW_GENERALATE IN (0,1), PG.LEDGER_GROUP, IFNULL(CL1.CON_LEDGER_NAME, '-- UnMapped --')) \n" +
                        "END AS PARENT_GROUP,\n" +
                        "IF(?SHOWGROUPCODE = 1 OR ?SHOWLEDGERCODE = 1,\n" +
                        "   CASE\n" +
                        "    WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                        "  IF(?SHOW_GENERALATE IN (0,1), CONCAT(LG.LEDGER_GROUP), IFNULL(CONCAT(CL.CON_LEDGER_NAME),'-- UnMapped --'))   \n" +
                        "    ELSE\n" +
                        "    IF(?SHOW_GENERALATE IN (0,1), CONCAT('   ',LG.LEDGER_GROUP), CONCAT('   ',IFNULL(CL.CON_LEDGER_NAME, '-- UnMapped --')))  \n" +
                        "   END,IF(?SHOW_GENERALATE IN (0,1), LG.LEDGER_GROUP, CL.CON_LEDGER_NAME)) AS LEDGER_GROUP,\n" +
                        "IF(?SHOWGROUPCODE = 1 AND ?SHOWLEDGERCODE = 1,\n" +
                        "   CASE\n" +
                        "     WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                        "       CONCAT('   ', ML.LEDGER_NAME)\n" +
                        "    ELSE\n" +
                        "       CONCAT('      ', ML.LEDGER_NAME)\n" +
                        "    END,ML.LEDGER_NAME) AS LEDGER_NAME, IF(?SHOW_GENERALATE IN (0,1),ML.LEDGER_CODE,CL.CON_LEDGER_CODE) AS LEDGER_CODE,\n" +
                        "SUM( IF(TRANS_MODE = 'CR', -IFNULL(LB.AMOUNT,0), IFNULL(LB.AMOUNT,0)) ) AMOUNT_ACTUAL\n" +
                        "FROM (\n" +
                         "SELECT LB1.BALANCE_DATE, LB1.PROJECT_ID, LB1.LEDGER_ID, LB1.AMOUNT, LB1.TRANS_MODE\n" +
                            "FROM LEDGER_BALANCE AS LB1\n" +
                            "LEFT JOIN (SELECT LBA.PROJECT_ID, LBA.LEDGER_ID, MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
                                       "FROM LEDGER_BALANCE LBA\n" +
                                       "WHERE 1 = 1 AND LBA.BALANCE_DATE <= ?DATE_AS_ON\n" +
                                        "GROUP BY LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB2\n" +
                            "ON LB1.PROJECT_ID = LB2.PROJECT_ID AND LB1.LEDGER_ID = LB2.LEDGER_ID\n" +
                            "WHERE LB1.PROJECT_ID IN (?PROJECT_ID) AND LB1.BALANCE_DATE = LB2.BAL_DATE) LB\n" +
                        "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = LB.LEDGER_ID\n" +
                        "INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUp_ID = ML.GROUP_ID\n" +
                        "INNER JOIN MASTER_LEDGER_GROUP PG ON  PG.GROUP_ID = LG.PARENT_GROUP_ID\n" +
                        "LEFT JOIN PORTAL_CONGREGATION_LEDGER_MAP CLM ON ML.LEDGER_ID = CLM.LEDGER_ID\n" +
                        "LEFT JOIN PORTAL_CONGREGATION_LEDGER AS CL ON CL.CON_LEDGER_ID = CLM.CON_LEDGER_ID\n" +
                        "LEFT JOIN PORTAL_CONGREGATION_LEDGER AS CL1 ON CL1.CON_LEDGER_ID = CL.CON_PARENT_LEDGER_ID\n" +
                        "WHERE ML.GROUP_ID NOT IN (12,13,14) AND LG.NATURE_ID IN (3,4) AND LB.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "GROUP BY LEDGER_ID ORDER BY LG.SORT_ORDER;";

                        //query = "SELECT\n" +
                        // "ML.LEDGER_ID,ML.GROUP_ID, LG.GROUP_CODE,LG.SORT_ORDER,\n" +
                        //"CASE\n" +
                        //"  WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                        //"   LG.LEDGER_GROUP\n" +
                        //"  ELSE\n" +
                        //"    PG.LEDGER_GROUP\n" +
                        //"END AS PARENT_GROUP,\n" +
                        //"IF(?SHOWGROUPCODE = 1 OR ?SHOWLEDGERCODE = 1,\n" +
                        //"   CASE\n" +
                        //"    WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                        //"     CONCAT(LG.LEDGER_GROUP)\n" +
                        //"    ELSE\n" +
                        //"     CONCAT('   ',LG.LEDGER_GROUP)\n" +
                        //"   END,LG.LEDGER_GROUP) AS LEDGER_GROUP,\n" +
                        //"IF(?SHOWGROUPCODE = 1 AND ?SHOWLEDGERCODE = 1,\n" +
                        //"   CASE\n" +
                        //"     WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                        //"       CONCAT('   ', ML.LEDGER_NAME)\n" +
                        //"    ELSE\n" +
                        //"       CONCAT('      ', ML.LEDGER_NAME)\n" +
                        //"    END,ML.LEDGER_NAME) AS LEDGER_NAME, ML.LEDGER_CODE,\n" +
                        //"SUM( IF(TRANS_MODE = 'CR', -IFNULL(LB.AMOUNT,0), IFNULL(LB.AMOUNT,0)) ) AMOUNT_ACTUAL\n" +
                        //"FROM (\n" +
                        // "SELECT LB1.BALANCE_DATE, LB1.PROJECT_ID, LB1.LEDGER_ID, LB1.AMOUNT, LB1.TRANS_MODE\n" +
                        //    "FROM LEDGER_BALANCE AS LB1\n" +
                        //    "LEFT JOIN (SELECT LBA.PROJECT_ID, LBA.LEDGER_ID, MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
                        //               "FROM LEDGER_BALANCE LBA\n" +
                        //               "WHERE 1 = 1 AND LBA.BALANCE_DATE <= ?DATE_AS_ON\n" +
                        //                "GROUP BY LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB2\n" +
                        //    "ON LB1.PROJECT_ID = LB2.PROJECT_ID AND LB1.LEDGER_ID = LB2.LEDGER_ID\n" +
                        //    "WHERE LB1.PROJECT_ID IN (?PROJECT_ID) AND LB1.BALANCE_DATE = LB2.BAL_DATE) LB\n" +
                        //"INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = LB.LEDGER_ID\n" +
                        //"INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUp_ID = ML.GROUP_ID\n" +
                        //"INNER JOIN MASTER_LEDGER_GROUP PG ON  PG.GROUP_ID = LG.PARENT_GROUP_ID\n" +
                        //"WHERE ML.GROUP_ID NOT IN (12,13,14) AND LG.NATURE_ID IN (3,4) AND LB.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //"GROUP BY LEDGER_ID ORDER BY LG.SORT_ORDER;";
                        break;
                    }

                case ReportSQLCommand.FinalAccounts.BalanceSheetOpeningAmt:
                    {
                        query = "SELECT SUM( IF(LB.TRANS_MODE ='DR', AMOUNT, -AMOUNT )) OP_DIFFERENCE\n" +
                               "FROM (SELECT IF(ML.GROUP_ID IN (12, 13, 14) AND ?CURRENCY_COUNTRY_ID>0, LB1.AMOUNT_FC, LB1.AMOUNT) AS AMOUNT,\n" +
                               "    IF(ML.GROUP_ID IN (12, 13, 14) AND ?CURRENCY_COUNTRY_ID>0, LB1.TRANS_FC_MODE, LB1.TRANS_MODE) AS TRANS_MODE\n" +
                               "    FROM LEDGER_BALANCE LB1 INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = LB1.LEDGER_ID\n" +
                               "    WHERE LB1.TRANS_FLAG = 'OP' AND LB1.PROJECT_ID IN (?PROJECT_ID) AND \n" +
                               "    IF(?CURRENCY_COUNTRY_ID>0 AND ML.CUR_COUNTRY_ID > 0, ML.CUR_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1) \n" +
                               "    ) LB";
                        break;
                    }

                #endregion

                #region Balanceschedules
                case ReportSQLCommand.FinalAccounts.BalanceSheetGroups:
                    {
                        query = @"SELECT F.GROUP_ID,
                                    F.LEDGER_ID,
                                    F.GROUP_CODE,
                                    F.LEDGER_GROUP,
                                    F.LEDGER_CODE,
                                    F.LEDGER_NAME,
                                    SUM(F.OP_TOTAL) AS OP_TOTAL,
                                    SUM(F.POP_TOTAL) AS POP_TOTAL
                               FROM (SELECT F2.GROUP_ID,
                                            F2.LEDGER_ID,
                                            F2.GROUP_CODE,
                                            F2.LEDGER_GROUP,
                                            F2.LEDGER_CODE,
                                            F2.LEDGER_NAME,
                                            SUM(F2.OP_TOTAL) AS OP_TOTAL,
                                            SUM(F2.POP_TOTAL) AS POP_TOTAL
                                       FROM (SELECT T1.GROUP_ID,
                                                    T1.LEDGER_ID,
                                                    T1.GROUP_CODE,
                                                    T1.LEDGER_GROUP,
                                                    T1.LEDGER_CODE,
                                                    T1.LEDGER_NAME,
                                                    CASE
                                                      WHEN SUM(T1.OP_DEBIT) > SUM(T1.OP_CREDIT) THEN
                                                       SUM(T1.OP_DEBIT) - SUM(T1.OP_CREDIT)
                                                      ELSE
                                                       0.00
                                                    END AS OP_DEBIT,
                                                    CASE
                                                      WHEN SUM(T1.OP_CREDIT) > SUM(T1.OP_DEBIT) THEN
                                                       SUM(T1.OP_CREDIT) - SUM(T1.OP_DEBIT)
                                                      ELSE
                                                       0.00
                                                    END AS OP_CREDIT,
                                                    '' AS 'POP_DEBIT',
                                                    '' AS 'POP_CREDIT',
                                                    ((CASE
                                                      WHEN SUM(T1.OP_DEBIT) > SUM(T1.OP_CREDIT) THEN
                                                       SUM(T1.OP_DEBIT) - SUM(T1.OP_CREDIT)
                                                      ELSE
                                                       0.00
                                                    END) + (CASE
                                                      WHEN SUM(T1.OP_CREDIT) > SUM(T1.OP_DEBIT) THEN
                                                       SUM(T1.OP_DEBIT) - SUM(T1.OP_CREDIT)
                                                      ELSE
                                                       0.00
                                                    END)) AS OP_TOTAL,
                                                    '' AS 'POP_TOTAL'
                                               FROM (SELECT ML.GROUP_ID,
                                                            LG.GROUP_CODE,
                                                            'Current Assets' AS LEDGER_GROUP,
                                                            ML.LEDGER_ID,
                                                            ML.LEDGER_CODE,
                                                            ML.LEDGER_NAME,
                                                            SUM(CASE
                                                                  WHEN LB2.TRANS_MODE = 'DR' THEN
                                                                   LB2.AMOUNT
                                                                  ELSE
                                                                   0
                                                                END) AS OP_DEBIT,
                                                            SUM(CASE
                                                                  WHEN LB2.TRANS_MODE = 'CR' THEN
                                                                   LB2.AMOUNT
                                                                  ELSE
                                                                   0
                                                                END) AS OP_CREDIT,
                                                            '' AS 'POP_DEBIT',
                                                            '' AS 'POP_CREDIT',
                                                            '' AS 'OP_TOTAL',
                                                            '' AS 'POP_TOTAL'
                                                       FROM MASTER_LEDGER AS ML
                                                      INNER JOIN MASTER_LEDGER_GROUP AS LG
                                                         ON ML.GROUP_ID = LG.GROUP_ID
                                                      INNER JOIN (SELECT LB.BALANCE_DATE,
                                                                        LB.PROJECT_ID,
                                                                        LB.LEDGER_ID,
                                                                        LB.AMOUNT,
                                                                        LB.TRANS_MODE
                                                                   FROM LEDGER_BALANCE AS LB
                                                                   LEFT JOIN (SELECT LBA.PROJECT_ID,
                                                                                    LBA.LEDGER_ID,
                                                                                    MAX(LBA.BALANCE_DATE) AS BAL_DATE
                                                                               FROM LEDGER_BALANCE LBA
                                                                              WHERE 1 = 1
                                                                                AND LBA.BALANCE_DATE <=
                                                                                    ?DATE_AS_ON  -- Data As On
                                                                              GROUP BY LBA.PROJECT_ID,
                                                                                       LBA.LEDGER_ID) AS LB1
                                                                     ON LB.PROJECT_ID = LB1.PROJECT_ID
                                                                    AND LB.LEDGER_ID = LB1.LEDGER_ID
                                                                  WHERE LB.PROJECT_ID IN (?PROJECT_ID)
                                                                    AND LB.BALANCE_DATE = LB1.BAL_DATE) LB2
                                                         ON ML.LEDGER_ID = LB2.LEDGER_ID
                                                      WHERE 1 = 1
                                                        AND LG.GROUP_ID IN (11)
                                                      GROUP BY LG.GROUP_ID
                                                     UNION ALL
                                                     SELECT ML.GROUP_ID,
                                                            LG.GROUP_CODE,
                                                            'Current Assets' AS LEDGER_GROUP,
                                                            ML.LEDGER_ID,
                                                            ML.LEDGER_CODE,
                                                           CASE
                                                              WHEN ML.GROUP_ID =13 THEN
                                                              'Cash on Hand'
                                                              WHEN ML.GROUP_ID =12 THEN
                                                              'Cash at Bank'
                                                              WHEN ML.GROUP_ID =14 THEN
                                                              'Fixed Deposits'
                                                                        END AS LEDGER_NAME,
                                                            -- ML.LEDGER_NAME,
                                                            SUM(CASE
                                                                  WHEN LB2.TRANS_MODE = 'DR' THEN
                                                                   LB2.AMOUNT
                                                                  ELSE
                                                                   0
                                                                END) AS OP_DEBIT,
                                                            SUM(CASE
                                                                  WHEN LB2.TRANS_MODE = 'CR' THEN
                                                                   LB2.AMOUNT
                                                                  ELSE
                                                                   0
                                                                END) AS OP_CREDIT,
                                                            '' AS 'POP_DEBIT',
                                                            '' AS 'POP_CREDIT',
                                                            '' AS 'OP_TOTAL',
                                                            '' AS 'POP_TOTAL'
                                                       FROM MASTER_LEDGER AS ML
                                                      INNER JOIN MASTER_LEDGER_GROUP AS LG
                                                         ON ML.GROUP_ID = LG.GROUP_ID
                                                      INNER JOIN (SELECT LB.BALANCE_DATE,
                                                                         LB.PROJECT_ID,
                                                                         LB.LEDGER_ID,
                                                                         LB.AMOUNT,
                                                                         LB.TRANS_MODE
                                                                    FROM LEDGER_BALANCE AS LB
                                                                    LEFT JOIN (SELECT LBA.PROJECT_ID,
                                                                                     LBA.LEDGER_ID,
                                                                                     MAX(LBA.BALANCE_DATE) AS BAL_DATE
                                                                                FROM LEDGER_BALANCE LBA
                                                                               WHERE 1 = 1
                                                                                 AND LBA.BALANCE_DATE <=
                                                                                     ?DATE_AS_ON -- Data As On
                                                                               GROUP BY LBA.PROJECT_ID,
                                                                                        LBA.LEDGER_ID) AS LB1
                                                                      ON LB.PROJECT_ID = LB1.PROJECT_ID
                                                                     AND LB.LEDGER_ID = LB1.LEDGER_ID
                                                                   WHERE LB.PROJECT_ID IN (?PROJECT_ID)
                                                                     AND LB.BALANCE_DATE = LB1.BAL_DATE) LB2
                                                         ON ML.LEDGER_ID = LB2.LEDGER_ID
                                                      WHERE 1 = 1
                                                        AND LG.GROUP_ID IN (12, 13, 14)
                                                      GROUP BY LG.GROUP_ID  ) AS T1
                                              WHERE T1.OP_DEBIT > 0 || T1.OP_CREDIT > 0
                                              GROUP BY T1.LEDGER_ID,T1.GROUP_ID
                                             UNION ALL
                                             SELECT T2.GROUP_ID,
                                                    T2.LEDGER_ID,
                                                    T2.GROUP_CODE,
                                                    T2.LEDGER_GROUP,
                                                    T2.LEDGER_CODE,
                                                    T2.LEDGER_NAME,
                                                    0 AS 'OP_DEBIT',
                                                    0 AS 'OP_CREDIT',
                                                    CASE
                                                      WHEN SUM(T2.POP_DEBIT) > SUM(T2.POP_CREDIT) THEN
                                                       SUM(T2.POP_DEBIT) - SUM(T2.POP_CREDIT)
                                                      ELSE
                                                       0.00
                                                    END AS POP_DEBIT,
                                                    CASE
                                                      WHEN SUM(T2.POP_CREDIT) > SUM(T2.POP_DEBIT) THEN
                                                       SUM(T2.POP_CREDIT) - SUM(T2.POP_DEBIT)
                                                      ELSE
                                                       0.00
                                                    END AS POP_CREDIT,
                                                    '' AS 'OP_TOTAL',
                                                    ((CASE
                                                      WHEN SUM(T2.POP_DEBIT) > SUM(T2.POP_CREDIT) THEN
                                                       (SUM(T2.POP_DEBIT) - SUM(T2.POP_CREDIT))
                                                      ELSE
                                                       0.00
                                                    END) + CASE
                                                      WHEN SUM(T2.POP_CREDIT) > SUM(T2.POP_DEBIT) THEN
                                                       SUM(T2.POP_DEBIT) - SUM(T2.POP_CREDIT)
                                                      ELSE
                                                       0.00
                                                    END) AS POP_TOTAL
                                               FROM (SELECT ML.GROUP_ID,
                                                            ML.LEDGER_ID,
                                                            LG.GROUP_CODE,
                                                            'Current Assets' AS LEDGER_GROUP,
                                                            ML.LEDGER_CODE,
                                                            CASE
                                                              WHEN ML.GROUP_ID =13 THEN
                                                              'Cash on Hand'
                                                              WHEN ML.GROUP_ID =12 THEN
                                                              'Cash at Bank'
                                                              WHEN ML.GROUP_ID =14 THEN
                                                              'Fixed Deposits'
                                                                            END AS LEDGER_NAME,
                                                            -- ML.LEDGER_NAME,
                                                            0 AS 'OP_DEBIT',
                                                            0 AS 'OP_CREDIT',
                                                            SUM(CASE
                                                                  WHEN LB.TRANS_MODE = 'DR' THEN
                                                                   LB.AMOUNT
                                                                  ELSE
                                                                   0
                                                                END) AS 'POP_DEBIT',
                                                            SUM(CASE
                                                                  WHEN LB.TRANS_MODE = 'CR' THEN
                                                                   LB.AMOUNT
                                                                  ELSE
                                                                   0
                                                                END) AS 'POP_CREDIT',
                                                            '' AS 'OP_TOTAL',
                                                            '' AS 'POP_TOTAL'
                                                       FROM LEDGER_BALANCE AS LB
                                                       LEFT JOIN MASTER_LEDGER AS ML
                                                         ON LB.LEDGER_ID = ML.LEDGER_ID
                                                       LEFT JOIN MASTER_LEDGER_GROUP LG
                                                         ON LG.GROUP_ID = ML.GROUP_ID
                                                      WHERE PROJECT_ID IN (?PROJECT_ID)
                                                        AND TRANS_FLAG = 'OP'
                                                        AND LB.AMOUNT > 0
                                                        AND LG.GROUP_ID IN (11, 12, 13, 14)
                                                        AND BALANCE_DATE < ?DATE_AS_ON -- Data As On
                                                      GROUP BY LG.GROUP_ID
                                                     UNION ALL
                                                     SELECT ML.GROUP_ID,
                                                            ML.LEDGER_ID,
                                                            LG.GROUP_CODE,
                                                            'Current Assets' AS LEDGER_GROUP,
                                                            ML.LEDGER_CODE,
                                                            CASE
                                                              WHEN ML.GROUP_ID =13 THEN
                                                              'Cash on Hand'
                                                              WHEN ML.GROUP_ID =12 THEN
                                                              'Cash at Bank'
                                                              WHEN ML.GROUP_ID =14 THEN
                                                              'Fixed Deposits'
                                                                       END AS LEDGER_NAME,
                                                            -- ML.LEDGER_NAME,
                                                            '' AS 'OP_DEBIT',
                                                            '' AS 'OP_CREDIT',
                                                            CASE
                                                              WHEN VOUCHER_TYPE IN ('RC') AND
                                                                   VT.TRANS_MODE = 'DR' THEN
                                                               IFNULL(SUM(VT.AMOUNT), 0.0)
                                                              ELSE
                                                               '0.0'
                                                            END AS 'POP_DEBIT',
                                                            CASE
                                                              WHEN VOUCHER_TYPE IN ('PY') AND
                                                                   VT.TRANS_MODE = 'CR' THEN
                                                               IFNULL(SUM(VT.AMOUNT), 0.0)
                                                              ELSE
                                                               '0'
                                                            END AS 'POP_CREDIT',
                                                            '' AS 'OP_TOTAL',
                                                            '' AS 'POP_TOTAL'
                                                       FROM MASTER_LEDGER_GROUP LG
                         
                                                       LEFT JOIN MASTER_LEDGER ML
                                                         ON ML.GROUP_ID = LG.GROUP_ID
                                                       LEFT JOIN VOUCHER_TRANS VT
                                                         ON VT.LEDGER_ID = ML.LEDGER_ID
                                                       LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                         ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                      WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                        AND MT.STATUS = 1
                                                        AND LG.GROUP_ID IN (12, 13, 14)
                                                        AND VOUCHER_DATE < ?YEAR_FROM -- yearfrom
                                                      GROUP BY VT.LEDGER_ID, VT.VOUCHER_ID
                                                     UNION ALL
                                                     SELECT ML.GROUP_ID,
                                                            ML.LEDGER_ID,
                                                            LG.GROUP_CODE,
                                                            'Current Assets' AS LEDGER_GROUP,
                                                            ML.LEDGER_CODE,
                                                            ML.LEDGER_NAME,
                                                            '' AS 'OP_DEBIT',
                                                            '' AS 'OP_CREDIT',
                                                            CASE
                                                              WHEN VOUCHER_TYPE IN ('PY') AND
                                                                   VT.TRANS_MODE = 'DR' THEN
                                                               IFNULL(SUM(VT.AMOUNT), 0.0)
                                                              ELSE
                                                               '0.0'
                                                            END AS 'POP_DEBIT',
                                                            CASE
                                                              WHEN VOUCHER_TYPE IN ('RC') AND
                                                                   VT.TRANS_MODE = 'CR' THEN
                                                               IFNULL(SUM(VT.AMOUNT), 0.0)
                                                              ELSE
                                                               '0'
                                                            END AS 'POP_CREDIT',
                                                            '' AS 'OP_TOTAL',
                                                            '' AS 'POP_TOTAL'
                                                       FROM MASTER_LEDGER_GROUP LG
                         
                                                       LEFT JOIN MASTER_LEDGER ML
                                                         ON ML.GROUP_ID = LG.GROUP_ID
                                                       LEFT JOIN VOUCHER_TRANS VT
                                                         ON VT.LEDGER_ID = ML.LEDGER_ID
                                                       LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                         ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                      WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                        AND MT.STATUS = 1
                                                        AND LG.GROUP_ID IN (11)
                                                        AND VOUCHER_DATE <?YEAR_FROM -- yearfrom
                                                      GROUP BY VT.LEDGER_ID
                                                     UNION ALL
                                                     SELECT ML.GROUP_ID,
                                                            ML.LEDGER_ID,
                                                            LG.GROUP_CODE,
                                                            'Current Assets' AS LEDGER_GROUP,
                                                            ML.LEDGER_CODE,
                                                            ML.LEDGER_NAME,
                                                            '' AS 'OP_DEBIT',
                                                            '' AS 'OP_CREDIT',
                                                            CASE
                                                              WHEN VOUCHER_TYPE IN ('JN') AND
                                                                   VT.TRANS_MODE = 'DR' THEN
                                                               IFNULL(SUM(VT.AMOUNT), 0.0)
                                                              ELSE
                                                               '0.0'
                                                            END AS 'POP_DEBIT',
                                                            CASE
                                                              WHEN VOUCHER_TYPE IN ('JN') AND
                                                                   VT.TRANS_MODE = 'CR' THEN
                                                               IFNULL(SUM(VT.AMOUNT), 0.0)
                                                              ELSE
                                                               '0.0'
                                                            END AS 'POP_CREDIT',
                                                            '' AS 'OP_TOTAL',
                                                            '' AS 'POP_TOTAL'
                                                       FROM MASTER_LEDGER_GROUP LG
                                                       LEFT JOIN MASTER_LEDGER ML
                                                         ON ML.GROUP_ID = LG.GROUP_ID
                                                       LEFT JOIN VOUCHER_TRANS VT
                                                         ON VT.LEDGER_ID = ML.LEDGER_ID
                                                       LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                         ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                      WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                        AND MT.STATUS = 1
                                                        AND LG.GROUP_ID IN (11)
                                                        AND VOUCHER_DATE < ?YEAR_FROM -- yearfrom
                                                        AND VOUCHER_TYPE IN ('JN')
                                                      GROUP BY VT.LEDGER_ID) AS T2
                                              WHERE (T2.POP_DEBIT > 0 || T2.POP_CREDIT > 0)
                                              GROUP BY T2.LEDGER_ID,T2.GROUP_ID) AS F2
                                      WHERE F2.OP_DEBIT > 0 || F2.OP_CREDIT > 0 || F2.POP_DEBIT >
                                            0 || F2.POP_CREDIT > 0
                                      GROUP BY F2.LEDGER_ID, F2.GROUP_ID
                                     UNION ALL
                                          SELECT F1.GROUP_ID,
                                               F1.LEDGER_ID,
                                               F1.GROUP_CODE,
                                               F1.LEDGER_GROUP,
                                               F1.LEDGER_CODE,
                                               F1.LEDGER_NAME AS LEDGER_NAME,
                                               SUM(F1.OP_TOTAL) AS OP_TOTAL,
                                               SUM(F1.POP_TOTAL) AS POP_TOTAL
                                          from (SELECT TEMP.GROUP_ID, -- Asset Transaction with Opeing Amount
                                                       TEMP.LEDGER_ID,
                                                       TEMP.GROUP_CODE,
                                                       TEMP.LEDGER_GROUP,
                                                       TEMP.LEDGER_CODE,
                                                       TEMP.LEDGER_NAME,
                                                       SUM(OP_DEBIT) AS 'OP_DEBIT',
                                                       SUM(OP_CREDIT) AS 'OP_CREDIT',
                                                       SUM(POP_DEBIT) AS 'POP_DEBIT',
                                                       SUM(POP_CREDIT) AS 'POP_CREDIT',
                                                       SUM(OP_TOTAL) AS 'OP_TOTAL',
                                                       SUM(POP_TOTAL) AS 'POP_TOTAL'
                                                  FROM (SELECT T.GROUP_ID, -- Asset Transaction with Opeing Amount
                                                               T.LEDGER_ID,
                                                               T.GROUP_CODE,
                                                               T.LEDGER_GROUP,
                                                               T.LEDGER_CODE,
                                                               T.LEDGER_NAME,
                                                               CASE
                                                                 WHEN SUM(T.OP_DEBIT) > SUM(T.OP_CREDIT) THEN
                                                                  SUM(T.OP_DEBIT) - SUM(T.OP_CREDIT)
                                                                 ELSE
                                                                  0.00
                                                               END AS OP_DEBIT,
                                                               CASE
                                                                 WHEN SUM(T.OP_CREDIT) > SUM(T.OP_DEBIT) THEN
                                                                  SUM(T.OP_CREDIT) - SUM(T.OP_DEBIT)
                                                                 ELSE
                                                                  0.00
                                                               END AS OP_CREDIT,
                                                               0 AS 'POP_DEBIT',
                                                               0 AS 'POP_CREDIT',
                                                               ((CASE
                                                                 WHEN SUM(T.OP_DEBIT) > SUM(T.OP_CREDIT) THEN
                                                                  SUM(T.OP_DEBIT) - SUM(T.OP_CREDIT)
                                                                 ELSE
                                                                  0.00
                                                               END) + (CASE
                                                                 WHEN SUM(T.OP_CREDIT) > SUM(T.OP_DEBIT) THEN
                                                                  SUM(T.OP_DEBIT) - SUM(T.OP_CREDIT)
                                                                 ELSE
                                                                  0.00
                                                               END)) AS OP_TOTAL,
                                                               0 AS 'POP_TOTAL'
                                                          FROM (SELECT LG.GROUP_ID,
                                                                       LG.GROUP_CODE,
                                                                       LG.LEDGER_GROUP,
                                                                       ML.LEDGER_ID,
                                                                       ML.LEDGER_CODE,
                                                                       ML.LEDGER_NAME,
                                                                       SUM(CASE
                                                                             WHEN LB2.TRANS_MODE = 'DR' THEN
                                                                              LB2.AMOUNT
                                                                             ELSE
                                                                              0
                                                                           END) AS OP_DEBIT,
                                                                       SUM(CASE
                                                                             WHEN LB2.TRANS_MODE = 'CR' THEN
                                                                              LB2.AMOUNT
                                                                             ELSE
                                                                              0
                                                                           END) AS OP_CREDIT,
                                                                       0 AS 'POP_DEBIT',
                                                                       0 AS 'POP_CREDIT',
                                                                       0 AS 'OP_TOTAL',
                                                                       0 AS 'POP_TOTAL'
                                                                  FROM MASTER_LEDGER AS ML
                                                                 INNER JOIN MASTER_LEDGER_GROUP AS LG
                                                                    ON ML.GROUP_ID = LG.GROUP_ID
                                                                 INNER JOIN (SELECT LB.BALANCE_DATE,
                                                                                   LB.PROJECT_ID,
                                                                                   LB.LEDGER_ID,
                                                                                   LB.AMOUNT,
                                                                                   LB.TRANS_MODE
                                                                              FROM LEDGER_BALANCE AS LB
                                                                              LEFT JOIN (SELECT LBA.PROJECT_ID,
                                                                                               LBA.LEDGER_ID,
                                                                                               MAX(LBA.BALANCE_DATE) AS BAL_DATE
                                                                                          FROM LEDGER_BALANCE LBA
                                                                                         WHERE 1 = 1
                                                                                           AND LBA.BALANCE_DATE <=
                                                                                               ?DATE_AS_ON -- Data As On
                                                                                         GROUP BY LBA.PROJECT_ID,
                                                                                                  LBA.LEDGER_ID) AS LB1
                                                                                ON LB.PROJECT_ID =
                                                                                   LB1.PROJECT_ID
                                                                               AND LB.LEDGER_ID = LB1.LEDGER_ID
                                                                             WHERE LB.PROJECT_ID IN (?PROJECT_ID)
                                                                               AND LB.BALANCE_DATE =
                                                                                   LB1.BAL_DATE) LB2
                                                                    ON ML.LEDGER_ID = LB2.LEDGER_ID
                                                                 WHERE 1 = 1
                                                                   AND LG.GROUP_ID NOT IN (11,
                                                                                           12,
                                                                                           13,
                                                                                           14,
                                                                                           15,
                                                                                           18,
                                                                                           21,
                                                                                           22,
                                                                                           153,
                                                                                           154)
                                                                   AND LG.NATURE_ID IN (3)
                                                                 GROUP BY LG.GROUP_ID) AS T
                                                         WHERE T.OP_DEBIT > 0 || T.OP_CREDIT > 0
                                                         GROUP BY T.GROUP_ID
                        
                                                        UNION ALL -- liability Transaction with Opening Bal Amount
                        
                                                        SELECT T.GROUP_ID,
                                                               T.LEDGER_ID,
                                                               T.GROUP_CODE,
                                                               T.LEDGER_GROUP,
                                                               T.LEDGER_CODE,
                                                               T.LEDGER_NAME,
                                                               CASE
                                                                 WHEN SUM(T.OP_DEBIT) > SUM(T.OP_CREDIT) THEN
                                                                  SUM(T.OP_DEBIT) - SUM(T.OP_CREDIT)
                                                                 ELSE
                                                                  0.00
                                                               END AS OP_DEBIT,
                                                               CASE
                                                                 WHEN SUM(T.OP_CREDIT) > SUM(T.OP_DEBIT) THEN
                                                                  SUM(T.OP_CREDIT) - SUM(T.OP_DEBIT)
                                                                 ELSE
                                                                  0.00
                                                               END AS OP_CREDIT,
                                                               0 AS 'POP_DEBIT',
                                                               0 AS 'POP_CREDIT',
                                                               ((CASE
                                                                 WHEN SUM(T.OP_DEBIT) > SUM(T.OP_CREDIT) THEN
                                                                  SUM(T.OP_CREDIT) - SUM(T.OP_DEBIT)
                                                                 ELSE
                                                                  0.00
                                                               END) + (CASE
                                                                 WHEN SUM(T.OP_CREDIT) > SUM(T.OP_DEBIT) THEN
                                                                  SUM(T.OP_CREDIT) - SUM(T.OP_DEBIT)
                                                                 ELSE
                                                                  0.00
                                                               END)) AS OP_TOTAL,
                                                               0 AS 'POP_TOTAL'
                                                          FROM (SELECT LG.GROUP_ID,
                                                                       LG.GROUP_CODE,
                                                                       LG.LEDGER_GROUP,
                                                                       ML.LEDGER_ID,
                                                                       ML.LEDGER_CODE,
                                                                       ML.LEDGER_NAME,
                                                                       SUM(CASE
                                                                             WHEN LB2.TRANS_MODE = 'DR' THEN
                                                                              LB2.AMOUNT
                                                                             ELSE
                                                                              0
                                                                           END) AS OP_DEBIT,
                                                                       SUM(CASE
                                                                             WHEN LB2.TRANS_MODE = 'CR' THEN
                                                                              LB2.AMOUNT
                                                                             ELSE
                                                                              0
                                                                           END) AS OP_CREDIT,
                                                                       0 AS 'POP_DEBIT',
                                                                       0 AS 'POP_CREDIT',
                                                                       0 AS 'OP_TOTAL',
                                                                       0 AS 'POP_TOTAL'
                                                                  FROM MASTER_LEDGER AS ML
                                                                 INNER JOIN MASTER_LEDGER_GROUP AS LG
                                                                    ON ML.GROUP_ID = LG.GROUP_ID
                                                                 INNER JOIN (SELECT LB.BALANCE_DATE,
                                                                                   LB.PROJECT_ID,
                                                                                   LB.LEDGER_ID,
                                                                                   LB.AMOUNT,
                                                   
                                                                                   LB.TRANS_MODE
                                                                              FROM LEDGER_BALANCE AS LB
                                                                              LEFT JOIN (SELECT LBA.PROJECT_ID,
                                                                                               LBA.LEDGER_ID,
                                                                                               MAX(LBA.BALANCE_DATE) AS BAL_DATE
                                                                                          FROM LEDGER_BALANCE LBA
                                                                                         WHERE 1 = 1
                                                                                           AND LBA.BALANCE_DATE <=
                                                                                               ?DATE_AS_ON -- Data As On
                                                                                         GROUP BY LBA.PROJECT_ID,
                                                                                                  LBA.LEDGER_ID) AS LB1
                                                                                ON LB.PROJECT_ID =
                                                                                   LB1.PROJECT_ID
                                                                               AND LB.LEDGER_ID = LB1.LEDGER_ID
                                                                             WHERE LB.PROJECT_ID IN (?PROJECT_ID)
                                                                               AND LB.BALANCE_DATE =
                                                                                   LB1.BAL_DATE) LB2
                                                                    ON ML.LEDGER_ID = LB2.LEDGER_ID
                                                                 WHERE 1 = 1
                                                                   AND LG.GROUP_ID NOT IN (11,
                                                                                           12,
                                                                                           13,
                                                                                           14,
                                                                                           15,
                                                                                           18,
                                                                                           21,
                                                                                           22,
                                                                                           153,
                                                                                           154)
                                                                   AND LG.NATURE_ID IN (4)
                                                                 GROUP BY LG.GROUP_ID) AS T
                                                         WHERE T.OP_DEBIT > 0 || T.OP_CREDIT > 0
                                                         GROUP BY T.GROUP_ID) AS TEMP
                                                 GROUP BY TEMP.GROUP_ID
                                                UNION ALL
                                                SELECT TEMP1.GROUP_ID, -- Asset Transaction with Opeing Amount
                                                       TEMP1.LEDGER_ID,
                                                       TEMP1.GROUP_CODE,
                                                       TEMP1.LEDGER_GROUP,
                                                       TEMP1.LEDGER_CODE,
                                                       TEMP1.LEDGER_NAME,
                                                       SUM(OP_DEBIT) AS 'OP_DEBIT',
                                                       SUM(OP_CREDIT) AS 'OP_CREDIT',
                                                       SUM(POP_DEBIT) AS 'POP_DEBIT',
                                                       SUM(POP_CREDIT) AS 'POP_CREDIT',
                                                       SUM(OP_TOTAL) AS 'OP_TOTAL',
                                                       SUM(POP_TOTAL) AS 'POP_TOTAL'
                                                  FROM (SELECT T1.GROUP_ID,
                                                               T1.LEDGER_ID,
                                                               T1.GROUP_CODE,
                                                               T1.LEDGER_GROUP,
                                                               T1.LEDGER_CODE,
                                                               T1.LEDGER_NAME,
                                                               0 AS 'OP_DEBIT',
                                                               0 AS 'OP_CREDIT',
                                                               CASE
                                                                 WHEN SUM(T1.POP_DEBIT) > SUM(T1.POP_CREDIT) THEN
                                                                  SUM(T1.POP_DEBIT) - SUM(T1.POP_CREDIT)
                                                                 ELSE
                                                                  0.00
                                                               END AS POP_DEBIT,
                                                               CASE
                                                                 WHEN SUM(T1.POP_CREDIT) > SUM(T1.POP_DEBIT) THEN
                                                                  SUM(T1.POP_CREDIT) - SUM(T1.POP_DEBIT)
                                                                 ELSE
                                                                  0.00
                                                               END AS POP_CREDIT,
                                                               0 AS 'OP_TOTAL',
                                                               ((CASE
                                                                 WHEN SUM(T1.POP_DEBIT) > SUM(T1.POP_CREDIT) THEN
                                                                  SUM(T1.POP_DEBIT) - SUM(T1.POP_CREDIT)
                                                                 ELSE
                                                                  0.00
                                                               END) + (CASE
                                                                 WHEN SUM(T1.POP_CREDIT) > SUM(T1.POP_DEBIT) THEN
                                                                  SUM(T1.POP_DEBIT) - SUM(T1.POP_CREDIT)
                                                                 ELSE
                                                                  0.00
                                                               END)) AS POP_TOTAL
                                                          FROM (SELECT LG.GROUP_ID,
                                                                       ML.LEDGER_ID,
                                                                       LG.GROUP_CODE,
                                                                       LG.LEDGER_GROUP,
                                                                       ML.LEDGER_CODE,
                                                                       ML.LEDGER_NAME,
                                                                       0 AS 'OP_DEBIT',
                                                                       0 AS 'OP_CREDIT',
                                                                       SUM(CASE
                                                                             WHEN LB.TRANS_MODE = 'DR' THEN
                                                                              LB.AMOUNT
                                                                             ELSE
                                                                              0
                                                                           END) AS 'POP_DEBIT',
                                                                       SUM(CASE
                                                                             WHEN LB.TRANS_MODE = 'CR' THEN
                                                                              LB.AMOUNT
                                                                             ELSE
                                                                              0
                                                                           END) AS 'POP_CREDIT',
                                                                       '' AS 'OP_TOTAL',
                                                                       '' AS 'POP_TOTAL'
                                                                  FROM LEDGER_BALANCE AS LB
                                                                  LEFT JOIN MASTER_LEDGER AS ML
                                                                    ON LB.LEDGER_ID = ML.LEDGER_ID
                                                                  LEFT JOIN MASTER_LEDGER_GROUP LG
                                                                    ON LG.GROUP_ID = ML.GROUP_ID
                                                                 WHERE PROJECT_ID IN (?PROJECT_ID)
                                                                   AND TRANS_FLAG = 'OP'
                                                                   AND LB.AMOUNT > 0
                                                                   AND LG.GROUP_ID NOT IN (12, 14, 13)
                                                                   AND LG.NATURE_ID IN (3)
                                                                   AND LG.GROUP_ID NOT IN
                                                                       (11, 12, 13, 14, 18, 21, 22, 153, 154)
                                                                   AND BALANCE_DATE < ?DATE_AS_ON -- Data As On
                                                                 GROUP BY LG.GROUP_ID
                                                                UNION ALL
                                                                SELECT LG.GROUP_ID,
                                                                       ML.LEDGER_ID,
                                                                       LG.GROUP_CODE,
                                                                       LG.LEDGER_GROUP,
                                                                       ML.LEDGER_CODE,
                                                                       ML.LEDGER_NAME,
                                                                       0 AS 'OP_DEBIT',
                                                                       0 AS 'OP_CREDIT',
                                                                       CASE
                                                                         WHEN VOUCHER_TYPE IN ('PY') AND
                                                                              VT.TRANS_MODE = 'DR' THEN
                                                                          IFNULL(SUM(VT.AMOUNT), 0.0)
                                                                         ELSE
                                                                          '0.0'
                                                                       END AS 'POP_DEBIT',
                                                                       CASE
                                                                         WHEN VOUCHER_TYPE IN ('RC') AND
                                                                              VT.TRANS_MODE = 'CR' THEN
                                                                          IFNULL(SUM(VT.AMOUNT), 0.0)
                                                                         ELSE
                                                                          '0'
                                                                       END AS 'POP_CREDIT',
                                                                       '' AS 'OP_TOTAL',
                                                                       '' AS 'POP_TOTAL'
                                                                  FROM MASTER_LEDGER_GROUP LG
                                
                                                                  LEFT JOIN MASTER_LEDGER ML
                                                                    ON ML.GROUP_ID = LG.GROUP_ID
                                                                  LEFT JOIN VOUCHER_TRANS VT
                                                                    ON VT.LEDGER_ID = ML.LEDGER_ID
                                                                  LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                                    ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                                 WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                                   AND MT.STATUS = 1
                                                                   AND LG.NATURE_ID IN (3)
                                                                   AND VOUCHER_DATE < ?YEAR_FROM -- yearfrom
                                                                   AND LG.GROUP_ID NOT IN
                                                                       (11, 12, 13, 14, 18, 21, 22, 153, 154)
                                                                 GROUP BY VT.LEDGER_ID, VT.VOUCHER_ID
                                                                UNION ALL
                                                                SELECT LG.GROUP_ID,
                                                                       ML.LEDGER_ID,
                                                                       LG.GROUP_CODE,
                                                                       LG.LEDGER_GROUP,
                                                                       ML.LEDGER_CODE,
                                                                       ML.LEDGER_NAME,
                                                                       0 AS 'OP_DEBIT',
                                                                       0 AS 'OP_CREDIT',
                                                                       CASE
                                                                         WHEN VOUCHER_TYPE IN ('JN') AND
                                                                              VT.TRANS_MODE = 'DR' THEN
                                                                          IFNULL(SUM(VT.AMOUNT), 0.0)
                                                                         ELSE
                                                                          '0.0'
                                                                       END AS 'POP_DEBIT',
                                                                       CASE
                                                                         WHEN VOUCHER_TYPE IN ('JN') AND
                                                                              VT.TRANS_MODE = 'CR' THEN
                                                                          IFNULL(SUM(VT.AMOUNT), 0.0)
                                                                         ELSE
                                                                          '0.0'
                                                                       END AS 'POP_CREDIT',
                                                                       '' AS 'OP_TOTAL',
                                                                       '' AS 'POP_TOTAL'
                                                                  FROM MASTER_LEDGER_GROUP LG
                                                                  LEFT JOIN MASTER_LEDGER ML
                                                                    ON ML.GROUP_ID = LG.GROUP_ID
                                                                  LEFT JOIN VOUCHER_TRANS VT
                                                                    ON VT.LEDGER_ID = ML.LEDGER_ID
                                                                  LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                                    ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                                 WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                                   AND MT.STATUS = 1
                                                                   AND LG.NATURE_ID IN (3)
                                                                   AND VOUCHER_DATE < ?YEAR_FROM -- yearfrom
                                                                   AND VOUCHER_TYPE in ('JN')
                                                                   AND LG.GROUP_ID NOT IN
                                                                       (11, 12, 13, 14, 18, 21, 22, 153, 154)
                                                                 GROUP BY VT.LEDGER_ID, VT.VOUCHER_ID) AS T1
                                                         WHERE (T1.POP_DEBIT > 0 || T1.POP_CREDIT > 0)
                                                         GROUP BY T1.GROUP_ID

                                                        UNION ALL

                                                        SELECT T1.GROUP_ID,
                                                               T1.LEDGER_ID,
                                                               T1.GROUP_CODE,
                                                               T1.LEDGER_GROUP,
                                                               T1.LEDGER_CODE,
                                                               T1.LEDGER_NAME,
                                                               0 AS 'OP_DEBIT',
                                                               0 AS 'OP_CREDIT',
                                                               CASE
                                                                 WHEN SUM(T1.POP_DEBIT) > SUM(T1.POP_CREDIT) THEN
                                                                  SUM(T1.POP_DEBIT) - SUM(T1.POP_CREDIT)
                                                                 ELSE
                                                                  0.00
                                                               END AS POP_DEBIT,
                                                               CASE
                                                                 WHEN SUM(T1.POP_CREDIT) > SUM(T1.POP_DEBIT) THEN
                                                                  SUM(T1.POP_CREDIT) - SUM(T1.POP_DEBIT)
                                                                 ELSE
                                                                  0.00
                                                               END AS POP_CREDIT,
                                                               0 AS 'OP_TOTAL',
                                                               ((CASE
                                                                 WHEN SUM(T1.POP_DEBIT) > SUM(T1.POP_CREDIT) THEN
                                                                  SUM(T1.POP_CREDIT) - SUM(T1.POP_DEBIT)
                                                                 ELSE
                                                                  0.00
                                                               END) + (CASE
                                                                 WHEN SUM(T1.POP_CREDIT) > SUM(T1.POP_DEBIT) THEN
                                                                  SUM(T1.POP_CREDIT) - SUM(T1.POP_DEBIT)
                                                                 ELSE
                                                                  0.00
                                                               END)) AS POP_TOTAL
                                                          FROM (SELECT LG.GROUP_ID,
                                                                       ML.LEDGER_ID,
                                                                       LG.GROUP_CODE,
                                                                       LG.LEDGER_GROUP,
                                                                       ML.LEDGER_CODE,
                                                                       ML.LEDGER_NAME,
                                                                       0 AS 'OP_DEBIT',
                                                                       0 AS 'OP_CREDIT',
                                                                       SUM(CASE
                                                                             WHEN LB.TRANS_MODE = 'DR' THEN
                                                                              LB.AMOUNT
                                                                             ELSE
                                                                              0
                                                                           END) AS 'POP_DEBIT',
                                                                       SUM(CASE
                                                                             WHEN LB.TRANS_MODE = 'CR' THEN
                                                                              LB.AMOUNT
                                                                             ELSE
                                                                              0
                                                                           END) AS 'POP_CREDIT',
                                                                       '' AS 'OP_TOTAL',
                                                                       '' AS 'POP_TOTAL'
                                                                  FROM LEDGER_BALANCE AS LB
                                                                  LEFT JOIN MASTER_LEDGER AS ML
                                                                    ON LB.LEDGER_ID = ML.LEDGER_ID
                                                                  LEFT JOIN MASTER_LEDGER_GROUP LG
                                                                    ON LG.GROUP_ID = ML.GROUP_ID
                                                                 WHERE PROJECT_ID IN (?PROJECT_ID)
                                                                   AND TRANS_FLAG = 'OP'
                                                                   AND LB.AMOUNT > 0
                                                                   AND LG.GROUP_ID NOT IN (12, 14, 13)
                                                                   AND LG.NATURE_ID IN (4)
                                                                   AND LG.GROUP_ID NOT IN
                                                                       (11, 12, 13, 14, 18, 21, 22, 153, 154)
                                                                   AND BALANCE_DATE < ?DATE_AS_ON -- Data As On
                                                                 GROUP BY LG.GROUP_ID
                                                                UNION ALL
                                                                SELECT LG.GROUP_ID,
                                                                       ML.LEDGER_ID,
                                                                       LG.GROUP_CODE,
                                                                       LG.LEDGER_GROUP,
                                                                       ML.LEDGER_CODE,
                                                                       ML.LEDGER_NAME,
                                                                       0 AS 'OP_DEBIT',
                                                                       0 AS 'OP_CREDIT',
                                                                       CASE
                                                                         WHEN VOUCHER_TYPE IN ('PY') AND
                                                                              VT.TRANS_MODE = 'DR' THEN
                                                                          IFNULL(SUM(VT.AMOUNT), 0.0)
                                                                         ELSE
                                                                          '0.0'
                                                                       END AS 'POP_DEBIT',
                                                                       CASE
                                                                         WHEN VOUCHER_TYPE IN ('RC') AND
                                                                              VT.TRANS_MODE = 'CR' THEN
                                                                          IFNULL(SUM(VT.AMOUNT), 0.0)
                                                                         ELSE
                                                                          '0'
                                                                       END AS 'POP_CREDIT',
                                                                       '' AS 'OP_TOTAL',
                                                                       '' AS 'POP_TOTAL'
                                                                  FROM MASTER_LEDGER_GROUP LG
                                
                                                                  LEFT JOIN MASTER_LEDGER ML
                                                                    ON ML.GROUP_ID = LG.GROUP_ID
                                                                  LEFT JOIN VOUCHER_TRANS VT
                                                                    ON VT.LEDGER_ID = ML.LEDGER_ID
                                                                  LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                                    ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                                 WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                                   AND MT.STATUS = 1
                                                                   AND LG.NATURE_ID IN (4)
                                                                   AND VOUCHER_DATE < ?YEAR_FROM -- yearfrom
                                                                   AND LG.GROUP_ID NOT IN
                                                                       (11, 12, 13, 14, 18, 21, 22, 153, 154)
                                                                 GROUP BY VT.LEDGER_ID, VT.VOUCHER_ID
                                                                UNION ALL
                                                                SELECT LG.GROUP_ID,
                                                                       ML.LEDGER_ID,
                                                                       LG.GROUP_CODE,
                                                                       LG.LEDGER_GROUP,
                                                                       ML.LEDGER_CODE,
                                                                       ML.LEDGER_NAME,
                                                                       0 AS 'OP_DEBIT',
                                                                       0 AS 'OP_CREDIT',
                                                                       CASE
                                                                         WHEN VOUCHER_TYPE IN ('JN') AND
                                                                              VT.TRANS_MODE = 'DR' THEN
                                                                          IFNULL(SUM(VT.AMOUNT), 0.0)
                                                                         ELSE
                                                                          '0.0'
                                                                       END AS 'POP_DEBIT',
                                                                       CASE
                                                                         WHEN VOUCHER_TYPE IN ('JN') AND
                                                                              VT.TRANS_MODE = 'CR' THEN
                                                                          IFNULL(SUM(VT.AMOUNT), 0.0)
                                                                         ELSE
                                                                          '0.0'
                                                                       END AS 'POP_CREDIT',
                                                                       '' AS 'OP_TOTAL',
                                                                       '' AS 'POP_TOTAL'
                                                                  FROM MASTER_LEDGER_GROUP LG
                                                                  LEFT JOIN MASTER_LEDGER ML
                                                                    ON ML.GROUP_ID = LG.GROUP_ID
                                                                  LEFT JOIN VOUCHER_TRANS VT
                                                                    ON VT.LEDGER_ID = ML.LEDGER_ID
                                                                  LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                                    ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                                 WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                                   AND MT.STATUS = 1
                                                                   AND LG.NATURE_ID IN (4)
                                                                   AND VOUCHER_DATE < ?YEAR_FROM -- yearfrom
                                                                   AND VOUCHER_TYPE in ('JN')
                                                                   AND LG.GROUP_ID NOT IN
                                                                       (11, 12, 13, 14, 18, 21, 22, 153, 154)
                                                                 GROUP BY VT.LEDGER_ID, VT.VOUCHER_ID) AS T1
                                                         WHERE (T1.POP_DEBIT > 0 || T1.POP_CREDIT > 0)
                                                         GROUP BY T1.GROUP_ID
                                                        ) AS TEMP1
                                                 GROUP BY TEMP1.GROUP_ID) AS F1
                                         GROUP BY F1.GROUP_ID) AS F
                              GROUP BY F.LEDGER_ID, F.GROUP_ID ";
                        break;
                    }
                case ReportSQLCommand.FinalAccounts.BalanceSchedules:
                    {
                        query = @"SELECT
                                                             SUM(FINAL.RECEIPTAMT) AS RECEIPTAMT,
                                                             SUM(FINAL.PAYMENTAMT) AS PAYMENTAMT,
                                                             SUM(FINAL.RPC_OP_TOTAL) AS RPC_OP_TOTAL,
                                                             SUM(FINAL.CAP_TRANS_TOTAL) AS CAP_TRANS_TOTAL,
                                                             SUM(FINAL.OP_TOTAL) AS OP_TOTAL,
                                                             SUM(FINAL.IE_TOTAL) AS IE_TOTAL,
                                                             SUM(FINAL.TOTAL) AS TOTAL,
                                                             SUM(FINAL.PREV_TOTAL) AS PREV_TOTAL
                        
                                                              FROM (SELECT SUM(FNL.RECEIPTAMT) AS RECEIPTAMT,
                                                                           SUM(FNL.PAYMENTAMT) AS PAYMENTAMT,
                                                                           SUM(FNL.OP_TOTAL) AS RPC_OP_TOTAL,
                                                                           SUM(FNL.OP_TRANS_TOTAL) AS CAP_TRANS_TOTAL,
                                                                           SUM(FNL.OP_TOTAL) + SUM(FNL.OP_TRANS_TOTAL) AS OP_TOTAL,
                                                                          ((CASE
                                                                           WHEN  (SUM(FNL.RECEIPTAMT)>SUM(FNL.PAYMENTAMT))
                                                                           THEN
                                                                          (SUM(FNL.RECEIPTAMT) - SUM(FNL.PAYMENTAMT))
                                                                          ELSE
                                                                           ((SUM(FNL.PAYMENTAMT)) - SUM(FNL.RECEIPTAMT))
                                                                             END)) AS IE_TOTAL,
                                                                         ((CASE
                                                                                 WHEN (SUM(FNL.RECEIPTAMT) > SUM(FNL.PAYMENTAMT)) THEN
                                                                                  ((SUM(FNL.RECEIPTAMT)-SUM(FNL.PAYMENTAMT))+SUM(FNL.OP_TOTAL) + SUM(FNL.OP_TRANS_TOTAL)
                                                                                  )
                                                                                 WHEN (SUM(FNL.PAYMENTAMT) > SUM(FNL.RECEIPTAMT))
                                                                                  THEN
                                                                                  (-1*(SUM(FNL.PAYMENTAMT) - SUM(FNL.RECEIPTAMT))+(SUM(FNL.OP_TOTAL) + SUM(FNL.OP_TRANS_TOTAL))
                                                                                  )
                                                                                  WHEN (SUM(FNL.PAYMENTAMT) = SUM(FNL.RECEIPTAMT))
                                                                                  THEN
                                                                                  ((SUM(FNL.OP_TOTAL) + SUM(FNL.OP_TRANS_TOTAL))
                                                                                  )
                                                                                 ELSE 0.00
                                                                               END)) AS TOTAL,
                                                                                0.0 AS PREV_TOTAL
                                                                                 FROM (SELECT IE.RECEIPTAMT,
                                                                                   IE.PAYMENTAMT,
                                                                                   0.0           AS OP_TOTAL,
                                                                                   0.0           AS OP_TRANS_TOTAL
                                                                              FROM (SELECT TEMP.LEDGER_ID,
                                                                                           TEMP.GROUP_ID,
                                                                                           TEMP.RECEIPTAMT,
                                                                                           TEMP.PAYMENTAMT
                                                                                      FROM (SELECT T.LEDGER_ID,
                                                                                                   T.GROUP_ID,
                                                                                                   SUM(T.RECEIPTAMT) AS RECEIPTAMT,
                                                                                                   T.PAYMENTAMT
                                                                                              FROM (SELECT ML.LEDGER_ID,
                                                                                                           ML.GROUP_ID,
                                                                                                           CASE
                                                                                                             WHEN SUM(CASE
                                                                                                                        WHEN VT.TRANS_MODE = 'DR' THEN
                                                                                                                         VT.AMOUNT
                                                                                  
                                                                                                                        ELSE
                                                                                                                         -VT.AMOUNT
                                                                                                                      END) < 0 THEN
                                                                                                              ABS(SUM(CASE
                                                                                                                        WHEN VT.TRANS_MODE = 'DR' THEN
                                                                                                                         VT.AMOUNT
                                                                                                                        ELSE
                                                                                                                         -VT.AMOUNT
                                                                                                                      END))
                                                                                                           END AS RECEIPTAMT,
                                                                                                           0 AS 'PAYMENTAMT'
                                                                                                      FROM MASTER_LEDGER_GROUP LG
                                                                                                      LEFT JOIN MASTER_LEDGER ML
                                                                                                        ON ML.GROUP_ID = LG.GROUP_ID
                                                                                                      LEFT JOIN VOUCHER_TRANS VT
                                                                                                        ON VT.LEDGER_ID = ML.LEDGER_ID
                                                                                                      LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                                                                        ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                                                                     WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                                                                       AND MT.STATUS = 1
                                                                                                       AND VOUCHER_DATE BETWEEN ?YEAR_FROM AND
                                                                                                           ?DATE_AS_ON                -- Data As on ( year from and dateason )
                                                                                                       AND LG.GROUP_ID NOT IN (12, 13)
                                                                                                       AND LG.NATURE_ID NOT IN (3, 4)
                                                                                                     GROUP BY VT.LEDGER_ID) AS T
                                                                                             WHERE T.RECEIPTAMT > 0
                                                                                            UNION ALL
                                                                                            SELECT T1.LEDGER_ID,
                                                                                                   T1.GROUP_ID,
                                                                                                   T1.RECEIPTAMT,
                                                                                                   SUM(T1.PAYMENTAMT) AS PAYMENTAMT
                                                                                              FROM (SELECT ML.LEDGER_ID,
                                                                                                           ML.GROUP_ID,
                                                                                                           0 AS 'RECEIPTAMT',
                                                                                                           CASE
                                                                                                             WHEN SUM(CASE
                                                                                                                        WHEN VT.TRANS_MODE = 'DR' THEN
                                                                                                                         VT.AMOUNT
                                                                                                                        ELSE
                                                                                                                         -VT.AMOUNT
                                                                                                                      END) > 0 THEN
                                                                                                              ABS(SUM(CASE
                                                                                                                        WHEN VT.TRANS_MODE = 'DR' THEN
                                                                                                                         VT.AMOUNT
                                                                                                                        ELSE
                                                                                                                         -VT.AMOUNT
                                                                                                                      END))
                                                                                                           END AS PAYMENTAMT
                                                                
                                                                                                      FROM MASTER_LEDGER_GROUP LG
                                                                                                      LEFT JOIN MASTER_LEDGER ML
                                                                                                        ON ML.GROUP_ID = LG.GROUP_ID
                                                                                                      LEFT JOIN VOUCHER_TRANS VT
                                                                                                        ON VT.LEDGER_ID = ML.LEDGER_ID
                                                                                                      LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                                                                        ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                                                                     WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                                                                       AND MT.STATUS = 1
                                                                                                       AND VOUCHER_DATE BETWEEN ?YEAR_FROM AND
                                                                                                           ?DATE_AS_ON                      -- Data As on ( year from and dateason).....
                                                                                                       AND LG.GROUP_ID NOT IN (12, 13)
                                                                                                       AND LG.NATURE_ID NOT IN (3, 4)
                                                                                                     GROUP BY VT.LEDGER_ID) AS T1
                                                                                             WHERE T1.PAYMENTAMT > 0) AS TEMP
                                                                                     WHERE TEMP.PAYMENTAMT > 0 || TEMP.RECEIPTAMT > 0
                                                                                     GROUP BY TEMP.GROUP_ID) AS IE
                                        
                                                                            UNION ALL
                                                                            SELECT 0.0         AS RECEIPTAMT,
                                                                                   0.0         AS PAYMENTAMT,
                                                                                   OP.OP_TOTAL,
                                                                                   0.0         AS OP_TRANS_TOTAL
                                                                              FROM (SELECT T2.GROUP_ID,
                                                                                           SUM(T2.POP_DEBIT) AS POP_DEBIT,
                                                                                           SUM(T2.POP_CREDIT) AS POP_CREDIT,
                                                                                           ((CASE
                                                                                             WHEN SUM(T2.POP_DEBIT) > SUM(T2.POP_CREDIT) THEN
                                                                                              SUM(T2.POP_CREDIT) - SUM(T2.POP_DEBIT)
                                                                                             ELSE
                                                                                              0.00
                                                                                           END) + (CASE
                                                                                             WHEN SUM(T2.POP_CREDIT) > SUM(T2.POP_DEBIT) THEN
                                                                                              SUM(T2.POP_CREDIT) - SUM(T2.POP_DEBIT)
                                                                                             ELSE
                                                                                              0.00
                                                                                           END)) AS OP_TOTAL
                                                                                      FROM (SELECT 21 AS GROUP_ID,
                                                                                                   SUM(CASE
                                                                                                         WHEN LB.TRANS_MODE = 'DR' THEN
                                                                                                          LB.AMOUNT
                                                                                                         ELSE
                                                                                                          0
                                                                                                       END) AS 'POP_DEBIT',
                                                                                                   SUM(CASE
                                                                                                         WHEN LB.TRANS_MODE = 'CR' THEN
                                                                                                          LB.AMOUNT
                                                                                                         ELSE
                                                                                                          0
                                                                                                       END) AS 'POP_CREDIT'
                                                                                              FROM LEDGER_BALANCE AS LB
                                                                                              LEFT JOIN MASTER_LEDGER AS ML
                                                                                                ON LB.LEDGER_ID = ML.LEDGER_ID
                                                                                              LEFT JOIN MASTER_LEDGER_GROUP LG
                                                                                                ON LG.GROUP_ID = ML.GROUP_ID
                                                                                             WHERE PROJECT_ID IN (?PROJECT_ID)
                                                                                               AND TRANS_FLAG = 'OP'
                                                                                               AND LB.AMOUNT > 0
                                                                                               AND LG.GROUP_ID NOT IN (12, 14, 13)
                                                                                               AND LG.NATURE_ID IN (4)
                                                                                               AND LG.GROUP_ID IN (21)
                                                                                               AND LG.GROUP_ID NOT IN
                                                                                                   (11, 12, 13, 14, 18, 22)
                                                                                               AND BALANCE_DATE <= ?DATE_TO         -- Data to for OpeningBal then MAKE IT NULL WHEN 2 PERIOD MAKE IT NULL
                                                                                             GROUP BY LG.GROUP_ID
                                                                                            UNION ALL
                                                                                            SELECT 21 AS GROUP_ID,
                                                                                                   SUM(CASE
                                                                                                         WHEN LB.TRANS_MODE = 'DR' THEN
                                                                                                          LB.AMOUNT
                                                                                                         ELSE
                                                                                                          0
                                                                                                       END) AS 'POP_DEBIT',
                                                                                                   SUM(CASE
                                                                                                         WHEN LB.TRANS_MODE = 'CR' THEN
                                                                                                          LB.AMOUNT
                                                                                                         ELSE
                                                                                                          0
                                                                                                       END) AS 'POP_CREDIT'
                                                                                              FROM LEDGER_BALANCE AS LB
                                                                                              LEFT JOIN MASTER_LEDGER AS ML
                                                                                                ON LB.LEDGER_ID = ML.LEDGER_ID
                                                                                              LEFT JOIN MASTER_LEDGER_GROUP LG
                                                                                                ON LG.GROUP_ID = ML.GROUP_ID
                                                                                             WHERE PROJECT_ID IN (?PROJECT_ID)
                                                                                               AND TRANS_FLAG = 'OP'
                                                                                               AND LB.AMOUNT > 0
                                                                                               AND LG.GROUP_ID NOT IN (12, 14, 13)
                                                                                               AND LG.NATURE_ID IN (1, 2)
                                                                                               AND LG.GROUP_ID NOT IN
                                                                                                   (11, 12, 13, 14, 18, 22)
                                                                                               AND BALANCE_DATE <= ?DATE_TO                  -- Date To OpeningBal then WHEN IT IS 2 YEAR PERIOD MAKE IT NULL
                                                                                             GROUP BY LG.GROUP_ID) AS T2
                                                                                     WHERE (T2.POP_DEBIT > 0 || T2.POP_CREDIT > 0)
                                                                                     GROUP BY T2.GROUP_ID) AS OP
                                        
                                                                            UNION ALL
                                        
                                                                            SELECT 0.00               AS RECEIPTAMT,
                                                                                   0.00               AS PAYMENTAMT,
                                                                                   0.0                AS OP_TOTAL,
                                                                                   CAP.OP_TRANS_TOTAL
                                                                              FROM (SELECT T1.GROUP_ID,
                                                                                           SUM(T1.CAPITAL_DEBIT) AS CAPITAL_DEBIT,
                                                                                           SUM(T1.CAPITAL_CREDIT) AS CAPITAL_CREDIT,
                                                                                           ((CASE
                                                                                             WHEN SUM(T1.CAPITAL_DEBIT) >
                                                                                                  SUM(T1.CAPITAL_CREDIT) THEN
                                                                                              SUM(T1.CAPITAL_CREDIT) -
                                                                                              SUM(T1.CAPITAL_DEBIT)
                                                                                             ELSE
                                                                                              0.00
                                                                                           END) + (CASE
                                                                                             WHEN SUM(T1.CAPITAL_CREDIT) >
                                                                                                  SUM(T1.CAPITAL_DEBIT) THEN
                                                                                              SUM(T1.CAPITAL_CREDIT) -
                                                                                              SUM(T1.CAPITAL_DEBIT)
                                                                                             ELSE
                                                                                              0.00
                                                                                           END)) AS OP_TRANS_TOTAL
                                                                                      FROM (SELECT LG.GROUP_ID,
                                                                                                   SUM(CASE
                                                                                                         WHEN VT.TRANS_MODE = 'DR' THEN
                                                                                                          VT.AMOUNT
                                                                                                         ELSE
                                                                                                          0
                                                                                                       END) AS 'CAPITAL_DEBIT',
                                                                                                   SUM(CASE
                                                                                                         WHEN VT.TRANS_MODE = 'CR' THEN
                                                                                                          VT.AMOUNT
                                                                                                         ELSE
                                                                                                          0
                                                                                                       END) AS 'CAPITAL_CREDIT'
                                                                                              FROM MASTER_LEDGER_GROUP LG
                                                                                              LEFT JOIN MASTER_LEDGER ML
                                                                                                ON ML.GROUP_ID = LG.GROUP_ID
                                                                                              LEFT JOIN VOUCHER_TRANS VT
                                                                                                ON VT.LEDGER_ID = ML.LEDGER_ID
                                                                                              LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                                                                ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                                                             WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                                                               AND MT.STATUS = 1
                                                                                               AND VOUCHER_DATE BETWEEN ?YEAR_FROM AND ?DATE_AS_ON -- Date as on ( year from and date as on)...
                                                                                               AND LG.GROUP_ID NOT IN (12, 13)
                                                                                               AND LG.GROUP_ID = 21) AS T1
                                                                                     GROUP BY T1.GROUP_ID) AS CAP) AS FNL
                        
                                                                    UNION ALL
                                
                                                                    SELECT
                                
                                                                     0 AS RECEIPTAMT,
                                                                     0 AS PAYMENTAMT,
                                                                     0 AS RPC_OP_TOTAL,
                                                                     0 AS CAP_TRANS_TOTAL,
                                                                     CASE
                                                                       WHEN SUM(PREVIOUS.OP_DEBIT) > SUM(PREVIOUS.OP_CREDIT) THEN
                                                                        - (SUM(PREVIOUS.OP_DEBIT) - SUM(PREVIOUS.OP_CREDIT))
                                                                       WHEN SUM(PREVIOUS.OP_CREDIT) > SUM(PREVIOUS.OP_DEBIT) THEN
                                                                        SUM(PREVIOUS.OP_CREDIT) - SUM(PREVIOUS.OP_DEBIT)
                                                                     END AS OP_TOTAL,
                                                                     0 AS IE_TOTAL,
                                                                     -- SUM(PREVIOUS.OP_DEBIT) AS 'OP_DEBIT',
                                                                     -- SUM(PREVIOUS.OP_CREDIT) AS 'OP_CREDIT',
                                                                     CASE
                                                                       WHEN SUM(PREVIOUS.OP_DEBIT) > SUM(PREVIOUS.OP_CREDIT) THEN
                                                                        - (SUM(PREVIOUS.OP_DEBIT) - SUM(PREVIOUS.OP_CREDIT))
                                                                       WHEN SUM(PREVIOUS.OP_CREDIT) > SUM(PREVIOUS.OP_DEBIT) THEN
                                                                        SUM(PREVIOUS.OP_CREDIT) - SUM(PREVIOUS.OP_DEBIT)
                                                                     END AS TOTAL,
                                                                     CASE
                                                                       WHEN SUM(PREVIOUS.OP_DEBIT) > SUM(PREVIOUS.OP_CREDIT) THEN
                                                                        - (SUM(PREVIOUS.OP_DEBIT) - SUM(PREVIOUS.OP_CREDIT))
                                                                       WHEN SUM(PREVIOUS.OP_CREDIT) > SUM(PREVIOUS.OP_DEBIT) THEN
                                                                        SUM(PREVIOUS.OP_CREDIT) - SUM(PREVIOUS.OP_DEBIT)
                                                                     END AS PREV_TOTAL               
                                                                      FROM (SELECT LG.GROUP_ID,
                                                                                   LG.SORT_ORDER,
                                                                                   ML.LEDGER_ID,
                                                                                   MN.NATURE_ID,
                                                                                   LG.GROUP_CODE,
                                                                                   LG.LEDGER_GROUP,
                                                                                   ML.LEDGER_CODE,
                                                                                   ML.LEDGER_NAME,
                                                                                   SUM(CASE
                                                                                         WHEN LB2.TRANS_MODE = 'DR' THEN
                                                                                          LB2.AMOUNT
                                                                                         ELSE
                                                                                          0
                                                                                       END) AS OP_DEBIT,
                                                                                   SUM(CASE
                                                                                         WHEN LB2.TRANS_MODE = 'CR' THEN
                                                                                          LB2.AMOUNT
                                                                                         ELSE
                                                                                          0
                                                                                       END) AS OP_CREDIT
                                                                              FROM MASTER_LEDGER AS ML
                                                                             INNER JOIN MASTER_LEDGER_GROUP AS LG
                                                                                ON ML.GROUP_ID = LG.GROUP_ID
                                                                             INNER JOIN (SELECT LB.BALANCE_DATE,
                                                                                               LB.PROJECT_ID,
                                                                                               LB.LEDGER_ID,
                                                                                               LB.AMOUNT,
                                                                                               LB.TRANS_MODE
                                                                                          FROM LEDGER_BALANCE AS LB
                                                                                          LEFT JOIN (SELECT LBA.PROJECT_ID,
                                                                                                           LBA.LEDGER_ID,
                                                                                                           MAX(LBA.BALANCE_DATE) AS BAL_DATE
                                                                                                      FROM LEDGER_BALANCE LBA
                                                                                                     WHERE 1 = 1
                                                                                                       AND LBA.BALANCE_DATE <=
                                                                                                            ?YEAR_TO                -- Year from 1 date reducing for DateTO
                                                                                                     GROUP BY LBA.PROJECT_ID,
                                                                                                              LBA.LEDGER_ID) AS LB1
                                                                                            ON LB.PROJECT_ID = LB1.PROJECT_ID
                                                                                           AND LB.LEDGER_ID = LB1.LEDGER_ID
                                                                                           AND LB.AMOUNT > 0
                                                                                         WHERE LB.PROJECT_ID IN (?PROJECT_ID)
                                                                                           AND LB.BALANCE_DATE = LB1.BAL_DATE) LB2
                                                                                ON ML.LEDGER_ID = LB2.LEDGER_ID
                                                                              LEFT JOIN MASTER_NATURE MN
                                                                                ON MN.NATURE_ID = LG.NATURE_ID
                                                                             WHERE LG.GROUP_ID IN (SELECT LG.GROUP_ID
                                                                                                     FROM MASTER_LEDGER ML
                                                                                                    INNER JOIN PROJECT_LEDGER PL
                                                                                                       ON ML.LEDGER_ID = PL.LEDGER_ID
                                                                                                    INNER JOIN MASTER_LEDGER_GROUP LG
                                                                                                       ON ML.GROUP_ID = LG.GROUP_ID
                                                                                                    WHERE PL.PROJECT_ID IN (?PROJECT_ID)
                                                                                                      AND LG.NATURE_ID IN (1, 2)
                                                                                                      AND ML.STATUS = 0)
                                                                               AND LG.GROUP_ID NOT IN (12, 13, 14)
                                                                               AND ML.LEDGER_ID NOT IN (3)
                                                                               AND ML.STATUS = 0
                                                                            UNION ALL
                                        
                                                                            SELECT LG.GROUP_ID,
                                                                                   LG.SORT_ORDER,
                                                                                   ML.LEDGER_ID,
                                                                                   MN.NATURE_ID,
                                                                                   LG.GROUP_CODE,
                                                                                   LG.LEDGER_GROUP,
                                                                                   ML.LEDGER_CODE,
                                                                                   ML.LEDGER_NAME,
                                                                                   SUM(CASE
                                                                                         WHEN LB2.TRANS_MODE = 'DR' THEN
                                                                                          LB2.AMOUNT
                                                                                         ELSE
                                                                                          0
                                                                                       END) AS OP_DEBIT,
                                                                                   SUM(CASE
                                                                                         WHEN LB2.TRANS_MODE = 'CR' THEN
                                                                                          LB2.AMOUNT
                                                                                         ELSE
                                                                                          0
                                                                                       END) AS OP_CREDIT
                                                                              FROM MASTER_LEDGER AS ML
                                                                             INNER JOIN MASTER_LEDGER_GROUP AS LG
                                                                                ON ML.GROUP_ID = LG.GROUP_ID
                                                                             INNER JOIN (SELECT LB.BALANCE_DATE,
                                                                                                LB.PROJECT_ID,
                                                                                                LB.LEDGER_ID,
                                                                                                LB.AMOUNT,
                                                                                                LB.TRANS_MODE
                                                                                           FROM LEDGER_BALANCE AS LB
                                                                                           LEFT JOIN (SELECT LBA.PROJECT_ID,
                                                                                                            LBA.LEDGER_ID,
                                                                                                            MAX(LBA.BALANCE_DATE) AS BAL_DATE
                                                                                                       FROM LEDGER_BALANCE LBA
                                                                                                      WHERE 1 = 1
                                                                                                        AND LBA.BALANCE_DATE <=
                                                                                                            ?YEAR_TO       -- Year from 1 date reducing for DateTo
                                                                                                      GROUP BY LBA.PROJECT_ID,
                                                                                                               LBA.LEDGER_ID) AS LB1
                                                                                             ON LB.PROJECT_ID = LB1.PROJECT_ID
                                                                                            AND LB.LEDGER_ID = LB1.LEDGER_ID
                                                                                            AND LB.AMOUNT > 0
                                                                                          WHERE LB.PROJECT_ID IN (?PROJECT_ID)
                                                                                            AND LB.BALANCE_DATE = LB1.BAL_DATE) LB2
                                                                                ON ML.LEDGER_ID = LB2.LEDGER_ID
                                                                              LEFT JOIN MASTER_NATURE MN
                                                                                ON MN.NATURE_ID = LG.NATURE_ID
                                                                             WHERE LG.GROUP_ID IN (SELECT LG.GROUP_ID
                                                                                                     FROM MASTER_LEDGER ML
                                                                                                    INNER JOIN PROJECT_LEDGER PL
                                                                                                       ON ML.LEDGER_ID = PL.LEDGER_ID
                                                                                                    INNER JOIN MASTER_LEDGER_GROUP LG
                                                                                                       ON ML.GROUP_ID = LG.GROUP_ID
                                                                                                    WHERE PL.PROJECT_ID IN (?PROJECT_ID)
                                                                                                      AND LG.NATURE_ID IN (4)
                                                                                                      AND ML.STATUS = 0)
                                                                               AND LG.GROUP_ID NOT IN (12, 13, 14)
                                                                               AND ML.LEDGER_ID IN (3)
                                                                               AND ML.STATUS = 0) AS PREVIOUS) AS FINAL ";
                        break;

                        //                        query = @"SELECT SUM(FNL.RECEIPTAMT) AS RECEIPTAMT,
                        //                                                                        SUM(FNL.PAYMENTAMT) AS PAYMENTAMT,
                        //                                                                        SUM(FNL.OP_TOTAL) AS RPC_OP_TOTAL,
                        //                                                                        SUM(FNL.OP_TRANS_TOTAL) AS CAP_TRANS_TOTAL,
                        //                                                                        SUM(FNL.OP_TOTAL) + SUM(FNL.OP_TRANS_TOTAL) AS OP_TOTAL,
                        //                                                                        SUM(FNL.RECEIPTAMT) + SUM(FNL.PAYMENTAMT) AS IE_TOTAL,
                        //                                                                          ((CASE
                        //                                                                            WHEN  (SUM(FNL.RECEIPTAMT)>0)
                        //                                                                             THEN
                        //                                                                            (SUM(FNL.OP_TOTAL) + SUM(FNL.OP_TRANS_TOTAL) + SUM(FNL.RECEIPTAMT))
                        //                                                                            ELSE
                        //                                                                         ((SUM(FNL.OP_TOTAL)+SUM(FNL.OP_TRANS_TOTAL)) - SUM(FNL.PAYMENTAMT))
                        //                                                                        END)) AS TOTAL
                        //                                                                    FROM (SELECT IE.RECEIPTAMT,
                        //                                                                                IE.PAYMENTAMT,
                        //                                                                                0.0           AS OP_TOTAL,
                        //                                                                                0.0           AS OP_TRANS_TOTAL
                        //                                                                            FROM (SELECT TEMP.LEDGER_ID,
                        //                                                                                        TEMP.GROUP_ID,
                        //                                                                                        TEMP.RECEIPTAMT,
                        //                                                                                        TEMP.PAYMENTAMT
                        //                                                                                    FROM (SELECT T.LEDGER_ID,
                        //                                                                                                T.GROUP_ID,
                        //                                                                                                SUM(T.RECEIPTAMT) AS RECEIPTAMT,
                        //                                                                                                T.PAYMENTAMT
                        //                                                                                            FROM (SELECT ML.LEDGER_ID,
                        //                                                                                                        ML.GROUP_ID,
                        //                                                                                                        CASE
                        //                                                                                                            WHEN SUM(CASE
                        //                                                                                                                    WHEN VT.TRANS_MODE = 'DR' THEN
                        //                                                                                                                        VT.AMOUNT
                        //                                                                          
                        //                                                                                                                    ELSE
                        //                                                                                                                        -VT.AMOUNT
                        //                                                                                                                    END) < 0 THEN
                        //                                                                                                            ABS(SUM(CASE
                        //                                                                                                                    WHEN VT.TRANS_MODE = 'DR' THEN
                        //                                                                                                                        VT.AMOUNT
                        //                                                                                                                    ELSE
                        //                                                                                                                        -VT.AMOUNT
                        //                                                                                                                    END))
                        //                                                                                                        END AS RECEIPTAMT,
                        //                                                                                                        0 AS 'PAYMENTAMT'
                        //                                                                                                    FROM MASTER_LEDGER_GROUP LG
                        //                                                                                                    LEFT JOIN MASTER_LEDGER ML
                        //                                                                                                    ON ML.GROUP_ID = LG.GROUP_ID
                        //                                                                                                    LEFT JOIN VOUCHER_TRANS VT
                        //                                                                                                    ON VT.LEDGER_ID = ML.LEDGER_ID
                        //                                                                                                    LEFT JOIN VOUCHER_MASTER_TRANS MT
                        //                                                                                                    ON VT.VOUCHER_ID = MT.VOUCHER_ID
                        //                                                                                                    WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                        //                                                                                                    AND MT.STATUS = 1
                        //                                                                                                    AND VOUCHER_DATE <= ?DATE_AS_ON -- Data As on
                        //                                                                                                    AND LG.GROUP_ID NOT IN (12, 13)
                        //                                                                                                    AND LG.NATURE_ID NOT IN (3, 4)
                        //                                                                                                    GROUP BY VT.LEDGER_ID) AS T
                        //                                                                                            WHERE T.RECEIPTAMT > 0
                        //                                                                                        UNION ALL
                        //                                                                                        SELECT T1.LEDGER_ID,
                        //                                                                                                T1.GROUP_ID,
                        //                                                                                                T1.RECEIPTAMT,
                        //                                                                                                SUM(T1.PAYMENTAMT) AS PAYMENTAMT
                        //                                                                                            FROM (SELECT ML.LEDGER_ID,
                        //                                                                                                        ML.GROUP_ID,
                        //                                                                                                        0 AS 'RECEIPTAMT',
                        //                                                                                                        CASE
                        //                                                                                                            WHEN SUM(CASE
                        //                                                                                                                    WHEN VT.TRANS_MODE = 'DR' THEN
                        //                                                                                                                        VT.AMOUNT
                        //                                                                                                                    ELSE
                        //                                                                                                                        -VT.AMOUNT
                        //                                                                                                                    END) > 0 THEN
                        //                                                                                                            ABS(SUM(CASE
                        //                                                                                                                    WHEN VT.TRANS_MODE = 'DR' THEN
                        //                                                                                                                        VT.AMOUNT
                        //                                                                                                                    ELSE
                        //                                                                                                                        -VT.AMOUNT
                        //                                                                                                                    END))
                        //                                                                                                        END AS PAYMENTAMT
                        //                                                        
                        //                                                                                                    FROM MASTER_LEDGER_GROUP LG
                        //                                                                                                    LEFT JOIN MASTER_LEDGER ML
                        //                                                                                                    ON ML.GROUP_ID = LG.GROUP_ID
                        //                                                                                                    LEFT JOIN VOUCHER_TRANS VT
                        //                                                                                                    ON VT.LEDGER_ID = ML.LEDGER_ID
                        //                                                                                                    LEFT JOIN VOUCHER_MASTER_TRANS MT
                        //                                                                                                    ON VT.VOUCHER_ID = MT.VOUCHER_ID
                        //                                                                                                    WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                        //                                                                                                    AND MT.STATUS = 1
                        //                                                                                                    AND VOUCHER_DATE <= ?DATE_AS_ON -- Data As on
                        //                                                                                                    AND LG.GROUP_ID NOT IN (12, 13)
                        //                                                                                                    AND LG.NATURE_ID NOT IN (3, 4)
                        //                                                                                                    GROUP BY VT.LEDGER_ID) AS T1
                        //                                                                                            WHERE T1.PAYMENTAMT > 0) AS TEMP
                        //                                                                                    WHERE TEMP.PAYMENTAMT > 0 || TEMP.RECEIPTAMT > 0
                        //                                                                                    GROUP BY TEMP.GROUP_ID) AS IE
                        //                                
                        //                                                                        UNION ALL
                        //                                                                        SELECT 0.0         AS RECEIPTAMT,
                        //                                                                                0.0         AS PAYMENTAMT,
                        //                                                                                OP.OP_TOTAL,
                        //                                                                                0.0         AS OP_TRANS_TOTAL
                        //                                                                            FROM (SELECT T2.GROUP_ID,
                        //                                                                                        SUM(T2.POP_DEBIT) AS POP_DEBIT,
                        //                                                                                        SUM(T2.POP_CREDIT) AS POP_CREDIT,
                        //                                                                                        ((CASE
                        //                                                                                            WHEN SUM(T2.POP_DEBIT) > SUM(T2.POP_CREDIT) THEN
                        //                                                                                            SUM(T2.POP_CREDIT) - SUM(T2.POP_DEBIT)
                        //                                                                                            ELSE
                        //                                                                                            0.00
                        //                                                                                        END) + (CASE
                        //                                                                                            WHEN SUM(T2.POP_CREDIT) > SUM(T2.POP_DEBIT) THEN
                        //                                                                                            SUM(T2.POP_CREDIT) - SUM(T2.POP_DEBIT)
                        //                                                                                            ELSE
                        //                                                                                            0.00
                        //                                                                                        END)) AS OP_TOTAL
                        //                                                                                    FROM (SELECT 21 AS GROUP_ID,
                        //                                                                                                SUM(CASE
                        //                                                                                                        WHEN LB.TRANS_MODE = 'DR' THEN
                        //                                                                                                        LB.AMOUNT
                        //                                                                                                        ELSE
                        //                                                                                                        0
                        //                                                                                                    END) AS 'POP_DEBIT',
                        //                                                                                                SUM(CASE
                        //                                                                                                        WHEN LB.TRANS_MODE = 'CR' THEN
                        //                                                                                                        LB.AMOUNT
                        //                                                                                                        ELSE
                        //                                                                                                        0
                        //                                                                                                    END) AS 'POP_CREDIT'
                        //                                                                                            FROM LEDGER_BALANCE AS LB
                        //                                                                                            LEFT JOIN MASTER_LEDGER AS ML
                        //                                                                                            ON LB.LEDGER_ID = ML.LEDGER_ID
                        //                                                                                            LEFT JOIN MASTER_LEDGER_GROUP LG
                        //                                                                                            ON LG.GROUP_ID = ML.GROUP_ID
                        //                                                                                            WHERE PROJECT_ID IN (?PROJECT_ID)
                        //                                                                                            AND TRANS_FLAG = 'OP'
                        //                                                                                            AND LB.AMOUNT > 0
                        //                                                                                            AND LG.GROUP_ID NOT IN (12, 14, 13)
                        //                                                                                            AND LG.NATURE_ID IN (4)
                        //                                                                                            AND LG.GROUP_ID IN (21)
                        //                                                                                            AND LG.GROUP_ID NOT IN (11, 12, 13, 14, 18, 22)
                        //                                                                                            AND BALANCE_DATE <= ?DATE_AS_ON -- Data As on
                        //                                                                                            GROUP BY LG.GROUP_ID
                        //                                                                                        UNION ALL
                        //                                                                                        SELECT 21 AS GROUP_ID,
                        //                                                                                                SUM(CASE
                        //                                                                                                        WHEN LB.TRANS_MODE = 'DR' THEN
                        //                                                                                                        LB.AMOUNT
                        //                                                                                                        ELSE
                        //                                                                                                        0
                        //                                                                                                    END) AS 'POP_DEBIT',
                        //                                                                                                SUM(CASE
                        //                                                                                                        WHEN LB.TRANS_MODE = 'CR' THEN
                        //                                                                                                        LB.AMOUNT
                        //                                                                                                        ELSE
                        //                                                                                                        0
                        //                                                                                                    END) AS 'POP_CREDIT'
                        //                                                                                            FROM LEDGER_BALANCE AS LB
                        //                                                                                            LEFT JOIN MASTER_LEDGER AS ML
                        //                                                                                            ON LB.LEDGER_ID = ML.LEDGER_ID
                        //                                                                                            LEFT JOIN MASTER_LEDGER_GROUP LG
                        //                                                                                            ON LG.GROUP_ID = ML.GROUP_ID
                        //                                                                                            WHERE PROJECT_ID IN (?PROJECT_ID)
                        //                                                                                            AND TRANS_FLAG = 'OP'
                        //                                                                                            AND LB.AMOUNT > 0
                        //                                                                                            AND LG.GROUP_ID NOT IN (12, 14, 13)
                        //                                                                                            AND LG.NATURE_ID IN (1, 2)
                        //                                                                                            AND LG.GROUP_ID NOT IN (11, 12, 13, 14, 18, 22)
                        //                                                                                            AND BALANCE_DATE <= ?DATE_AS_ON -- Data As on
                        //                                                                                            GROUP BY LG.GROUP_ID) AS T2
                        //                                                                                    WHERE (T2.POP_DEBIT > 0 || T2.POP_CREDIT > 0)
                        //                                                                                    GROUP BY T2.GROUP_ID) AS OP
                        //                                
                        //                                                                        UNION ALL
                        //                                
                        //                                                                        SELECT 0.00               AS RECEIPTAMT,
                        //                                                                                0.00               AS PAYMENTAMT,
                        //                                                                                0.0                AS OP_TOTAL,
                        //                                                                                CAP.OP_TRANS_TOTAL
                        //                                                                            FROM (SELECT T1.GROUP_ID,
                        //                                                                                        SUM(T1.CAPITAL_DEBIT) AS CAPITAL_DEBIT,
                        //                                                                                        SUM(T1.CAPITAL_CREDIT) AS CAPITAL_CREDIT,
                        //                                                                                        ((CASE
                        //                                                                                            WHEN SUM(T1.CAPITAL_DEBIT) > SUM(T1.CAPITAL_CREDIT) THEN
                        //                                                                                            SUM(T1.CAPITAL_CREDIT) - SUM(T1.CAPITAL_DEBIT)
                        //                                                                                            ELSE
                        //                                                                                            0.00
                        //                                                                                        END) + (CASE
                        //                                                                                            WHEN SUM(T1.CAPITAL_CREDIT) > SUM(T1.CAPITAL_DEBIT) THEN
                        //                                                                                            SUM(T1.CAPITAL_CREDIT) - SUM(T1.CAPITAL_DEBIT)
                        //                                                                                            ELSE
                        //                                                                                            0.00
                        //                                                                                        END)) AS OP_TRANS_TOTAL
                        //                                                                                    FROM (SELECT LG.GROUP_ID,
                        //                                                                                                SUM(CASE
                        //                                                                                                        WHEN VT.TRANS_MODE = 'DR' THEN
                        //                                                                                                        VT.AMOUNT
                        //                                                                                                        ELSE
                        //                                                                                                        0
                        //                                                                                                    END) AS 'CAPITAL_DEBIT',
                        //                                                                                                SUM(CASE
                        //                                                                                                        WHEN VT.TRANS_MODE = 'CR' THEN
                        //                                                                                                        VT.AMOUNT
                        //                                                                                                        ELSE
                        //                                                                                                        0
                        //                                                                                                    END) AS 'CAPITAL_CREDIT'
                        //                                                                                            FROM MASTER_LEDGER_GROUP LG
                        //                                                                                            LEFT JOIN MASTER_LEDGER ML
                        //                                                                                            ON ML.GROUP_ID = LG.GROUP_ID
                        //                                                                                            LEFT JOIN VOUCHER_TRANS VT
                        //                                                                                            ON VT.LEDGER_ID = ML.LEDGER_ID
                        //                                                                                            LEFT JOIN VOUCHER_MASTER_TRANS MT
                        //                                                                                            ON VT.VOUCHER_ID = MT.VOUCHER_ID
                        //                                                                                            WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                        //                                                                                            AND MT.STATUS = 1
                        //                                                                                            AND VOUCHER_DATE <= ?DATE_AS_ON -- Data As on
                        //                                                                                            AND LG.GROUP_ID NOT IN (12, 13)
                        //                                                                                            AND LG.GROUP_ID = 21) AS T1
                        //                                                                                            GROUP BY T1.GROUP_ID) AS CAP) AS FNL";
                        //                        break;
                    }
                #endregion

                #region Income
                case ReportSQLCommand.FinalAccounts.Income:
                    {
                        //On 06/04/2020, to have second level group order (CONCAT(LG.LEDGER_GROUP))
                        query = @" SELECT T.LEDGER_ID,
                                               T.GROUP_ID,
                                               T.GROUP_CODE,
                                               T.PARENT_GROUP,
                                               T.LEDGER_GROUP,
                                               T.LEDGER_CODE,
                                               T.LEDGER_NAME,
                                               T.RECEIPTAMT,T.SORT_ORDER
                                          FROM (SELECT ML.LEDGER_ID,
                                                       ML.GROUP_ID,
                                                       LG.GROUP_CODE,
                                                        CASE
                                WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN
                                LG.LEDGER_GROUP
                                ELSE
                                PG.LEDGER_GROUP
                                END AS PARENT_GROUP,
                                       IF(?SHOWGROUPCODE = 1 OR ?SHOWLEDGERCODE = 1,
                                       CASE
                                         WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN
                                          CONCAT('     ',LG.LEDGER_GROUP)
                                         ELSE
                                       CONCAT('   ',LG.LEDGER_GROUP)
                                       END,LG.LEDGER_GROUP) AS LEDGER_GROUP,

                                      IF(?SHOWGROUPCODE = 1 AND ?SHOWLEDGERCODE = 1,
                                          CASE
                                            WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN
                                             CONCAT('   ', ML.LEDGER_NAME)
                                            ELSE
                                             CONCAT('      ', ML.LEDGER_NAME)
                                         END,
                                         ML.LEDGER_NAME) AS LEDGER_NAME,
                                                       ML.LEDGER_CODE,LG.SORT_ORDER,
                                                       (IFNULL(CASE
                                                         WHEN SUM(CASE
                                                                    WHEN MT.TRANS_MODE = 'DR' THEN
                                                                     MT.AMOUNT
                                                                    ELSE
                                                                     -MT.AMOUNT
                                                                  END) < 0 THEN
                                                          ABS(SUM(CASE
                                                                    WHEN MT.TRANS_MODE = 'DR' THEN
                                                                     MT.AMOUNT
                                                                    ELSE
                                                                     -MT.AMOUNT
                                                                  END))
                                                       END,0)) + IF(?BEGIN_FROM = ?DATE_FROM, IFNULL(LB.AMOUNT, 0), 0) AS RECEIPTAMT

                                                  FROM MASTER_LEDGER_GROUP LG
                                                    INNER JOIN MASTER_LEDGER_GROUP PG
                                                     ON LG.PARENT_GROUP_ID=PG.GROUP_ID
                                                  LEFT JOIN MASTER_LEDGER ML
                                                    ON ML.GROUP_ID = LG.GROUP_ID
                                                  LEFT JOIN (SELECT VM.PROJECT_ID, VT.VOUCHER_ID, VT.LEDGER_ID, VT.AMOUNT, VT.TRANS_MODE
                                                        FROM VOUCHER_MASTER_TRANS VM
                                                        INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VM.VOUCHER_ID
                                                        WHERE VM.PROJECT_ID IN (?PROJECT_ID) AND VM.STATUS = 1
                                                        AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO) AS MT
                                                    ON MT.LEDGER_ID = ML.LEDGER_ID
                                                  LEFT JOIN LEDGER_BALANCE LB ON LB.LEDGER_ID = ML.LEDGER_ID AND LB.PROJECT_ID = MT.PROJECT_ID AND LB.TRANS_FLAG = 'OP'
                                                    AND LB.TRANS_MODE = 'CR' AND LB.PROJECT_ID IN (?PROJECT_ID)
                                                  WHERE LG.GROUP_ID NOT IN (12, 13) AND LG.NATURE_ID NOT IN(3,4)
                                                  GROUP BY ML.LEDGER_ID) AS T
                                         WHERE T.RECEIPTAMT > 0  ORDER BY SORT_ORDER";

                        break;
                    }
                #endregion

                #region Income Final Expenditure
                case ReportSQLCommand.FinalAccounts.FinalIncomeExpenditure:
                    {
                        query = @"SELECT T.LEDGER_ID, T.GROUP_ID, T.GROUP_CODE, T.PARENT_GROUP, T.LEDGER_GROUP, T.LEDGER_CODE, T.IS_DEPRECIATION_LEDGER, T.LEDGER_NAME, 
                                (T.AMOUNT  + IF(?BEGIN_FROM = ?DATE_FROM, IFNULL(OP_AMOUNT,0), 0)) AS AMOUNT,
                                ?CURRENCY_COUNTRY_ID AS CURRENCY_COUNTRY_ID 
                                FROM (SELECT ML.LEDGER_ID, ML.GROUP_ID, LG.GROUP_CODE, ML.IS_DEPRECIATION_LEDGER,
                                            CASE
                                            WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN
                                                LG.LEDGER_GROUP
                                            ELSE
                                                PG.LEDGER_GROUP
                                            END AS PARENT_GROUP,
                                            IF(0 = 1 OR 1 = 1,
                                                CASE
                                                WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN
                                                    CONCAT('    ',LG.LEDGER_GROUP)
                                                ELSE
                                                    CONCAT('   ',LG.LEDGER_GROUP)
                                                    END,LG.LEDGER_GROUP) AS LEDGER_GROUP,
                                            IF(0 = 1 AND 1 = 1,
                                                CASE
                                                WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN
                                                CONCAT('   ', ML.LEDGER_NAME)
                                                ELSE
                                                CONCAT('      ', ML.LEDGER_NAME)
                                                END, ML.LEDGER_NAME) AS LEDGER_NAME,
                                            ML.LEDGER_CODE,LG.SORT_ORDER,
                                SUM(IF(MT.TRANS_MODE = 'CR', IFNULL(MT.AMOUNT, 0), -IFNULL(MT.AMOUNT,0))) AS AMOUNT
                                FROM MASTER_LEDGER_GROUP LG
                                INNER JOIN MASTER_LEDGER_GROUP PG ON LG.PARENT_GROUP_ID=PG.GROUP_ID
                                INNER JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID
                                LEFT JOIN (SELECT VM.PROJECT_ID, VT.VOUCHER_ID, VT.LEDGER_ID, 
                                            (VT.AMOUNT * IF(VM.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)) AS AMOUNT, VT.TRANS_MODE
                                            FROM VOUCHER_MASTER_TRANS VM
                                            INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VM.VOUCHER_ID
                                            WHERE VM.PROJECT_ID IN (?PROJECT_ID) AND VM.STATUS = 1
                                            AND IF(?CURRENCY_COUNTRY_ID > 0, VM.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)    
                                            AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO) AS MT ON MT.LEDGER_ID = ML.LEDGER_ID
                                WHERE LG.NATURE_ID IN (1,2) GROUP BY ML.LEDGER_ID) AS T
                                LEFT JOIN (SELECT LEDGER_ID, SUM(IF(TRANS_MODE = 'CR', IFNULL(LB.AMOUNT, 0), -IFNULL(LB.AMOUNT, 0))) AS OP_AMOUNT
                                             FROM LEDGER_BALANCE LB WHERE LB.TRANS_FLAG = 'OP' AND LB.PROJECT_ID IN (?PROJECT_ID) GROUP BY LEDGER_ID) LB
                                     ON LB.LEDGER_ID = T.LEDGER_ID"; //ORDER BY T.SORT_ORDER
                        break;
                    }

                case ReportSQLCommand.FinalAccounts.GetProjectlist:
                    {
                        query = @" SELECT MP.PROJECT_ID, PROJECT_CATEGORY_ID, MD.DIVISION,MP.PROJECT AS PROJECT_NAME,
                               CONCAT(MP.PROJECT,CONCAT(' - ',MD.DIVISION)) AS 'PROJECT'
                               FROM MASTER_PROJECT MP INNER JOIN MASTER_DIVISION MD ON
                               MP.DIVISION_ID=MD.DIVISION_ID AND MP.DELETE_FLAG<>1
                               GROUP BY MP.PROJECT_ID ORDER BY MP.PROJECT ASC";
                        break;
                    }
                case ReportSQLCommand.FinalAccounts.GetProjectCategoryName:
                    {
                        query = "SELECT " +
                        "PROJECT_CATOGORY_ID, " +
                        "PROJECT_CATOGORY_NAME " +
                        "FROM " +
                        "MASTER_PROJECT_CATOGORY WHERE PROJECT_CATOGORY_NAME IN (?PROJECT_CATOGORY_NAME)";
                        break;
                    }
                #endregion

                #region Income Expenditure
                case ReportSQLCommand.FinalAccounts.IncomeExpenditure:
                    {
                        query = @"SELECT T.LEDGER_ID,
                                       T.GROUP_ID,
                                       T.GROUP_CODE,
                                       T.LEDGER_GROUP,
                                       T.LEDGER_CODE  AS PAYLEDGER_CODE,
                                       T.LEDGER_NAME  AS PAYLEDGER_NAME,
                                       T.PAYMENTAMT,
                                       T.LEDGER_CODE,
                                       T.LEDGER_NAME,
                                       T.RECEIPTAMT
                                    FROM (SELECT ML.LEDGER_ID,
                                               ML.GROUP_ID,
                                               LG.GROUP_CODE,
                                               LG.LEDGER_GROUP,
                                               ML.LEDGER_CODE,
                                               ML.LEDGER_NAME,
                                               CASE
                                                 WHEN SUM(CASE
                                                            WHEN VT.TRANS_MODE = 'DR' THEN
                                                             VT.AMOUNT
                                                            ELSE
                                                             -VT.AMOUNT
                                                          END) > 0 THEN
                                                  ABS(SUM(CASE
                                                            WHEN VT.TRANS_MODE = 'DR' THEN
                                                             VT.AMOUNT
                                                            ELSE
                                                             -VT.AMOUNT
                                                          END))
                                               END AS RECEIPTAMT,
                                               CASE
                                                 WHEN SUM(CASE
                                                            WHEN VT.TRANS_MODE = 'DR' THEN
                                                             VT.AMOUNT
                                                            ELSE
                                                             -VT.AMOUNT
                                                          END) < 0 THEN
                                                  ABS(SUM(CASE
                                                            WHEN VT.TRANS_MODE = 'DR' THEN
                                                             VT.AMOUNT
                                                            ELSE
                                                             -VT.AMOUNT
                                                          END))
                                               END AS PAYMENTAMT,
                                               CASE
                                                 WHEN VT.AMOUNT < 0 THEN
                                                  LEDGER_NAME = NULL AND LEDGER_CODE = NULL
                                               END
                                          FROM MASTER_LEDGER_GROUP LG
                                          LEFT JOIN MASTER_LEDGER ML
                                            ON ML.GROUP_ID = LG.GROUP_ID
                                          LEFT JOIN VOUCHER_TRANS VT
                                            ON VT.LEDGER_ID = ML.LEDGER_ID
                                          LEFT JOIN VOUCHER_MASTER_TRANS MT
                                            ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                         WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                           AND MT.STATUS = 1
                                           AND LG.GROUP_ID = 18
                                           AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO
                                           AND LG.GROUP_ID NOT IN (12, 13)
                                           AND LG.NATURE_ID IN (1, 2)
                                         GROUP BY VT.LEDGER_ID
                                        UNION ALL
                                        SELECT ML.LEDGER_ID,
                                               ML.GROUP_ID,
                                               LG.GROUP_CODE,
                                               LG.LEDGER_GROUP,
                                               ML.LEDGER_CODE,
                                               ML.LEDGER_NAME,
                                               CASE
                                                 WHEN SUM(CASE
                                                            WHEN VT.TRANS_MODE = 'DR' THEN
                                                             VT.AMOUNT
                                                            ELSE
                                                             -VT.AMOUNT
                                                          END) < 0 THEN
                                                  ABS(SUM(CASE
                                                            WHEN VT.TRANS_MODE = 'DR' THEN
                                                             VT.AMOUNT
                                                            ELSE
                                                             -VT.AMOUNT
                                                          END))
                                               END AS RECEIPTAMT,
                                               CASE
                                                 WHEN SUM(CASE
                                                            WHEN VT.TRANS_MODE = 'DR' THEN
                                                             VT.AMOUNT
                                                            ELSE
                                                             -VT.AMOUNT
                                                          END) > 0 THEN
                                                  ABS(SUM(CASE
                                                            WHEN VT.TRANS_MODE = 'DR' THEN
                                                             VT.AMOUNT
                                                            ELSE
                                                             -VT.AMOUNT
                                                          END))
                                               END AS PAYMENTAMT,
                                               CASE
                                                 WHEN VT.AMOUNT > 0 THEN
                                                  LEDGER_NAME = NULL AND LEDGER_CODE = NULL
                                               END
                                          FROM MASTER_LEDGER_GROUP LG
                                          LEFT JOIN MASTER_LEDGER ML
                                            ON ML.GROUP_ID = LG.GROUP_ID
                                          LEFT JOIN VOUCHER_TRANS VT
                                            ON VT.LEDGER_ID = ML.LEDGER_ID
                                          LEFT JOIN VOUCHER_MASTER_TRANS MT
                                            ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                         WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                           AND MT.STATUS = 1
                                           AND LG.GROUP_ID = 19
                                           AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO
                                           AND LG.GROUP_ID NOT IN (12, 13)
                                           AND LG.NATURE_ID IN (1, 2)
                                         GROUP BY VT.LEDGER_ID) AS T ";
                        break;
                    }
                #endregion

                #region Expendiure
                case ReportSQLCommand.FinalAccounts.Expenditure:
                    {
                        //On 06/04/2020, to have second level group order (CONCAT(MLG.LEDGER_GROUP))
                        query = "SELECT T.LEDGER_ID,\n" +
                        "       T.GROUP_ID,\n" +
                        "       T.GROUP_CODE,\n" +
                        "       T.PARENT_GROUP,\n" +
                        "       T.LEDGER_GROUP,\n" +
                        "       T.LEDGER_CODE,\n" +
                        "       T.LEDGER_NAME,\n" +
                        "       T.PAYMENTAMT,T.SORT_ORDER\n" +
                        "  FROM (SELECT ML.LEDGER_ID,\n" +
                        "               ML.GROUP_ID,\n" +
                        "               LG.GROUP_CODE,\n" +
                        "CASE\n" +
                         "       WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                        "        LG.LEDGER_GROUP\n" +
                        "        ELSE\n" +
                        "        PG.LEDGER_GROUP\n" +
                        "        END AS PARENT_GROUP,\n" +
                        "               IF(?SHOWGROUPCODE = 1 OR ?SHOWLEDGERCODE = 1,\n" +
                        "               CASE\n" +
                        "                 WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                        "                  CONCAT('    ',LG.LEDGER_GROUP)\n" +
                        "                 ELSE\n" +
                        "               CONCAT('   ',LG.LEDGER_GROUP)\n" +
                        "               END,LG.LEDGER_GROUP) AS LEDGER_GROUP,\n" +
                        "              IF(?SHOWGROUPCODE = 1 AND ?SHOWLEDGERCODE = 1,\n" +
                        "                  CASE\n" +
                        "                    WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                        "                     CONCAT('   ', ML.LEDGER_NAME)\n" +
                        "                    ELSE\n" +
                        "                     CONCAT('      ', ML.LEDGER_NAME)\n" +
                        "                 END,\n" +
                        "                 ML.LEDGER_NAME) AS LEDGER_NAME,\n" +
                        "               ML.LEDGER_CODE,LG.SORT_ORDER,\n" +
                        "               IFNULL((CASE\n" +
                        "                 WHEN SUM(CASE\n" +
                        "                            WHEN MT.TRANS_MODE = 'DR' THEN\n" +
                        "                             MT.AMOUNT\n" +
                        "                            ELSE\n" +
                        "                             -MT.AMOUNT\n" +
                        "                          END) > 0 THEN\n" +
                        "                  ABS(SUM(CASE\n" +
                        "                            WHEN MT.TRANS_MODE = 'DR' THEN\n" +
                        "                             MT.AMOUNT\n" +
                        "                            ELSE\n" +
                        "                             -MT.AMOUNT\n" +
                        "                          END))\n" +
                        "               END),0) + IF(?BEGIN_FROM = ?DATE_FROM, IFNULL(LB.AMOUNT, 0), 0) AS PAYMENTAMT\n" +
                        " FROM MASTER_LEDGER_GROUP LG\n" +
                        " INNER JOIN MASTER_LEDGER_GROUP PG\n" +
                        "           ON LG.PARENT_GROUP_ID=PG.GROUP_ID\n" +
                        " LEFT JOIN MASTER_LEDGER ML\n" +
                        "            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        " LEFT JOIN (SELECT VM.PROJECT_ID, VT.VOUCHER_ID, VT.LEDGER_ID, VT.AMOUNT, VT.TRANS_MODE\n" +
                        "                        FROM VOUCHER_MASTER_TRANS VM\n" +
                        "                        INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VM.VOUCHER_ID\n" +
                        "                        WHERE VM.PROJECT_ID IN (?PROJECT_ID) AND VM.STATUS = 1\n" +
                        "                        AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO) AS MT\n" +
                        " ON MT.LEDGER_ID = ML.LEDGER_ID\n" +
                        " LEFT JOIN LEDGER_BALANCE LB ON LB.LEDGER_ID = ML.LEDGER_ID AND LB.PROJECT_ID= MT.PROJECT_ID AND LB.TRANS_FLAG = 'OP'\n" +
                        " AND LB.TRANS_MODE = 'DR' AND LB.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "         WHERE LG.GROUP_ID NOT IN (12, 13)\n" +
                        "           AND LG.NATURE_ID NOT IN (3, 4)\n" +
                        "         GROUP BY ML.LEDGER_ID) AS T\n" +
                        " WHERE T.PAYMENTAMT > 0 ORDER BY T.SORT_ORDER";

                        break;
                    }
                #endregion

                #region Final Receipts and Journal
                case ReportSQLCommand.FinalAccounts.FinalReceiptJournal:
                    {

                        //query = "SELECT T.LEDGER_ID,T.GROUP_ID,T.GROUP_CODE,T.LEDGER_GROUP,T.LEDGER_CODE,T.LEDGER_NAME,CAST(T.RECEIPTAMT AS DECIMAL) AS RECEIPTAMT\n" +
                        //"  FROM (SELECT FDR.INTEREST_LEDGER_ID AS LEDGER_ID,\n" +
                        //"               ML.GROUP_ID,\n" +
                        //"               ML.GROUP_CODE,\n" +
                        //"               ML.LEDGER_GROUP,\n" +
                        //"               MLG.LEDGER_CODE,\n" +
                        //"               MLG.LEDGER_NAME,\n" +
                        //"               IFNULL(SUM(FDR.ACCUMULATED_INTEREST_AMOUNT), 0) AS RECEIPTAMT,\n" +
                        //"               IF(FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                        //"                  IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) +\n" +
                        //"                  IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                        //"                  IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) = 0,\n" +
                        //"                  'Closed',\n" +
                        //"                  'Active') AS CLOSING_STATUS\n" +
                        //"          FROM FD_ACCOUNT AS FDA\n" +
                        //"          LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                        //"                           MAX(MATURITY_DATE) AS MATURITY_DATE,\n" +
                        //"                           MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                        //"                           SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                        //"                           SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                        //"                           SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                        //"                      FROM FD_RENEWAL\n" +
                        //"                     WHERE STATUS = 1\n" +
                        //"                       AND IS_DELETED = 1\n" +
                        //"                       AND RENEWAL_DATE < ?DATE_FROM\n" +
                        //"                     GROUP BY FD_ACCOUNT_ID) AS FDRO\n" +
                        //"            ON FDA.FD_ACCOUNT_ID = FDRO.FD_ACCOUNT_ID\n" +
                        //"          LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                        //"                           INTEREST_LEDGER_ID,\n" +
                        //"                           MAX(MATURITY_DATE) AS MATURITY_DATE,\n" +
                        //"                           MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                        //"                           INTEREST_RATE,\n" +
                        //"                           IF(INTEREST_TYPE = 0, 'Simple', 'Compound') AS INTEREST_MODE,\n" +
                        //"                           SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                        //"                           SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                        //"                           SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                        //"                      FROM FD_RENEWAL\n" +
                        //"                     WHERE STATUS = 1\n" +
                        //"                       AND IS_DELETED = 1\n" +
                        //"                       AND RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        //"                     GROUP BY FD_ACCOUNT_ID\n" +
                        //"                     ORDER BY FD_ACCOUNT_ID DESC) AS FDR\n" +
                        //"            ON FDA.FD_ACCOUNT_ID = FDR.FD_ACCOUNT_ID\n" +
                        //"          LEFT JOIN MASTER_BANK AS MBK\n" +
                        //"            ON FDA.BANK_ID = MBK.BANK_ID\n" +
                        //"          LEFT JOIN MASTER_PROJECT MPR\n" +
                        //"            ON FDA.PROJECT_ID = MPR.PROJECT_ID\n" +
                        //"          LEFT JOIN MASTER_LEDGER MLG\n" +
                        //"            ON FDR.INTEREST_LEDGER_ID = MLG.LEDGER_ID\n" +
                        //"          LEFT JOIN MASTER_LEDGER_GROUP AS ML\n" +
                        //"            ON MLG.GROUP_ID = ML.GROUP_ID\n" +
                        //"         WHERE FDA.STATUS = 1\n" +
                        //"           AND FDA.INVESTMENT_DATE <= ?DATE_TO\n" +
                        //"           AND MPR.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //"           AND FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                        //"               IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) <> 0) AS T\n" +
                        //" WHERE T.CLOSING_STATUS = 'Closed'";
                        query = "SELECT T.* FROM( SELECT FDA.INVESTMENT_DATE, MLG.LEDGER_CODE,ML.GROUP_CODE,ML.GROUP_ID,\n" +
                                 "   CASE\n" +
                                 "       WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                 "           ML.LEDGER_GROUP\n" +
                                 "       ELSE\n" +
                                 "           PG.LEDGER_GROUP\n" +
                                 "       END AS PARENT_GROUP,\n" +
                                 "      IF(?SHOWGROUPCODE = 1 OR ?SHOWLEDGERCODE = 1,\n" +
                                 "      CASE\n" +
                                 "        WHEN ML.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                 "         CONCAT(ML.LEDGER_GROUP)\n" +
                                 "        ELSE\n" +
                                 "      CONCAT('   ',ML.LEDGER_GROUP)\n" +
                                 "      END,ML.LEDGER_GROUP) AS LEDGER_GROUP,\n" +
                                 "       IF(?SHOWGROUPCODE = 1 AND ?SHOWLEDGERCODE = 1,\n" +
                                 "         CASE\n" +
                                 "           WHEN ML.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                 "            CONCAT('   ', MLG.LEDGER_NAME)\n" +
                                 "           ELSE\n" +
                                 "            CONCAT('      ', MLG.LEDGER_NAME)\n" +
                                 "        END,\n" +
                                 "        MLG.LEDGER_NAME) AS LEDGER_NAME,\n" +
                                 "       IFNULL(FDR.MATURITY_DATE, FDA.MATURED_ON) AS MATURITY_DATE,\n" +
                                 "       FDR.RENEWAL_DATE,\n" +
                                 "       FDA.FD_ACCOUNT_NUMBER, FDR.INTEREST_LEDGER_ID AS LEDGER_ID,\n" +
                                 "       CONCAT(MBK.BANK, ' (', MBK.BRANCH, ')') AS BANK,\n" +
                                 "       ML.SORT_ORDER, \n" + // by alex to merge receipt and journal data source.
                                 "       MPR.PROJECT, MPR.PROJECT_ID,\n" +
                                 "       IFNULL(FDR.INTEREST_RATE, FDA.INTEREST_RATE) AS INTEREST_RATE,\n" +
                                 "       FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                 "       IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) AS PRINCIPLE_AMOUNT,\n" +
                                 "       IFNULL(FDR.INTEREST_AMOUNT, 0) AS INTEREST_AMOUNT,\n" +
                            //"       IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                                    "    cast(IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) + IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT_TDS_AMOUNT,0) as DECIMAL(15,2))  AS RECEIPTAMT,\n" +
                                 "       0.0 AS RECEIPTAMTPREVIOUS,\n" +   // by alex to merge receipt and journal data source. This amount type is decimal. So i casted the type.
                                 "       FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                 "       IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) +\n" +
                                 "       IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) AS TOTAL_AMOUNT,\n" +
                                 "       IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) AS WITHDRAWAL_AMOUNT,\n" +
                                 "       FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                 "       IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) +\n" +
                                 "       IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                 "       IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) AS BALANCE_AMOUNT,\n" +
                                 "\n" +
                                 "       IFNULL(IF(FDA.INTEREST_TYPE=0,'Simple','Compound'),FDR.INTEREST_MODE) AS INTEREST_MODE,\n" +
                                 "       IF(FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                 "          IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) +\n" +
                                 "          IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                 "          IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) = 0,\n" +
                                 "          'Closed',\n" +
                                 "          'Active') AS CLOSING_STATUS\n" +
                                 "  FROM FD_ACCOUNT AS FDA\n" +
                                 "  LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                                 "                    MAX(MATURITY_DATE) AS MATURITY_DATE,INTEREST_LEDGER_ID,\n" +
                                 "                    MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                                 "                    SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                                 "                    SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                                 "                    SUM(IF(RENEWAL_TYPE = 'ACI', TDS_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT_TDS_AMOUNT,\n" +
                                 "                    SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                                 "               FROM FD_RENEWAL\n" +
                                 "              WHERE STATUS = 1 AND IS_DELETED=1 \n" +
                                 "                AND RENEWAL_DATE < ?DATE_FROM \n" +
                                 "              GROUP BY FD_ACCOUNT_ID) AS FDRO\n" +
                                 "    ON FDA.FD_ACCOUNT_ID = FDRO.FD_ACCOUNT_ID\n" +
                                 "\n" +
                                 "  LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                                 "                    MAX(MATURITY_DATE) AS MATURITY_DATE,INTEREST_LEDGER_ID,\n" +
                                 "                    MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                                 "                    INTEREST_RATE,\n" +
                                 "                    IF(INTEREST_TYPE=0,'Simple','Compound') AS INTEREST_MODE,\n" +
                                 "                    SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                                 "                    SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                                 "                    SUM(IF(RENEWAL_TYPE = 'ACI', TDS_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT_TDS_AMOUNT,\n" +
                                 "                    SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                                 "               FROM FD_RENEWAL AS F\n" +
                                 "              WHERE STATUS = 1  AND IS_DELETED=1\n" +
                                 "                AND RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO \n" +
                                 "              GROUP BY F.RENEWAL_DATE, FD_ACCOUNT_ID ORDER BY FD_ACCOUNT_ID DESC) AS FDR\n" +
                                 "    ON FDA.FD_ACCOUNT_ID = FDR.FD_ACCOUNT_ID\n" +
                                 "  LEFT JOIN MASTER_BANK AS MBK\n" +
                                 "    ON FDA.BANK_ID = MBK.BANK_ID\n" +
                                 "  LEFT JOIN MASTER_PROJECT MPR\n" +
                                 "    ON FDA.PROJECT_ID = MPR.PROJECT_ID\n" +
                                 "  LEFT JOIN MASTER_LEDGER MLG\n" +
                                 "    ON FDR.INTEREST_LEDGER_ID = MLG.LEDGER_ID\n" +
                                 "  LEFT JOIN MASTER_LEDGER_GROUP AS ML\n" +
                                 "      ON MLG.GROUP_ID=ML.GROUP_ID\n" +
                                 "  INNER JOIN MASTER_LEDGER_GROUP PG\n" +
                                 "   ON ML.PARENT_GROUP_ID=PG.GROUP_ID\n" +
                                 " WHERE FDA.STATUS = 1\n" +
                                 "   AND FDA.INVESTMENT_DATE <= ?DATE_TO \n" +
                                 " {AND MPR.PROJECT_ID IN (?PROJECT_ID)}\n" +
                                 "   AND FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                 "       IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) <> 0) AS T WHERE T.LEDGER_GROUP IS NOT NULL";


                        break;
                    }
                case ReportSQLCommand.FinalAccounts.FinalReceiptJournalPrevious:
                    {
                        query = "SELECT T.* FROM( SELECT FDA.INVESTMENT_DATE, MLG.LEDGER_CODE,ML.GROUP_CODE,ML.GROUP_ID,\n" +
                                 "   CASE\n" +
                                 "       WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                 "           ML.LEDGER_GROUP\n" +
                                 "       ELSE\n" +
                                 "           PG.LEDGER_GROUP\n" +
                                 "       END AS PARENT_GROUP,\n" +
                                 "      IF(?SHOWGROUPCODE = 1 OR ?SHOWLEDGERCODE = 1,\n" +
                                 "      CASE\n" +
                                 "        WHEN ML.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                 "         CONCAT(ML.LEDGER_GROUP)\n" +
                                 "        ELSE\n" +
                                 "      CONCAT('   ',ML.LEDGER_GROUP)\n" +
                                 "      END,ML.LEDGER_GROUP) AS LEDGER_GROUP,\n" +
                                 "       IF(?SHOWGROUPCODE = 1 AND ?SHOWLEDGERCODE = 1,\n" +
                                 "         CASE\n" +
                                 "           WHEN ML.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                 "            CONCAT('   ', MLG.LEDGER_NAME)\n" +
                                 "           ELSE\n" +
                                 "            CONCAT('      ', MLG.LEDGER_NAME)\n" +
                                 "        END,\n" +
                                 "        MLG.LEDGER_NAME) AS LEDGER_NAME,\n" +
                                 "       IFNULL(FDR.MATURITY_DATE, FDA.MATURED_ON) AS MATURITY_DATE,\n" +
                                 "       FDR.RENEWAL_DATE,\n" +
                                 "       FDA.FD_ACCOUNT_NUMBER, FDR.INTEREST_LEDGER_ID AS LEDGER_ID,\n" +
                                 "       CONCAT(MBK.BANK, ' (', MBK.BRANCH, ')') AS BANK,\n" +
                                 "       ML.SORT_ORDER, \n" + // by alex to merge receipt and journal data source.
                                 "       MPR.PROJECT,\n" +
                                 "       IFNULL(FDR.INTEREST_RATE, FDA.INTEREST_RATE) AS INTEREST_RATE,\n" +
                                 "       FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                 "       IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) AS PRINCIPLE_AMOUNT,\n" +
                                 "       IFNULL(FDR.INTEREST_AMOUNT, 0) AS INTEREST_AMOUNT,\n" +
                            //"       IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                                    "    cast(IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) + IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT_TDS_AMOUNT,0) as DECIMAL(15,2)) AS RECEIPTAMTPREVIOUS,\n" +
                                 "       0.0 AS RECEIPTAMT,\n" +   // by alex to merge receipt and journal data source. This amount type is decimal. So i casted the type.
                                 "       FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                 "       IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) +\n" +
                                 "       IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) AS TOTAL_AMOUNT,\n" +
                                 "       IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) AS WITHDRAWAL_AMOUNT,\n" +
                                 "       FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                 "       IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) +\n" +
                                 "       IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                 "       IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) AS BALANCE_AMOUNT,\n" +
                                 "\n" +
                                 "       IFNULL(IF(FDA.INTEREST_TYPE=0,'Simple','Compound'),FDR.INTEREST_MODE) AS INTEREST_MODE,\n" +
                                 "       IF(FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                 "          IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) +\n" +
                                 "          IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                 "          IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) = 0,\n" +
                                 "          'Closed',\n" +
                                 "          'Active') AS CLOSING_STATUS\n" +
                                 "  FROM FD_ACCOUNT AS FDA\n" +
                                 "  LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                                 "                    MAX(MATURITY_DATE) AS MATURITY_DATE,INTEREST_LEDGER_ID,\n" +
                                 "                    MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                                 "                    SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                                 "                    SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                                 "                    SUM(IF(RENEWAL_TYPE = 'ACI', TDS_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT_TDS_AMOUNT,\n" +
                                 "                    SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                                 "               FROM FD_RENEWAL\n" +
                                 "              WHERE STATUS = 1 AND IS_DELETED=1 \n" +
                                 "                AND RENEWAL_DATE < ?DATE_FROM \n" +
                                 "              GROUP BY FD_ACCOUNT_ID) AS FDRO\n" +
                                 "    ON FDA.FD_ACCOUNT_ID = FDRO.FD_ACCOUNT_ID\n" +
                                 "\n" +
                                 "  LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                                 "                    MAX(MATURITY_DATE) AS MATURITY_DATE,INTEREST_LEDGER_ID,\n" +
                                 "                    MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                                 "                    INTEREST_RATE,\n" +
                                 "                    IF(INTEREST_TYPE=0,'Simple','Compound') AS INTEREST_MODE,\n" +
                                 "                    SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                                 "                    SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                                 "                    SUM(IF(RENEWAL_TYPE = 'ACI', TDS_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT_TDS_AMOUNT,\n" +
                                 "                    SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                                 "               FROM FD_RENEWAL AS F\n" +
                                 "              WHERE STATUS = 1  AND IS_DELETED=1\n" +
                                 "                AND RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO \n" +
                                 "              GROUP BY F.RENEWAL_DATE, FD_ACCOUNT_ID ORDER BY FD_ACCOUNT_ID DESC) AS FDR\n" +
                                 "    ON FDA.FD_ACCOUNT_ID = FDR.FD_ACCOUNT_ID\n" +
                                 "  LEFT JOIN MASTER_BANK AS MBK\n" +
                                 "    ON FDA.BANK_ID = MBK.BANK_ID\n" +
                                 "  LEFT JOIN MASTER_PROJECT MPR\n" +
                                 "    ON FDA.PROJECT_ID = MPR.PROJECT_ID\n" +
                                 "  LEFT JOIN MASTER_LEDGER MLG\n" +
                                 "    ON FDR.INTEREST_LEDGER_ID = MLG.LEDGER_ID\n" +
                                 "  LEFT JOIN MASTER_LEDGER_GROUP AS ML\n" +
                                 "      ON MLG.GROUP_ID=ML.GROUP_ID\n" +
                                 "  INNER JOIN MASTER_LEDGER_GROUP PG\n" +
                                 "   ON ML.PARENT_GROUP_ID=PG.GROUP_ID\n" +
                                 " WHERE FDA.STATUS = 1\n" +
                                 "   AND FDA.INVESTMENT_DATE <= ?DATE_TO \n" +
                                 " {AND MPR.PROJECT_ID IN (?PROJECT_ID)}\n" +
                                 "   AND FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                 "       IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) <> 0) AS T WHERE T.LEDGER_GROUP IS NOT NULL";
                        break;
                    }
                case ReportSQLCommand.FinalAccounts.FetchTDSOnFDInterest:
                    {
                        query = "SELECT VM.VOUCHER_DATE, ML.LEDGER_ID,ML.GROUP_ID, LG.GROUP_CODE,LG.SORT_ORDER,\n" +
                                "CASE\n" +
                                "WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                "LG.LEDGER_GROUP\n" +
                                "ELSE\n" +
                                "PG.LEDGER_GROUP\n" +
                                "END AS PARENT_GROUP,\n" +
                                "IF(?SHOWGROUPCODE = 1 OR ?SHOWLEDGERCODE = 1,\n" +
                                "CASE\n" +
                                "WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                "CONCAT(LG.LEDGER_GROUP)\n" +
                                "ELSE\n" +
                                "CONCAT('   ',LG.LEDGER_GROUP)\n" +
                                "END,LG.LEDGER_GROUP) AS LEDGER_GROUP,\n" +
                                "IF(?SHOWGROUPCODE = 1 AND ?SHOWLEDGERCODE = 1,\n" +
                                "CASE\n" +
                                "WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                "    CONCAT('   ', ML.LEDGER_NAME)\n" +
                                "ELSE\n" +
                                "    CONCAT('      ', ML.LEDGER_NAME)\n" +
                                "END,ML.LEDGER_NAME) AS LEDGER_NAME,\n" +
                                "ML.LEDGER_CODE, MP.PROJECT_ID,\n" +
                                "IFNULL(VT.AMOUNT,0) AS PAYMENTAMT, 0.0 AS PAYMENTAMTPREVIOUS\n" +
                                "FROM VOUCHER_MASTER_TRANS VM\n" +
                                "INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VM.VOUCHER_ID\n" +
                                "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                "INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID\n" +
                                "INNER JOIN MASTER_LEDGER_GROUP PG ON PG.GROUP_ID = LG.PARENT_GROUP_ID\n" +
                                "INNER JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = VM.PROJECT_ID\n" +
                                "WHERE VM.PROJECT_ID IN(?PROJECT_ID) AND VM.VOUCHER_TYPE ='JN' AND VM.VOUCHER_SUB_TYPE ='FD' AND VT.LEDGER_ID = " + this.AppSetting.TDSOnFDInterestLedgerId + "\n" +
                                "AND VM.STATUS = 1 AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO";
                        break;
                    }
                case ReportSQLCommand.FinalAccounts.FetchTDSOnFDInterestPrevious:
                    {
                        query = "SELECT VM.VOUCHER_DATE, ML.LEDGER_ID,ML.GROUP_ID, LG.GROUP_CODE,LG.SORT_ORDER,\n" +
                                "CASE\n" +
                                "WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                "LG.LEDGER_GROUP\n" +
                                "ELSE\n" +
                                "PG.LEDGER_GROUP\n" +
                                "END AS PARENT_GROUP,\n" +
                                "IF(?SHOWGROUPCODE = 1 OR ?SHOWLEDGERCODE = 1,\n" +
                                "CASE\n" +
                                "WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                "CONCAT(LG.LEDGER_GROUP)\n" +
                                "ELSE\n" +
                                "CONCAT('   ',LG.LEDGER_GROUP)\n" +
                                "END,LG.LEDGER_GROUP) AS LEDGER_GROUP,\n" +
                                "IF(?SHOWGROUPCODE = 1 AND ?SHOWLEDGERCODE = 1,\n" +
                                "CASE\n" +
                                "WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                "    CONCAT('   ', ML.LEDGER_NAME)\n" +
                                "ELSE\n" +
                                "    CONCAT('      ', ML.LEDGER_NAME)\n" +
                                "END,ML.LEDGER_NAME) AS LEDGER_NAME,\n" +
                                "ML.LEDGER_CODE,\n" +
                                "0.0 AS PAYMENTAMT, IFNULL(VT.AMOUNT,0) AS PAYMENTAMTPREVIOUS\n" +
                                "FROM VOUCHER_MASTER_TRANS VM\n" +
                                "INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VM.VOUCHER_ID\n" +
                                "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                "INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID\n" +
                                "INNER JOIN MASTER_LEDGER_GROUP PG ON PG.GROUP_ID = LG.PARENT_GROUP_ID\n" +
                                "WHERE VM.PROJECT_ID IN(?PROJECT_ID) AND VM.VOUCHER_TYPE ='JN' AND VM.VOUCHER_SUB_TYPE ='FD' AND VT.LEDGER_ID = " + this.AppSetting.TDSOnFDInterestLedgerId + "\n" +
                                "AND VM.STATUS = 1 AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO";

                        break;
                    }
                #endregion

                #region Receipt Journal
                case ReportSQLCommand.FinalAccounts.ReceiptJournal:
                    {
                        query = "SELECT T.* FROM( SELECT FDA.INVESTMENT_DATE, MLG.LEDGER_CODE,ML.GROUP_CODE,ML.LEDGER_GROUP,ML.GROUP_ID,\n" +
                                 "       IFNULL(FDR.MATURITY_DATE, FDA.MATURED_ON) AS MATURITY_DATE,\n" +
                                 "       FDR.RENEWAL_DATE,\n" +
                                 "       FDA.FD_ACCOUNT_NUMBER, FDR.INTEREST_LEDGER_ID AS LEDGER_ID,\n" +
                                 "       CONCAT(MBK.BANK, ' (', MBK.BRANCH, ')') AS BANK,\n" +
                                 "       MLG.LEDGER_NAME, \n" +
                                 "       MPR.PROJECT,\n" +
                                 "       IFNULL(FDR.INTEREST_RATE, FDA.INTEREST_RATE) AS INTEREST_RATE,\n" +
                                 "       FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                 "       IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) AS PRINCIPLE_AMOUNT,\n" +
                                 "       IFNULL(FDR.INTEREST_AMOUNT, 0) AS INTEREST_AMOUNT,\n" +
                            //"       IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                                    "     cast( IFNULL(SUM(FDR.ACCUMULATED_INTEREST_AMOUNT), 0) as decimal(15,2)) AS RECEIPTAMT,\n" +
                                 "       FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                 "       IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) +\n" +
                                 "       IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) AS TOTAL_AMOUNT,\n" +
                                 "       IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) AS WITHDRAWAL_AMOUNT,\n" +
                                 "       FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                 "       IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) +\n" +
                                 "       IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                 "       IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) AS BALANCE_AMOUNT,\n" +
                                 "\n" +
                                 "       IFNULL(IF(FDA.INTEREST_TYPE=0,'Simple','Compound'),FDR.INTEREST_MODE) AS INTEREST_MODE,\n" +
                                 "       IF(FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                 "          IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) +\n" +
                                 "          IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                 "          IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) = 0,\n" +
                                 "          'Closed',\n" +
                                 "          'Active') AS CLOSING_STATUS\n" +
                                 "  FROM FD_ACCOUNT AS FDA\n" +
                                 "  LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                                 "                    MAX(MATURITY_DATE) AS MATURITY_DATE,INTEREST_LEDGER_ID,\n" +
                                 "                    MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                                 "                    SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                                 "                    SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                                 "                    SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                                 "               FROM FD_RENEWAL\n" +
                                 "              WHERE STATUS = 1 AND IS_DELETED=1 \n" +
                                 "                AND RENEWAL_DATE < ?DATE_FROM \n" +
                                 "              GROUP BY FD_ACCOUNT_ID) AS FDRO\n" +
                                 "    ON FDA.FD_ACCOUNT_ID = FDRO.FD_ACCOUNT_ID\n" +
                                 "\n" +
                                 "  LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                                 "                    MAX(MATURITY_DATE) AS MATURITY_DATE,INTEREST_LEDGER_ID,\n" +
                                 "                    MAX(RENEWAL_DATE) AS RENEWAL_DATE,\n" +
                                 "                    INTEREST_RATE,\n" +
                                 "                    IF(INTEREST_TYPE=0,'Simple','Compound') AS INTEREST_MODE,\n" +
                                 "                    SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                                 "                    SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                                 "                    SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                                 "               FROM FD_RENEWAL\n" +
                                 "              WHERE STATUS = 1  AND IS_DELETED=1\n" +
                                 "                AND RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO \n" +
                                 "              GROUP BY FD_ACCOUNT_ID ORDER BY FD_ACCOUNT_ID DESC) AS FDR\n" +
                                 "    ON FDA.FD_ACCOUNT_ID = FDR.FD_ACCOUNT_ID\n" +
                                 "  LEFT JOIN MASTER_BANK AS MBK\n" +
                                 "    ON FDA.BANK_ID = MBK.BANK_ID\n" +
                                 "  LEFT JOIN MASTER_PROJECT MPR\n" +
                                 "    ON FDA.PROJECT_ID = MPR.PROJECT_ID\n" +
                                 "  INNER JOIN MASTER_LEDGER MLG\n" +
                                 "    ON FDR.INTEREST_LEDGER_ID = MLG.LEDGER_ID\n" +
                                 "  LEFT JOIN MASTER_LEDGER_GROUP AS ML\n" +
                                 "      ON MLG.GROUP_ID=ML.GROUP_ID\n" +
                                 " WHERE FDA.STATUS = 1\n" +
                                 "   AND FDA.INVESTMENT_DATE <= ?DATE_TO \n" +
                                 " {AND MPR.PROJECT_ID IN (?PROJECT_ID)}\n" +
                                 "   AND FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                                 "       IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) <> 0) AS T GROUP BY LEDGER_ID";
                        break;
                    }
                #endregion

                #region Detail of Transactions
                case ReportSQLCommand.FinalAccounts.TransactionDetails:
                    {
                        query = "SELECT MT.VOUCHER_DATE AS 'DATE',\n" +
                                "       VT.VOUCHER_ID,MT.VOUCHER_NO,\n" +
                                "       VT.LEDGER_ID,\n" +
                                "       ML.LEDGER_CODE,\n" +
                                "       ML.LEDGER_NAME,MT.VOUCHER_SUB_TYPE,\n" +
                                "       CASE\n" +
                                "         WHEN MT.VOUCHER_TYPE = 'RC' THEN\n" +
                                "          1\n" +
                                "         WHEN MT.VOUCHER_TYPE = 'PY' THEN\n" +
                                "          2\n" +
                                "         WHEN MT.VOUCHER_TYPE = 'CN' THEN\n" +
                                "          3\n" +
                                "         WHEN MT.VOUCHER_TYPE = 'JN' THEN\n" +
                                "          4\n" +
                                "       END AS SORT_ORDER,\n" +
                                "       CASE\n" +
                                "         WHEN MT.VOUCHER_TYPE = 'RC' THEN\n" +
                                "          'Receipt'\n" +
                                "         WHEN MT.VOUCHER_TYPE = 'PY' THEN\n" +
                                "          'Payment'\n" +
                                "         WHEN MT.VOUCHER_TYPE = 'CN' THEN\n" +
                                "          'Contra'\n" +
                                "         WHEN MT.VOUCHER_TYPE = 'JN' THEN\n" +
                                "          'Journal'\n" +
                                "       END AS VOUCHER_TYPE,\n" +
                                "\n" +
                                "       CASE\n" +
                                "         WHEN MT.VOUCHER_TYPE IN ('RC', 'PY', 'CN') THEN\n" +
                                "          'LEDGER_CASHBANK_VOUCHER'\n" +
                                "         WHEN MT.VOUCHER_TYPE = 'JN' THEN\n" +
                                "          'LEDGER_JOURNAL_VOUCHER'\n" +
                                "       END AS PARTICULAR_TYPE,\n" +
                                "\n" +
                                "       CONCAT(MT.NARRATION, IF(MT.VOUCHER_SUB_TYPE='FD', CONCAT(' FD: ', FD.FD_ACCOUNT_NUMBER), '') ) AS NARRATION,\n" +
                                "       CASE\n" +
                                "         WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                                "          SUM(VT.AMOUNT)\n" +
                                "         ELSE\n" +
                                "          0.00\n" +
                                "       END AS DEBIT,\n" +
                                "       CASE\n" +
                                "         WHEN VT.TRANS_MODE = 'CR' THEN\n" +
                                "          SUM(VT.AMOUNT)\n" +
                                "         ELSE\n" +
                                "          0.00\n" +
                                "       END AS CREDIT\n" +
                                "\n" +
                                "  FROM MASTER_LEDGER_GROUP LG\n" +
                                "\n" +
                                "  LEFT JOIN MASTER_LEDGER ML\n" +
                                "    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "  LEFT JOIN VOUCHER_TRANS VT\n" +
                                "    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                "  LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                                "    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "  LEFT JOIN MASTER_BANK_ACCOUNT MBA\n" +
                                "    ON MBA.LEDGER_ID = VT.LEDGER_ID\n" +
                                "  LEFT JOIN MASTER_BANK MB\n" +
                                "    ON MB.BANK_ID = MBA.BANK_ID\n" +
                                " LEFT JOIN (SELECT FDA.FD_ACCOUNT_ID, 0 AS VOUCHER_ID, RNO.FD_INTEREST_VOUCHER_ID, RNO.FD_VOUCHER_ID,\n" +
                                "          RNO.RENEWAL_DATE, IFNULL(RNO.RECEIPT_NO,'') AS RECEIPT_NO,\n" +
                                "          CONCAT(FDA.FD_ACCOUNT_NUMBER,  IF(IFNULL(RNO.RECEIPT_NO,'')='', '', CONCAT(' (R: ', IFNULL(RNO.RECEIPT_NO,''),')')) ) AS FD_ACCOUNT_NUMBER\n" +
                                "          FROM FD_ACCOUNT AS FDA\n" +
                                "          INNER JOIN (SELECT FR.FD_ACCOUNT_ID, FR.FD_INTEREST_VOUCHER_ID, FR.FD_VOUCHER_ID,FR.RENEWAL_DATE, \n" +
                                "                   SUBSTRING_INDEX(GROUP_CONCAT(FR1.RECEIPT_NO ORDER BY FR1.RENEWAL_DATE DESC SEPARATOR '|'), '|', 1) AS RECEIPT_NO \n" +
                                "                   FROM FD_RENEWAL AS FR\n" +
                                "                   LEFT JOIN (SELECT FR1.FD_ACCOUNT_ID, FR1.RENEWAL_DATE AS RENEWAL_DATE, IFNULL(FR1.RECEIPT_NO, '') AS RECEIPT_NO\n" +
                                "                       FROM FD_RENEWAL AS FR1\n" +
                                "                       INNER JOIN FD_ACCOUNT FD1 ON FD1.FD_ACCOUNT_ID = FR1.FD_ACCOUNT_ID\n" +
                                "                       WHERE FD1.STATUS =1 AND FD1.PROJECT_ID IN (?PROJECT_ID) AND FR1.STATUS =1 AND FR1.FD_TYPE = 'RN' AND FR1.RENEWAL_DATE<=?DATE_TO) AS FR1\n" +
                                "                   ON FR1.FD_ACCOUNT_ID= FR.FD_ACCOUNT_ID AND FR1.RENEWAL_DATE<FR.RENEWAL_DATE\n" +
                                "                   WHERE STATUS =1 GROUP BY FR.FD_ACCOUNT_ID, FR.FD_RENEWAL_ID) AS RNO\n" + //FR1.RENEWAL_DATE
                                "           ON RNO.FD_ACCOUNT_ID = FDA.FD_ACCOUNT_ID WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "           UNION ALL SELECT FDA.FD_ACCOUNT_ID, FDA.FD_VOUCHER_ID, 0 AS FD_INTEREST_VOUCHER_ID, 0 AS FD_VOUCHER_ID, FDA.INVESTMENT_DATE, '' AS RECEIPT_NO, \n" +
                                "           FDA.FD_ACCOUNT_NUMBER FROM FD_ACCOUNT AS FDA WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)) AS FD\n" +
                                "    ON FD.VOUCHER_ID = MT.VOUCHER_ID OR FD.FD_INTEREST_VOUCHER_ID = MT.VOUCHER_ID OR FD.FD_VOUCHER_ID = MT.VOUCHER_ID\n" +
                                " WHERE MT.VOUCHER_TYPE IN ('RC', 'PY', 'CN', 'JN')\n" +
                                "   AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "   AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "   AND MT.STATUS = 1\n" +
                                " GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID, VT.TRANS_MODE\n" +
                                " ORDER BY MT.VOUCHER_DATE, SORT_ORDER";
                        break;
                    }
                #endregion

                #region StatisticalReports
                case ReportSQLCommand.FinalAccounts.StatisticalReport:
                    {
                        query = " SELECT 'Project' AS MASTER, IF(COUNT(DISTINCT MP.PROJECT_ID)=0,0,COUNT(DISTINCT MP.PROJECT_ID)) AS MASTER_COUNT\n" +
                                "  FROM MASTER_PROJECT MP\n" +
                                " WHERE DELETE_FLAG <> 1\n" +
                                "UNION\n" +
                                "SELECT 'Society' AS MASTER, IF(COUNT(DISTINCT IP.CUSTOMERID)=0,0,COUNT(DISTINCT IP.CUSTOMERID)) AS MASTER_COUNT\n" +
                                "  FROM MASTER_INSTI_PERFERENCE IP\n" +
                                "UNION\n" +
                                "SELECT 'Project Category' AS MASTER,\n" +
                                "       IF(COUNT(DISTINCT PC.PROJECT_CATOGORY_ID)=0,0,COUNT(DISTINCT PC.PROJECT_CATOGORY_ID)) AS MASTER_COUNT\n" +
                                "  FROM MASTER_PROJECT_CATOGORY PC\n" +
                                "UNION\n" +
                                "SELECT 'Ledger' AS MASTER, IF(COUNT(DISTINCT ML.LEDGER_ID)=0,0,COUNT(DISTINCT ML.LEDGER_ID)) AS MASTER_COUNT\n" +
                                "  FROM MASTER_LEDGER ML\n" +
                                " WHERE ML.STATUS <> 1\n" +
                                "UNION\n" +
                                "SELECT 'Ledger Group' AS MASTER,\n" +
                                "       IF(COUNT(DISTINCT MLG.GROUP_ID)=0,0,COUNT(DISTINCT MLG.GROUP_ID)) AS MASTER_COUNT\n" +
                                "  FROM MASTER_LEDGER_GROUP MLG\n" +
                                "UNION\n" +
                                "SELECT 'Bank Account' AS MASTER, IF(COUNT(DISTINCT BANK_ID)=0,0,COUNT(DISTINCT BANK_ID)) AS MASTER_COUNT\n" +
                                "  FROM MASTER_BANK_ACCOUNT BA\n" +
                                "UNION\n" +
                                "SELECT 'Bank Branch' AS MASTER, IF(COUNT(DISTINCT MB.BANK_ID)=0,0,COUNT(DISTINCT BANK_ID)) AS MASTER_COUNT\n" +
                                "  FROM MASTER_BANK MB\n" +
                                "UNION\n" +
                                "SELECT 'CostCenter' AS MASTER,\n" +
                                "       IF(COUNT(DISTINCT MCC.COST_CENTRE_ID)=0,0,COUNT(DISTINCT MCC.COST_CENTRE_ID)) AS MASTER_COUNT\n" +
                                "  FROM MASTER_COST_CENTRE MCC\n" +
                                "UNION\n" +
                                "SELECT 'CostCenter Category' AS MASTER,\n" +
                                "       IF(COUNT(DISTINCT MCCC.COST_CENTRECATEGORY_ID)=0,0,COUNT(DISTINCT MCCC.COST_CENTRECATEGORY_ID)) AS MASTER_COUNT\n" +
                                "  FROM MASTER_COST_CENTRE_CATEGORY MCCC\n" +
                                "UNION\n" +
                                "SELECT 'Country' AS MASTER, IF(COUNT(DISTINCT COUNTRY_ID)=0,0,COUNT(DISTINCT COUNTRY_ID)) AS MASTER_COUNT\n" +
                                "  FROM MASTER_COUNTRY\n" +
                                "UNION\n" +
                                "SELECT 'State' AS MASTER, IF(COUNT(DISTINCT STATE_ID)=0,0,COUNT(DISTINCT STATE_ID)) AS MASTER_COUNT\n" +
                                "  FROM MASTER_STATE\n" +
                                "UNION\n" +
                                "SELECT 'Lock Type' AS MASTER, IF(COUNT(DISTINCT LOCK_TYPE_ID)=0,0,COUNT(DISTINCT LOCK_TYPE_ID)) AS MASTER_COUNT\n" +
                                "  FROM MASTER_LOCK_TYPE\n" +
                                "UNION\n" +
                                "SELECT 'Donor' AS MASTER, IF(COUNT(DISTINCT DONAUD_ID)=0,0,COUNT(DISTINCT DONAUD_ID)) AS MASTER_COUNT\n" +
                                "  FROM MASTER_DONAUD\n" +
                                "UNION\n" +
                                "SELECT 'Purpose' AS MASTER, IF(COUNT(DISTINCT CONTRIBUTION_ID)=0,0,COUNT(CONTRIBUTION_ID)) AS MASTER_COUNT\n" +
                                "  FROM MASTER_CONTRIBUTION_HEAD\n" +
                                "UNION\n" +
                                "SELECT 'Audit Type' AS MASTER,\n" +
                                "       IF(COUNT(DISTINCT AUDIT_TYPE_ID)=0,0,COUNT(AUDIT_TYPE_ID)) AS MASTER_COUNT\n" +
                                "  FROM MASTER_AUDIT_TYPE\n" +
                                "UNION\n" +
                                "SELECT 'Auditor' AS MASTER, IF(COUNT(DISTINCT DONAUD_ID)=0,0,COUNT(DISTINCT DONAUD_ID))  AS MASTER_COUNT\n" +
                                "  FROM MASTER_DONAUD\n" +
                                " WHERE IDENTITYKEY = 1\n" +
                                "UNION\n" +
                                "SELECT 'Transaction Period' AS MASTER,\n" +
                                "       IF(COUNT(DISTINCT ACC_YEAR_ID)=0,0,COUNT(DISTINCT ACC_YEAR_ID)) AS MASTER_COUNT\n" +
                                "  FROM ACCOUNTING_YEAR\n" +
                                "UNION\n" +
                                "SELECT 'User' AS MASTER, IF(COUNT(DISTINCT USER_ID)=0,0,COUNT(DISTINCT USER_ID)) AS MASTER_COUNT\n" +
                                "  FROM USER_INFO\n" +
                                "UNION\n" +
                                "SELECT 'User Role' AS MASTER, IF(COUNT(DISTINCT USERROLE_ID)=0,0,COUNT(DISTINCT USERROLE_ID)) AS MASTER_COUNT\n" +
                                "  FROM USER_ROLE\n" +
                                "UNION\n" +
                                "SELECT 'Voucher Type' AS MASTER, IF(COUNT(DISTINCT VOUCHER_ID)=0,0,COUNT(DISTINCT VOUCHER_ID)) AS MASTER_COUNT\n" +
                                "  FROM MASTER_VOUCHER\n" +
                                "UNION\n" +
                                "SELECT 'Fixed Deposit' AS MASTER,\n" +
                                "IF(COUNT(DISTINCT FD_ACCOUNT_ID)=0,0,COUNT(DISTINCT FD_ACCOUNT_ID)) AS MASTER_COUNT\n" +
                                "  FROM FD_ACCOUNT\n" +
                                " WHERE STATUS = 1\n" +
                                "   AND FD_STATUS = 1";
                        break;
                    }
                case ReportSQLCommand.FinalAccounts.StatisticalSubReport:
                    {
                        query = "SELECT 'Receipt' AS VOUCHER, IF(COUNT(VOUCHER_ID)=0,0,COUNT(VOUCHER_ID)) AS VOUCHER_COUNT\n" +
                                "  FROM VOUCHER_MASTER_TRANS\n" +
                                " WHERE VOUCHER_TYPE = 'RC'\n" +
                                "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "   AND PROJECT_ID IN (?PROJECT_ID)\n" +
                                "   AND STATUS = 1\n" +
                                "UNION\n" +
                                "SELECT 'Payment' AS VOUCHER,IF(COUNT(VOUCHER_ID)=0,0,COUNT(VOUCHER_ID)) AS VOUCHER_COUNT\n" +
                                "  FROM VOUCHER_MASTER_TRANS\n" +
                                " WHERE VOUCHER_TYPE = 'PY'\n" +
                                "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "   AND PROJECT_ID IN (?PROJECT_ID)\n" +
                                "   AND STATUS = 1\n" +
                                "UNION\n" +
                                "SELECT 'Contra' AS VOUCHER, IF(COUNT(VOUCHER_ID)=0,0,COUNT(VOUCHER_ID)) AS VOUCHER_COUNT\n" +
                                "  FROM VOUCHER_MASTER_TRANS\n" +
                                " WHERE VOUCHER_TYPE = 'CN'\n" +
                                "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "   AND PROJECT_ID IN (?PROJECT_ID)\n" +
                                "   AND STATUS = 1\n" +
                                "UNION\n" +
                                "SELECT 'Journal' AS VOUCHER, IF(COUNT(VOUCHER_ID)=0,0,COUNT(VOUCHER_ID)) AS VOUCHER_COUNT\n" +
                                "  FROM VOUCHER_MASTER_TRANS\n" +
                                " WHERE VOUCHER_TYPE = 'JN'\n" +
                                "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "   AND PROJECT_ID IN (?PROJECT_ID)\n" +
                                "   AND STATUS = 1";
                        break;
                    }
                #endregion

                #region ProfileLossbasedOnBudget
                case ReportSQLCommand.FinalAccounts.ProfitLossBasedOnBudgetGroup:
                    {
                        query = "SELECT MP.CUSTOMERID, MP.PROJECT_ID, LG.NATURE_ID, VT.LEDGER_ID,\n" +
                                "MIP.SOCIETYNAME, MP.PROJECT, ML.LEDGER_NAME, \n" +
                                "CASE \n" +
                                " WHEN BG.BUDGET_GROUP IN (?RECURRING) THEN 'Recurring'\n" +
                                " WHEN BG.BUDGET_GROUP IN (?NONRECURRING) THEN 'Non-Recurring'\n" +
                                " ELSE IFNULL(BG.BUDGET_GROUP, 'Unmapped Budget Ledger') END AS BUDGET_GROUP,\n" +
                                "CASE \n" +
                                " WHEN BG.BUDGET_GROUP IN (?RECURRING) THEN 1\n" +
                                " WHEN BG.BUDGET_GROUP IN (?NONRECURRING) THEN 2\n" +
                                " ELSE IF(BG.BUDGET_GROUP IS NULL, 500, BG.BUDGET_GROUP_SORT_ID) END AS BUDGET_GROUP_SORT_ID,\n" +
                                "SUM( IF(VT.TRANS_MODE = 'CR', IF(VT.LEDGER_ID IN (?CONTRIBUTION_FROM_LEDGERS, ?CONTRIBUTION_TO_LEDGERS, ?INTER_ACCOUNT_FROM_LEDGERS, ?INTER_ACCOUNT_TO_LEDGERS), 0, IFNULL(VT.AMOUNT,0)),\n" +
                                "                                -IF(VT.LEDGER_ID IN (?CONTRIBUTION_FROM_LEDGERS, ?CONTRIBUTION_TO_LEDGERS, ?INTER_ACCOUNT_FROM_LEDGERS, ?INTER_ACCOUNT_TO_LEDGERS), 0, IFNULL(VT.AMOUNT,0)) )) AS AMOUNT,\n" +
                                "SUM(IF(TRANS_MODE='CR' AND VT.LEDGER_ID IN (?INTER_ACCOUNT_FROM_LEDGERS), AMOUNT,0)) AS INTER_CR,\n" +
                                "SUM(IF(TRANS_MODE='DR' AND VT.LEDGER_ID IN (?INTER_ACCOUNT_TO_LEDGERS), AMOUNT,0)) AS INTER_DR,\n" +
                                "SUM(IF(TRANS_MODE='CR' AND VT.LEDGER_ID IN (?CONTRIBUTION_FROM_LEDGERS), AMOUNT,0)) AS CONTRIBUTION_FROM_CR,\n" +
                                "SUM(IF(TRANS_MODE='DR' AND VT.LEDGER_ID IN (?CONTRIBUTION_TO_LEDGERS), AMOUNT,0)) AS CONTRIBUTION_TO_DR\n" +
                                "FROM VOUCHER_MASTER_TRANS AS VMT\n" +
                                "INNER JOIN VOUCHER_TRANS AS VT ON VT.BRANCH_ID = VMT.BRANCH_ID AND VT.VOUCHER_ID = VMT.VOUCHER_ID AND VT.LOCATION_ID = VMT.LOCATION_ID\n" +
                                "INNER JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                                "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                "INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID\n" +
                                "LEFT JOIN MASTER_INSTI_PERFERENCE MIP ON MIP.CUSTOMERID = MP.CUSTOMERID\n" +
                                "LEFT JOIN BUDGET_GROUP BG ON BG.BUDGET_GROUP_ID = ML.BUDGET_GROUP_ID\n" +
                                "LEFT JOIN BUDGET_SUB_GROUP BSG ON BSG.BUDGET_SUB_GROUP_ID = ML.BUDGET_SUB_GROUP_ID\n" +
                                "WHERE VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND VMT.PROJECT_ID IN (?PROJECT_ID) AND VMT.VOUCHER_TYPE IN ('RC', 'PY', 'JN') AND VMT.STATUS = 1\n" +
                                "AND (LG.NATURE_ID IN (1, 2) OR ML.LEDGER_ID IN (?INTER_ACCOUNT_FROM_LEDGERS, ?INTER_ACCOUNT_TO_LEDGERS, ?CONTRIBUTION_FROM_LEDGERS, ?CONTRIBUTION_TO_LEDGERS))\n" +
                                "GROUP BY MP.CUSTOMERID, MP.PROJECT_ID, VT.LEDGER_ID;";
                        break;
                    }
                case ReportSQLCommand.FinalAccounts.MismatchedStatistics:
                    {
                        query = " SELECT  ML.LEDGER_ID,ML.LEDGER_NAME,OP_PROJECT,LBAMOUNT AS OP_AMOUNT, VTT.VOUCHER_PROJECT AS VOUCHER_PROJECT, \n" +
                               "             VTT.AMOUNT AS VOUCHER_AMOUNT,\n" +
                               "             bll.BUDGET_PROJECT as BUDGET_PROJECT,\n" +
                               "             BLl.PROPOSEDAMOUNT AS BUDGET_AMOUNT\n" +
                               " FROM        MASTER_LEDGER ML \n" +
                               " LEFT JOIN   headoffice_mapped_ledger HML \n" +
                               "             ON ML.ledger_id = HML.ledger_id \n" +
                               " LEFT JOIN   MASTER_HEADOFFICE_LEDGER MHL \n" +
                               "             ON MHL.headoffice_ledger_id = HML.headoffice_ledger_id\n" +
                               " LEFT JOIN (   SELECT VT.LEDGER_ID, \n" +
                               "                             SUM(VT.AMOUNT) AS AMOUNT , GROUP_CONCAT(distinct MP.PROJECT) AS VOUCHER_PROJECT\n" +
                               "                 FROM        VOUCHER_TRANS VT\n" +
                               "                 INNER JOIN  VOUCHER_MASTER_TRANS VMT \n" +
                               "                             ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                               "                 INNER JOIN MASTER_PROJECT MP ON MP.PROJECT_ID= VMT.PROJECT_ID\n" +
                               "                 WHERE VMT.STATUS = 1 GROUP BY VT.LEDGER_ID\n" +
                               "             ) AS VTT \n" +
                               "             ON VTT.LEDGER_ID = ML.LEDGER_ID \n" +
                               " LEFT JOIN (SELECT LB.LEDGER_ID, SUM(LB.AMOUNT) AS LBAMOUNT, GROUP_CONCAT(distinct MP.PROJECT) AS OP_PROJECT FROM LEDGER_BALANCE LB LEFT JOIN MASTER_PROJECT MP ON MP.PROJECT_ID= LB.PROJECT_ID WHERE TRANS_FLAG='OP' GROUP BY LB.LEDGER_ID ) \n" +
                               " AS LBB ON LBB.LEDGER_ID = ML.LEDGER_ID\n" +
                               " LEFT JOIN (SELECT BL.LEDGER_ID, SUM(BL.PROPOSED_AMOUNT) as PROPOSEDAMOUNT , GROUP_CONCAT(distinct MP.PROJECT) as BUDGET_PROJECT FROM BUDGET_LEDGER BL LEFT JOIN BUDGET_PROJECT BP ON BL.BUDGET_ID = BP.BUDGET_ID\n" +
                               " LEFT JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = BP.PROJECT_ID group by bl.ledger_id) AS BLL\n" +
                               " ON BLL.LEDGER_ID = ML.LEDGER_ID \n" +
                               " WHERE (IFNULL(ML.LEDGER_NAME, '')  <> IFNULL(MHL.LEDGER_NAME,'')) AND ML.ACCESS_FLAG <>2 \n" +
                               " AND ML.GROUP_ID NOT IN (12, 13) ORDER BY VTT.AMOUNT DESC;";

                        break;
                    }
                #endregion
            }
            return query;
        }
    }

    public class ReportCostCenter
    {
        string query = string.Empty;
        public string GetCostCenterSQL(ReportSQLCommand.CostCentre queryId)
        {
            switch (queryId)
            {
                #region Cash Journal
                case ReportSQLCommand.CostCentre.CostCenterCashJournal:
                    {

                        query = "SELECT VCC.COST_CENTRE_ID, COST_CENTER.DATE AS DATE,\n" +
                                "       COST_CENTER.VOUCHER_ID, COST_CENTER.VOUCHER_TYPE,\n" +
                                "       COST_CENTER.VOUCHER_NO,\n" +
                                "       MCC.COST_CENTRE_NAME AS COST_CENTRE,\n" +
                                "       MCCC.COST_CENTRE_CATEGORY_NAME,\n" +
                                "       COST_CENTER.LEDGER_CODE,\n" +
                                "       COST_CENTER.CHEQUE_NO,\n" +
                                "       COST_CENTER.LEDGER AS LEDGER,\n" +
                                "       IFNULL(SUM( IFNULL(VCC.AMOUNT,0) ), 0) AS RECEIPT,\n" +
                                "       0 AS PAYMENT,\n" +
                                "       COST_CENTER.NARRATION\n" +
                                "  FROM (SELECT MT.VOUCHER_ID,MT.VOUCHER_TYPE,\n" +
                                "               VT.LEDGER_ID, VT.SEQUENCE_NO,\n" +
                                "               MT.VOUCHER_DATE AS DATE,\n" +
                                "               MT.VOUCHER_NO,\n" +
                                "               ML.LEDGER_CODE,\n" +
                                "               CHEQUE_NO,\n" +
                                "               ML.LEDGER_NAME  AS LEDGER,\n" +
                                "               0               AS PAYMENT,\n" +
                                "               CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION),\n" +
                                "               IF(1= ?INCLUDE_NARRATION_CURRENCY AND MT.EXCHANGE_COUNTRY_ID>0, CONCAT(' (Currency Details : ', IFNULL(MCE.CURRENCY_NAME, ''), ' ', MT.CONTRIBUTION_AMOUNT, '@',MT.EXCHANGE_RATE, ')'),'')) AS NARRATION,\n" +
                                "               MT.IS_MULTI_CURRENCY, MT.EXCHANGE_RATE\n" +
                                "          FROM MASTER_LEDGER_GROUP LG\n" +
                                "          INNER JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "          INNER JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                "          INNER JOIN VOUCHER_CC_TRANS VTC ON VTC.VOUCHER_ID = VT.VOUCHER_ID AND VTC.LEDGER_ID = VT.LEDGER_ID AND VTC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO\n" +
                                "          INNER JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "          LEFT JOIN MASTER_COUNTRY MCE ON MCE.COUNTRY_ID = MT.EXCHANGE_COUNTRY_ID\n" +
                                "          JOIN (SELECT CASHBANK.VOUCHER_ID, CASHBANK.VOUCHER_TYPE,\n" +
                                "                      CASHBANK.LEDGER_ID,\n" +
                                "                      CASHBANK.CASH_FLAG,\n" +
                                "                      CASHBANK.BANK_FLAG,\n" +
                                "                      CASHBANK.LEDGER_CODE\n" +
                                "                 FROM (SELECT VT.VOUCHER_ID,MT.VOUCHER_TYPE,\n" +
                                "                              VT.LEDGER_ID,\n" +
                                "                              ML.LEDGER_CODE,\n" +
                                "                              CASE\n" +
                                "                                WHEN LG.GROUP_ID = 13 THEN\n" +
                                "                                 1\n" +
                                "                                ELSE\n" +
                                "                                 0\n" +
                                "                              END AS CASH_FLAG,\n" +
                                "                              CASE\n" +
                                "                                WHEN LG.GROUP_ID IN (12) THEN\n" +
                                "                                 1\n" +
                                "                                ELSE\n" +
                                "                                 0\n" +
                                "                              END AS BANK_FLAG\n" +
                                "                         FROM MASTER_LEDGER_GROUP LG\n" +
                                "                         INNER JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "                         INNER JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                "                         INNER JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "                        WHERE (MT.VOUCHER_TYPE IN ('RC', 'PY')  OR (MT.VOUCHER_TYPE IN ('JN') OR VT.TRANS_MODE ='CR' AND IS_CASH_BANK_STATUS=1)) AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND MT.STATUS = 1\n" +
                                "                          AND MT.PROJECT_ID IN (?PROJECT_ID) { AND ML.LEDGER_ID IN (?LEDGER_ID)} AND LG.GROUP_ID IN (13)\n" +
                                "                        GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID\n" +
                                "                        ORDER BY VT.VOUCHER_ID, VT.SEQUENCE_NO) AS CASHBANK\n" +
                                "                GROUP BY CASHBANK.VOUCHER_ID) AS T ON MT.VOUCHER_ID = T.VOUCHER_ID\n" +
                                "         WHERE MT.PROJECT_ID IN (?PROJECT_ID) AND (MT.VOUCHER_TYPE IN ('RC', 'PY')  OR (MT.VOUCHER_TYPE IN ('JN') AND VT.TRANS_MODE ='CR' AND IS_CASH_BANK_STATUS=1)) AND VT.TRANS_MODE = 'CR' AND MT.STATUS = 1\n" +
                                "            AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND LG.GROUP_ID NOT IN (12,14)\n" +
                                "         GROUP BY MT.VOUCHER_DATE, VT.VOUCHER_ID, VT.LEDGER_ID) AS COST_CENTER\n" +
                                " INNER JOIN VOUCHER_CC_TRANS AS VCC ON COST_CENTER.VOUCHER_ID = VCC.VOUCHER_ID\n" +
                                "   AND COST_CENTER.LEDGER_ID = VCC.LEDGER_ID AND VCC.LEDGER_SEQUENCE_NO = COST_CENTER.SEQUENCE_NO AND VCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                                " INNER JOIN MASTER_COST_CENTRE MCC ON VCC.COST_CENTRE_ID = MCC.COST_CENTRE_ID\n" +
                                " INNER JOIN COSTCATEGORY_COSTCENTRE CC ON CC.COST_CENTRE_ID = VCC.COST_CENTRE_ID " +
                                " INNER JOIN MASTER_COST_CENTRE_CATEGORY MCCC ON MCCC.COST_CENTRECATEGORY_ID=COST_CATEGORY_ID" +
                                " GROUP BY MCC.COST_CENTRE_NAME, COST_CENTER.DATE, COST_CENTER.VOUCHER_ID, IF(?CONSOLIDATED=0,COST_CENTER.LEDGER_ID,'')\n" +
                                "UNION ALL\n" +
                                "\n" +
                                "SELECT VCC.COST_CENTRE_ID, COST_CENTER.DATE AS DATE,\n" +
                                "       COST_CENTER.VOUCHER_ID,COST_CENTER.VOUCHER_TYPE,\n" +
                                "       COST_CENTER.VOUCHER_NO,\n" +
                                "       MCC.COST_CENTRE_NAME AS COST_CENTRE,\n" +
                                "       MCCC.COST_CENTRE_CATEGORY_NAME,\n" +
                                "       COST_CENTER.LEDGER_CODE,\n" +
                                "       COST_CENTER.CHEQUE_NO,\n" +
                                "       COST_CENTER.LEDGER AS LEDGER,\n" +
                                "       0 AS RECEIPT,\n" +
                                "       IFNULL(SUM( IFNULL(VCC.AMOUNT, 0)), 0) AS PAYMENT,\n" +
                                "       COST_CENTER.NARRATION\n" +
                                "  FROM (SELECT MT.VOUCHER_ID, MT.VOUCHER_TYPE,\n" +
                                "               VT.LEDGER_ID, VT.SEQUENCE_NO, \n" +
                                "               MT.VOUCHER_DATE AS DATE,\n" +
                                "               MT.VOUCHER_NO,\n" +
                                "               ML.LEDGER_CODE,\n" +
                                "               CHEQUE_NO,\n" +
                                "               ML.LEDGER_NAME  AS LEDGER,\n" +
                                "               0               AS RECEIPT,\n" +
                                "               CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION),\n" +
                                "               IF(1= ?INCLUDE_NARRATION_CURRENCY AND MT.EXCHANGE_COUNTRY_ID>0, CONCAT(' (Currency Details : ', IFNULL(MCE.CURRENCY_NAME, ''), ' ', MT.CONTRIBUTION_AMOUNT, '@',MT.EXCHANGE_RATE, ')'),'')) AS NARRATION, \n" +
                                "               MT.IS_MULTI_CURRENCY, MT.EXCHANGE_RATE \n" +
                                "          FROM MASTER_LEDGER_GROUP LG\n" +
                                "          LEFT JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "          INNER JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                "          INNER JOIN VOUCHER_CC_TRANS VTC ON VTC.VOUCHER_ID = VT.VOUCHER_ID AND VTC.LEDGER_ID = VT.LEDGER_ID AND VTC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO\n" +
                                "          INNER JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "          LEFT JOIN MASTER_COUNTRY MCE ON MCE.COUNTRY_ID = MT.EXCHANGE_COUNTRY_ID\n" +
                                "          JOIN (SELECT CASHBANK.VOUCHER_ID,CASHBANK.VOUCHER_TYPE,\n" +
                                "                      CASHBANK.LEDGER_ID,\n" +
                                "                      CASHBANK.CASH_FLAG,\n" +
                                "                      CASHBANK.BANK_FLAG,\n" +
                                "                      CASHBANK.LEDGER_CODE\n" +
                                "                 FROM (SELECT VT.VOUCHER_ID,MT.VOUCHER_TYPE,\n" +
                                "                              VT.LEDGER_ID,\n" +
                                "                              ML.LEDGER_CODE,\n" +
                                "                              CASE\n" +
                                "                                WHEN LG.GROUP_ID = 13 THEN\n" +
                                "                                 1\n" +
                                "                                ELSE\n" +
                                "                                 0\n" +
                                "                              END AS CASH_FLAG,\n" +
                                "                              CASE\n" +
                                "                                WHEN LG.GROUP_ID IN (12) THEN\n" +
                                "                                 1\n" +
                                "                                ELSE\n" +
                                "                                 0\n" +
                                "                              END AS BANK_FLAG\n" +
                                "                         FROM MASTER_LEDGER_GROUP LG\n" +
                                "                         INNER JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "                         INNER JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                "                         INNER JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "                        WHERE (MT.VOUCHER_TYPE IN ('PY', 'RC')  OR (MT.VOUCHER_TYPE IN ('JN') OR VT.TRANS_MODE ='DR' AND IS_CASH_BANK_STATUS=1)) AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                          { AND ML.LEDGER_ID IN (?LEDGER_ID)} AND LG.GROUP_ID IN (13) AND MT.STATUS = 1\n" +
                                "                        GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID\n" +
                                "                        ORDER BY VT.VOUCHER_ID, VT.SEQUENCE_NO) AS CASHBANK\n" +
                                "                GROUP BY CASHBANK.VOUCHER_ID) AS T\n" +
                                "            ON MT.VOUCHER_ID = T.VOUCHER_ID\n" +
                                "         WHERE MT.PROJECT_ID IN (?PROJECT_ID) AND (MT.VOUCHER_TYPE IN ('PY', 'RC')  OR (MT.VOUCHER_TYPE IN ('JN') AND VT.TRANS_MODE ='DR' AND IS_CASH_BANK_STATUS=1)) AND VT.TRANS_MODE = 'DR' AND MT.STATUS = 1 \n" +
                                "               AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND LG.GROUP_ID NOT IN (12,14)\n" +
                                "         GROUP BY MT.VOUCHER_DATE, VT.VOUCHER_ID, VT.LEDGER_ID) AS COST_CENTER\n" +
                                " INNER JOIN VOUCHER_CC_TRANS AS VCC ON COST_CENTER.VOUCHER_ID = VCC.VOUCHER_ID AND COST_CENTER.LEDGER_ID = VCC.LEDGER_ID AND\n" +
                                "     VCC.LEDGER_SEQUENCE_NO = COST_CENTER.SEQUENCE_NO AND VCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                                " INNER JOIN MASTER_COST_CENTRE MCC ON VCC.COST_CENTRE_ID = MCC.COST_CENTRE_ID\n" +
                                " INNER JOIN COSTCATEGORY_COSTCENTRE CC ON CC.COST_CENTRE_ID = VCC.COST_CENTRE_ID\n " +
                                " LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC ON MCCC.COST_CENTRECATEGORY_ID=COST_CATEGORY_ID\n " +
                                " GROUP BY MCC.COST_CENTRE_NAME, COST_CENTER.DATE,\n" +
                                " COST_CENTER.VOUCHER_ID, IF(?CONSOLIDATED=0,COST_CENTER.LEDGER_ID,'')   ORDER BY DATE";
                        break;
                    }

                #endregion

                #region Bank Journal
                case ReportSQLCommand.CostCentre.CostCenterBankJournal:
                    {
                        query = "SELECT VCC.COST_CENTRE_ID, COST_CENTER.DATE AS DATE, COST_CENTER.VOUCHER_ID, COST_CENTER.VOUCHER_TYPE,\n" +
                        "       COST_CENTER.VOUCHER_NO, MCC.COST_CENTRE_NAME AS COST_CENTRE, MCCC.COST_CENTRE_CATEGORY_NAME,\n" +
                        "       COST_CENTER.LEDGER_CODE,\n" +
                        "       COST_CENTER.CHEQUE_NO,\n" +
                        "      CONCAT(COST_CENTER.LEDGER ,' - ',COST_CENTER.BANKLEDGER_NAME) LEDGER,\n" +
                        "       IFNULL(SUM( IFNULL(VCC.AMOUNT, 0) ), 0) AS RECEIPT,\n" +
                        "       0 AS PAYMENT,\n" +
                        "       COST_CENTER.NARRATION\n" +
                        "  FROM (SELECT MT.VOUCHER_ID,MT.VOUCHER_TYPE,\n" +
                        "               VT.LEDGER_ID, VT.SEQUENCE_NO, \n" +
                        "               MT.VOUCHER_DATE AS DATE,\n" +
                        "               MT.VOUCHER_NO,\n" +
                        "               ML.LEDGER_CODE,\n" +
                        "               T.CHEQUE_NO,\n" +
                        "               ML.LEDGER_NAME  AS LEDGER,\n" +
                        "               0               AS PAYMENT, T.BANKLEDGER_NAME,\n" +
                        "               CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION),\n" +
                        "              IF(1= ?INCLUDE_NARRATION_CURRENCY AND MT.EXCHANGE_COUNTRY_ID>0, CONCAT(' (Currency Details : ', IFNULL(MCE.CURRENCY_NAME, ''), ' ', MT.CONTRIBUTION_AMOUNT, '@',MT.EXCHANGE_RATE, ')'),'')) AS NARRATION,\n" +
                        "              MT.IS_MULTI_CURRENCY, MT.EXCHANGE_RATE\n" +
                        "          FROM MASTER_LEDGER_GROUP LG\n" +
                        "          INNER JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "          INNER JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "          INNER JOIN VOUCHER_CC_TRANS VTC ON VTC.VOUCHER_ID = VT.VOUCHER_ID AND VTC.LEDGER_ID = VT.LEDGER_ID AND VTC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO\n" +
                        "          INNER JOIN VOUCHER_MASTER_TRANS MT ON MT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                        "          LEFT JOIN MASTER_COUNTRY MCE ON MCE.COUNTRY_ID = MT.EXCHANGE_COUNTRY_ID\n" +
                        "          JOIN (SELECT CASHBANK.VOUCHER_ID,CASHBANK.VOUCHER_TYPE,\n" +
                        "                      CASHBANK.LEDGER_ID,\n" +
                        "                      CASHBANK.CASH_FLAG,\n" +
                        "                      CASHBANK.BANK_FLAG,\n" +
                        "                      CASHBANK.LEDGER_CODE,CASHBANK.BANKLEDGER_NAME,CASHBANK.CHEQUE_NO\n" +
                        "                 FROM (SELECT VT.VOUCHER_ID,MT.VOUCHER_TYPE,\n" +
                        "                              VT.LEDGER_ID,\n" +
                        "                              ML.LEDGER_CODE,ML.LEDGER_NAME AS BANKLEDGER_NAME,VT.CHEQUE_NO,\n" +
                        "                              CASE\n" +
                        "                                WHEN LG.GROUP_ID = 13 THEN\n" +
                        "                                 1\n" +
                        "                                ELSE\n" +
                        "                                 0\n" +
                        "                              END AS CASH_FLAG,\n" +
                        "                              CASE\n" +
                        "                                WHEN LG.GROUP_ID IN (12) THEN\n" +
                        "                                 1\n" +
                        "                                ELSE\n" +
                        "                                 0\n" +
                        "                              END AS BANK_FLAG\n" +
                        "\n" +
                        "                         FROM MASTER_LEDGER_GROUP LG\n" +
                        "                         INNER JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "                         INNER JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "                         INNER JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "                         WHERE (MT.VOUCHER_TYPE IN ('RC', 'PY') OR (MT.VOUCHER_TYPE IN ('JN') OR VT.TRANS_MODE ='CR' AND IS_CASH_BANK_STATUS=1)) AND mt.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND MT.PROJECT_ID IN (?PROJECT_ID) AND MT.STATUS = 1\n" +
                        "                         {AND ML.LEDGER_ID IN (?LEDGER_ID)} AND LG.GROUP_ID in (12, 14)" +
                        "                        GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID\n" +
                        "                        ORDER BY VT.VOUCHER_ID, VT.SEQUENCE_NO) AS CASHBANK\n" +
                        "                GROUP BY CASHBANK.VOUCHER_ID) AS T ON MT.VOUCHER_ID = T.VOUCHER_ID\n" +
                        "\n" +
                        "         WHERE MT.PROJECT_ID IN (?PROJECT_ID) AND (MT.VOUCHER_TYPE IN ('RC', 'PY') OR (MT.VOUCHER_TYPE IN ('JN') AND VT.TRANS_MODE ='CR' AND IS_CASH_BANK_STATUS=1)) AND VT.TRANS_MODE = 'CR' AND MT.STATUS = 1\n" +
                        "           AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND LG.GROUP_ID NOT IN (13)\n" +
                        "         GROUP BY MT.VOUCHER_DATE, VT.VOUCHER_ID, VT.LEDGER_ID) AS COST_CENTER\n" +
                        " INNER JOIN VOUCHER_CC_TRANS AS VCC ON COST_CENTER.VOUCHER_ID = VCC.VOUCHER_ID\n" +
                        "   AND COST_CENTER.LEDGER_ID = VCC.LEDGER_ID AND VCC.LEDGER_SEQUENCE_NO = COST_CENTER.SEQUENCE_NO AND VCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                        " INNER JOIN MASTER_COST_CENTRE MCC ON VCC.COST_CENTRE_ID = MCC.COST_CENTRE_ID\n" +
                        " INNER JOIN COSTCATEGORY_COSTCENTRE CC ON CC.COST_CENTRE_ID = VCC.COST_CENTRE_ID\n " +
                        " INNER JOIN MASTER_COST_CENTRE_CATEGORY MCCC ON MCCC.COST_CENTRECATEGORY_ID=COST_CATEGORY_ID\n " +
                        "  GROUP BY MCC.COST_CENTRE_NAME, COST_CENTER.DATE, COST_CENTER.VOUCHER_ID, IF(?CONSOLIDATED=0,COST_CENTER.LEDGER_ID,'') \n" +
                        "UNION ALL\n" +
                        "\n" +
                        "SELECT VCC.COST_CENTRE_ID, COST_CENTER.DATE AS DATE,\n" +
                         "       COST_CENTER.VOUCHER_ID,COST_CENTER.VOUCHER_TYPE,\n" +
                        "       COST_CENTER.VOUCHER_NO,\n" +
                        "       MCC.COST_CENTRE_NAME AS COST_CENTRE,\n" +
                        "       MCCC.COST_CENTRE_CATEGORY_NAME,\n " +
                        "       COST_CENTER.LEDGER_CODE,\n" +
                        "       COST_CENTER.CHEQUE_NO, CONCAT(COST_CENTER.LEDGER ,' - ',COST_CENTER.BANKLEDGER_NAME),\n" +
                        "       0 AS RECEIPT,\n" +
                        "       IFNULL(SUM( IFNULL(VCC.AMOUNT, 0) ), 0) AS PAYMENT,\n" +
                        "       COST_CENTER.NARRATION\n" +
                        "  FROM (SELECT MT.VOUCHER_ID,MT.VOUCHER_TYPE,\n" +
                        "               VT.LEDGER_ID, VT.SEQUENCE_NO,\n" +
                        "               MT.VOUCHER_DATE AS DATE,\n" +
                        "               MT.VOUCHER_NO,\n" +
                        "               ML.LEDGER_CODE,\n" +
                        "               T.CHEQUE_NO,\n" +
                        "               ML.LEDGER_NAME  AS LEDGER, T.BANKLEDGER_NAME,\n" +
                        "               0               AS PAYMENT,\n" +
                        "               CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION),\n" +
                        "               IF(1= ?INCLUDE_NARRATION_CURRENCY AND MT.EXCHANGE_COUNTRY_ID>0, CONCAT(' (Currency Details : ', IFNULL(MCE.CURRENCY_NAME, ''), ' ', MT.CONTRIBUTION_AMOUNT, '@',MT.EXCHANGE_RATE, ')'),'')) AS NARRATION,\n" +
                        "               MT.IS_MULTI_CURRENCY, MT.EXCHANGE_RATE\n" +
                        "          FROM MASTER_LEDGER_GROUP LG\n" +
                        "          INNER JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "          INNER JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "          INNER JOIN VOUCHER_CC_TRANS VTC ON VTC.VOUCHER_ID = VT.VOUCHER_ID AND VTC.LEDGER_ID = VT.LEDGER_ID AND VTC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO\n" +
                        "          INNER JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "          LEFT JOIN MASTER_COUNTRY MCE ON MCE.COUNTRY_ID = MT.EXCHANGE_COUNTRY_ID\n" +
                        "          JOIN (SELECT CASHBANK.VOUCHER_ID,CASHBANK.VOUCHER_TYPE,\n" +
                        "                      CASHBANK.LEDGER_ID,\n" +
                        "                      CASHBANK.CASH_FLAG,\n" +
                        "                      CASHBANK.BANK_FLAG,\n" +
                        "                      CASHBANK.LEDGER_CODE, CASHBANK.BANKLEDGER_NAME,CASHBANK.CHEQUE_NO\n" +
                        "                 FROM (SELECT VT.VOUCHER_ID,MT.VOUCHER_TYPE,\n" +
                        "                              VT.LEDGER_ID,\n" +
                        "                              ML.LEDGER_CODE,ML.LEDGER_NAME AS BANKLEDGER_NAME,VT.CHEQUE_NO,\n" +
                        "                              CASE\n" +
                        "                                WHEN LG.GROUP_ID = 13 THEN\n" +
                        "                                 1\n" +
                        "                                ELSE\n" +
                        "                                 0\n" +
                        "                              END AS CASH_FLAG,\n" +
                        "                              CASE\n" +
                        "                                WHEN LG.GROUP_ID IN (12) THEN\n" +
                        "                                 1\n" +
                        "                                ELSE\n" +
                        "                                 0\n" +
                        "                              END AS BANK_FLAG\n" +
                        "\n" +
                        "                         FROM MASTER_LEDGER_GROUP LG\n" +
                        "                         INNER JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "                         INNER JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "                         INNER JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "                        WHERE (MT.VOUCHER_TYPE IN ('PY', 'RC') OR (MT.VOUCHER_TYPE IN ('JN') OR VT.TRANS_MODE ='DR' AND IS_CASH_BANK_STATUS=1)) AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "                          AND LG.GROUP_ID IN (12, 14) { AND ML.LEDGER_ID IN (?LEDGER_ID)} AND MT.STATUS = 1\n" +
                        "                        GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID\n" +
                        "                        ORDER BY VT.VOUCHER_ID, VT.SEQUENCE_NO) AS CASHBANK\n" +
                        "                GROUP BY CASHBANK.VOUCHER_ID) AS T ON MT.VOUCHER_ID = T.VOUCHER_ID\n" +
                        "\n" +
                        "         WHERE MT.PROJECT_ID IN (?PROJECT_ID) AND (MT.VOUCHER_TYPE IN ('PY', 'RC') OR (MT.VOUCHER_TYPE IN ('JN') AND VT.TRANS_MODE ='DR' AND IS_CASH_BANK_STATUS=1)) AND VT.TRANS_MODE = 'DR' AND MT.STATUS = 1\n" +
                        "           AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND LG.GROUP_ID NOT IN (13)\n" +
                        "         GROUP BY MT.VOUCHER_DATE, VT.VOUCHER_ID, VT.LEDGER_ID) AS COST_CENTER\n" +
                        " INNER JOIN VOUCHER_CC_TRANS AS VCC ON COST_CENTER.VOUCHER_ID = VCC.VOUCHER_ID AND COST_CENTER.LEDGER_ID = VCC.LEDGER_ID\n" +
                        "       AND VCC.LEDGER_SEQUENCE_NO = COST_CENTER.SEQUENCE_NO AND VCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                        " INNER JOIN  MASTER_COST_CENTRE MCC ON VCC.COST_CENTRE_ID = MCC.COST_CENTRE_ID\n" +
                        " INNER JOIN COSTCATEGORY_COSTCENTRE CC ON CC.COST_CENTRE_ID = VCC.COST_CENTRE_ID\n " +
                        " LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC ON MCCC.COST_CENTRECATEGORY_ID=COST_CATEGORY_ID\n " +
                        "GROUP BY MCC.COST_CENTRE_NAME,COST_CENTER.DATE, COST_CENTER.VOUCHER_ID, IF(?CONSOLIDATED=0,COST_CENTER.LEDGER_ID,'')  ORDER BY DATE";

                        break;
                    }
                #endregion

                #region Cash Bank Book
                case ReportSQLCommand.CostCentre.CostCenterCashBankBook:
                    {
                        query = "SELECT TT.COST_CENTRE_ID, TT.VOUCHER_ID, TT.REC_VOUCHER_TYPE, TT.PAY_VOUCHER_TYPE, \n" +
                              "       TRIM(GROUP_CONCAT(TT.LEDGER_ID ORDER BY TT.sort_id DESC SEPARATOR '')) AS LEDGER_ID,\n" +
                              "       DATE(TT.VOUCHER_DATE) AS 'DATE',\n" +
                              "       TRIM(GROUP_CONCAT(TT.VOUCHER_NO ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS RECEIPT_NO,\n" +
                              "       TRIM(GROUP_CONCAT(TT.LEDGER_CODE ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS LEDGER_CODE,\n" +
                              "       TRIM(GROUP_CONCAT(TT.LEDGER_NAME ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS 'RECEIPT',\n" +
                              "       SUM(TT.CASH) AS CASH,\n" +
                              "       SUM(TT.BANK) AS BANK,\n" +
                              "       TT.COST_CENTRE_NAME,\n" +
                              "        TT.COST_CENTRE_CATEGORY_NAME,\n" +
                              "       TRIM(GROUP_CONCAT(TT.NARRATION ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS NARRATION,\n" +
                              "       TRIM(GROUP_CONCAT(TT.PAY_VOUCHER_ID ORDER BY TT.sort_id DESC\n" +
                              "                         SEPARATOR '')) AS PAY_VOUCHER_ID,\n" +
                              "       TRIM(GROUP_CONCAT(TT.PAY_VID ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS PAY_VNO,\n" +
                              "       TRIM(GROUP_CONCAT(TT.PAY_LED_ID ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS PAY_LED_ID,\n" +
                              "       TRIM(GROUP_CONCAT(TT.PAY_CODE ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS PAY_CODE,\n" +
                              "       TRIM(GROUP_CONCAT(TT.PAY_LEDGER ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS 'PAYMENT',\n" +
                              "       SUM(TT.PAY_CASH) AS PAY_CASH,\n" +
                              "       SUM(TT.PAY_BANK) AS PAY_BANK,\n" +
                              "       TRIM(GROUP_CONCAT(TT.NAP ORDER BY TT.sort_id DESC SEPARATOR ' ')) AS NARRATION_PAY\n" +
                              "  FROM (SELECT VC.COST_CENTRE_ID, RC.VOUCHER_ID, RC.VOUCHER_TYPE AS REC_VOUCHER_TYPE, '' AS PAY_VOUCHER_TYPE, \n" +
                              "                RC.LEDGER_ID,\n" +
                              "                RC.VOUCHER_NO,\n" +
                              "                MC.COST_CENTRE_NAME,\n " +
                              "                MCCC.COST_CENTRE_CATEGORY_NAME, " +
                              "                RC.LEDGER_CODE,\n" +
                              "                RC.SORT_ID,\n" +
                              "                RC.VOUCHER_DATE,\n" +
                              "                RC.LEDGER_NAME,\n" +
                              "                CASE\n" +
                              "                  WHEN RC.CASH = 1 THEN\n" +
                              "                   SUM( (IF(RC.TRANS_MODE='CR', VC.AMOUNT, -VC.AMOUNT)*IF(RC.IS_MULTI_CURRENCY=1, RC.EXCHANGE_RATE, 1)) )\n" +
                              "                END AS CASH,\n" +
                              "                CASE\n" +
                              "                  WHEN RC.BANK = 1 THEN\n" +
                              "                   SUM( (IF(RC.TRANS_MODE='CR', VC.AMOUNT, -VC.AMOUNT)*IF(RC.IS_MULTI_CURRENCY=1, RC.EXCHANGE_RATE, 1)) )\n" +
                              "                END AS BANK,\n" +
                              "                '' AS PAY_VOUCHER_ID,\n" +
                              "                '' AS PAY_VID,\n" +
                              "                '' as PAY_LED_ID,\n" +
                              "                '' AS PAY_CODE,\n" +
                              "                '' AS PAY_LEDGER,\n" +
                              "                0 AS PAY_CASH,\n" +
                              "                0 AS PAY_BANK,\n" +
                              "                RC.NARRATION, '' AS NAP\n" +
                              "          FROM (SELECT VT.VOUCHER_ID, MT.VOUCHER_TYPE,\n" +
                              "                        VT.LEDGER_ID, VT.SEQUENCE_NO, VT.TRANS_MODE, \n" +
                              "                        MT.VOUCHER_NO AS VOUCHER_NO, ML.LEDGER_CODE AS LEDGER_CODE,\n" +
                              "                        @row_num := IF(@prev_value = T.voucher_date, @row_num + 1, 1) AS SORT_ID,\n" +
                              "                        @prev_value := T.voucher_date as VOUCHER_DATE,\n" +
                              "                        CONCAT(ML.LEDGER_NAME,T.ACCOUNT_NUMBER)AS LEDGER_NAME,\n" +
                              "                        CASE\n" +
                              "                          WHEN T.CASH_FLAG = 1 THEN\n" +
                              "                           1\n" +
                              "                          ELSE\n" +
                              "                           0.00\n" +
                              "                        END AS CASH,\n" +
                              "                        CASE\n" +
                              "                          WHEN T.BANK_FLAG = 1 THEN\n" +
                              "                           1\n" +
                              "                          ELSE\n" +
                              "                           0.00\n" +
                              "                        END AS BANK,\n" +
                              "                        '' AS PAY_VOUCHER_ID, '' AS PAY_VID, '' AS PAY_LED_ID, '' AS PAY_CODE, '' AS PAY_LEDGER, 0 AS PAY_CASH, 0 AS PAY_BANK, \n" +
                              "                        CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION), \n" +
                              "                          IF(1= ?INCLUDE_NARRATION_CURRENCY AND MT.EXCHANGE_COUNTRY_ID>0, CONCAT(' (Currency Details : ', IFNULL(MCE.CURRENCY_NAME, ''), ' ', MT.CONTRIBUTION_AMOUNT, '@',MT.EXCHANGE_RATE, ')'),'')) \n" +
                              "                        AS NARRATION, '' AS NAP, MT.IS_MULTI_CURRENCY, MT.EXCHANGE_RATE\n" +
                              "                   FROM (SELECT VOUCHER_ID, PROJECT_ID, VOUCHER_DATE, VOUCHER_NO, VOUCHER_TYPE, VOUCHER_SUB_TYPE, NARRATION, \n" +
                              "                         EXCHANGE_COUNTRY_ID, CONTRIBUTION_AMOUNT, IS_MULTI_CURRENCY, EXCHANGE_RATE, STATUS FROM VOUCHER_MASTER_TRANS ORDER BY VOUCHER_DATE, VOUCHER_ID) AS MT\n" +
                              "                   INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                              "                   INNER JOIN VOUCHER_CC_TRANS VTC ON VTC.VOUCHER_ID = VT.VOUCHER_ID AND VTC.LEDGER_ID = VT.LEDGER_ID AND VTC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO\n" +
                              "                   INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                              "                   LEFT JOIN MASTER_COUNTRY MCE ON MCE.COUNTRY_ID = MT.EXCHANGE_COUNTRY_ID\n" +
                              "                   JOIN (SELECT CASHBANK.VOUCHER_DATE, CASHBANK.VOUCHER_ID, CASHBANK.LEDGER_ID, CASHBANK.CASH_FLAG, CASHBANK.BANK_FLAG, \n" +
                              "                        CASHBANK.LEDGER_CODE, CASHBANK.ACCOUNT_NUMBER, CASHBANK.AMOUNT\n" +
                              "                        FROM (SELECT MT.VOUCHER_DATE, VT.VOUCHER_ID, VT.LEDGER_ID, ML.LEDGER_CODE, IFNULL(CONCAT(' - ',MBA.ACCOUNT_NUMBER),' ') AS ACCOUNT_NUMBER,\n" +
                              "                                    CASE\n" +
                              "                                        WHEN ML.GROUP_ID = 13 THEN\n" +
                              "                                          1\n" +
                              "                                        ELSE\n" +
                              "                                         0\n" +
                              "                                    END AS CASH_FLAG,\n" +
                              "                                    CASE\n" +
                              "                                        WHEN ML.GROUP_ID = 12 THEN\n" +
                              "                                          1\n" +
                              "                                        ELSE\n" +
                              "                                         0\n" +
                              "                                    END AS BANK_FLAG, VT.AMOUNT\n" +
                              "                                  FROM VOUCHER_MASTER_TRANS MT\n" +
                              "                                  INNER JOIN VOUCHER_TRANS VT ON MT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                              "                                  INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                              "                                  LEFT JOIN MASTER_BANK_ACCOUNT MBA ON MBA.LEDGER_ID = ML.LEDGER_ID\n" +
                              "                                  LEFT JOIN MASTER_BANK MB ON MB.BANK_ID=MBA.BANK_ID \n" +
                              "                                   WHERE (MT.VOUCHER_TYPE IN ('RC') OR (MT.VOUCHER_TYPE IN ('PY') AND VT.AMOUNT=0) OR\n" +
                              "                                          (MT.VOUCHER_TYPE IN ('JN') AND MT.IS_CASH_BANK_STATUS = 1 AND VT.TRANS_MODE = 'DR') )\n" +
                              "                                          AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                              "                                   AND MT.PROJECT_ID IN (?PROJECT_ID) and ML.GROUP_ID IN (12, 13) AND MT.STATUS = 1\n" +
                              "                                   GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID\n" +
                              "                                   ORDER BY MT.VOUCHER_DATE, VT.VOUCHER_ID, VT.SEQUENCE_NO) AS CASHBANK\n" +
                              "                         GROUP BY CASHBANK.VOUCHER_ID\n" +
                              "                         ORDER BY CASHBANK.VOUCHER_DATE) AS T ON MT.VOUCHER_ID = T.VOUCHER_ID,\n" +
                              "                  (SELECT @row_num := 1) x, (SELECT @prev_value := null) y\n" +
                              "                  WHERE MT.PROJECT_ID IN (?PROJECT_ID) AND MT.STATUS = 1\n" +
                              "                    AND ( (MT.VOUCHER_TYPE IN ('RC', 'JN') AND IF(T.AMOUNT=0,  VT.TRANS_MODE IN('CR'), VT.TRANS_MODE IN('CR','DR')) ) OR (MT.VOUCHER_TYPE IN ('PY') AND T.AMOUNT=0 AND VT.TRANS_MODE = 'CR')) \n" +
                              "                    AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND ML.GROUP_ID NOT IN (12, 13)\n" +
                              "                  GROUP BY MT.VOUCHER_DATE, VT.VOUCHER_ID, VT.Ledger_id) as RC\n" +
                              "         INNER JOIN VOUCHER_CC_TRANS AS VC ON RC.VOUCHER_ID = VC.VOUCHER_ID\n" +
                              "           AND RC.LEDGER_ID = VC.LEDGER_ID AND RC.SEQUENCE_NO = VC.LEDGER_SEQUENCE_NO\n" +
                              "           AND VC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                              "         LEFT JOIN MASTER_COST_CENTRE MC ON MC.COST_CENTRE_ID = VC.COST_CENTRE_ID\n" +
                              "         INNER JOIN COSTCATEGORY_COSTCENTRE\n CC ON CC.COST_CENTRE_ID = VC.COST_CENTRE_ID\n " +
                              "         LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC ON MCCC.COST_CENTRECATEGORY_ID=COST_CATEGORY_ID\n " +
                              "       GROUP BY MC.COST_CENTRE_NAME,RC.VOUCHER_DATE, RC.VOUCHER_ID, RC.LEDGER_ID,RC.SORT_ID\n" +
                              "       UNION ALL\n" +
                              "       SELECT VC.COST_CENTRE_ID, '' AS VOUCHER_ID, '' AS REC_VOUCHER_TYPE,  PY.VOUCHER_TYPE AS PAY_VOUCHER_TYPE, '' AS LEDGER_ID, '' AS VOUCHER_NO, MC.COST_CENTRE_NAME, MCCC.COST_CENTRE_CATEGORY_NAME, '' AS LEDGER_CODE,\n" +
                              "               PY.SORT_ID, PY.VOUCHER_DATE, '' AS LEDGER_NAME, 0 AS CASH, 0 AS BANK, PY.PAY_VOUCHER_ID, PY.PAY_VID,\n" +
                              "               PY.PAY_LED_ID, PY.PAY_CODE, PY. PAY_LEDGER, \n" +
                              "               CASE\n" +
                              "                 WHEN PY.PAY_CASH = 1 THEN\n" +
                              "                  SUM( (IF(PY.TRANS_MODE='DR', VC.AMOUNT, -VC.AMOUNT)*IF(PY.IS_MULTI_CURRENCY=1, PY.EXCHANGE_RATE, 1)) )\n" +
                              "                 ELSE\n" +
                              "                  0.00\n" +
                              "               END AS PAY_CASH,\n" +
                              "               CASE\n" +
                              "                 WHEN PY.PAY_BANK = 1 THEN\n" +
                              "                  SUM( (IF(PY.TRANS_MODE='DR', VC.AMOUNT, -VC.AMOUNT)*IF(PY.IS_MULTI_CURRENCY=1, PY.EXCHANGE_RATE, 1) ))\n" +
                              "                 ELSE\n" +
                              "                  0.00\n" +
                              "               END AS PAY_BANK, '' AS NARRATION, PY.NAP AS NAP\n" +
                              "          FROM (SELECT '' AS VOUCHER_ID, MT.VOUCHER_TYPE, '' AS LEDGER_ID, '' AS VOUCHER_NO, '' AS LEDGER_CODE,\n" +
                              "                       @row_number :=IF(@prev_val = T.voucher_date, @row_number + 1, 1) AS sort_id,\n" +
                              "                       @prev_val := T.voucher_date as VOUCHER_DATE, '' AS LEDGER_NAME,\n" +
                              "                       0 AS CASH, 0 AS BANK, VT.VOUCHER_ID AS PAY_VOUCHER_ID, VT.SEQUENCE_NO, VT.TRANS_MODE,\n" +
                              "                       T.VOUCHER_NO AS PAY_VID, VT.LEDGER_ID as PAY_LED_ID, ML.LEDGER_CODE AS PAY_CODE,\n" +
                              "                      CONCAT(ML.LEDGER_NAME,T.ACCOUNT_NUMBER)AS PAY_LEDGER,\n" +
                              "                       CASE\n" +
                              "                         WHEN T.CASH_FLAG = 1 THEN\n" +
                              "                          1\n" +
                              "                         ELSE\n" +
                              "                          0.00\n" +
                              "                       END AS PAY_CASH,\n" +
                              "                       CASE\n" +
                              "                         WHEN T.BANK_FLAG = 1 THEN\n" +
                              "                          1\n" +
                              "                         ELSE\n" +
                              "                          0.00\n" +
                              "                       END AS PAY_BANK,\n" +
                              "                       '' AS NARRATION,\n" +
                              "                        CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION), \n" +
                              "                          IF(1= ?INCLUDE_NARRATION_CURRENCY AND MT.EXCHANGE_COUNTRY_ID>0, CONCAT(' (Currency Details : ', IFNULL(MCE.CURRENCY_NAME, ''), ' ', MT.CONTRIBUTION_AMOUNT, '@',MT.EXCHANGE_RATE, ')'),'')) AS NAP,\n" +
                              "                      MT.IS_MULTI_CURRENCY, MT.EXCHANGE_RATE\n" +
                              "                   FROM (SELECT VOUCHER_ID, PROJECT_ID, VOUCHER_DATE, VOUCHER_NO, VOUCHER_TYPE, VOUCHER_SUB_TYPE, NARRATION, \n" +
                              "                         EXCHANGE_COUNTRY_ID, CONTRIBUTION_AMOUNT, IS_MULTI_CURRENCY,EXCHANGE_RATE, STATUS FROM VOUCHER_MASTER_TRANS ORDER BY VOUCHER_DATE, VOUCHER_ID) AS MT\n" +
                              "                  INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                              "                  INNER JOIN VOUCHER_CC_TRANS VTC ON VTC.VOUCHER_ID = VT.VOUCHER_ID AND VTC.LEDGER_ID = VT.LEDGER_ID AND VTC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO\n" +
                              "                  INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                              "                  LEFT JOIN MASTER_COUNTRY MCE ON MCE.COUNTRY_ID = MT.EXCHANGE_COUNTRY_ID\n" +
                              "                  JOIN (SELECT CASHBANK.VOUCHER_DATE, CASHBANK.VOUCHER_ID, CASHBANK.LEDGER_ID, CASHBANK.CASH_FLAG, CASHBANK.BANK_FLAG, CASHBANK.VOUCHER_NO,\n" +
                              "                         CASHBANK.LEDGER_CODE,CASHBANK.ACCOUNT_NUMBER, CASHBANK.AMOUNT\n" +
                              "                         FROM (SELECT MT.VOUCHER_DATE, VT.VOUCHER_ID, MT.VOUCHER_NO, ML.LEDGER_CODE, VT.LEDGER_ID,\n" +
                              "                                 IFNULL(CONCAT(' - ',MBA.ACCOUNT_NUMBER),' ') AS ACCOUNT_NUMBER,\n" +
                              "                                      CASE\n" +
                              "                                        WHEN ML.GROUP_ID = 13 THEN\n" +
                              "                                         1\n" +
                              "                                        ELSE\n" +
                              "                                         0\n" +
                              "                                      END AS CASH_FLAG,\n" +
                              "                                      CASE\n" +
                              "                                        WHEN ML.GROUP_ID = 12 THEN\n" +
                              "                                         1\n" +
                              "                                        ELSE\n" +
                              "                                         0\n" +
                              "                                      END AS BANK_FLAG, VT.AMOUNT\n" +
                              "                                  FROM VOUCHER_MASTER_TRANS MT\n" +
                              "                                  INNER JOIN VOUCHER_TRANS VT ON MT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                              "                                  INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                              "                                  LEFT JOIN MASTER_BANK_ACCOUNT MBA ON MBA.LEDGER_ID=VT.LEDGER_ID\n" +
                              "                                  LEFT JOIN MASTER_BANK MB ON MB.BANK_ID=MBA.BANK_ID \n" +
                              "                                  WHERE (MT.VOUCHER_TYPE IN ('PY') OR (MT.VOUCHER_TYPE IN ('RC') AND VT.AMOUNT=0) OR\n" +
                              "                                        (MT.VOUCHER_TYPE IN ('JN') AND MT.IS_CASH_BANK_STATUS = 1 AND VT.TRANS_MODE = 'CR') )\n" +
                              "                                   AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                              "                                   AND MT.PROJECT_ID IN (?PROJECT_ID) and ML.GROUP_ID IN (12, 13)\n" +
                              "                                   AND MT.STATUS = 1 GROUP BY MT.VOUCHER_ID, VT.LEDGER_ID\n" +
                              "                                ORDER BY MT.VOUCHER_DATE, VT.VOUCHER_ID, VT.SEQUENCE_NO) AS CASHBANK\n" +
                              "                        GROUP BY CASHBANK.VOUCHER_ID\n" +
                              "                        ORDER BY CASHBANK.VOUCHER_DATE) AS T\n" +
                              "                    ON MT.VOUCHER_ID = T.VOUCHER_ID, (SELECT @row_number := 1) x,\n" +
                              "                 (SELECT @prev_val := null) y\n" +
                              "                 WHERE MT.PROJECT_ID IN (?PROJECT_ID) AND MT.STATUS = 1 AND\n" +
                            //"                   (MT.VOUCHER_TYPE IN ('PY') AND IF(T.AMOUNT=0, VT.TRANS_MODE IN('DR'), VT.TRANS_MODE IN('CR','DR')))\n" +
                              "                   ( (MT.VOUCHER_TYPE IN ('PY', 'JN') AND IF(T.AMOUNT=0,  VT.TRANS_MODE IN('DR'), VT.TRANS_MODE IN('CR','DR')) ) OR (MT.VOUCHER_TYPE IN ('RC') AND T.AMOUNT=0 AND VT.TRANS_MODE = 'DR'))\n" +
                              "                   AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND ML.GROUP_ID NOT IN (12, 13)\n" +
                              "                 GROUP BY MT.VOUCHER_DATE, VT.VOUCHER_ID, ML.LEDGER_ID) AS PY\n" +
                              "           INNER JOIN VOUCHER_CC_TRANS AS VC ON PY.PAY_VOUCHER_ID = VC.VOUCHER_ID\n" +
                              "             AND PY.PAY_LED_id = VC.LEDGER_ID AND PY.SEQUENCE_NO = VC.LEDGER_SEQUENCE_NO \n" +
                              "             AND VC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                              "           INNER JOIN MASTER_COST_CENTRE MC ON MC.COST_CENTRE_ID = VC.COST_CENTRE_ID\n" +
                              "           INNER JOIN COSTCATEGORY_COSTCENTRE CC ON CC.COST_CENTRE_ID = VC.COST_CENTRE_ID " +
                              "           INNER JOIN MASTER_COST_CENTRE_CATEGORY MCCC ON MCCC.COST_CENTRECATEGORY_ID=COST_CATEGORY_ID " +
                              "         GROUP BY MC.COST_CENTRE_NAME,PY.VOUCHER_DATE, PY.VOUCHER_ID, PY.LEDGER_ID,PY.SORT_ID) AS TT\n" +
                              " GROUP BY TT.COST_CENTRE_NAME,TT.VOUCHER_DATE, tt.SORT_ID\n" +
                              " ORDER BY TT.VOUCHER_DATE,LENGTH(TT.VOUCHER_NO) DESC,TT.VOUCHER_NO,LENGTH(TT.PAY_VID),TT.PAY_VID,IF(LENGTH(GROUP_CONCAT(TT.PAY_VOUCHER_ID))=0, TT.VOUCHER_ID, TT.PAY_VOUCHER_ID)";
                        break;
                    }
                #endregion

                #region Ledger
                case ReportSQLCommand.CostCentre.CostCenterLedger:
                    {
                        //For Temp to fix issues when making CR/DR same ledger and same voucher
                        //have to finetune (SELECT VOUCHER_ID FROM VOUCHER_CC_TRANS )
                        query = "SELECT T.VOUCHER_ID,T.SORT_ORDER,\n" +
                        "       T.LEDGER_ID,\n" +
                        "       T.PARTICULAR_TYPE,\n" +
                        "       DATE_FORMAT(T.VOUCHER_DATE, '%d-%m-%Y') AS DATE,\n" +
                        "       T.VOUCHER_NO, T.COST_CENTRE_ID,\n" +
                        "       T.COST_CENTRE_NAME,\n" +
                        "       T.COST_CENTRECATEGORY_ID, T.COST_CENTRE_CATEGORY_NAME,\n " +
                        "       T.LEDGER_GROUP AS 'GROUP',\n" +
                        "       --  T.LEDGER_NAME,\n" +
                        "       --   CONCAT(T.LEDGER_CODE,' - ' ,T.LEDGER_NAME) AS LEDGER_NAME,\n" +
                        "       IF(T.LEDGER_CODE IS NULL OR T.LEDGER_CODE ='', T.LEDGER_NAME,CONCAT(T.LEDGER_CODE,' - ' ,T.LEDGER_NAME)) AS LEDGER_NAME,\n" +
                        "       T.PARTICULRARS as PARTICULARS,\n" +
                        "       IFNULL(SUM(T.CREDIT),0) AS CREDIT,\n" +
                        "       IFNULL(SUM(T.DEBIT),0) AS DEBIT, IFNULL(SUM(T.OP_AMOUNT),0) AS OP_AMOUNT,T.NARRATION,\n" + // removed the t.Narrations and added new values 17/02/2025
                        "       IF(LBOP.AMOUNT<0, LBOP.AMOUNT *-1, 0 ) AS LEDGER_OP_CR, IF(LBOP.AMOUNT>=0, LBOP.AMOUNT, 0 ) AS LEDGER_OP_DR\n" +
                        "  FROM (SELECT VCCTrans.VOUCHER_ID,LG.SORT_ORDER,\n" +
                        "               VCCTrans.LEDGER_ID,\n" +
                        " '" + DrillDownType.LEDGER_CASHBANK_VOUCHER + "' as PARTICULAR_TYPE,\n" +
                        "               VCCTrans.VOUCHER_DATE,\n" +
                        "               VCCTrans.VOUCHER_NO, MC.COST_CENTRE_ID,\n" +
                        "               MC.COST_CENTRE_NAME,\n" +
                        "               MCCC.COST_CENTRECATEGORY_ID, MCCC.COST_CENTRE_CATEGORY_NAME,\n " +
                        "               LG.LEDGER_GROUP,\n" +
                        "               ML.LEDGER_NAME,\n" +
                        "               TA.TRANS_MODE AS 'PARTICULRARS',\n" +
                        "               CASE\n" +
                        "                 WHEN VCCTrans.TRANS_MODE = 'CR' THEN\n" +
                        "                 IFNULL(SUM(VCCTrans.AMOUNT), 0)\n" +
                        "                 ELSE\n" +
                        "                  0.00\n" +
                        "               END AS CREDIT,\n" +
                        "               CASE\n" +
                        "                 WHEN VCCTrans.TRANS_MODE = 'DR' THEN\n" +
                        "                  IFNULL(SUM(VCCTrans.AMOUNT), 0)\n" +
                        "                 ELSE\n" +
                        "                  0.00\n" +
                        "               END AS DEBIT,\n" +
                        "                       IF(LENGTH(IFNULL(VCCTrans.NARRATION, '')) > 0, \n" +
                        "    IF(1 = ?INCLUDE_NARRATION_REFNO, CONCAT(VCCTrans.NARRATION, \n" +
                        "        IF(LENGTH(IFNULL(TA.CHEQUE_NO, '')) > 0, CONCAT(' -- Cheque No:', TA.CHEQUE_NO,IF(LENGTH(IFNULL(TA.FUND_TRANSFER_TYPE_NAME, '')) > 0, CONCAT('  Mode:', TA.FUND_TRANSFER_TYPE_NAME), '')), ''),\n" +
                        "        IF(TA.GROUP_ID = 12, CONCAT('  Ac/No:', TA.CB_NAME), '')\n" +
                        "    ), VCCTrans.NARRATION),'') AS NARRATION,\n" +
                        "      ML.LEDGER_CODE, 0 AS OP_AMOUNT\n" + // VCCTRANS.NARRATION
                        "\n" +
                        "          FROM MASTER_LEDGER_GROUP LG\n" +
                        "\n" +
                        "          LEFT JOIN MASTER_LEDGER ML\n" +
                        "            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                         "          INNER JOIN (SELECT MT.VOUCHER_ID, MT.PROJECT_ID, MT.VOUCHER_DATE, MT.VOUCHER_TYPE, MT.VOUCHER_NO, VT.TRANS_MODE,\n" +
                        "                 ML.LEDGER_NAME,ML.LEDGER_CODE,ML.LEDGER_ID, VCC.LEDGER_SEQUENCE_NO, VCC.COST_CENTRE_ID, (VCC.AMOUNT*IF(MT.IS_MULTI_CURRENCY=1, MT.EXCHANGE_RATE, 1)) AS AMOUNT,\n" +
                        "                 CONCAT(IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION),\n" +
                        "                 IF(1= ?INCLUDE_NARRATION_CURRENCY AND MT.EXCHANGE_COUNTRY_ID>0, CONCAT(' (Currency Details : ', IFNULL(MCE.CURRENCY_NAME, ''), ' ', MT.CONTRIBUTION_AMOUNT, '@',MT.EXCHANGE_RATE, ')'),'')) AS NARRATION, MT.STATUS\n" +
                        "                 FROM MASTER_LEDGER_GROUP LG\n" +
                        "                 LEFT JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "                 LEFT JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "                 INNER JOIN VOUCHER_CC_TRANS AS VCC ON VT.VOUCHER_ID = VCC.VOUCHER_ID AND VT.LEDGER_ID = VCC.LEDGER_ID AND VT.SEQUENCE_NO = VCC.LEDGER_SEQUENCE_NO\n" +
                        "                 LEFT JOIN MASTER_COST_CENTRE MC ON MC.COST_CENTRE_ID = VCC.COST_CENTRE_ID\n" +
                        "                 INNER JOIN COSTCATEGORY_COSTCENTRE CC ON CC.COST_CENTRE_ID = VCC.COST_CENTRE_ID\n" +
                        "                 LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC ON MCCC.COST_CENTRECATEGORY_ID=COST_CATEGORY_ID\n" +
                        "                 LEFT JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "                 LEFT JOIN MASTER_COUNTRY MCE ON MCE.COUNTRY_ID = MT.EXCHANGE_COUNTRY_ID\n" +
                        "                 WHERE MT.PROJECT_ID IN (?PROJECT_ID) {AND VT.LEDGER_ID IN (?LEDGER_ID)}\n" +
                        "                 AND MT.VOUCHER_TYPE IN ('RC','PY') AND MT.STATUS = 1 AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO) AS VCCTrans ON  VCCTrans.LEDGER_ID = ML.LEDGER_ID\n" +
                        "  LEFT JOIN MASTER_COST_CENTRE MC ON MC.COST_CENTRE_ID = VCCTrans.COST_CENTRE_ID\n" +
                        "  INNER JOIN COSTCATEGORY_COSTCENTRE CC ON CC.COST_CENTRE_ID = VCCTrans.COST_CENTRE_ID\n " +
                        "  LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC ON MCCC.COST_CENTRECATEGORY_ID=COST_CATEGORY_ID\n " +
                        "  LEFT JOIN (SELECT VT.VOUCHER_ID, VT.LEDGER_ID,ML.GROUP_ID,ML.LEDGER_NAME AS CB_NAME, SEQUENCE_NO,VT.CHEQUE_NO, VT.FUND_TRANSFER_TYPE_NAME, \n" +
                        "                              CASE\n" +
                        "                                WHEN LG.GROUP_ID = 12 AND VT.TRANS_MODE = 'CR' THEN\n" +
                        "                                 'TO BANK'\n" +
                        "                                ELSE\n" +
                        "                                 CASE\n" +
                        "                                   WHEN LG.GROUP_ID = 12 AND VT.TRANS_MODE = 'DR' THEN\n" +
                        "                                    'BY BANK'\n" +
                        "                                   ELSE\n" +
                        "                                    CASE\n" +
                        "                                      WHEN LG.GROUP_ID = 13 AND VT.TRANS_MODE = 'CR' THEN\n" +
                        "                                       'TO CASH'\n" +
                        "                                      ELSE\n" +
                        "                                       CASE\n" +
                        "                                         WHEN LG.GROUP_ID = 13 AND VT.TRANS_MODE = 'DR' THEN\n" +
                        "                                          'BY CASH'\n" +
                        "                                       END\n" +
                        "                                    END\n" +
                        "                                 END\n" +
                        "                              END AS 'TRANS_MODE'\n" +
                        "                         FROM MASTER_LEDGER_GROUP LG\n" +
                        "                         LEFT JOIN MASTER_LEDGER ML\n" +
                        "                           ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "                         LEFT JOIN VOUCHER_TRANS VT\n" +
                        "                           ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "                         LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                        "                           ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "                        WHERE MT.VOUCHER_TYPE IN ('RC', 'PY')\n" +
                        "                          AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "                          AND MT.STATUS = 1\n" +
                        "                          AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                            //  "                          AND VT.LEDGER_ID IN (?LEDGER_ID)\n" +
                        "                          AND LG.GROUP_ID IN (12, 13)\n" +
                        "                        GROUP BY VT.VOUCHER_ID) AS TA ON TA.VOUCHER_ID = VCCTrans.VOUCHER_ID\n" +
                        "         WHERE VCCTrans.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "           AND CC.COST_CENTRE_ID IN(?COST_CENTRE_ID)\n" +
                        "           {AND VCCTrans.LEDGER_ID IN (?LEDGER_ID)}\n" +
                        "           AND VCCTrans.VOUCHER_TYPE IN ('RC', 'PY')\n" +
                        "           AND VCCTrans.STATUS = 1\n" +
                        "           AND VCCTrans.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "           AND LG.GROUP_ID NOT IN (12, 13)\n" +
                        "         GROUP BY MC.COST_CENTRE_NAME, VCCTrans.VOUCHER_DATE,\n" +
                        "                  VCCTrans.VOUCHER_ID,\n" +
                        "                  ML.LEDGER_ID,\n" +
                        "                  VCCTrans.TRANS_MODE\n" +
                        "        UNION\n" +
                        "        SELECT VCCTrans.VOUCHER_ID,LG.SORT_ORDER,\n" +
                        "               VCCTrans.LEDGER_ID,\n" +
                        "               '" + DrillDownType.LEDGER_JOURNAL_VOUCHER + "' as PARTICULAR_TYPE,\n" +
                        "               VCCTrans.VOUCHER_DATE,\n" +
                        "               VCCTrans.VOUCHER_NO,\n" +
                        "               MC.COST_CENTRE_ID, MC.COST_CENTRE_NAME,\n" +
                        "               MCCC.COST_CENTRECATEGORY_ID, MCCC.COST_CENTRE_CATEGORY_NAME, " +
                        "               LG.LEDGER_GROUP,\n" +
                        "               VCCTrans.LEDGER_NAME,\n" +
                        "               ML.LEDGER_NAME AS 'PARTICULARS',\n" +
                        "               CASE\n" +
                        "                 WHEN VCCTrans.TRANS_MODE = 'CR' THEN\n" +
                        "                  IFNULL(SUM(VCCTrans.AMOUNT), 0)\n" +  // VCC.AMOUNT
                        "                 ELSE\n" +
                        "                  0.00\n" +
                        "               END AS CREDIT,\n" +
                        "               CASE\n" +
                        "                 WHEN VCCTrans.TRANS_MODE = 'DR' THEN\n" +
                        "                  IFNULL(SUM(VCCTrans.AMOUNT), 0)\n" +  // VCC.AMOUNT
                        "                 ELSE\n" +
                        "                  0.00\n" +
                        "               END AS DEBIT, VCCTrans.NARRATION, VCCTrans.LEDGER_CODE, 0 AS OP_AMOUNT\n" +
                        "\n" +
                        "          FROM MASTER_LEDGER_GROUP LG\n" +
                        "\n" +
                        "          LEFT JOIN MASTER_LEDGER ML\n" +
                        "            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "          INNER JOIN (SELECT MT.VOUCHER_ID, MT.PROJECT_ID, MT.VOUCHER_DATE, MT.VOUCHER_TYPE, MT.VOUCHER_NO, VT.TRANS_MODE,\n" +
                        "                 ML.LEDGER_NAME,ML.LEDGER_CODE,ML.LEDGER_ID, VCC.COST_CENTRE_ID, (VCC.AMOUNT*IF(MT.IS_MULTI_CURRENCY=1, MT.EXCHANGE_RATE, 1)) AS AMOUNT, \n" +
                        "                 IF(VT.NARRATION IS NULL OR VT.NARRATION='',MT.NARRATION, VT.NARRATION) AS NARRATION, MT.STATUS\n" +
                        "                 FROM MASTER_LEDGER_GROUP LG\n" +
                        "                 LEFT JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "                 LEFT JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "                 INNER JOIN VOUCHER_CC_TRANS AS VCC ON VT.VOUCHER_ID = VCC.VOUCHER_ID AND VT.LEDGER_ID = VCC.LEDGER_ID AND VT.SEQUENCE_NO = VCC.LEDGER_SEQUENCE_NO\n" +
                        "                 LEFT JOIN MASTER_COST_CENTRE MC ON MC.COST_CENTRE_ID = VCC.COST_CENTRE_ID\n" +
                        "                 INNER JOIN COSTCATEGORY_COSTCENTRE CC ON CC.COST_CENTRE_ID = VCC.COST_CENTRE_ID\n" +
                        "                 LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC ON MCCC.COST_CENTRECATEGORY_ID=COST_CATEGORY_ID\n" +
                        "                 LEFT JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "                 WHERE MT.PROJECT_ID IN (?PROJECT_ID) {AND VT.LEDGER_ID IN (?LEDGER_ID)}\n" +
                        "                 AND MT.VOUCHER_TYPE IN ('JN') AND MT.STATUS = 1 AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO) AS VCCTrans  ON  VCCTrans.LEDGER_ID = ML.LEDGER_ID\n" +
                        "          LEFT JOIN MASTER_COST_CENTRE MC ON MC.COST_CENTRE_ID = VCCTrans.COST_CENTRE_ID\n" +
                        "          INNER JOIN COSTCATEGORY_COSTCENTRE CC ON CC.COST_CENTRE_ID = VCCTrans.COST_CENTRE_ID\n" +
                        "          LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC ON MCCC.COST_CENTRECATEGORY_ID=COST_CATEGORY_ID\n" +
                        "           WHERE VCCTrans.PROJECT_ID IN (?PROJECT_ID) AND CC.COST_CENTRE_ID IN(?COST_CENTRE_ID) AND VCCTrans.VOUCHER_TYPE IN ('JN') AND VCCTrans.STATUS = 1\n" +
                        "           AND VCCTrans.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "           GROUP BY MC.COST_CENTRE_NAME, VCCTrans.VOUCHER_DATE, VCCTrans.VOUCHER_ID, VCCTrans.LEDGER_ID, VCCTrans.TRANS_MODE ORDER BY VOUCHER_ID\n" +
                        ") AS T\n" +
                        "  LEFT JOIN (SELECT LB.BALANCE_DATE, LB.BRANCH_ID, LB.PROJECT_ID, LB.LEDGER_ID,  \n" +
                        "             SUM(IF(LB.TRANS_MODE='CR', -LB.AMOUNT, LB.AMOUNT)) As AMOUNT\n" +
                        "            FROM LEDGER_BALANCE AS LB\n" +
                        "            LEFT JOIN (SELECT LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID, MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
                        "                       FROM LEDGER_BALANCE LBA\n" +
                        "                       WHERE 1 = 1 AND LBA.PROJECT_ID IN (?PROJECT_ID) AND LBA.BALANCE_DATE < ?DATE_FROM\n" +
                        "                       GROUP BY LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB1\n" +
                        "            ON LB.BRANCH_ID = LB1.BRANCH_ID AND LB.PROJECT_ID = LB1.PROJECT_ID AND LB.LEDGER_ID = LB1.LEDGER_ID\n" +
                        "          WHERE LB.PROJECT_ID IN (?PROJECT_ID) AND LB.BALANCE_DATE = LB1.BAL_DATE GROUP BY LB.LEDGER_ID) LBOP\n" +
                        "  ON LBOP.LEDGER_ID = T.LEDGER_ID\n" +
                        " GROUP BY T.COST_CENTRE_NAME,T.VOUCHER_ID,T.LEDGER_NAME\n" +  // -- T.LEDGER_ID,PARTICULARS 
                        " ORDER BY T.VOUCHER_DATE,T.VOUCHER_ID, PARTICULAR_TYPE";

                        break;
                    }

                case ReportSQLCommand.CostCentre.CostCenterOpeningBalance:
                    {
                        //13/04/2020, MCO.COST_CENTRECATEGORY_ID to have COST_CENTRECATEGORY_ID
                        query = "SELECT MCC.COST_CENTRE_NAME, MCO.COST_CENTRECATEGORY_ID, IFNULL(PCC.LEDGER_ID, 0) AS LEDGER_ID," +
                                  "MCO.COST_CENTRE_CATEGORY_NAME, IFNULL(ML.LEDGER_NAME,'') AS LEDGER_NAME, \n" +
                                  "PCC.COST_CENTRE_ID, (SUM(IF(PCC.TRANS_MODE = 'CR',  -PCC.AMOUNT, PCC.AMOUNT)) + IFNULL(CC_PREV_TRANS.TRANS_AMOUNT,0)) AS OP_AMOUNT,\n" +
                                  "IF(LBOP.AMOUNT<0, LBOP.AMOUNT *-1, 0 ) AS LEDGER_OP_CR, IF(LBOP.AMOUNT>=0, LBOP.AMOUNT, 0 ) AS LEDGER_OP_DR\n" +
                                  "FROM (SELECT PROJECT_ID, LEDGER_ID, COST_CENTRE_ID, AMOUNT, TRANS_MODE\n" +
                                  "      FROM PROJECT_COSTCENTRE WHERE IF(?COSTCENTRE_MAPPING = 1, (LEDGER_ID > 0 {AND LEDGER_ID IN (?LEDGER_ID)}), LEDGER_ID = 0)) AS PCC\n" +
                                  "LEFT JOIN MASTER_COST_CENTRE MCC ON MCC.COST_CENTRE_ID = PCC.COST_CENTRE_ID\n" +
                                  "LEFT JOIN COSTCATEGORY_COSTCENTRE CCC ON CCC.COST_CENTRE_ID = MCC.COST_CENTRE_ID\n" +
                                  "LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCO ON MCO.COST_CENTRECATEGORY_ID = CCC.COST_CATEGORY_ID\n" +
                                  "LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = PCC.LEDGER_ID\n" +
                                  "LEFT JOIN (SELECT VCC.COST_CENTRE_ID, SUM(IF(VT.TRANS_MODE = 'DR', IFNULL(VCC.AMOUNT,0), -IFNULL(VCC.AMOUNT,0))) AS TRANS_AMOUNT\n" +
                                      "FROM VOUCHER_MASTER_TRANS VMT\n" +
                                      "INNER JOIN VOUCHER_CC_TRANS VCC ON VMT.VOUCHER_ID = VCC.VOUCHER_ID\n" +
                                      "INNER JOIN VOUCHER_TRANS VT\n" +
                                      "ON VT.VOUCHER_ID = VMT.VOUCHER_ID AND VT.LEDGER_ID = VCC.LEDGER_ID AND VT.SEQUENCE_NO = VCC.LEDGER_SEQUENCE_NO\n" +
                                      "WHERE VMT.PROJECT_ID IN (?PROJECT_ID) {AND VT.LEDGER_ID IN (?LEDGER_ID)}\n" +
                                      "AND VMT.STATUS = 1 AND VOUCHER_DATE < ?DATE_FROM AND VCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                                      "GROUP BY VCC.COST_CENTRE_ID) AS CC_PREV_TRANS ON CC_PREV_TRANS.COST_CENTRE_ID = PCC.COST_CENTRE_ID\n" +
                                  "LEFT JOIN (SELECT LB.BALANCE_DATE, LB.BRANCH_ID, LB.PROJECT_ID, LB.LEDGER_ID,  \n" +
                                  "             SUM(IF(LB.TRANS_MODE='CR', -LB.AMOUNT, LB.AMOUNT)) As AMOUNT\n" +
                                  "            FROM LEDGER_BALANCE AS LB\n" +
                                  "            LEFT JOIN (SELECT LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID, MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
                                  "                       FROM LEDGER_BALANCE LBA\n" +
                                  "                       WHERE 1 = 1 AND LBA.PROJECT_ID IN (?PROJECT_ID) AND LBA.BALANCE_DATE < ?DATE_FROM\n" +
                                  "                       GROUP BY LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB1\n" +
                                  "            ON LB.BRANCH_ID = LB1.BRANCH_ID AND LB.PROJECT_ID = LB1.PROJECT_ID AND LB.LEDGER_ID = LB1.LEDGER_ID\n" +
                                  "          WHERE LB.PROJECT_ID IN (?PROJECT_ID) AND LB.BALANCE_DATE = LB1.BAL_DATE GROUP BY LB.LEDGER_ID) LBOP\n" +
                                  "  ON LBOP.LEDGER_ID = PCC.LEDGER_ID\n" +
                                  "WHERE PCC.COST_CENTRE_ID IN (?COST_CENTRE_ID) AND PCC.PROJECT_ID IN (?PROJECT_ID) \n" + //AND (AMOUNT <> 0 OR IFNULL(CC_PREV_TRANS.TRANS_AMOUNT,0) <>0)
                                  "GROUP BY MCC.COST_CENTRE_ID;";
                        break;
                    }
                #endregion

                // This is to separate the Cost Centre entries we added Group by Voucher Id in the Master voucher Trans tables.
                #region Monthly Abstract
                case ReportSQLCommand.CostCentre.MonthlyAbstract:
                    {
                        query = "SELECT MLG.GROUP_ID, ML.LEDGER_ID, VMT.VOUCHER_DATE, MLG.GROUP_CODE,MC.COST_CENTRE_ID,MC.COST_CENTRE_NAME,MCCC.COST_CENTRE_CATEGORY_NAME," +
                                 "CASE " +
                                 "WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN " +
                                 "MLG.LEDGER_GROUP " +
                                 "ELSE " +
                                 "PG.LEDGER_GROUP " +
                                 "END AS PARENT_GROUP, " +
                                 "       IF(?SHOWGROUPCODE = 1 OR ?SHOWLEDGERCODE = 1,\n" +
                                 "       CASE\n" +
                                 "         WHEN MLG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                 "          CONCAT(MLG.LEDGER_GROUP)\n" +
                                 "         ELSE\n" +
                                 "        CONCAT('   ',MLG.LEDGER_GROUP)\n" +
                                 "       END,MLG.LEDGER_GROUP) AS LEDGER_GROUP,\n" +
                                 "       IF(?SHOWGROUPCODE = 1 AND ?SHOWLEDGERCODE = 1,\n" +
                                 "          CASE\n" +
                                 "            WHEN MLG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                                 "             CONCAT('   ', ML.LEDGER_NAME)\n" +
                                 "            ELSE\n" +
                                 "             CONCAT('      ', ML.LEDGER_NAME)\n" +
                                 "          END,\n" +
                                 "          ML.LEDGER_NAME) AS LEDGER_NAME,\n" +
                                 "       MLG.SORT_ORDER,\n" +
                                 "ML.LEDGER_CODE, " +
                                 "IF(VMT.VOUCHER_DATE >= ?DATE_FROM, " +
                                 "   IF ((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') " +
                                 "   OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'), " +
                                 "   -IFNULL(SUM( (VCC.AMOUNT*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)) ), 0), IFNULL(SUM( (VCC.AMOUNT*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)) ), 0)), 0) AS AMOUNT_PERIOD, " +
                                 "IF ((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') " +
                                 "OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'), " +
                                 "-IFNULL(SUM( (VCC.AMOUNT*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)) ), 0), IFNULL(SUM( (VCC.AMOUNT*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)) ), 0)) AS AMOUNT_PROGRESSIVE, " +
                                 "IFNULL(VT.TRANS_MODE, '') AS TRANS_MODE, " +
                                 "IF(ISNULL(VT.AMOUNT) = 0, 1,0) AS HAS_TRANS " +
                                 "FROM PROJECT_LEDGER AS PL " +
                                 "INNER JOIN MASTER_LEDGER AS ML " +
                                 "ON PL.LEDGER_ID = ML.LEDGER_ID " +
                                 "AND PL.PROJECT_ID IN (?PROJECT_ID) " +
                                 "INNER JOIN MASTER_LEDGER_GROUP AS MLG " +
                                 "ON ML.GROUP_ID = MLG.GROUP_ID " +
                                 "AND MLG.GROUP_ID NOT IN (?GROUP_ID) " +
                                 "INNER JOIN MASTER_LEDGER_GROUP PG " +
                                 "  ON MLG.PARENT_GROUP_ID=PG.GROUP_ID " +
                            //"  LEFT JOIN (SELECT VT.VOUCHER_ID, VT.LEDGER_ID, VT.AMOUNT, VT.TRANS_MODE, " +
                            //"  @row_num:= IF(@PREV_VOUCHER_ID != VT.VOUCHER_ID, 1, @row_num+1) AS ROW, @PREV_VOUCHER_ID:=VT.VOUCHER_ID " +
                            //"   FROM VOUCHER_TRANS VT, (SELECT @row_num := 0, @PREV_VOUCHER_ID := 0) AS TBL_ROW " +
                            //"  WHERE (SELECT COUNT(VCC.LEDGER_ID) FROM VOUCHER_CC_TRANS AS VCC WHERE VCC.VOUCHER_ID = VT.VOUCHER_ID AND VCC.LEDGER_ID = VT.LEDGER_ID)>0) VT " +
                                 "LEFT JOIN VOUCHER_TRANS AS VT " +
                                 "INNER JOIN VOUCHER_MASTER_TRANS AS VMT " +
                                 "ON VT.VOUCHER_ID = VMT.VOUCHER_ID " +
                                 "AND VMT.VOUCHER_DATE BETWEEN ?DATE_PROGRESS_FROM AND ?DATE_TO " +
                            // "AND VMT.STATUS NOT IN (0) " +
                                 "AND (VMT.VOUCHER_TYPE IN ('RC', 'PY') OR (VMT.VOUCHER_TYPE IN ('JN') AND IS_CASH_BANK_STATUS=1)) AND VT.TRANS_MODE=?TRANS_MODE AND VMT.STATUS = 1 " +
                            //   "AND VMT.PROJECT_ID IN (?PROJECT_ID) " +
                                 "ON ML.LEDGER_ID = VT.LEDGER_ID " +
                                 "AND VMT.PROJECT_ID = PL.PROJECT_ID " +
                                 "INNER JOIN VOUCHER_CC_TRANS AS VCC " +
                                 "ON VCC.VOUCHER_ID = VT.VOUCHER_ID " +
                                 "AND VCC.LEDGER_ID = VT.LEDGER_ID AND VCC.LEDGER_SEQUENCE_NO= VT.SEQUENCE_NO" +
                                 " LEFT JOIN MASTER_COST_CENTRE MC " +
                                 " ON MC.COST_CENTRE_ID=VCC.COST_CENTRE_ID " +
                                 "INNER JOIN COSTCATEGORY_COSTCENTRE CC" +
                                 " ON CC.COST_CENTRE_ID = VCC.COST_CENTRE_ID " +
                                 "LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC " +
                                 "ON MCCC.COST_CENTRECATEGORY_ID=COST_CATEGORY_ID " +
                                 "AND VT.LEDGER_ID = VCC.LEDGER_ID " +
                                 "WHERE VCC.COST_CENTRE_ID IN(?COST_CENTRE_ID) GROUP BY VMT.VOUCHER_ID, MC.COST_CENTRE_NAME,VT.LEDGER_ID ORDER BY MLG.SORT_ORDER";

                        break;
                    }
                #endregion

                #region MultiAbstract
                case ReportSQLCommand.CostCentre.MultiAbstract:
                    {
                        query = "SELECT MONTH_YEAR, YEAR(MONTH_YEAR) AS 'YEAR', MONTH(MONTH_YEAR) AS 'MONTH', " +
                        "CONCAT(LEFT(MONTHNAME(MONTH_YEAR),3), '-', YEAR(MONTH_YEAR)) AS MONTH_NAME, " +
                        "VMT.VOUCHER_DATE, MLG.GROUP_CODE, MLG.LEDGER_GROUP, ML.LEDGER_CODE, ML.LEDGER_NAME, " +
                        "(NULLIF(IF((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') " +
                        "OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'), " +
                        "-IFNULL(VCC.AMOUNT, 0), IFNULL(VCC.AMOUNT, 0)), 0)*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)) AS AMOUNT, " +
                        "IFNULL(VT.TRANS_MODE, '') AS TRANS_MODE, " +
                        "IF(ISNULL(VT.AMOUNT) = 0, 1, " +
                        "IF((?VOUCHER_TYPE = 'RC' AND MLG.NATURE_ID IN (1,4)) " +
                        "OR (?VOUCHER_TYPE = 'PY' AND MLG.NATURE_ID IN (2,3)), 1, 0)) AS HAS_TRANS " +
                        "FROM " +
                        " ( " +
                        "  SELECT (?DATE_FROM - INTERVAL DAYOFMONTH(?DATE_FROM) -1 DAY) " +
                        "     + INTERVAL NO_OF_MONTH MONTH AS MONTH_YEAR, NO_OF_MONTH " +
                        "  FROM " +
                        "  ( " +
                        "    SELECT @rownum := @rownum + 1 AS NO_OF_MONTH FROM " +
                        "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T1, " +
                        "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T2, " +
                        "      (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) AS T3, " +
                        "      (SELECT @rownum := -1) AS T0 " + /* for 64 months */
                        "  ) D1 " +
                        " ) D2 " +
                        "LEFT JOIN MASTER_LEDGER AS ML " +
                        "INNER JOIN MASTER_LEDGER_GROUP AS MLG " +
                        "  ON ML.GROUP_ID = MLG.GROUP_ID AND MLG.GROUP_ID NOT IN (?GROUP_ID) " +
                        "LEFT JOIN VOUCHER_MASTER_TRANS AS VMT ON VMT.PROJECT_ID IN (?PROJECT_ID) " +
                            //"INNER JOIN (SELECT VT.VOUCHER_ID, VT.LEDGER_ID, VT.AMOUNT, VT.TRANS_MODE, " +
                            //        "  @row_num:= IF(@PREV_VOUCHER_ID != VT.VOUCHER_ID, 1, @row_num+1) AS ROW, @PREV_VOUCHER_ID:=VT.VOUCHER_ID " +
                            //        "   FROM VOUCHER_TRANS VT, (SELECT @row_num := 0, @PREV_VOUCHER_ID := 0) AS TBL_ROW " +
                            //        "  WHERE (SELECT COUNT(VCC.LEDGER_ID) FROM VOUCHER_CC_TRANS AS VCC WHERE VCC.VOUCHER_ID = VT.VOUCHER_ID AND VCC.LEDGER_ID = VT.LEDGER_ID)>0) VT " +
                        "INNER JOIN VOUCHER_TRANS AS VT ON VMT.VOUCHER_ID = VT.VOUCHER_ID " +
                        "INNER JOIN VOUCHER_CC_TRANS AS VCC " +
                        "ON VT.VOUCHER_ID = VCC.VOUCHER_ID AND VT.LEDGER_ID = VCC.LEDGER_ID AND VCC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO " +
                        "AND VCC.COST_CENTRE_ID IN(?COST_CENTRE_ID) AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO " +
                        "AND VMT.STATUS NOT IN (0) AND VMT.VOUCHER_TYPE IN ('RC','PY') " +
                        "AND VT.TRANS_MODE =?TRANS_MODE ON ML.LEDGER_ID = VT.LEDGER_ID " +
                        "AND YEAR(D2.MONTH_YEAR) = YEAR(VMT.VOUCHER_DATE) AND MONTH(D2.MONTH_YEAR) = MONTH(VMT.VOUCHER_DATE) " +
                        "WHERE D2.MONTH_YEAR <= ?DATE_TO";

                        /*"INNER JOIN MASTER_LEDGER_GROUP AS MLG " +
                        "ON ML.GROUP_ID = MLG.GROUP_ID " +
                        "AND MLG.GROUP_ID NOT IN (?GROUP_ID) " +
                        "LEFT JOIN VOUCHER_TRANS AS VT " +
                        "INNER JOIN VOUCHER_MASTER_TRANS AS VMT " +
                        "ON VT.VOUCHER_ID = VMT.VOUCHER_ID " +
                        "AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO " +
                        "AND VMT.VOUCHER_TYPE = ?VOUCHER_TYPE " +
                        "AND VMT.PROJECT_ID IN (?PROJECT_ID) " +
                        "ON ML.LEDGER_ID = VT.LEDGER_ID " +
                        "ON YEAR(D2.MONTH_YEAR) = YEAR(VMT.VOUCHER_DATE) " +
                        "AND MONTH(D2.MONTH_YEAR) = MONTH(VMT.VOUCHER_DATE) " +
                        "WHERE D2.MONTH_YEAR <= ?DATE_TO ";*/

                        break;
                    }
                #endregion

                #region CostcentrePayments
                case ReportSQLCommand.CostCentre.CostCentrePayments:
                    {
                        query = "SELECT ML.LEDGER_ID,\n" +
                                "         ML.GROUP_ID,\n" +
                                "         LG.GROUP_CODE,\n" +
                                "         MC.COST_CENTRE_ID,\n" +
                                "         MC.COST_CENTRE_NAME,\n" +
                                "         MCCC.COST_CENTRE_CATEGORY_NAME, " +
                                "CASE " +
                                "WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN " +
                                "LG.LEDGER_GROUP " +
                                "ELSE " +
                                "PG.LEDGER_GROUP " +
                                "END AS PARENT_GROUP, " +
                                "       IF(?SHOWGROUPCODE = 1 OR ?SHOWLEDGERCODE = 1, " +
                                "       CASE " +
                                "         WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN " +
                                "          CONCAT(LG.LEDGER_GROUP) " +
                                "         ELSE " +
                                "       CONCAT('   ',LG.LEDGER_GROUP) " +
                                "       END,LG.LEDGER_GROUP) AS LEDGER_GROUP, " +
                                "      IF(?SHOWGROUPCODE = 1 AND ?SHOWLEDGERCODE = 1, " +
                                "          CASE " +
                                "            WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN " +
                                "             CONCAT('   ', ML.LEDGER_NAME) " +
                                "            ELSE " +
                                "             CONCAT('      ', ML.LEDGER_NAME) " +
                                "         END, " +
                                "         ML.LEDGER_NAME) AS LEDGER_NAME, " +
                                "         ML.LEDGER_CODE,LG.SORT_ORDER,\n " +
                                "         IFNULL( SUM( (IFNULL(VCC.AMOUNT,0)*IF(MT.IS_MULTI_CURRENCY=1, MT.EXCHANGE_RATE, 1)) ), 0) AS PAYMENTAMT\n" +
                                "\n" +
                                "   FROM MASTER_LEDGER_GROUP LG\n" +
                                "   INNER JOIN MASTER_LEDGER_GROUP PG ON LG.PARENT_GROUP_ID=PG.GROUP_ID\n" +
                                "   LEFT JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "   LEFT JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                            //"  LEFT JOIN (SELECT VT.VOUCHER_ID, VT.LEDGER_ID, VT.AMOUNT, VT.TRANS_MODE, @row_num:= IF(@PREV_VOUCHER_ID != VT.VOUCHER_ID, 1, @row_num+1) AS ROW,\n" +
                            //"            @PREV_VOUCHER_ID:= VT.VOUCHER_ID\n" +
                            //"            FROM VOUCHER_TRANS VT, (SELECT @row_num := 0, @PREV_VOUCHER_ID := 0) AS TBL_ROW\n" +
                            //"            WHERE (SELECT COUNT(VCC.LEDGER_ID) FROM VOUCHER_CC_TRANS AS VCC WHERE VCC.VOUCHER_ID = VT.VOUCHER_ID AND VCC.LEDGER_ID = VT.LEDGER_ID)>0) AS VT\n" +
                                "      \n" +
                                "   INNER JOIN VOUCHER_CC_TRANS AS VCC ON VT.VOUCHER_ID = VCC.VOUCHER_ID\n" +
                                "     AND VT.LEDGER_ID = VCC.LEDGER_ID AND VCC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO\n" +
                                "     AND VCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                                "   LEFT JOIN MASTER_COST_CENTRE MC ON MC.COST_CENTRE_ID = VCC.COST_CENTRE_ID\n " +
                                "   INNER JOIN COSTCATEGORY_COSTCENTRE CC ON CC.COST_CENTRE_ID = VCC.COST_CENTRE_ID\n " +
                                "   LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC ON MCCC.COST_CENTRECATEGORY_ID=COST_CATEGORY_ID\n " +
                                "   LEFT JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "   WHERE MT.PROJECT_ID IN (?PROJECT_ID) AND (MT.VOUCHER_TYPE IN ('RC','PY') OR (MT.VOUCHER_TYPE ='JN' AND MT.IS_CASH_BANK_STATUS=1 AND VT.TRANS_MODE ='DR')) {AND VT.LEDGER_ID IN (?LEDGER_ID)}\n" +
                                "   AND VT.TRANS_MODE='DR' AND MT.STATUS = 1 AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND LG.GROUP_ID NOT IN (12, 13)\n" +
                                "   GROUP BY IF(?SHOW_BY_COSTCENTRE=1, MC.COST_CENTRE_NAME,'' ), VT.LEDGER_ID  ORDER BY SORT_ORDER ";
                        break;
                    }
                #endregion

                #region CostcentreReceipts
                case ReportSQLCommand.CostCentre.CostCentreReceipts:
                    {
                        query = "SELECT ML.LEDGER_ID,\n" +
                        "       ML.GROUP_ID,\n" +
                        "       LG.GROUP_CODE,\n" +
                        "       MC.COST_CENTRE_ID,\n" +
                        "       MC.COST_CENTRE_NAME,\n" +
                        "       MCCC.COST_CENTRE_CATEGORY_NAME, " +
                        "       CASE\n" +
                        "        WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                        "        LG.LEDGER_GROUP\n" +
                        "        ELSE\n" +
                        "        PG.LEDGER_GROUP\n" +
                        "        END AS PARENT_GROUP,\n" +
                        "               IF(?SHOWGROUPCODE = 1 OR ?SHOWLEDGERCODE = 1,\n" +
                        "               CASE\n" +
                        "                 WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                        "                  CONCAT(LG.LEDGER_GROUP)\n" +
                        "                 ELSE\n" +
                        "               CONCAT('   ',LG.LEDGER_GROUP)\n" +
                        "               END,LG.LEDGER_GROUP) AS LEDGER_GROUP,\n" +
                        "              IF(?SHOWGROUPCODE = 1 AND ?SHOWLEDGERCODE = 1,\n" +
                        "                  CASE\n" +
                        "                    WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                        "                     CONCAT('   ', ML.LEDGER_NAME)\n" +
                        "                    ELSE\n" +
                        "                     CONCAT('      ', ML.LEDGER_NAME)\n" +
                        "                 END,\n" +
                        "                 ML.LEDGER_NAME) AS LEDGER_NAME,\n" +
                        "       ML.LEDGER_CODE,LG.SORT_ORDER,\n" +
                        "       IFNULL( SUM(IFNULL(VCC.AMOUNT,0) *IF(MT.IS_MULTI_CURRENCY=1, MT.EXCHANGE_RATE, 1) ), 0) AS RECEIPTAMT\n" +
                        "\n" +
                        "  FROM MASTER_LEDGER_GROUP LG\n" +
                        "  INNER JOIN MASTER_LEDGER_GROUP PG ON LG.PARENT_GROUP_ID=PG.GROUP_ID\n" +
                        "  LEFT JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "  LEFT JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                            //"  LEFT JOIN (SELECT VT.VOUCHER_ID, VT.LEDGER_ID, VT.AMOUNT, VT.TRANS_MODE, @row_num:= IF(@PREV_VOUCHER_ID != VT.VOUCHER_ID, 1, @row_num+1) AS ROW,\n" +
                            //"            @PREV_VOUCHER_ID:= VT.VOUCHER_ID\n" +
                            //"            FROM VOUCHER_TRANS VT, (SELECT @row_num := 0, @PREV_VOUCHER_ID := 0) AS TBL_ROW\n" +
                            //"            WHERE (SELECT COUNT(VCC.LEDGER_ID) FROM VOUCHER_CC_TRANS AS VCC WHERE VCC.VOUCHER_ID = VT.VOUCHER_ID AND VCC.LEDGER_ID = VT.LEDGER_ID)>0) AS VT\n" +
                        " INNER JOIN VOUCHER_CC_TRANS AS VCC ON VT.VOUCHER_ID = VCC.VOUCHER_ID\n" +
                        "   AND VT.LEDGER_ID = VCC.LEDGER_ID AND VCC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO\n" +
                        "   AND VCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                        " LEFT JOIN MASTER_COST_CENTRE MC ON MC.COST_CENTRE_ID = VCC.COST_CENTRE_ID\n " +
                        " INNER JOIN COSTCATEGORY_COSTCENTRE CC ON CC.COST_CENTRE_ID = VCC.COST_CENTRE_ID " +
                        " LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC ON MCCC.COST_CENTRECATEGORY_ID=COST_CATEGORY_ID " +
                        " LEFT JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        " WHERE MT.PROJECT_ID IN (?PROJECT_ID) AND (MT.VOUCHER_TYPE IN ('RC','PY') OR (MT.VOUCHER_TYPE ='JN' AND MT.IS_CASH_BANK_STATUS=1 AND VT.TRANS_MODE ='CR')) {AND VT.LEDGER_ID IN (?LEDGER_ID)}\n" +
                        " AND VT.TRANS_MODE='CR' AND MT.STATUS = 1 AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND LG.GROUP_ID NOT IN (12, 13)\n" +
                        " GROUP BY IF(?SHOW_BY_COSTCENTRE=1, MC.COST_CENTRE_NAME,'' ), VT.LEDGER_ID   ORDER BY SORT_ORDER";
                        break;
                    }
                #endregion

                #region CostCentreIncome

                case ReportSQLCommand.CostCentre.CostCentreIncome:
                    {
                        query = @" SELECT T.LEDGER_ID,
                                               T.GROUP_ID,
                                               T.GROUP_CODE,
                                               T.COST_CENTRE_ID,
                                               T.COST_CENTRE_NAME,
                                               T.COST_CENTRE_CATEGORY_NAME,
                                               T.PARENT_GROUP,
                                               T.LEDGER_GROUP,
                                               T.LEDGER_CODE,
                                               T.LEDGER_NAME,
                                               T.RECEIPTAMT,T.SORT_ORDER
                                          FROM (SELECT ML.LEDGER_ID,
                                                       ML.GROUP_ID,
                                                       LG.GROUP_CODE,
                                                        MC.COST_CENTRE_ID,
                                                        MC.COST_CENTRE_NAME,
                                                        MCCC.COST_CENTRE_CATEGORY_NAME,
                                                       CASE
                                                        WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN
                                                        LG.LEDGER_GROUP
                                                        ELSE
                                                        PG.LEDGER_GROUP
                                                        END AS PARENT_GROUP,
                                                               IF(?SHOWGROUPCODE = 1 OR ?SHOWLEDGERCODE = 1,
                                                               CASE
                                                                 WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN
                                                                  CONCAT(LG.LEDGER_GROUP)
                                                                 ELSE
                                                               CONCAT('   ',LG.LEDGER_GROUP)
                                                               END,LG.LEDGER_GROUP) AS LEDGER_GROUP,

                                                              IF(?SHOWGROUPCODE = 1 AND ?SHOWLEDGERCODE = 1,
                                                                  CASE
                                                                    WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN
                                                                     CONCAT('   ', ML.LEDGER_NAME)
                                                                    ELSE
                                                                     CONCAT('      ', ML.LEDGER_NAME)
                                                                 END,
                                                                 ML.LEDGER_NAME) AS LEDGER_NAME,
                                                       ML.LEDGER_CODE,LG.SORT_ORDER,
                                                       CASE
                                                         WHEN SUM(CASE
                                                                    WHEN VT.TRANS_MODE = 'DR' THEN
                                                                     (VCC.AMOUNT*IF(MT.IS_MULTI_CURRENCY=1, MT.EXCHANGE_RATE, 1))
                                                                    ELSE
                                                                     -(VCC.AMOUNT*IF(MT.IS_MULTI_CURRENCY=1, MT.EXCHANGE_RATE, 1))
                                                                  END) < 0 THEN
                                                          ABS(SUM(CASE
                                                                    WHEN VT.TRANS_MODE = 'DR' THEN
                                                                     (VCC.AMOUNT*IF(MT.IS_MULTI_CURRENCY=1, MT.EXCHANGE_RATE, 1))
                                                                    ELSE
                                                                     -(VCC.AMOUNT*IF(MT.IS_MULTI_CURRENCY=1, MT.EXCHANGE_RATE, 1))
                                                                  END))
                                                       END AS RECEIPTAMT

                                                  FROM MASTER_LEDGER_GROUP LG
                                                  INNER JOIN MASTER_LEDGER_GROUP PG
                                                    ON LG.PARENT_GROUP_ID=PG.GROUP_ID
                                                  LEFT JOIN MASTER_LEDGER ML
                                                    ON ML.GROUP_ID = LG.GROUP_ID
                                                   LEFT JOIN VOUCHER_TRANS VT
                                                    ON VT.LEDGER_ID = ML.LEDGER_ID
                                                  INNER JOIN VOUCHER_CC_TRANS AS VCC
                                                    ON VT.VOUCHER_ID = VCC.VOUCHER_ID
                                                    AND VT.LEDGER_ID = VCC.LEDGER_ID AND VCC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO
                                                    AND VCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)
                                                  LEFT JOIN MASTER_COST_CENTRE MC ON MC.COST_CENTRE_ID = VCC.COST_CENTRE_ID
                                                  INNER JOIN COSTCATEGORY_COSTCENTRE CC ON CC.COST_CENTRE_ID = VCC.COST_CENTRE_ID
                                                  LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC ON MCCC.COST_CENTRECATEGORY_ID=COST_CATEGORY_ID
                                                  LEFT JOIN VOUCHER_MASTER_TRANS MT
                                                    ON VT.VOUCHER_ID = MT.VOUCHER_ID
                                                  WHERE MT.PROJECT_ID IN (?PROJECT_ID)
                                                   AND MT.STATUS = 1
                                                   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO
                                                   AND LG.GROUP_ID NOT IN (12, 13)
                                                   AND LG.NATURE_ID NOT IN(3,4)
                                                 GROUP BY IF(?SHOW_BY_COSTCENTRE=1, MC.COST_CENTRE_NAME,'' ), VT.LEDGER_ID) AS T
                                         WHERE T.RECEIPTAMT > 0  ORDER BY T.SORT_ORDER";

                        break;
                    }
                #endregion

                #region CostCentreExpenditure

                case ReportSQLCommand.CostCentre.CostCentreExpenditure:
                    {

                        query = "SELECT T.LEDGER_ID,\n" +
                        "       T.GROUP_ID,\n" +
                        "       T.GROUP_CODE,\n" +
                        "       T.COST_CENTRE_ID,\n" +
                        "       T.COST_CENTRE_NAME,\n" +
                        "       T.COST_CENTRE_CATEGORY_NAME,\n" +
                        "       T.PARENT_GROUP,\n" +
                        "       T.LEDGER_GROUP,\n" +
                        "       T.LEDGER_CODE,\n" +
                        "       T.LEDGER_NAME,\n" +
                        "       T.PAYMENTAMT,T.SORT_ORDER\n" +
                        "  FROM (SELECT ML.LEDGER_ID,\n" +
                        "               ML.GROUP_ID,\n" +
                        "               LG.GROUP_CODE,\n" +
                        "               MC.COST_CENTRE_ID,\n" +
                        "               MC.COST_CENTRE_NAME,\n" +
                        "               MCCC.COST_CENTRE_CATEGORY_NAME,\n" +
                         "CASE\n" +
                         "       WHEN PG.GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                        "        LG.LEDGER_GROUP\n" +
                        "        ELSE\n" +
                        "        PG.LEDGER_GROUP\n" +
                        "        END AS PARENT_GROUP,\n" +
                        "               IF(?SHOWGROUPCODE = 1 OR ?SHOWLEDGERCODE = 1,\n" +
                        "               CASE\n" +
                        "                 WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                        "                  CONCAT(LG.LEDGER_GROUP)\n" +
                        "                 ELSE\n" +
                        "               CONCAT('   ',LG.LEDGER_GROUP)\n" +
                        "               END,LG.LEDGER_GROUP) AS LEDGER_GROUP,\n" +
                        "              IF(?SHOWGROUPCODE = 1 AND ?SHOWLEDGERCODE = 1,\n" +
                        "                  CASE\n" +
                        "                    WHEN LG.PARENT_GROUP_ID IN (1, 2, 3, 4) THEN\n" +
                        "                     CONCAT('   ', ML.LEDGER_NAME)\n" +
                        "                    ELSE\n" +
                        "                     CONCAT('      ', ML.LEDGER_NAME)\n" +
                        "                 END,\n" +
                        "                 ML.LEDGER_NAME) AS LEDGER_NAME,\n" +
                        "          ML.LEDGER_CODE,LG.SORT_ORDER, \n" +
                        "               CASE\n" +
                        "                 WHEN SUM(CASE\n" +
                        "                            WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                        "                             (VCC.AMOUNT *IF(MT.IS_MULTI_CURRENCY=1, MT.EXCHANGE_RATE, 1))\n" +
                        "                            ELSE\n" +
                        "                             -(VCC.AMOUNT *IF(MT.IS_MULTI_CURRENCY=1, MT.EXCHANGE_RATE, 1))\n" +
                        "                          END) > 0 THEN\n" +
                        "                  ABS(SUM(CASE\n" +
                        "                            WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                        "                             (VCC.AMOUNT *IF(MT.IS_MULTI_CURRENCY=1, MT.EXCHANGE_RATE, 1))\n" +
                        "                            ELSE\n" +
                        "                             -(VCC.AMOUNT *IF(MT.IS_MULTI_CURRENCY=1, MT.EXCHANGE_RATE, 1))\n" +
                        "                          END))\n" +
                        "               END AS PAYMENTAMT\n" +
                        "\n" +
                        "          FROM MASTER_LEDGER_GROUP LG\n" +
                        "INNER JOIN MASTER_LEDGER_GROUP PG ON LG.PARENT_GROUP_ID=PG.GROUP_ID \n" +
                        "          LEFT JOIN MASTER_LEDGER ML\n" +
                        "            ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        "          LEFT JOIN VOUCHER_TRANS VT\n" +
                        "            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        " INNER JOIN VOUCHER_CC_TRANS AS VCC\n" +
                        "    ON VT.VOUCHER_ID = VCC.VOUCHER_ID\n" +
                        "   AND VT.LEDGER_ID = VCC.LEDGER_ID AND VCC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO\n" +
                        "   AND VCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                        "   LEFT JOIN MASTER_COST_CENTRE MC ON MC.COST_CENTRE_ID = VCC.COST_CENTRE_ID\n" +
                        "   INNER JOIN COSTCATEGORY_COSTCENTRE CC ON CC.COST_CENTRE_ID = VCC.COST_CENTRE_ID " +
                        "  LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC ON MCCC.COST_CENTRECATEGORY_ID=COST_CATEGORY_ID " +
                        "          LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                        "            ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "         WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "           AND MT.STATUS = 1\n" +
                        "           AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "           AND LG.GROUP_ID NOT IN (12, 13)\n" +
                        "           AND LG.NATURE_ID NOT IN (3, 4)\n" +
                        "         GROUP BY IF(?SHOW_BY_COSTCENTRE=1, MC.COST_CENTRE_NAME,'' ) , VT.LEDGER_ID) AS T\n" +
                        " WHERE T.PAYMENTAMT > 0 ORDER BY T.SORT_ORDER";

                        break;
                    }

                #endregion

                #region CostCentreConsolidateStatement
                case ReportSQLCommand.CostCentre.CostCentreConsolidatedStatement:
                    {
                        query = "SELECT T.DATE, T.COST_CENTRE_NAME AS PARTICULARS, T.COST_CENTRE_ID,\n" +
                                "       IFNULL(SUM(T.DEBIT),0) AS DEBIT, IFNULL(SUM(T.CREDIT),0) AS CREDIT,\n" +
                                "       IF(LBOP.AMOUNT<0, LBOP.AMOUNT *-1, 0 ) AS OP_CR, IF(LBOP.AMOUNT>=0, LBOP.AMOUNT, 0 ) AS OP_DR,\n" +
                                "       T.LEDGER_NAME,T.COST_CENTRE_CATEGORY_NAME\n" +
                                "       FROM (SELECT MT.VOUCHER_ID,\n" +
                                "               MT.VOUCHER_DATE AS DATE,\n" +
                                "               MCC.COST_CENTRE_NAME,\n" +
                                "               VCC.COST_CENTRE_ID,\n" +
                                "               0 AS DEBIT,\n" +
                                "               SUM( (IFNULL(VCC.AMOUNT,0) *IF(MT.IS_MULTI_CURRENCY=1, MT.EXCHANGE_RATE, 1)) ) AS CREDIT,\n" +
                                "               ML.LEDGER_NAME, ML.LEDGER_ID,\n" +
                                "               MCA.COST_CENTRE_CATEGORY_NAME\n" +
                                "          FROM MASTER_LEDGER_GROUP LG\n" +
                                "          LEFT JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "          LEFT JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                            //"          LEFT JOIN (SELECT VT.VOUCHER_ID, VT.LEDGER_ID, VT.AMOUNT, VT.TRANS_MODE, @row_num:= IF(@PREV_VOUCHER_ID != VT.VOUCHER_ID, 1, @row_num+1) AS ROW,\n" +
                            //"                 @PREV_VOUCHER_ID:= VT.VOUCHER_ID\n" +
                            //"                 FROM VOUCHER_TRANS VT, (SELECT @row_num := 0, @PREV_VOUCHER_ID := 0) AS TBL_ROW\n" +
                            //"                   WHERE (SELECT COUNT(VCC.LEDGER_ID) FROM VOUCHER_CC_TRANS AS VCC WHERE VCC.VOUCHER_ID = VT.VOUCHER_ID AND VCC.LEDGER_ID = VT.LEDGER_ID)>0) AS VT\n" +
                                "          LEFT JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "          INNER JOIN VOUCHER_CC_TRANS VCC ON MT.VOUCHER_ID = VCC.VOUCHER_ID\n" +
                                "           AND ML.LEDGER_ID = VCC.LEDGER_ID AND VCC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO\n" +
                                "          LEFT JOIN MASTER_COST_CENTRE MCC ON VCC.COST_CENTRE_ID = MCC.COST_CENTRE_ID\n" +
                                "          LEFT JOIN COSTCATEGORY_COSTCENTRE CCC ON CCC.COST_CENTRE_ID = MCC.COST_CENTRE_ID\n" +
                                "          LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCA ON MCA.COST_CENTRECATEGORY_ID = CCC.COST_CATEGORY_ID\n" +
                                "         WHERE MT.PROJECT_ID IN (?PROJECT_ID) AND VT.TRANS_MODE = 'CR' AND MT.STATUS = 1 AND VCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                            //"           AND MT.VOUCHER_TYPE IN ('RC', 'PY')\n" +
                                "           AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "         GROUP BY MT.VOUCHER_DATE,ML.LEDGER_ID, VCC.COST_CENTRE_ID\n" +
                                "        UNION\n" +
                                "        SELECT MT.VOUCHER_ID,\n" +
                                "               MT.VOUCHER_DATE AS DATE,\n" +
                                "               MCC.COST_CENTRE_NAME,\n" +
                                "               VCC.COST_CENTRE_ID,\n" +
                                "               SUM( (IFNULL(VCC.AMOUNT,0)*IF(MT.IS_MULTI_CURRENCY=1, MT.EXCHANGE_RATE, 1)) ) AS DEBIT,\n" +
                                "               0 AS CREDIT,\n" +
                                "               ML.LEDGER_NAME, ML.LEDGER_ID,\n" +
                                "               MCA.COST_CENTRE_CATEGORY_NAME\n" +
                                "          FROM MASTER_LEDGER_GROUP LG\n" +
                                "          LEFT JOIN MASTER_LEDGER ML ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "            \n" +
                                "          LEFT JOIN VOUCHER_TRANS VT ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                            //"          LEFT JOIN (SELECT VT.VOUCHER_ID, VT.LEDGER_ID, VT.AMOUNT, VT.TRANS_MODE, @row_num:= IF(@PREV_VOUCHER_ID != VT.VOUCHER_ID, 1, @row_num+1) AS ROW,\n" +
                            //"                 @PREV_VOUCHER_ID:= VT.VOUCHER_ID\n" +
                            //"                 FROM VOUCHER_TRANS VT, (SELECT @row_num := 0, @PREV_VOUCHER_ID := 0) AS TBL_ROW\n" +
                            //"                   WHERE (SELECT COUNT(VCC.LEDGER_ID) FROM VOUCHER_CC_TRANS AS VCC WHERE VCC.VOUCHER_ID = VT.VOUCHER_ID AND VCC.LEDGER_ID = VT.LEDGER_ID)>0) AS VT\n"                                 
                                "          LEFT JOIN VOUCHER_MASTER_TRANS MT ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "          INNER JOIN VOUCHER_CC_TRANS VCC ON MT.VOUCHER_ID = VCC.VOUCHER_ID\n" +
                                "           AND ML.LEDGER_ID = VCC.LEDGER_ID AND VCC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO\n" +
                                "          LEFT JOIN MASTER_COST_CENTRE MCC ON VCC.COST_CENTRE_ID = MCC.COST_CENTRE_ID\n" +
                                "          LEFT JOIN COSTCATEGORY_COSTCENTRE CCC ON CCC.COST_CENTRE_ID = MCC.COST_CENTRE_ID\n" +
                                "          LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCA ON MCA.COST_CENTRECATEGORY_ID = CCC.COST_CATEGORY_ID\n" +
                                "         WHERE MT.PROJECT_ID IN (?PROJECT_ID) AND VT.TRANS_MODE = 'DR' AND MT.STATUS = 1 AND VCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                            //"           AND MT.VOUCHER_TYPE IN ('RC', 'PY')\n" +
                                "           AND VOUCHER_DATE BETWEEN  ?DATE_FROM AND ?DATE_TO\n" +
                                "         GROUP BY MT.VOUCHER_DATE,ML.LEDGER_ID, VCC.COST_CENTRE_ID) AS T\n" +
                                "         LEFT JOIN (SELECT LB.BALANCE_DATE, LB.BRANCH_ID, LB.PROJECT_ID, LB.LEDGER_ID,  \n" +
                                "             SUM(IF(LB.TRANS_MODE='CR', -LB.AMOUNT, LB.AMOUNT)) As AMOUNT\n" +
                                "            FROM LEDGER_BALANCE AS LB\n" +
                                "            LEFT JOIN (SELECT LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID, MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
                                "                       FROM LEDGER_BALANCE LBA\n" +
                                "                       WHERE 1 = 1 AND LBA.PROJECT_ID IN (?PROJECT_ID) AND LBA.BALANCE_DATE < ?DATE_FROM\n" +
                                "                       GROUP BY LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB1\n" +
                                "            ON LB.BRANCH_ID = LB1.BRANCH_ID AND LB.PROJECT_ID = LB1.PROJECT_ID AND LB.LEDGER_ID = LB1.LEDGER_ID\n" +
                                "          WHERE LB.PROJECT_ID IN (?PROJECT_ID) AND LB.BALANCE_DATE = LB1.BAL_DATE GROUP BY LB.LEDGER_ID) LBOP\n" +
                                "         ON LBOP.LEDGER_ID = T.LEDGER_ID GROUP BY T.DATE, T.LEDGER_NAME, T.COST_CENTRE_ID";

                        break;
                    }
                #endregion

                #region CCDayBook
                case ReportSQLCommand.CostCentre.CCDayBook:
                    {
                        query =
                                "SELECT FN.VOUCHER_ID,FN.SORT_ORDER,\n" +
                                "       FN.VOUCHER_NO,\n" +
                                "       FN.DATE,\n" +
                                "       FN.PARTICULARS,\n" +
                                "       FN.DEBIT,\n" +
                                "       FN.CREDIT,\n" +
                                "       FN.NARRATION,\n" +
                                "       FN.VOUCHER_TYPE,\n" +
                                "       FN.VOUCHER_NAME AS VOUCHER_TYPE_NAME, FN.VOUCHER_DEFINITION_ID,\n" +
                                "       FN.LEDGER_GROUP,\n" +
                                "       FN.VOUCHER_SUB_TYPE,\n" +
                                "       FN.PARTICULAR_TYPE,\n" +
                                "       FN.COST_CENTRE_NAME,\n" +
                                "       FN.COST_CENTRE_CATEGORY_NAME\n" +
                                "  FROM (SELECT MT.VOUCHER_ID,LG.SORT_ORDER,\n" +
                                "       MT.VOUCHER_NO,\n" +
                                "       MT.VOUCHER_DATE AS DATE,\n" +
                                "       ML.LEDGER_NAME AS PARTICULARS,\n" +
                                "      0  AS DEBIT,\n" +
                                "      SUM( (IFNULL(VCC.AMOUNT,0)*IF(MT.IS_MULTI_CURRENCY=1, MT.EXCHANGE_RATE, 1)) ) AS CREDIT,\n" +  // SUM(VCC.AMOUNT)
                                "       MT.NARRATION,\n" +
                                "       CASE\n" +
                                "         WHEN MT.VOUCHER_TYPE = 'RC' THEN\n" +
                                "          'Receipt'\n" +
                                "       --  WHEN MT.VOUCHER_TYPE = 'PY' THEN\n" +
                                "       --   'Payment'\n" +
                                "       END AS VOUCHER_TYPE,\n" +
                                "      MV.VOUCHER_NAME, MT.VOUCHER_DEFINITION_ID,\n" +
                                "      MCC.COST_CENTRE_NAME,\n" +
                                "      MCCC.COST_CENTRE_CATEGORY_NAME,\n" +
                                "      LG.LEDGER_GROUP,\n" +
                                "     MT.VOUCHER_SUB_TYPE,\n" +
                                " '" + DrillDownType.LEDGER_CASHBANK_VOUCHER + "' as PARTICULAR_TYPE\n" +
                                "\n" +
                                "  FROM master_ledger_GROUP LG\n" +
                                "\n" +
                                "  LEFT JOIN master_ledger ML\n" +
                                "    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "  LEFT JOIN VOUCHER_TRANS VT\n" +
                            //"  LEFT JOIN (SELECT VT.VOUCHER_ID, VT.LEDGER_ID, VT.AMOUNT, VT.TRANS_MODE, @row_num:= IF(@PREV_VOUCHER_ID != VT.VOUCHER_ID, 1, @row_num+1) AS ROW,\n" +
                            //"            @PREV_VOUCHER_ID:= VT.VOUCHER_ID\n" +
                            //"            FROM VOUCHER_TRANS VT, (SELECT @row_num := 0, @PREV_VOUCHER_ID := 0) AS TBL_ROW\n" +
                            //"            WHERE (SELECT COUNT(VCC.LEDGER_ID) FROM VOUCHER_CC_TRANS AS VCC WHERE VCC.VOUCHER_ID = VT.VOUCHER_ID AND VCC.LEDGER_ID = VT.LEDGER_ID)>0) AS VT\n" +
                                "    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                "  LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                                "    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "  LEFT JOIN master_voucher MV\n" +
                                "    ON MV.VOUCHER_ID = MT.VOUCHER_DEFINITION_ID\n" +
                                " INNER JOIN VOUCHER_CC_TRANS VCC\n" +
                                "    ON MT.VOUCHER_ID = VCC.VOUCHER_ID\n" +
                                "   AND ML.LEDGER_ID = VCC.LEDGER_ID AND VCC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO\n" +

                                "\n" +
                                "  LEFT JOIN MASTER_COST_CENTRE MCC\n" +
                                "    ON VCC.COST_CENTRE_ID = MCC.COST_CENTRE_ID\n" +
                                " INNER JOIN COSTCATEGORY_COSTCENTRE CC\n" +
                                 "ON CC.COST_CENTRE_ID = VCC.COST_CENTRE_ID\n" +
                                " LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC\n" +
                                " ON MCCC.COST_CENTRECATEGORY_ID=COST_CATEGORY_ID\n" +
                                " WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "   AND MT.VOUCHER_TYPE IN ('RC')\n" +  // , 'PY'
                                "   AND VT.TRANS_MODE = 'CR'\n" +
                                "   AND MT.STATUS = 1\n" +
                                "   AND VCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                                "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "   and lg.group_id not in (12, 13, 14)\n" +
                                " GROUP BY MT.VOUCHER_ID,MCC.COST_CENTRE_ID,VT.LEDGER_ID\n" +
                                "union\n" +
                                "SELECT MT.VOUCHER_ID,LG.SORT_ORDER,\n" +
                                "       MT.VOUCHER_NO,\n" +
                                "       MT.VOUCHER_DATE AS DATE,\n" +
                                "       ML.LEDGER_NAME AS PARTICULARS,\n" +
                                "       SUM( (IFNULL(VCC.AMOUNT,0) *IF(MT.IS_MULTI_CURRENCY=1, MT.EXCHANGE_RATE, 1)) ) AS DEBIT,\n" +  // SUM(VCC.AMOUNT)
                                "       0 AS CREDIT,\n" +
                                "       MT.NARRATION,\n" +
                                "       CASE\n" +
                                "       --  WHEN MT.VOUCHER_TYPE = 'RC' THEN\n" +
                                "       --   'Receipt'\n" +
                                "         WHEN MT.VOUCHER_TYPE = 'PY' THEN\n" +
                                "          'Payment'\n" +
                                "       END AS VOUCHER_TYPE,\n" +
                                "      MV.VOUCHER_NAME, MT.VOUCHER_DEFINITION_ID,\n" +
                                "      MCC.COST_CENTRE_NAME,\n" +
                                "       MCCC.COST_CENTRE_CATEGORY_NAME,\n" +
                                "      LG.LEDGER_GROUP,\n" +
                                "     MT.VOUCHER_SUB_TYPE,\n" +
                                " '" + DrillDownType.LEDGER_CASHBANK_VOUCHER + "' as PARTICULAR_TYPE\n" +
                                "\n" +
                                "  FROM master_ledger_GROUP LG\n" +
                                "\n" +
                                "  LEFT JOIN master_ledger ML\n" +
                                "    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "  LEFT JOIN voucher_trans VT\n" +
                            //"  LEFT JOIN (SELECT VT.VOUCHER_ID, VT.LEDGER_ID, VT.AMOUNT, VT.TRANS_MODE, @row_num:= IF(@PREV_VOUCHER_ID != VT.VOUCHER_ID, 1, @row_num+1) AS ROW,\n" +
                            //"            @PREV_VOUCHER_ID:= VT.VOUCHER_ID\n" +
                            //"            FROM VOUCHER_TRANS VT, (SELECT @row_num := 0, @PREV_VOUCHER_ID := 0) AS TBL_ROW\n" +
                            //"            WHERE (SELECT COUNT(VCC.LEDGER_ID) FROM VOUCHER_CC_TRANS AS VCC WHERE VCC.VOUCHER_ID = VT.VOUCHER_ID AND VCC.LEDGER_ID = VT.LEDGER_ID)>0) AS VT\n" +
                                "    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                "  LEFT JOIN voucher_master_trans MT\n" +
                                "    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "  LEFT JOIN master_voucher MV\n" +
                                "    ON MV.VOUCHER_ID = MT.VOUCHER_DEFINITION_ID\n" +
                                " INNER JOIN VOUCHER_CC_TRANS VCC\n" +
                                "    ON MT.VOUCHER_ID = VCC.VOUCHER_ID\n" +
                                "   AND ML.LEDGER_ID = VCC.LEDGER_ID AND VCC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO\n" +
                                "\n" +
                                "  LEFT JOIN MASTER_COST_CENTRE MCC\n" +
                                "    ON VCC.COST_CENTRE_ID = MCC.COST_CENTRE_ID\n" +
                                "INNER JOIN COSTCATEGORY_COSTCENTRE CC\n" +
                                " ON CC.COST_CENTRE_ID = VCC.COST_CENTRE_ID\n" +
                                 " LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC\n" +
                                 " ON MCCC.COST_CENTRECATEGORY_ID=COST_CATEGORY_ID\n" +
                                " WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "   AND MT.VOUCHER_TYPE IN ('PY')\n" +  //'RC', 
                                "   AND VT.TRANS_MODE = 'DR'\n" +
                                "   AND MT.STATUS = 1\n" +
                                "   AND VCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                                "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "   and lg.group_id not in (12, 13, 14)\n" +
                                " GROUP BY MT.VOUCHER_ID,MCC.COST_CENTRE_ID,VT.LEDGER_ID \n" +
                                "\n" +
                                "UNION\n" +
                                "SELECT TB.VOUCHER_ID,TB.SORT_ORDER,\n" +
                                "      TB.VOUCHER_NO,\n" +
                                "      TB.DATE,\n" +
                                "      TB.LEDGER_NAME AS PARTICULARS,\n" +
                                "      TB.DEBIT,\n" +
                                "      TB.CREDIT,\n" +
                                "      TB.NARRATION,\n" +
                                "      'Journal' as VOUCHER_TYPE,\n" +
                                "      TB.VOUCHER_NAME, TB.VOUCHER_DEFINITION_ID,\n" +
                                "      TB.COST_CENTRE_NAME,\n" +
                                "      TB.COST_CENTRE_CATEGORY_NAME,\n" +
                                "      TB.LEDGER_GROUP,\n" +
                                "      TB.VOUCHER_SUB_TYPE,\n" +
                                " '" + DrillDownType.LEDGER_JOURNAL_VOUCHER + "' as PARTICULAR_TYPE\n" +
                                " FROM (SELECT MT.VOUCHER_ID,LG.SORT_ORDER,\n" +
                                "              MT.VOUCHER_NO,\n" +
                                "              MT.VOUCHER_DATE AS DATE,\n" +
                                "              ML.LEDGER_NAME,\n" +
                                "             0 AS DEBIT,\n" +
                                "               SUM( (IFNULL(VCC.AMOUNT,0) *IF(MT.IS_MULTI_CURRENCY=1, MT.EXCHANGE_RATE, 1)) ) AS CREDIT,\n" +  // SUM(VCC.AMOUNT)
                                "              MT.NARRATION,\n" +
                                "          MCC.COST_CENTRE_NAME,\n" +
                                "           MCCC.COST_CENTRE_CATEGORY_NAME,\n" +
                                "          LG.LEDGER_GROUP,\n" +
                                "          MT.VOUCHER_SUB_TYPE,\n" +
                                "         MV.VOUCHER_NAME, MT.VOUCHER_DEFINITION_ID\n" +
                                "\n" +
                                "         FROM master_ledger_GROUP LG\n" +
                                "\n" +
                                "         LEFT JOIN MASTER_LEDGER ML\n" +
                                "           ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "         LEFT JOIN VOUCHER_TRANS VT\n" +
                            //"  LEFT JOIN (SELECT VT.VOUCHER_ID, VT.LEDGER_ID, VT.AMOUNT, VT.TRANS_MODE, @row_num:= IF(@PREV_VOUCHER_ID != VT.VOUCHER_ID, 1, @row_num+1) AS ROW,\n" +
                            //"            @PREV_VOUCHER_ID:= VT.VOUCHER_ID\n" +
                            //"            FROM VOUCHER_TRANS VT, (SELECT @row_num := 0, @PREV_VOUCHER_ID := 0) AS TBL_ROW\n" +
                            //"            WHERE (SELECT COUNT(VCC.LEDGER_ID) FROM VOUCHER_CC_TRANS AS VCC WHERE VCC.VOUCHER_ID = VT.VOUCHER_ID AND VCC.LEDGER_ID = VT.LEDGER_ID)>0) AS VT\n" +
                                "           ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                "         LEFT JOIN voucher_master_trans MT\n" +
                                "           ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "  LEFT JOIN MASTER_VOUCHER MV\n" +
                                "    ON MV.VOUCHER_ID = MT.VOUCHER_DEFINITION_ID\n" +
                                "  INNER JOIN VOUCHER_CC_TRANS VCC\n" +
                                "    ON MT.VOUCHER_ID = VCC.VOUCHER_ID\n" +
                                "   AND ML.LEDGER_ID = VCC.LEDGER_ID AND VCC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO\n" +
                                "\n" +
                                "  LEFT JOIN MASTER_COST_CENTRE MCC\n" +
                                "    ON VCC.COST_CENTRE_ID = MCC.COST_CENTRE_ID\n" +
                                "  INNER JOIN COSTCATEGORY_COSTCENTRE CC\n" +
                                "    ON CC.COST_CENTRE_ID = VCC.COST_CENTRE_ID\n" +
                                "  LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC\n" +
                                "    ON MCCC.COST_CENTRECATEGORY_ID=COST_CATEGORY_ID\n" +
                                "\n" +
                                "        WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "          AND MT.VOUCHER_TYPE IN ('JN')\n" +
                                "          AND VT.TRANS_MODE = 'CR'\n" +
                                "          AND MT.STATUS = 1\n" +
                                  "   AND VCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                                "          AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "          and lg.group_id NOT in (12, 13, 14)\n" +
                                "        GROUP BY MT.VOUCHER_ID,MCC.COST_CENTRE_ID,VT.LEDGER_ID \n" +
                                "   UNION\n" +
                                "SELECT MT.VOUCHER_ID,LG.SORT_ORDER,\n" +
                                "       MT.VOUCHER_NO,\n" +
                                "       MT.VOUCHER_DATE AS DATE,\n" +
                                "       ML.LEDGER_NAME,\n" +
                                "       SUM( (IFNULL(VCC.AMOUNT,0) *IF(MT.IS_MULTI_CURRENCY=1, MT.EXCHANGE_RATE, 1)) ) AS DEBIT,\n" +  //SUM(VCC.AMOUNT)
                                "       0 AS CREDIT,\n" +
                                "       MT.NARRATION,\n" +
                                "       MCC.COST_CENTRE_NAME,\n" +
                                "       MCCC.COST_CENTRE_CATEGORY_NAME,\n" +
                                "       LG.LEDGER_GROUP,\n" +
                                "       MT.VOUCHER_SUB_TYPE,\n" +
                                "       MV.VOUCHER_NAME, MT.VOUCHER_DEFINITION_ID\n" +
                                "\n" +
                                "  FROM master_ledger_GROUP LG\n" +
                                "\n" +
                                "  LEFT JOIN master_ledger ML\n" +
                                "    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "  LEFT JOIN VOUCHER_TRANS VT\n" +
                            //"  LEFT JOIN (SELECT VT.VOUCHER_ID, VT.LEDGER_ID, VT.AMOUNT, VT.TRANS_MODE, @row_num:= IF(@PREV_VOUCHER_ID != VT.VOUCHER_ID, 1, @row_num+1) AS ROW,\n" +
                            //"            @PREV_VOUCHER_ID:= VT.VOUCHER_ID\n" +
                            //"            FROM VOUCHER_TRANS VT, (SELECT @row_num := 0, @PREV_VOUCHER_ID := 0) AS TBL_ROW\n" +
                            //"            WHERE (SELECT COUNT(VCC.LEDGER_ID) FROM VOUCHER_CC_TRANS AS VCC WHERE VCC.VOUCHER_ID = VT.VOUCHER_ID AND VCC.LEDGER_ID = VT.LEDGER_ID)>0) AS VT\n" +
                                "    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                "  LEFT JOIN voucher_master_trans MT\n" +
                                "    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "  LEFT JOIN master_voucher MV\n" +
                                "    ON MV.VOUCHER_ID = MT.VOUCHER_DEFINITION_ID\n" +
                                "  INNER JOIN VOUCHER_CC_TRANS VCC\n" +
                                "    ON MT.VOUCHER_ID = VCC.VOUCHER_ID\n" +
                                "   AND ML.LEDGER_ID = VCC.LEDGER_ID AND VCC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO\n" +
                                "\n" +
                                " LEFT JOIN MASTER_COST_CENTRE MCC\n" +
                                "    ON VCC.COST_CENTRE_ID = MCC.COST_CENTRE_ID\n" +
                                " INNER JOIN COSTCATEGORY_COSTCENTRE CC\n" +
                                "  ON CC.COST_CENTRE_ID = VCC.COST_CENTRE_ID\n" +
                                " LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC\n" +
                                "  ON MCCC.COST_CENTRECATEGORY_ID=COST_CATEGORY_ID\n" +
                                " WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "   AND MT.VOUCHER_TYPE IN ('JN')\n" +
                                "   AND VT.TRANS_MODE = 'DR'\n" +
                                "   AND MT.STATUS = 1\n" +
                                "   AND VCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                                "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "   and lg.group_id NOT in (12, 13, 14)\n" +
                                " GROUP BY MT.VOUCHER_ID,MCC.COST_CENTRE_ID,VT.LEDGER_ID)AS TB ) AS FN\n" +
                                " ORDER BY FN.DATE,FN.VOUCHER_NO";

                        break;
                    }
                #endregion

                #region CostCentre Journal Transactions
                case ReportSQLCommand.CostCentre.CostCentreJournalTransaction:
                    {
                        query = "SELECT ML.LEDGER_ID,\n" +
                                "       ML.LEDGER_NAME,\n" +
                                "       VMT.VOUCHER_ID,\n" +
                                "       VMT.VOUCHER_DATE,\n" +
                                "       VMT.VOUCHER_NO,\n" +
                                "       VMT.VOUCHER_TYPE,\n" +
                                "       VMT.NARRATION,\n" +
                                "       MCCC.COST_CENTRE_CATEGORY_NAME AS COSTCATEGORYNAME,\n" +
                                "       MCC.COST_CENTRE_NAME AS COSTCENTRE,\n" +
                                "       VT.TRANS_MODE,\n" +
                            //"       CASE\n" +
                            //"         WHEN VT.TRANS_MODE = 'CR' THEN\n" +
                            //"          IFNULL(SUM(VCC.AMOUNT), 0)\n" +
                            //"         ELSE\n" +
                            //"          0.00\n" +
                            //"       END AS 'CREDIT',\n" +
                            //"       CASE\n" +
                            //"         WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                            //"          IFNULL(SUM(VCC.AMOUNT), 0)\n" +
                            //"         ELSE\n" +
                            //"          0.00\n" +
                            //"       END AS 'DEBIT'\n" +
                                "  IFNULL(SUM(IF(VT.TRANS_MODE = 'CR', (VCC.AMOUNT *IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)) ,0)), 0) AS 'CREDIT',\n" +
                                "  IFNULL(SUM(IF(VT.TRANS_MODE = 'DR', (VCC.AMOUNT *IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)),0)), 0) AS 'DEBIT' \n" +
                                "  FROM MASTER_LEDGER_GROUP AS MLG\n" +
                                " INNER JOIN MASTER_LEDGER AS ML\n" +
                                "    ON MLG.GROUP_ID = ML.GROUP_ID\n" +
                                " INNER JOIN PROJECT_LEDGER AS PL\n" +
                                "    ON ML.LEDGER_ID = PL.LEDGER_ID\n" +
                                " INNER JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                                "    ON PL.PROJECT_ID = VMT.PROJECT_ID\n" +
                                " INNER JOIN VOUCHER_TRANS AS VT\n" +
                            //"  INNER JOIN (SELECT VT.VOUCHER_ID, VT.LEDGER_ID, VT.AMOUNT, VT.TRANS_MODE, @row_num:= IF(@PREV_VOUCHER_ID != VT.VOUCHER_ID, 1, @row_num+1) AS ROW,\n" +
                            //"            @PREV_VOUCHER_ID:= VT.VOUCHER_ID\n" +
                            //"            FROM VOUCHER_TRANS VT, (SELECT @row_num := 0, @PREV_VOUCHER_ID := 0) AS TBL_ROW\n" +
                            //"            WHERE (SELECT COUNT(VCC.LEDGER_ID) FROM VOUCHER_CC_TRANS AS VCC WHERE VCC.VOUCHER_ID = VT.VOUCHER_ID AND VCC.LEDGER_ID = VT.LEDGER_ID)>0) AS VT\n" +
                                "    ON PL.LEDGER_ID = VT.LEDGER_ID\n" +
                                "   AND VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                " INNER JOIN MASTER_PROJECT AS MP\n" +
                                "    ON VMT.PROJECT_ID = MP.PROJECT_ID\n" +
                                "\n" +
                                " INNER JOIN VOUCHER_CC_TRANS VCC\n" +
                                "    ON VMT.VOUCHER_ID = VCC.VOUCHER_ID\n" +
                                "   AND ML.LEDGER_ID = VCC.LEDGER_ID AND VCC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO\n" +
                                "  LEFT JOIN MASTER_COST_CENTRE MCC\n" +
                                "    ON VCC.COST_CENTRE_ID = MCC.COST_CENTRE_ID\n" +
                                " INNER JOIN COSTCATEGORY_COSTCENTRE CC\n" +
                                "    ON CC.COST_CENTRE_ID = VCC.COST_CENTRE_ID\n" +
                                "  LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC\n" +
                                "    ON MCCC.COST_CENTRECATEGORY_ID = COST_CATEGORY_ID\n" +
                                "\n" +
                                " WHERE VMT.VOUCHER_TYPE IN ('JN')\n" +
                                "   AND VMT.STATUS = 1\n" +
                                "   AND VMT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "   AND VCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                                "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "   AND MLG.GROUP_ID NOT IN (12, 13)\n" +
                                " GROUP BY VMT.VOUCHER_ID, ML.LEDGER_ID, VMT.VOUCHER_DATE\n" +
                                " ORDER BY VOUCHER_NO, VMT.VOUCHER_DATE, VMT.VOUCHER_TYPE ASC";
                        break;
                    }
                #endregion

                #region CostCentre Balance Statement
                case ReportSQLCommand.CostCentre.CostCentreBalanceStatement:
                    {
                        query = "SELECT FNL.COST_CENTRE_CATEGORY_NAME,COST_CENTRE_ID,LEDGER_ID,\n" +
                        "      FNL.COST_CENTRE_NAME AS COST_CENTRE_NAME,\n" +
                       "       IF(?SHOW_OP_BALANCE=1, SUM(FNL.OP_AMOUNT),0) AS OP_AMOUNT,\n" +  //26/03/2020, On show cc op balance based on setting " SUM(FNL.OP_AMOUNT) AS OP_AMOUNT,\n" +
                       "       IFNULL(SUM(FNL.DEBIT), 0) AS DEBIT,\n" +
                       "       IFNULL(SUM(FNL.CREDIT), 0) AS CREDIT,\n" +
                            //"       (SUM(FNL.OP_AMOUNT) + IFNULL(SUM(FNL.DEBIT), 0) - IFNULL(SUM(FNL.CREDIT), 0)) AS CLOSING_BALANCE\n" + //26/03/2020, On show cc op balance based on setting
                       "       (IF(?SHOW_OP_BALANCE=1, SUM(FNL.OP_AMOUNT),0) + IFNULL(SUM(FNL.DEBIT), 0) - IFNULL(SUM(FNL.CREDIT), 0)) AS CLOSING_BALANCE\n" +
                       "       FROM (SELECT T1.COST_CENTRE_NAME AS COST_CENTRE_NAME,\n" +
                       "               T1.COST_CENTRE_CATEGORY_NAME AS COST_CENTRE_CATEGORY_NAME,\n" +
                       "               T1.COST_CENTRE_ID,\n" +
                       "               0 AS OP_AMOUNT,\n" +
                       "               SUM(T1.DEBIT) AS DEBIT,T1.LEDGER_ID,\n" +
                       "               SUM(T1.CREDIT) AS CREDIT,\n" +
                       "               T1.TRANS_MODE AS TR_TRANS_MODE,T1.VOUCHER_ID\n" +
                       "          FROM (SELECT VCC.COST_CENTRE_ID,\n" +
                       "       VT.VOUCHER_ID,VCC.LEDGER_ID,\n" +
                       "       VT.TRANS_MODE,\n" +
                       "       CASE\n" +
                       "         WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                       "          SUM( (IFNULL(VCC.AMOUNT,0)*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)) ) \n" +
                       "         ELSE\n" +
                       "          0\n" +
                       "       END AS DEBIT,\n" +
                       "       CASE\n" +
                       "         WHEN VT.TRANS_MODE = 'CR' THEN\n" +
                       "          SUM( (IFNULL(VCC.AMOUNT,0)*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)) ) \n" +
                       "       END AS CREDIT,\n" +
                       "       SUM(VCC.AMOUNT) AS AMOUNT,\n" +
                       "       MCC.COST_CENTRE_NAME,\n" +
                       "       MCO.COST_CENTRE_CATEGORY_NAME\n" +
                       "  FROM VOUCHER_MASTER_TRANS VMT\n" +
                       "  INNER JOIN VOUCHER_CC_TRANS VCC ON VMT.VOUCHER_ID = VCC.VOUCHER_ID\n" +
                       "  INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VMT.VOUCHER_ID AND VT.LEDGER_ID = VCC.LEDGER_ID AND VT.SEQUENCE_NO = VCC.LEDGER_SEQUENCE_NO\n" +
                            //"  INNER JOIN(SELECT VT.VOUCHER_ID, VT.LEDGER_ID, VT.AMOUNT, VT.TRANS_MODE, @row_num:= IF(@PREV_VOUCHER_ID != VT.VOUCHER_ID, 1, @row_num+1) AS ROW,\n" +
                            //"                 @PREV_VOUCHER_ID:= VT.VOUCHER_ID\n" +
                            //"                 FROM VOUCHER_TRANS VT, (SELECT @row_num := 0, @PREV_VOUCHER_ID := 0) AS TBL_ROW\n" +
                            //"                   WHERE (SELECT COUNT(VCC.LEDGER_ID) FROM VOUCHER_CC_TRANS AS VCC WHERE VCC.VOUCHER_ID = VT.VOUCHER_ID AND VCC.LEDGER_ID = VT.LEDGER_ID)>0) AS VT\n" +  
                       "  LEFT JOIN MASTER_COST_CENTRE MCC ON MCC.COST_CENTRE_ID = VCC.COST_CENTRE_ID\n" +
                       "  LEFT JOIN COSTCATEGORY_COSTCENTRE CCC ON CCC.COST_CENTRE_ID = MCC.COST_CENTRE_ID\n" +
                       "  LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCO ON MCO.COST_CENTRECATEGORY_ID = CCC.COST_CATEGORY_ID\n" +
                       "  WHERE VMT.PROJECT_ID IN (?PROJECT_ID) AND VT.LEDGER_ID IN (?LEDGER_ID) AND VMT.STATUS = 1\n" +
                       "        AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND VCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                       "  GROUP BY VCC.COST_CENTRE_ID, VT.TRANS_MODE ) AS T1 GROUP BY T1.VOUCHER_ID,T1.COST_CENTRE_ID\n" +
                       "  UNION ALL\n" +
                       "  SELECT MCC.COST_CENTRE_NAME, MCO.COST_CENTRE_CATEGORY_NAME, PCC.COST_CENTRE_ID,\n" +
                            //"        SUM(IF(PCC.TRANS_MODE = 'CR',  -PCC.AMOUNT, PCC.AMOUNT)) + IFNULL(CC_PREV_TRANS.TRANS_AMOUNT,0) AS OP_AMOUNT ,\n" +  
                            //"        IFNULL(CC_PREV_TRANS.TRANS_AMOUNT,0) AS OP_AMOUNT ,\n" +
                       "        (SUM(IF(PCC.TRANS_MODE = 'CR',  -PCC.AMOUNT, PCC.AMOUNT)) + \n" +
                       "            IFNULL(CC_PREV_TRANS.TRANS_AMOUNT,0)) AS OP_AMOUNT, 0 AS DEBIT,0 as LEDGER_ID, 0 AS CREDIT, '' AS TR_TRANS_MODE,0 AS VOUCHER_ID\n" +
                       "         FROM (SELECT PROJECT_ID, LEDGER_ID, COST_CENTRE_ID, AMOUNT, TRANS_MODE\n" +
                       "              FROM PROJECT_COSTCENTRE WHERE COST_CENTRE_ID IN (?COST_CENTRE_ID) AND IF(?COSTCENTRE_MAPPING = 1,(LEDGER_ID > 0 AND LEDGER_ID IN (?LEDGER_ID)), LEDGER_ID = 0)) AS PCC\n" +
                       "         LEFT JOIN MASTER_COST_CENTRE MCC ON MCC.COST_CENTRE_ID = PCC.COST_CENTRE_ID\n" +
                       "         LEFT JOIN COSTCATEGORY_COSTCENTRE CCC ON CCC.COST_CENTRE_ID = MCC.COST_CENTRE_ID\n" +
                       "         LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCO ON MCO.COST_CENTRECATEGORY_ID = CCC.COST_CATEGORY_ID\n" +
                       "         LEFT JOIN (SELECT VCC.COST_CENTRE_ID,\n" +
                       "             (SUM(IF(VT.TRANS_MODE = 'DR', IFNULL(VCC.AMOUNT,0), -IFNULL(VCC.AMOUNT,0))) *IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)) AS TRANS_AMOUNT\n" +
                       "             FROM VOUCHER_MASTER_TRANS VMT\n" +
                       "             INNER JOIN VOUCHER_CC_TRANS VCC ON VMT.VOUCHER_ID = VCC.VOUCHER_ID\n" +
                       "             INNER JOIN VOUCHER_TRANS VT\n" +
                       "             ON VT.VOUCHER_ID = VMT.VOUCHER_ID AND VT.LEDGER_ID = VCC.LEDGER_ID AND VT.SEQUENCE_NO = VCC.LEDGER_SEQUENCE_NO\n" +
                       "             WHERE VMT.PROJECT_ID IN (?PROJECT_ID) AND VT.LEDGER_ID IN (?LEDGER_ID)\n" +
                       "             AND VMT.STATUS = 1 AND VOUCHER_DATE < ?DATE_FROM AND VCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                       "             GROUP BY VCC.COST_CENTRE_ID) AS CC_PREV_TRANS ON CC_PREV_TRANS.COST_CENTRE_ID = PCC.COST_CENTRE_ID\n" +
                       "         WHERE PCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                       "           AND PROJECT_ID IN (?PROJECT_ID) AND (AMOUNT <> 0 OR IFNULL(CC_PREV_TRANS.TRANS_AMOUNT,0) <>0)\n" +
                       "         GROUP BY PCC.COST_CENTRE_ID) AS FNL \n" + //WHERE ((FNL.DEBIT>0 OR FNL.CREDIT >0) OR OP_AMOUNT<>0 ) //26/03/2020, On show cc op balance based on setting 
                       " WHERE IF(?SHOW_OP_BALANCE=1, ((FNL.DEBIT>0 OR FNL.CREDIT >0) OR OP_AMOUNT<>0), ((FNL.DEBIT>0 OR FNL.CREDIT >0)))\n" +
                       " GROUP BY FNL.COST_CENTRE_ID";
                        break;
                    }
                #endregion

                #region CostCentre Disbursement List
                case ReportSQLCommand.CostCentre.CostCentreDisbursementList:
                    {
                        //query = "SELECT TT.DATE,TT.CHEQUE_NO,\n" +
                        //            "       TT.DONOR AS DONOR_NAME,\n" +
                        //            "       TT.COST_CENTRE_NAME,\n" +
                        //            "       TT.FOREIGN_AMOUNT AS FOREIGN_AMOUNT,\n" +
                        //            "       IF(IFNULL(DIOCESE_VOUCHER, 0) = 0,  0.00,\n" +
                        //            "          IF(SUM(TT.REC_LEDGER_AMOUNT) > 0,SUM(TT.REC_LEDGER_AMOUNT),SUM(TT.PAY_LEDGER_AMOUNT))) AS DIOCESE_AMOUNT,\n" +
                        //            "       IF(IFNULL(DIOCESE_VOUCHER,0)<> 0,0.00, SUM(TT.REC_LEDGER_AMOUNT))  AS RECEIPT_AMOUNT,\n" +
                        //            "       IF(IFNULL(DIOCESE_VOUCHER,0)<> 0,0.00, SUM(TT.PAY_LEDGER_AMOUNT)) AS PAYMENT_AMOUNT,\n" +
                        //            "\n" +
                        //            "       IF(IFNULL(DIOCESE_VOUCHER, 0) <> 0, 0.00, SUM(TT.REC_LEDGER_AMOUNT)) \n" +
                        //            "     -  IF(IFNULL(DIOCESE_VOUCHER, 0) <> 0, 0.00, SUM(TT.PAY_LEDGER_AMOUNT))   AS CLOSING_BALANCE\n" +
                        //            "  FROM (SELECT\n" +
                        //            "\n" +
                        //            "         T.VOUCHER_DATE AS 'DATE',\n" +
                        //            "         T.DONOR,T.CHEQUE_NO ,\n" +
                        //            "         MC.COST_CENTRE_NAME,\n" +
                        //            "         IFNULL(FOREIGN_AMOUNT, '') AS FOREIGN_AMOUNT,\n" +
                        //            "         IF(T.VOUCHER_TYPE = 'RC', VC.AMOUNT, 0) AS REC_LEDGER_AMOUNT,\n" +
                        //            "         IF(T.VOUCHER_TYPE = 'PY', VC.AMOUNT, 0) AS PAY_LEDGER_AMOUNT,DIOCESE_VOUCHER\n" +
                        //            "\n" +
                        //            "          FROM (SELECT VMT.VOUCHER_ID,\n" +
                        //            "                       VMT.VOUCHER_DATE,\n" +
                        //            "                       VMT.VOUCHER_TYPE,\n" +
                        //            "                       CONCAT(VMT.CONTRIBUTION_AMOUNT, IFNULL(MC.CURRENCY_SYMBOL,'')) AS FOREIGN_AMOUNT,\n" +
                        //            "                       VMT.DONOR_ID,GROUP_CONCAT(VT.CHEQUE_NO SEPARATOR '') AS CHEQUE_NO,\n" +
                        //            "                       MD.NAME AS DONOR,\n" +
                        //            "                       VMT.PURPOSE_ID,DIOCESE_VOUCHER\n" +
                        //            "\n" +
                        //            "                  FROM VOUCHER_MASTER_TRANS VMT\n" +
                        //            "\n" +
                        //            "                 INNER JOIN VOUCHER_TRANS VT\n" +
                        //            "                    ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                        //            "\n" +
                        //            "                  LEFT JOIN MASTER_DONAUD MD\n" +
                        //            "                    ON VMT.DONOR_ID = MD.DONAUD_ID\n" +
                        //            "\n" +
                        //            "                  LEFT JOIN MASTER_COUNTRY MC\n" +
                        //            "                    ON VMT.CURRENCY_COUNTRY_ID = MC.COUNTRY_ID\n" +
                        //            "\n" +  // Added newly to get Diocese Ledger Amount
                        //            "                  LEFT JOIN (SELECT VMT.VOUCHER_ID, 1 AS DIOCESE_VOUCHER\n" +
                        //            "                              FROM VOUCHER_MASTER_TRANS VMT\n" +
                        //            "\n" +
                        //            "                             INNER JOIN VOUCHER_TRANS VT\n" +
                        //            "                                ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                        //            "\n" +
                        //            "                              LEFT JOIN MASTER_LEDGER ML\n" +
                        //            "                                ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        //            "\n" +
                        //            "                             WHERE VMT.VOUCHER_DATE BETWEEN  ?DATE_FROM AND ?DATE_TO\n" +
                        //            "                               AND PROJECT_ID IN (?PROJECT_ID)\n" +
                        //            "                               AND VMT.STATUS = 1\n" +
                        //            "                               AND VOUCHER_TYPE IN ('RC', 'PY')\n" +
                        //            "                             --  AND VMT.PURPOSE_ID > 0\n" +
                        //            "                               AND ML.IS_SUBSIDY_LEDGER = 1 AND ML.STATUS=0 \n" +
                        //            "                             GROUP BY VMT.VOUCHER_DATE,\n" +
                        //            "                                      VT.VOUCHER_ID,\n" +
                        //            "                                      ML.LEDGER_ID) AS VTL\n" +
                        //            "                    ON VMT.VOUCHER_ID = VTL.VOUCHER_ID\n" +
                        //            "\n" +
                        //            "                 WHERE VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        //            "                   AND PROJECT_ID IN (?PROJECT_ID)\n" +
                        //            "                   AND VMT.STATUS = 1\n" +
                        //            "                   AND VOUCHER_TYPE IN ('RC', 'PY')\n" +
                        //            "                 --  AND VMT.PURPOSE_ID > 0\n" +
                        //            "                 GROUP BY VMT.VOUCHER_DATE, VT.VOUCHER_ID,VT.SEQUENCE_NO, VMT.DONOR_ID\n" +
                        //            "                 ORDER BY VMT.VOUCHER_DATE, VT.VOUCHER_ID, VMT.PURPOSE_ID) AS T\n" +
                        //            "\n" +
                        //            "         INNER JOIN VOUCHER_CC_TRANS AS VC\n" +
                        //            "            ON T.VOUCHER_ID = VC.VOUCHER_ID\n" +
                        //            "           AND VC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                        //            "          LEFT JOIN MASTER_COST_CENTRE MC\n" +
                        //            "            ON MC.COST_CENTRE_ID = VC.COST_CENTRE_ID) AS TT\n" +
                        //            "\n" +
                        //            " GROUP BY DATE, COST_CENTRE_NAME, DONOR";

                        // Commented on 01 June 2016 Due to fetch OP Amount
                        //query = "SELECT TT.DATE,TT.CHEQUE_NO,\n" +
                        //            "       TT.DONOR AS DONOR_NAME,\n" +
                        //            "       TT.COST_CENTRE_NAME,\n" +
                        //            "       TT.FOREIGN_AMOUNT AS FOREIGN_AMOUNT,\n" +
                        //            "       IF(IFNULL(DIOCESE_VOUCHER, 0) = 0,  0.00,\n" +
                        //            "          IF((TT.REC_LEDGER_AMOUNT) > 0,(TT.REC_LEDGER_AMOUNT),(TT.PAY_LEDGER_AMOUNT))) AS DIOCESE_AMOUNT,\n" +
                        //            "       IF(IFNULL(DIOCESE_VOUCHER,0)<> 0,0.00, (TT.REC_LEDGER_AMOUNT))  AS RECEIPT_AMOUNT,\n" +
                        //            "       IF(IFNULL(DIOCESE_VOUCHER,0)<> 0,0.00, (TT.PAY_LEDGER_AMOUNT)) AS PAYMENT_AMOUNT,\n" +
                        //            "\n" +
                        //            "       IF(IFNULL(DIOCESE_VOUCHER, 0) <> 0, 0.00, (TT.REC_LEDGER_AMOUNT)) \n" +
                        //            "     -  IF(IFNULL(DIOCESE_VOUCHER, 0) <> 0, 0.00, (TT.PAY_LEDGER_AMOUNT))   AS CLOSING_BALANCE\n" +
                        //            "  FROM (SELECT\n" +
                        //            "\n" +
                        //            "         T.VOUCHER_DATE AS 'DATE',\n" +
                        //            "         T.DONOR,T.CHEQUE_NO ,\n" +
                        //            "         MC.COST_CENTRE_NAME,\n" +
                        //            "         IFNULL(FOREIGN_AMOUNT, '') AS FOREIGN_AMOUNT,\n" +
                        //            "         IF(T.VOUCHER_TYPE = 'RC', VC.AMOUNT, 0) AS REC_LEDGER_AMOUNT,\n" +
                        //            "         IF(T.VOUCHER_TYPE = 'PY', VC.AMOUNT, 0) AS PAY_LEDGER_AMOUNT,DIOCESE_VOUCHER\n" +
                        //            "\n" +
                        //            "          FROM (SELECT VMT.VOUCHER_ID,\n" +
                        //            "                       VMT.VOUCHER_DATE,\n" +
                        //            "                       VMT.VOUCHER_TYPE,\n" +
                        //            "                       CONCAT(FORMAT(VMT.CONTRIBUTION_AMOUNT,2), IFNULL(MC.CURRENCY_SYMBOL,'')) AS FOREIGN_AMOUNT,\n" +
                        //            "                       VMT.DONOR_ID,GROUP_CONCAT(VT.CHEQUE_NO SEPARATOR '') AS CHEQUE_NO,\n" +
                        //            "                       MD.NAME AS DONOR,\n" +
                        //            "                       VMT.PURPOSE_ID,DIOCESE_VOUCHER\n" +
                        //            "\n" +
                        //            "                  FROM VOUCHER_MASTER_TRANS VMT\n" +
                        //            "\n" +
                        //            "                 INNER JOIN VOUCHER_TRANS VT\n" +
                        //            "                    ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                        //            "\n" +
                        //            "                  LEFT JOIN MASTER_DONAUD MD\n" +
                        //            "                    ON VMT.DONOR_ID = MD.DONAUD_ID\n" +
                        //            "\n" +
                        //            "                  LEFT JOIN MASTER_COUNTRY MC\n" +
                        //            "                    ON VMT.CURRENCY_COUNTRY_ID = MC.COUNTRY_ID\n" +
                        //            "\n" +  // Added newly to get Diocese Ledger Amount
                        //            "                  LEFT JOIN (SELECT VMT.VOUCHER_ID, 1 AS DIOCESE_VOUCHER\n" +
                        //            "                              FROM VOUCHER_MASTER_TRANS VMT\n" +
                        //            "\n" +
                        //            "                             INNER JOIN VOUCHER_TRANS VT\n" +
                        //            "                                ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                        //            "\n" +
                        //            "                              LEFT JOIN MASTER_LEDGER ML\n" +
                        //            "                                ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        //            "\n" +
                        //            "                             WHERE VMT.VOUCHER_DATE BETWEEN  ?DATE_FROM AND ?DATE_TO\n" +
                        //            "                               AND PROJECT_ID IN (?PROJECT_ID)\n" +
                        //            "                               AND VMT.STATUS = 1\n" +
                        //            "                               AND VOUCHER_TYPE IN ('RC', 'PY')\n" +
                        //            "                             --  AND VMT.PURPOSE_ID > 0\n" +
                        //            "                               AND ML.IS_SUBSIDY_LEDGER = 1 AND ML.STATUS=0 \n" +
                        //            "                             GROUP BY VMT.VOUCHER_DATE,\n" +
                        //            "                                      VT.VOUCHER_ID,\n" +
                        //            "                                      ML.LEDGER_ID) AS VTL\n" +
                        //            "                    ON VMT.VOUCHER_ID = VTL.VOUCHER_ID\n" +
                        //            "\n" +
                        //            "                 WHERE VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        //            "                   AND PROJECT_ID IN (?PROJECT_ID)\n" +
                        //            "                   AND VMT.STATUS = 1\n" +
                        //            "                   AND VOUCHER_TYPE IN ('RC', 'PY')\n" +
                        //            "                 --  AND VMT.PURPOSE_ID > 0\n" +
                        //            "                 GROUP BY VMT.VOUCHER_DATE, VT.VOUCHER_ID,VT.SEQUENCE_NO, VMT.DONOR_ID\n" +
                        //            "                 ORDER BY VMT.VOUCHER_DATE, VT.VOUCHER_ID, VMT.PURPOSE_ID) AS T\n" +
                        //            "\n" +
                        //            "         INNER JOIN VOUCHER_CC_TRANS AS VC\n" +
                        //            "            ON T.VOUCHER_ID = VC.VOUCHER_ID\n" +
                        //            "           AND VC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                        //            "          LEFT JOIN MASTER_COST_CENTRE MC\n" +
                        //            "            ON MC.COST_CENTRE_ID = VC.COST_CENTRE_ID) AS TT\n" +
                        //            "\n" +
                        //            " GROUP BY DATE, COST_CENTRE_NAME, DONOR";

                        query = "SELECT TT.DATE,TT.CHEQUE_NO,\n" +
                                    "       TT.DONOR AS DONOR_NAME,\n" +
                                    "       TT.COST_CENTRE_NAME,\n" +
                                    "       TT.FOREIGN_AMOUNT AS FOREIGN_AMOUNT,\n" +
                                    "       IF(IFNULL(DIOCESE_VOUCHER, 0) = 0,  0.00,\n" +
                                    "          IF((TT.REC_LEDGER_AMOUNT) > 0,(TT.REC_LEDGER_AMOUNT),(TT.PAY_LEDGER_AMOUNT))) AS DIOCESE_AMOUNT,\n" +
                                    "       IF(IFNULL(DIOCESE_VOUCHER,0)<> 0,0.00, (TT.REC_LEDGER_AMOUNT))  AS RECEIPT_AMOUNT,\n" +
                                    "       IF(IFNULL(DIOCESE_VOUCHER,0)<> 0,0.00, (TT.PAY_LEDGER_AMOUNT)) AS PAYMENT_AMOUNT,\n" +
                                    "\n" +
                                    "       IF(IFNULL(DIOCESE_VOUCHER, 0) <> 0, 0.00, (TT.REC_LEDGER_AMOUNT)) \n" +
                                    "     -  IF(IFNULL(DIOCESE_VOUCHER, 0) <> 0, 0.00, (TT.PAY_LEDGER_AMOUNT))   AS CLOSING_BALANCE\n" +
                                    "  FROM \n" +
                                    "        (SELECT\n" +
                                    "\n" +
                                    "         T.VOUCHER_DATE AS 'DATE',\n" +
                                    "          1 as sortid,\n" +
                                    "          T.DONOR,\n" +
                                    "          MC.COST_CENTRE_ID,\n" +
                                    "          T.CHEQUE_NO,\n" +
                                    "          MC.COST_CENTRE_NAME,\n" +
                                    "          IFNULL(FOREIGN_AMOUNT, '') AS FOREIGN_AMOUNT,\n" +
                                    "          IF(T.VOUCHER_TYPE = 'RC', VC.AMOUNT, 0) AS REC_LEDGER_AMOUNT,\n" +
                                    "          IF(T.VOUCHER_TYPE = 'PY', VC.AMOUNT, 0) AS PAY_LEDGER_AMOUNT,\n" +
                                    "          DIOCESE_VOUCHER\n" +
                                    "\n" +
                                    "          FROM (SELECT VMT.VOUCHER_ID,\n" +
                                    "                       VMT.VOUCHER_DATE,\n" +
                                    "                       VMT.VOUCHER_TYPE,\n" +
                                    "                       CONCAT(FORMAT(VMT.CONTRIBUTION_AMOUNT,2), IFNULL(MC.CURRENCY_SYMBOL,'')) AS FOREIGN_AMOUNT,\n" +
                                    "                       VMT.DONOR_ID,GROUP_CONCAT(VT.CHEQUE_NO SEPARATOR '') AS CHEQUE_NO,\n" +
                                    "                       MD.NAME AS DONOR,\n" +
                                    "                       VMT.PURPOSE_ID,DIOCESE_VOUCHER\n" +
                                    "\n" +
                                    "                  FROM VOUCHER_MASTER_TRANS VMT\n" +
                                    "\n" +
                                    "                 INNER JOIN VOUCHER_TRANS VT\n" +
                                    "                    ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                    "\n" +
                                    "                  LEFT JOIN MASTER_DONAUD MD\n" +
                                    "                    ON VMT.DONOR_ID = MD.DONAUD_ID\n" +
                                    "\n" +
                                    "                  LEFT JOIN MASTER_COUNTRY MC\n" +
                                    "                    ON VMT.CURRENCY_COUNTRY_ID = MC.COUNTRY_ID\n" +
                                    "\n" +  // Added newly to get Diocese Ledger Amount
                                    "                  LEFT JOIN (SELECT VMT.VOUCHER_ID, 1 AS DIOCESE_VOUCHER\n" +
                                    "                              FROM VOUCHER_MASTER_TRANS VMT\n" +
                                    "\n" +
                                    "                             INNER JOIN VOUCHER_TRANS VT\n" +
                                    "                                ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                    "\n" +
                                    "                              LEFT JOIN MASTER_LEDGER ML\n" +
                                    "                                ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                    "\n" +
                                    "                             WHERE VMT.VOUCHER_DATE BETWEEN  ?DATE_FROM AND ?DATE_TO\n" +
                                    "                               AND PROJECT_ID IN (?PROJECT_ID)\n" +
                                    "                               AND VMT.STATUS = 1\n" +
                                    "                               AND VOUCHER_TYPE IN ('RC', 'PY')\n" +
                                    "                             --  AND VMT.PURPOSE_ID > 0\n" +
                                    "                               AND ML.IS_SUBSIDY_LEDGER = 1 AND ML.STATUS=0 \n" +
                                    "                             GROUP BY VMT.VOUCHER_DATE,\n" +
                                    "                                      VT.VOUCHER_ID,\n" +
                                    "                                      ML.LEDGER_ID) AS VTL\n" +
                                    "                    ON VMT.VOUCHER_ID = VTL.VOUCHER_ID\n" +
                                    "\n" +
                                    "                 WHERE VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                    "                   AND PROJECT_ID IN (?PROJECT_ID)\n" +
                                    "                   AND VMT.STATUS = 1\n" +
                                    "                   AND VOUCHER_TYPE IN ('RC', 'PY')\n" +
                                    "                 --  AND VMT.PURPOSE_ID > 0\n" +
                                    "                 GROUP BY VMT.VOUCHER_DATE, VT.VOUCHER_ID,VT.SEQUENCE_NO, VMT.DONOR_ID\n" +
                                    "                 ORDER BY VMT.VOUCHER_DATE, VT.VOUCHER_ID, VMT.PURPOSE_ID) AS T\n" +
                                    "\n" +
                                    "         INNER JOIN VOUCHER_CC_TRANS AS VC\n" +
                                    "            ON T.VOUCHER_ID = VC.VOUCHER_ID\n" +
                                    "           AND VC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                                    "          LEFT JOIN MASTER_COST_CENTRE MC\n" +
                                    "            ON MC.COST_CENTRE_ID = VC.COST_CENTRE_ID\n" +
                                    "\n" +
                                    "        UNION ALL\n" +
                                    "\n" +
                                    "        SELECT '' AS 'DATE',\n" +
                                    "               0 as sortid,\n" +
                                    "               'Opening Balance' AS DONOR,\n" +
                                    "               MC.COST_CENTRE_ID,\n" +
                                    "               '' AS CHEQUE_NO,\n" +
                                    "               MC.COST_CENTRE_NAME,\n" +
                                    "               '' AS FOREIGN_AMOUNT,\n" +
                                    "               PCC.AMOUNT + IFNULL(CC_PREV_TRANS.TRANS_AMOUNT,0) AS REC_LEDGER_AMOUNT,\n" +
                                    "               0.00 AS PAY_LEDGER_AMOUNT,\n" +
                                    "               0.00 AS DIOCESE_VOUCHER\n" +
                                    "\n" +
                                    "          FROM MASTER_COST_CENTRE MC\n" +
                                    "         INNER JOIN PROJECT_COSTCENTRE PCC\n" +
                                    "            ON PCC.PROJECT_ID IN (?PROJECT_ID)\n" +
                                    "           AND MC.COST_CENTRE_ID = PCC.COST_CENTRE_ID\n" +
                                    "         LEFT JOIN (SELECT VCC.COST_CENTRE_ID, SUM(IF(VT.TRANS_MODE = 'CR', IFNULL(VCC.AMOUNT,0), -IFNULL(VCC.AMOUNT,0))) AS TRANS_AMOUNT\n" +
                                    "             FROM VOUCHER_MASTER_TRANS VMT\n" +
                                    "             INNER JOIN VOUCHER_CC_TRANS VCC ON VMT.VOUCHER_ID = VCC.VOUCHER_ID\n" +
                                    "             INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VMT.VOUCHER_ID AND VT.LEDGER_ID = VCC.LEDGER_ID\n" +
                                    "             WHERE VMT.PROJECT_ID IN (?PROJECT_ID) \n" +
                                    "             AND VMT.STATUS = 1 AND VOUCHER_TYPE IN ('RC', 'PY') AND VOUCHER_DATE < ?DATE_FROM AND VCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                                    "             GROUP BY VCC.COST_CENTRE_ID) AS CC_PREV_TRANS ON CC_PREV_TRANS.COST_CENTRE_ID = MC.COST_CENTRE_ID\n" +
                                    "         WHERE PCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)) AS TT\n" +
                                    " GROUP BY DATE, COST_CENTRE_NAME, DONOR  ORDER BY DATE, COST_CENTRE_NAME, DONOR,SORTID";

                        break;
                    }
                case ReportSQLCommand.CostCentre.ccSurplusandDeficitStatement:
                    {
                        query = "SELECT VOUCHER_ID AS StateId,\n" +
                                "       COST_CENTRE_NAME AS NARRATION,COST_CENTRE_ID AS CostCentre,\n" +
                                "       SORT_ID,\n" +
                                "       LEDGER_CODE AS VOUCHER_NO,\n" +
                                "       SUM(INCOME) AS CREDIT,  \n" + // RECIEPT
                                "       SUM(EXPENSE) AS DEBIT, \n" +   // PAYMENT
                                "       LEDGER_NAME,\n" +
                                "       ABS(if(SUM(INCOME) - SUM(EXPENSE) > 0, SUM(INCOME) - SUM(EXPENSE), 0.00)) AS AMOUNT,\n" +  // GAIN
                                "       ABS(if(SUM(INCOME) - SUM(EXPENSE) < 0, SUM(INCOME) - SUM(EXPENSE), 0.00)) AS TRANS_MODE\n" +  // SHORTAGE
                                "  FROM (SELECT RC.VOUCHER_ID,\n" +
                                "               MC.COST_CENTRE_NAME,MC.COST_CENTRE_ID,\n" +
                                "               RC.SORT_ID,\n" +
                                "               RC.VOUCHER_DATE,\n" +
                                "               VC.AMOUNT AS INCOME,\n" +
                                "               0 AS EXPENSE,\n" +
                                "               SUM(VC.AMOUNT) AS INCOMETOTAL,\n" +
                                "               0 AS EXPENSETOTAL,\n" +
                                "               RC.LEDGER_NAME,\n" +
                                "               RC.LEDGER_CODE\n" +
                                "          FROM (SELECT VT.VOUCHER_ID,\n" +
                                "                       VT.LEDGER_ID,\n" +
                                "                       MT.VOUCHER_NO  AS VOUCHER_NO,\n" +
                                "                       ML.LEDGER_CODE AS LEDGER_CODE,\n" +
                                "                       ML.LEDGER_NAME,\n" +
                                "                       @row_num       :=\n" +
                                "                       IF(@prev_value = T.voucher_date, @row_num + 1, 1)       AS sort_id,\n" +
                                "                       @prev_value    := T.voucher_date    as VOUCHER_DATE\n" +
                                "                  FROM master_ledger_GROUP LG\n" +
                                "                  LEFT JOIN master_ledger ML\n" +
                                "                    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "                  LEFT JOIN voucher_trans VT\n" +
                                "                    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                "                  LEFT JOIN voucher_master_trans MT\n" +
                                "                    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "                  JOIN (SELECT CASHBANK.VOUCHER_DATE, CASHBANK.VOUCHER_ID\n" +
                                "                         FROM (SELECT MT.VOUCHER_DATE, VT.VOUCHER_ID\n" +
                                "                                 FROM master_ledger_GROUP LG\n" +
                                "                                 LEFT JOIN master_ledger ML\n" +
                                "                                   ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "                                 LEFT JOIN voucher_trans VT\n" +
                                "                                   ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                "                                 LEFT JOIN voucher_master_trans MT\n" +
                                "                                   ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "                                WHERE MT.VOUCHER_TYPE IN ('RC')\n" +
                                "                                  AND mt.VOUCHER_DATE BETWEEN\n" +
                                "                                      ?DATE_FROM AND\n" +
                                "                                      ?DATE_TO\n" +
                                "                                  AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                                  and lg.group_id in (12, 13)\n" +
                                "                                  AND MT.STATUS = 1\n" +
                                "                                GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID\n" +
                                "                                ORDER BY MT.VOUCHER_DATE,\n" +
                                "                                         VT.VOUCHER_ID,\n" +
                                "                                         VT.SEQUENCE_NO) AS CASHBANK\n" +
                                "                        GROUP BY CASHBANK.VOUCHER_ID\n" +
                                "                        ORDER BY CASHBANK.VOUCHER_DATE) AS T\n" +
                                "                    ON MT.VOUCHER_ID = T.VOUCHER_ID,\n" +
                                "                 (SELECT @row_num := 1) x, (SELECT @prev_value := null) y\n" +
                                "                 WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                   AND MT.VOUCHER_TYPE IN ('RC')\n" +
                                "                   AND VT.TRANS_MODE IN ('CR', 'DR')\n" +
                                "                   AND MT.STATUS = 1\n" +
                                "                   AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND\n" +
                                "                       ?DATE_TO\n" +
                                "                   AND LG.GROUP_ID NOT IN (12, 13)\n" +
                                "                 GROUP BY MT.VOUCHER_DATE, VT.VOUCHER_ID, VT.Ledger_id) as RC\n" +
                                "         INNER JOIN VOUCHER_CC_TRANS AS VC\n" +
                                "            ON RC.VOUCHER_ID = VC.VOUCHER_ID\n" +
                                "           AND RC.LEDGER_ID = VC.LEDGER_ID\n" +
                                "           AND VC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                                "          LEFT JOIN MASTER_COST_CENTRE MC\n" +
                                "            ON MC.COST_CENTRE_ID = VC.COST_CENTRE_ID\n" +
                                "         INNER JOIN COSTCATEGORY_COSTCENTRE CC\n" +
                                "            ON CC.COST_CENTRE_ID = VC.COST_CENTRE_ID\n" +
                                "          LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC\n" +
                                "            ON MCCC.COST_CENTRECATEGORY_ID = COST_CATEGORY_ID\n" +
                                "          GROUP BY COST_CENTRE_ID,VOUCHER_ID,VC.LEDGER_ID\n" +
                                "        UNION\n" +
                                "        SELECT RC.VOUCHER_ID,\n" +//MC.COST_CENTRE_ID,\n" +
                                "               MC.COST_CENTRE_NAME,MC.COST_CENTRE_ID,\n" +
                                "               RC.SORT_ID,\n" +
                                "               RC.VOUCHER_DATE,\n" +
                                "               0 AS INCOME,\n" +
                                "               VC.AMOUNT AS EXPENSE,\n" +
                                "               0 AS INCOMETOTAL,\n" +
                                "               SUM(VC.AMOUNT) AS EXPENSETOTAL,\n" +
                                "               RC.LEDGER_NAME,\n" +
                                "               RC.LEDGER_CODE\n" +
                                "          FROM (SELECT VT.VOUCHER_ID,\n" +
                                "                       VT.LEDGER_ID,\n" +
                                "                       MT.VOUCHER_NO  AS VOUCHER_NO,\n" +
                                "                       ML.LEDGER_CODE AS LEDGER_CODE,\n" +
                                "                       ML.LEDGER_NAME,\n" +
                                "                       @row_num       :=\n" +
                                "                       IF(@prev_value = T.voucher_date, @row_num + 1, 1)       AS sort_id,\n" +
                                "                       @prev_value    := T.voucher_date    as VOUCHER_DATE\n" +
                                "                  FROM master_ledger_GROUP LG\n" +
                                "                  LEFT JOIN master_ledger ML\n" +
                                "                    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "                  LEFT JOIN voucher_trans VT\n" +
                                "                    ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                "                  LEFT JOIN voucher_master_trans MT\n" +
                                "                    ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "                  JOIN (SELECT CASHBANK.VOUCHER_DATE, CASHBANK.VOUCHER_ID\n" +
                                "                         FROM (SELECT MT.VOUCHER_DATE, VT.VOUCHER_ID\n" +
                                "                                 FROM master_ledger_GROUP LG\n" +
                                "                                 LEFT JOIN master_ledger ML\n" +
                                "                                   ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "                                 LEFT JOIN voucher_trans VT\n" +
                                "                                   ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                                "                                 LEFT JOIN voucher_master_trans MT\n" +
                                "                                   ON VT.VOUCHER_ID = MT.VOUCHER_ID\n" +
                                "                                WHERE MT.VOUCHER_TYPE IN ('PY')\n" +
                                "                                  AND mt.VOUCHER_DATE BETWEEN\n" +
                                "                                      ?DATE_FROM AND\n" +
                                "                                      ?DATE_TO\n" +
                                "                                  AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                                  and lg.group_id in (12, 13)\n" +
                                "                                  AND MT.STATUS = 1\n" +
                                "                                GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID\n" +
                                "                                ORDER BY MT.VOUCHER_DATE,\n" +
                                "                                         VT.VOUCHER_ID,\n" +
                                "                                         VT.SEQUENCE_NO) AS CASHBANK\n" +
                                "                        GROUP BY CASHBANK.VOUCHER_ID\n" +
                                "                        ORDER BY CASHBANK.VOUCHER_DATE) AS T\n" +
                                "                    ON MT.VOUCHER_ID = T.VOUCHER_ID,\n" +
                                "                 (SELECT @row_num := 1) x, (SELECT @prev_value := null) y\n" +
                                "                 WHERE MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                   AND MT.VOUCHER_TYPE IN ('PY')\n" +
                                "                   AND VT.TRANS_MODE IN ('CR', 'DR')\n" +
                                "                   AND MT.STATUS = 1\n" +
                                "                   AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND\n" +
                                "                       ?DATE_TO\n" +
                                "                   AND LG.GROUP_ID NOT IN (12, 13)\n" +
                                "                 GROUP BY MT.VOUCHER_DATE, VT.VOUCHER_ID, VT.LEDGER_ID) AS RC\n" +
                                "         INNER JOIN VOUCHER_CC_TRANS AS VC\n" +
                                "            ON RC.VOUCHER_ID = VC.VOUCHER_ID\n" +
                                "           AND RC.LEDGER_ID = VC.LEDGER_ID\n" +
                                "           AND VC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                                "          LEFT JOIN MASTER_COST_CENTRE MC\n" +
                                "            ON MC.COST_CENTRE_ID = VC.COST_CENTRE_ID\n" +
                                "         INNER JOIN COSTCATEGORY_COSTCENTRE CC\n" +
                                "            ON CC.COST_CENTRE_ID = VC.COST_CENTRE_ID\n" +
                                "          LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC\n" +
                                "            ON MCCC.COST_CENTRECATEGORY_ID = COST_CATEGORY_ID GROUP BY COST_CENTRE_ID,VOUCHER_ID,VC.LEDGER_ID) AS FFNL\n" +
                                " GROUP BY COST_CENTRE_ID,LEDGER_NAME ORDER BY COST_CENTRE_NAME";


                        break;
                    }
                #endregion

                #region CostCentre Distribution List
                case ReportSQLCommand.CostCentre.CostCentreDistributionList:
                    {
                        //query = "SELECT\n" +
                        //        " T.LED_AMOUNT AS DEBIT,\n" +
                        //        " T.LEDGER_ID,\n" +
                        //        " T.LEDGER_NAME,\n" +
                        //        " T.LEDGER_GROUP AS 'GROUP',\n" +
                        //        " T.CCID         AS COST_CENTRE_ID,\n" +
                        //        " T.CCAMOUNT     AS CREDIT,\n" +
                        //        " T.CCNAME       AS COST_CENTRE_NAME\n" +
                        //        "\n" +
                        //        "  FROM (SELECT SUM(VT.AMOUNT) AS LED_AMOUNT,\n" +
                        //        "               ML.LEDGER_ID,\n" +
                        //        "               ML.LEDGER_NAME,\n" +
                        //        "               MLG.LEDGER_GROUP,\n" +
                        //        "               0 AS CCID,\n" +
                        //        "               0 AS CCAMOUNT,\n" +
                        //        "               '' AS CCNAME\n" +
                        //        "\n" +
                        //        "          FROM VOUCHER_MASTER_TRANS VMT\n" +
                        //        "\n" +
                        //        "         INNER JOIN VOUCHER_TRANS VT\n" +
                        //        "            ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                        //        "         INNER JOIN MASTER_LEDGER ML\n" +
                        //        "            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        //        "\n" +
                        //        "         INNER JOIN PROJECT_LEDGER AS PL\n" +
                        //        "            ON PL.LEDGER_ID = ML.LEDGER_ID\n" +
                        //        "           AND PL.PROJECT_ID = VMT.PROJECT_ID\n" +
                        //        "         INNER JOIN MASTER_LEDGER_GROUP AS MLG\n" +
                        //        "            ON ML.GROUP_ID = MLG.GROUP_ID\n" +
                        //        "\n" +
                        //        "         WHERE VMT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //        "           AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        //        "         GROUP BY ML.LEDGER_ID\n" +
                        //        "\n" +
                        //        "        UNION ALL\n" +
                        //        "\n" +
                        //        "        SELECT 0                   AS LED_AMOUNT,\n" +
                        //        "               VCC.LEDGER_ID,\n" +
                        //        "               ML.LEDGER_NAME,\n" +
                        //        "               MLG.LEDGER_GROUP,\n" +
                        //        "               VCC.COST_CENTRE_ID  AS CCID,\n" +
                        //        "               VCC.AMOUNT          AS CCAMOUNT,\n" +
                        //        "               MC.COST_CENTRE_NAME CCNAME\n" +
                        //        "\n" +
                        //        "          FROM VOUCHER_MASTER_TRANS VMT\n" +
                        //        "\n" +
                        //        "         INNER JOIN VOUCHER_TRANS VT\n" +
                        //        "            ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                        //        "         INNER JOIN MASTER_LEDGER ML\n" +
                        //        "            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        //        "\n" +
                        //        "         INNER JOIN PROJECT_LEDGER AS PL\n" +
                        //        "            ON PL.LEDGER_ID = ML.LEDGER_ID\n" +
                        //        "           AND PL.PROJECT_ID = VMT.PROJECT_ID\n" +
                        //        "         INNER JOIN MASTER_LEDGER_GROUP AS MLG\n" +
                        //        "            ON ML.GROUP_ID = MLG.GROUP_ID\n" +
                        //        "\n" +
                        //        "         INNER JOIN VOUCHER_CC_TRANS AS VCC\n" +
                        //        "            ON VT.VOUCHER_ID = VCC.VOUCHER_ID\n" +
                        //        "          LEFT JOIN MASTER_COST_CENTRE MC\n" +
                        //        "            ON MC.COST_CENTRE_ID = VCC.COST_CENTRE_ID\n" +
                        //        "         INNER JOIN COSTCATEGORY_COSTCENTRE CC\n" +
                        //        "            ON CC.COST_CENTRE_ID = VCC.COST_CENTRE_ID\n" +
                        //        "          LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC\n" +
                        //        "            ON MCCC.COST_CENTRECATEGORY_ID = COST_CATEGORY_ID\n" +
                        //        "           AND VT.LEDGER_ID = VCC.LEDGER_ID\n" +
                        //        "\n" +
                        //        "         WHERE VMT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //        "           AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        //        "         GROUP BY MC.COST_CENTRE_ID) AS T";

                        query = "SELECT\n" +
                               " T.LEDGER_ID,\n" +
                               " T.LEDGER_NAME,\n" +
                               " T.LEDGER_GROUP ,\n" +
                               " T.CCID         AS COST_CENTRE_ID,\n" +
                               " T.CCAMOUNT  AS COST_CENTRE_AMOUNT  ,\n" +
                               " T.CCNAME       AS COST_CENTRE_NAME\n" +
                               "\n" +
                               "  FROM (  \n" +
                               "\n" +
                               "        SELECT 0  AS LED_AMOUNT,\n" +
                               "               VCC.LEDGER_ID,\n" +
                               "               ML.LEDGER_NAME,\n" +
                               "               MLG.LEDGER_GROUP,\n" +
                               "               VCC.COST_CENTRE_ID  AS CCID,\n" +
                               "               VCC.AMOUNT          AS CCAMOUNT,\n" +
                               "               MC.COST_CENTRE_NAME CCNAME\n" +
                               "\n" +
                               "          FROM VOUCHER_MASTER_TRANS VMT\n" +
                               "\n" +
                               "         INNER JOIN VOUCHER_TRANS VT\n" +
                               "            ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                               "         INNER JOIN MASTER_LEDGER ML\n" +
                               "            ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                               "\n" +
                               "         INNER JOIN PROJECT_LEDGER AS PL\n" +
                               "            ON PL.LEDGER_ID = ML.LEDGER_ID\n" +
                               "           AND PL.PROJECT_ID = VMT.PROJECT_ID\n" +
                               "         INNER JOIN MASTER_LEDGER_GROUP AS MLG\n" +
                               "            ON ML.GROUP_ID = MLG.GROUP_ID\n" +
                               "\n" +
                               "         INNER JOIN VOUCHER_CC_TRANS AS VCC\n" +
                               "            ON VT.VOUCHER_ID = VCC.VOUCHER_ID\n" +
                               "          LEFT JOIN MASTER_COST_CENTRE MC\n" +
                               "            ON MC.COST_CENTRE_ID = VCC.COST_CENTRE_ID\n" +
                               "         INNER JOIN COSTCATEGORY_COSTCENTRE CC\n" +
                               "            ON CC.COST_CENTRE_ID = VCC.COST_CENTRE_ID\n" +
                               "          LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC\n" +
                               "            ON MCCC.COST_CENTRECATEGORY_ID = COST_CATEGORY_ID\n" +
                               "           AND VT.LEDGER_ID = VCC.LEDGER_ID\n" +
                               "\n" +
                               "         WHERE VMT.PROJECT_ID IN (?PROJECT_ID)\n" +
                               "           AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND ML.GROUP_ID NOT IN(12,13)\n" +
                               "         GROUP BY MC.COST_CENTRE_ID) AS T";

                        break;
                    }
                #endregion

                #region CostCentreDetail
                case ReportSQLCommand.CostCentre.CCDetail:
                    {
                        query = @"SELECT VCC.VOUCHER_ID, VCC.LEDGER_ID, MCC.COST_CENTRE_ID, 
                                VM.VOUCHER_DATE, MP.PROJECT, MCO.COST_CENTRE_CATEGORY_NAME, COST_CENTRE_NAME, 
                                (IF(VT.TRANS_MODE = 'CR', VCC.AMOUNT, 0) *IF(VM.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1) ) AS CREDIT, 
                                (IF(VT.TRANS_MODE = 'DR', VCC.AMOUNT, 0) *IF(VM.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)) AS DEBIT
                                FROM VOUCHER_TRANS VT
                                INNER JOIN VOUCHER_CC_TRANS VCC ON VCC.VOUCHER_ID = VT.VOUCHER_ID 
                                    AND VCC.LEDGER_ID = VT.LEDGER_ID  AND VCC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO
                                INNER JOIN VOUCHER_MASTER_TRANS VM ON VM.VOUCHER_ID = VCC.VOUCHER_ID AND VM.STATUS = 1
                                    AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND VM.PROJECT_ID IN (?PROJECT_ID)
                                    AND IF(?CURRENCY_COUNTRY_ID > 0, VM.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)
                                    {AND VM.VOUCHER_TYPE IN (?VOUCHER_TYPE)} {AND VT.TRANS_MODE IN (?TRANS_MODE)}
                                INNER JOIN MASTER_COST_CENTRE MCC ON MCC.COST_CENTRE_ID = VCC.COST_CENTRE_ID
                                INNER JOIN COSTCATEGORY_COSTCENTRE CCC ON CCC.COST_CENTRE_ID = MCC.COST_CENTRE_ID
                                INNER JOIN MASTER_COST_CENTRE_CATEGORY MCO ON MCO.COST_CENTRECATEGORY_ID = CCC.COST_CATEGORY_ID
                                INNER JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = VM.PROJECT_ID";
                        break;
                    }

                case ReportSQLCommand.CostCentre.CCDetailMonthlyAbstract:
                    {
                        query = @"SELECT VCC.VOUCHER_ID, VCC.LEDGER_ID, MCC.COST_CENTRE_ID, 
                                VM.VOUCHER_DATE, MP.PROJECT, MCO.COST_CENTRE_CATEGORY_NAME, COST_CENTRE_NAME, 
                                ((IF(VM.VOUCHER_DATE >= ?DATE_FROM, 
                                   IF ((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') 
                                   OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'),
                                   -IFNULL(VCC.AMOUNT, 0), IFNULL(VCC.AMOUNT, 0)), 0))*IF(VM.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)) AS AMOUNT_PERIOD, 
                                ((IF ((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') 
                                OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'), 
                                -IFNULL(VCC.AMOUNT, 0), IFNULL(VCC.AMOUNT, 0)))*IF(VM.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)) AS AMOUNT_PROGRESSIVE, 
                                IFNULL(BL.APPROVED_AMOUNT, 0) AS APPROVED_AMOUNT 
                                FROM VOUCHER_TRANS VT
                                INNER JOIN VOUCHER_CC_TRANS VCC ON VCC.VOUCHER_ID = VT.VOUCHER_ID 
                                    AND VCC.LEDGER_ID = VT.LEDGER_ID  AND VCC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO
                                INNER JOIN VOUCHER_MASTER_TRANS VM ON VM.VOUCHER_ID = VCC.VOUCHER_ID AND VM.STATUS = 1
                                    AND VM.VOUCHER_DATE BETWEEN ?DATE_PROGRESS_FROM AND ?DATE_TO AND VM.PROJECT_ID IN (?PROJECT_ID)
                                    AND (VM.VOUCHER_TYPE IN ('RC', 'PY') OR (VM.VOUCHER_TYPE IN ('JN') AND IS_CASH_BANK_STATUS=1)) {AND VT.TRANS_MODE IN (?TRANS_MODE)} 
                                    AND IF(?CURRENCY_COUNTRY_ID > 0, VM.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)
                                INNER JOIN MASTER_COST_CENTRE MCC ON MCC.COST_CENTRE_ID = VCC.COST_CENTRE_ID
                                INNER JOIN COSTCATEGORY_COSTCENTRE CCC ON CCC.COST_CENTRE_ID = MCC.COST_CENTRE_ID
                                INNER JOIN MASTER_COST_CENTRE_CATEGORY MCO ON MCO.COST_CENTRECATEGORY_ID = CCC.COST_CATEGORY_ID
                                INNER JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = VM.PROJECT_ID
                                LEFT JOIN (SELECT GROUP_CONCAT(BM.BUDGET_ID) AS BUDGET_ID, PROJECT_ID, BL.LEDGER_ID, BC.COST_CENTRE_ID,  
                                   SUM(IFNULL(BC.APPROVED_AMOUNT, 0)) AS APPROVED_AMOUNT, BL.TRANS_MODE 
                                   FROM BUDGET_MASTER BM
                                   INNER JOIN BUDGET_LEDGER BL ON BM.BUDGET_ID = BL.BUDGET_ID 
                                   INNER JOIN (SELECT BUDGET_ID, GROUP_CONCAT(PROJECT_ID) AS PROJECT_ID FROM BUDGET_PROJECT  
                                   WHERE PROJECT_ID IN (?PROJECT_ID) GROUP BY BUDGET_ID ) BP ON BP.BUDGET_ID = BM.BUDGET_ID 
                                   INNER JOIN BUDGET_COSTCENTER BC ON BC.BUDGET_ID = BM.BUDGET_ID AND BC.LEDGER_ID = BL.LEDGER_ID 
                                   WHERE DATE_FROM = ?YEAR_FROM AND DATE_TO = ?YEAR_TO AND BUDGET_ACTION = 2 AND IS_ACTIVE = 1 AND BL.TRANS_MODE=?TRANS_MODE 
                                   GROUP BY BL.LEDGER_ID, BC.COST_CENTRE_ID, BL.TRANS_MODE) BL ON BL.LEDGER_ID = VT.LEDGER_ID AND BL.COST_CENTRE_ID= MCC.COST_CENTRE_ID";
                        break;
                    }

                case ReportSQLCommand.CostCentre.CCDetailReceiptsPayments:
                    {
                        query = @"SELECT VCC.VOUCHER_ID, VCC.LEDGER_ID, MCC.COST_CENTRE_ID, 
                                VM.VOUCHER_DATE, MP.PROJECT, MCO.COST_CENTRE_CATEGORY_NAME, COST_CENTRE_NAME, 
                                (IF ( (?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'),
                                   -IFNULL(VCC.AMOUNT, 0), IFNULL(VCC.AMOUNT, 0)) *IF(VM.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)) AS AMOUNT_PERIOD 
                                FROM VOUCHER_TRANS VT
                                INNER JOIN VOUCHER_CC_TRANS VCC ON VCC.VOUCHER_ID = VT.VOUCHER_ID 
                                    AND VCC.LEDGER_ID = VT.LEDGER_ID  AND VCC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO
                                INNER JOIN VOUCHER_MASTER_TRANS VM ON VM.VOUCHER_ID = VCC.VOUCHER_ID AND VM.STATUS = 1
                                    AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND VM.PROJECT_ID IN (?PROJECT_ID)
                                    AND (VM.VOUCHER_TYPE IN ('RC', 'PY') OR (VM.VOUCHER_TYPE IN ('JN') AND IS_CASH_BANK_STATUS=1)) {AND VT.TRANS_MODE IN (?TRANS_MODE)}
                                    AND IF(?CURRENCY_COUNTRY_ID > 0, VM.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1)
                                INNER JOIN MASTER_COST_CENTRE MCC ON MCC.COST_CENTRE_ID = VCC.COST_CENTRE_ID
                                INNER JOIN COSTCATEGORY_COSTCENTRE CCC ON CCC.COST_CENTRE_ID = MCC.COST_CENTRE_ID
                                INNER JOIN MASTER_COST_CENTRE_CATEGORY MCO ON MCO.COST_CENTRECATEGORY_ID = CCC.COST_CATEGORY_ID
                                INNER JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = VM.PROJECT_ID
                                WHERE VM.STATUS = 1 { AND VCC.COST_CENTRE_ID IN (?COST_CENTRE_ID) }";
                        break;
                    }
                case ReportSQLCommand.CostCentre.CCCashBankOpeningBalance:
                    {
                        query = @"SELECT MCC.COST_CENTRE_NAME, MCO.COST_CENTRE_CATEGORY_NAME, PCC.COST_CENTRE_ID,
                                    (SUM(IF(PCC.TRANS_MODE = 'CR',  -PCC.AMOUNT, PCC.AMOUNT)) + IFNULL(CC_PREV_TRANS.TRANS_AMOUNT,0)) AS OP_AMOUNT, 
                                     SUM(IF(PCC.TRANS_MODE = 'CR',  -PCC.AMOUNT, PCC.AMOUNT)) OP_BASE_AMOUNT, TRANS_CASH_AMOUNT AS OP_CASH_AMOUNT, TRANS_BANK_AMOUNT AS OP_BANK_AMOUNT
                                     FROM (SELECT PROJECT_ID, LEDGER_ID, COST_CENTRE_ID, AMOUNT, TRANS_MODE
                                          FROM PROJECT_COSTCENTRE WHERE COST_CENTRE_ID IN (?COST_CENTRE_ID) AND IF(?COSTCENTRE_MAPPING = 1, LEDGER_ID > 0, LEDGER_ID = 0) ) AS PCC
                                     LEFT JOIN MASTER_COST_CENTRE MCC ON MCC.COST_CENTRE_ID = PCC.COST_CENTRE_ID
                                     LEFT JOIN COSTCATEGORY_COSTCENTRE CCC ON CCC.COST_CENTRE_ID = MCC.COST_CENTRE_ID
                                     LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCO ON MCO.COST_CENTRECATEGORY_ID = CCC.COST_CATEGORY_ID

                                     LEFT JOIN (SELECT VCC.COST_CENTRE_ID, SUM(IF(VT.TRANS_MODE = 'DR', IFNULL(VCC.AMOUNT,0), -IFNULL(VCC.AMOUNT,0))) AS TRANS_AMOUNT,
                                         SUM(IF(VT.TRANS_MODE = 'DR', IF(VTCB.CASH = 1,  IFNULL(VCC.AMOUNT,0), 0), -IF(VTCB.CASH = 1,  IFNULL(VCC.AMOUNT,0),0))) AS TRANS_CASH_AMOUNT,
                                         SUM(IF(VT.TRANS_MODE = 'DR', IF(VTCB.BANK = 1,  IFNULL(VCC.AMOUNT,0), 0), -IF(VTCB.BANK = 1,  IFNULL(VCC.AMOUNT,0),0))) AS TRANS_BANK_AMOUNT
                                         FROM VOUCHER_MASTER_TRANS VMT
                                         INNER JOIN VOUCHER_CC_TRANS VCC ON VMT.VOUCHER_ID = VCC.VOUCHER_ID
                                         INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VMT.VOUCHER_ID AND VT.LEDGER_ID = VCC.LEDGER_ID AND VT.SEQUENCE_NO = VCC.LEDGER_SEQUENCE_NO
                                         LEFT JOIN (SELECT VOUCHER_ID, IF(ML.GROUP_ID=13, 1, 0) AS CASH, IF(ML.GROUP_ID=12, 1, 0) AS BANK
                                                   FROM VOUCHER_TRANS VT
                                                   INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID AND ML.GROUP_ID IN (12, 13)
                                             GROUP BY VOUCHER_ID) VTCB  ON VTCB.VOUCHER_ID = VT.VOUCHER_ID
                                         WHERE VMT.PROJECT_ID IN (?PROJECT_ID) AND COST_CENTRE_ID IN (?COST_CENTRE_ID)
                                         AND VMT.STATUS = 1 AND VOUCHER_DATE < ?DATE_FROM AND VCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)
                                         GROUP BY VCC.COST_CENTRE_ID) AS CC_PREV_TRANS ON CC_PREV_TRANS.COST_CENTRE_ID = PCC.COST_CENTRE_ID

                                     WHERE PCC.COST_CENTRE_ID IN (?COST_CENTRE_ID) AND PROJECT_ID IN (?PROJECT_ID) AND (PCC.AMOUNT <> 0 OR IFNULL(CC_PREV_TRANS.TRANS_AMOUNT,0) <>0)
                                     GROUP BY PCC.COST_CENTRE_ID;";

                        break;
                    }
                case ReportSQLCommand.CostCentre.CCDetailVouchers:
                    {
                        query = @"SELECT VCC.VOUCHER_ID, VCC.LEDGER_ID, VCC.LEDGER_SEQUENCE_NO, MCC.COST_CENTRE_ID, 
                                VM.VOUCHER_DATE, MP.PROJECT, MCO.COST_CENTRE_CATEGORY_NAME, COST_CENTRE_NAME,
                                IF ( (VM.VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') OR (VM.VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'),
                                   -IFNULL(VCC.AMOUNT, 0), IFNULL(VCC.AMOUNT, 0)) AS AMOUNT_PERIOD  
                                FROM VOUCHER_TRANS VT
                                INNER JOIN VOUCHER_CC_TRANS VCC ON VCC.VOUCHER_ID = VT.VOUCHER_ID 
                                    AND VCC.LEDGER_ID = VT.LEDGER_ID  AND VCC.LEDGER_SEQUENCE_NO = VT.SEQUENCE_NO
                                INNER JOIN VOUCHER_MASTER_TRANS VM ON VM.VOUCHER_ID = VCC.VOUCHER_ID AND VM.STATUS = 1 AND VM.VOUCHER_ID IN (?VOUCHER_ID)
                                INNER JOIN MASTER_COST_CENTRE MCC ON MCC.COST_CENTRE_ID = VCC.COST_CENTRE_ID
                                INNER JOIN COSTCATEGORY_COSTCENTRE CCC ON CCC.COST_CENTRE_ID = MCC.COST_CENTRE_ID
                                INNER JOIN MASTER_COST_CENTRE_CATEGORY MCO ON MCO.COST_CENTRECATEGORY_ID = CCC.COST_CATEGORY_ID
                                INNER JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = VM.PROJECT_ID
                                WHERE VM.STATUS = 1 AND VM.VOUCHER_ID IN (?VOUCHER_ID) { AND VCC.COST_CENTRE_ID IN (?COST_CENTRE_ID) }";
                        break;
                    }
                #endregion
            }
            return query;
        }
    }

    public class ReportCashBankVoucher
    {
        string query = string.Empty;
        public string GetCashBankSQL(ReportSQLCommand.CashBankVoucher queryId)
        {
            switch (queryId)
            {
                #region CashBankVoucherReceipts
                case ReportSQLCommand.CashBankVoucher.CashBankVoucherReceipts:
                    {
                        query = "SELECT VMT.VOUCHER_ID,VMT.VOUCHER_NO,VMT.VOUCHER_DATE,VMT.NAME_ADDRESS, " +
                                    "VT.SEQUENCE_NO, " +
                                    "ML.LEDGER_NAME, " +
                                    "VT.AMOUNT, " +
                                    "VMT.NARRATION " +
                                    "FROM VOUCHER_MASTER_TRANS VMT " +
                                    "LEFT JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID=VMT.VOUCHER_ID " +
                                    "LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID=VT.LEDGER_ID " +
                                    "LEFT JOIN MASTER_PROJECT MP ON MP.PROJECT_ID=VMT.PROJECT_ID " +
                                    "WHERE MP.PROJECT_ID IN (?PROJECT_ID) AND VOUCHER_TYPE ='RC' AND TRANS_MODE ='CR' " +
                                    "AND VMT.VOUCHER_DATE BETWEEN ?DATE_STARTED AND ?DATE_CLOSED AND VMT.STATUS=1 GROUP BY  VT.VOUCHER_ID,VT.LEDGER_ID ORDER BY VMT.VOUCHER_DATE,VMT.VOUCHER_NO ASC";
                        break;
                    }
                #endregion

                #region CashBankVoucherPayments
                case ReportSQLCommand.CashBankVoucher.CashBankVoucher:
                    {
                        query = "SELECT VMT.VOUCHER_ID,VMT.VOUCHER_NO,VOUCHER_DATE,VMT.NAME_ADDRESS, " +
                                    "VT.SEQUENCE_NO, " +
                                    "ML.LEDGER_NAME, " +
                                    "VT.AMOUNT, " +
                                    "VMT.NARRATION " +
                                    "FROM VOUCHER_MASTER_TRANS VMT " +
                                    "LEFT JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID=VMT.VOUCHER_ID " +
                                    "LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID=VT.LEDGER_ID " +
                                    "LEFT JOIN MASTER_PROJECT MP ON MP.PROJECT_ID=VMT.PROJECT_ID " +
                                    "WHERE MP.PROJECT_ID  IN (?PROJECT_ID) AND VOUCHER_TYPE ='PY' AND TRANS_MODE='DR' " +
                                    "AND VMT.VOUCHER_DATE BETWEEN ?DATE_STARTED AND ?DATE_CLOSED  AND VMT.STATUS=1 GROUP BY VT.VOUCHER_ID,VT.LEDGER_ID ORDER BY VMT.VOUCHER_DATE,VMT.VOUCHER_NO ";
                        break;
                    }
                #endregion

                #region JournalVoucher
                case ReportSQLCommand.CashBankVoucher.JournalVoucher:
                    {
                        query = "SELECT VMT.VOUCHER_ID,VMT.VOUCHER_NO,VMT.VOUCHER_DATE,VMT.NAME_ADDRESS, " +
                            "VT.SEQUENCE_NO, " +
                            "ML.LEDGER_NAME, " +
                            "CASE WHEN VT.TRANS_MODE ='CR' THEN  VT.AMOUNT ELSE 0 END AS CREDIT, " +
                            "CASE WHEN VT.TRANS_MODE ='DR' THEN  VT.AMOUNT ELSE 0 END AS DEBIT, " +
                            "CASE WHEN VT.TRANS_MODE ='DR' THEN  VT.AMOUNT  WHEN VT.TRANS_MODE ='CR' THEN VT.AMOUNT  ELSE 0 END AS AMOUNT," +
                            "VMT.NARRATION " +
                            "FROM VOUCHER_MASTER_TRANS VMT " +
                            "LEFT JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID=VMT.VOUCHER_ID " +
                            "LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID=VT.LEDGER_ID " +
                            "LEFT JOIN MASTER_PROJECT MP ON MP.PROJECT_ID=VMT.PROJECT_ID " +
                            "WHERE MP.PROJECT_ID  IN (?PROJECT_ID) AND VOUCHER_TYPE ='JN' AND TRANS_MODE='DR' " +
                             "AND VMT.VOUCHER_DATE BETWEEN ?DATE_STARTED AND ?DATE_CLOSED  AND VMT.STATUS=1 GROUP BY VT.VOUCHER_ID,VT.LEDGER_ID ORDER BY VMT.VOUCHER_DATE,VMT.VOUCHER_NO ";

                        break;
                    }
                #endregion

                #region Cash Bank Transactions
                case ReportSQLCommand.CashBankVoucher.CashBankTransactions:
                    {
                        query = "SELECT ML.LEDGER_ID,\n" +
                        "       ML.LEDGER_NAME,\n" +
                        "       VMT.VOUCHER_ID,VMT.VOUCHER_SUB_TYPE,\n" +
                        "       VMT.VOUCHER_DATE,\n" +
                        "       VMT.VOUCHER_NO,\n" +
                        "       VMT.VOUCHER_TYPE,\n" +
                        "       TA.TRANS_MODE,\n" +
                        "       CONCAT(VMT.NARRATION, IF(VMT.VOUCHER_SUB_TYPE='FD', CONCAT(' FD: ', FD.FD_ACCOUNT_NUMBER), '') ) AS NARRATION,\n" +
                        "       MD.NAME,\n" +
                        "       MD.ADDRESS,COST_CENTRE_NAME AS COSTCENTRE,\n" +
                        "       CASE\n" +
                        "         WHEN VT.TRANS_MODE = 'CR' THEN\n" +
                        "          SUM(IFNULL(VT.AMOUNT, 0))\n" +
                        "         ELSE\n" +
                        "          0.00\n" +
                        "       END AS 'CREDIT',\n" +
                        "       CASE\n" +
                        "         WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                        "          SUM(IFNULL(VT.AMOUNT, 0))\n" +
                        "         ELSE\n" +
                        "          0.00\n" +
                        "       END AS 'DEBIT'\n" +
                        "  FROM MASTER_LEDGER_GROUP AS MLG\n" +
                        " INNER JOIN MASTER_LEDGER AS ML\n" +
                        "    ON MLG.GROUP_ID = ML.GROUP_ID\n" +
                        " INNER JOIN PROJECT_LEDGER AS PL\n" +
                        "    ON ML.LEDGER_ID = PL.LEDGER_ID\n" +
                        " INNER JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                        "    ON PL.PROJECT_ID = VMT.PROJECT_ID\n" +
                        " INNER JOIN VOUCHER_TRANS AS VT\n" +
                        "    ON PL.LEDGER_ID = VT.LEDGER_ID\n" +
                        "   AND VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                        " INNER JOIN MASTER_PROJECT AS MP\n" +
                        "    ON VMT.PROJECT_ID = MP.PROJECT_ID\n" +
                        " LEFT JOIN MASTER_DONAUD AS MD\n" +
                        "    ON VMT.DONOR_ID=MD.DONAUD_ID\n" +
                        " LEFT JOIN (SELECT FDA.FD_ACCOUNT_ID, 0 AS VOUCHER_ID, RNO.FD_INTEREST_VOUCHER_ID, RNO.FD_VOUCHER_ID,\n" +
                        "          RNO.RENEWAL_DATE, IFNULL(RNO.RECEIPT_NO,'') AS RECEIPT_NO,\n" +
                        "          CONCAT(FDA.FD_ACCOUNT_NUMBER,  IF(IFNULL(RNO.RECEIPT_NO,'')='', '', CONCAT(' (R: ', IFNULL(RNO.RECEIPT_NO,''),')')) ) AS FD_ACCOUNT_NUMBER\n" +
                        "          FROM FD_ACCOUNT AS FDA\n" +
                        "          INNER JOIN (SELECT FR.FD_ACCOUNT_ID, FR.FD_INTEREST_VOUCHER_ID, FR.FD_VOUCHER_ID,FR.RENEWAL_DATE, \n" +
                        "                   SUBSTRING_INDEX(GROUP_CONCAT(FR1.RECEIPT_NO ORDER BY FR1.RENEWAL_DATE DESC SEPARATOR '|'), '|', 1) AS RECEIPT_NO \n" +
                        "                   FROM FD_RENEWAL AS FR\n" +
                        "                   LEFT JOIN (SELECT FR1.FD_ACCOUNT_ID, FR1.RENEWAL_DATE AS RENEWAL_DATE, IFNULL(FR1.RECEIPT_NO, '') AS RECEIPT_NO\n" +
                        "                       FROM FD_RENEWAL AS FR1\n" +
                        "                       INNER JOIN FD_ACCOUNT FD1 ON FD1.FD_ACCOUNT_ID = FR1.FD_ACCOUNT_ID\n" +
                        "                       WHERE FD1.STATUS =1 AND FD1.PROJECT_ID IN (?PROJECT_ID) AND FR1.STATUS =1 AND FR1.FD_TYPE = 'RN' AND FR1.RENEWAL_DATE<=?DATE_TO) AS FR1\n" +
                        "                   ON FR1.FD_ACCOUNT_ID= FR.FD_ACCOUNT_ID AND FR1.RENEWAL_DATE<FR.RENEWAL_DATE\n" +
                        "                   WHERE STATUS =1 GROUP BY FR.FD_ACCOUNT_ID, FR.FD_RENEWAL_ID) AS RNO\n" + //FR1.RENEWAL_DATE
                        "           ON RNO.FD_ACCOUNT_ID = FDA.FD_ACCOUNT_ID WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "           UNION ALL SELECT FDA.FD_ACCOUNT_ID, FDA.FD_VOUCHER_ID, 0 AS FD_INTEREST_VOUCHER_ID, 0 AS FD_VOUCHER_ID, FDA.INVESTMENT_DATE, '' AS RECEIPT_NO, \n" +
                        "           FDA.FD_ACCOUNT_NUMBER FROM FD_ACCOUNT AS FDA WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)) AS FD\n" +
                        "    ON FD.VOUCHER_ID = VMT.VOUCHER_ID OR FD.FD_INTEREST_VOUCHER_ID = VMT.VOUCHER_ID OR FD.FD_VOUCHER_ID = VMT.VOUCHER_ID\n" +
                        "  JOIN (SELECT T.VOUCHER_ID, T.LEDGER_ID,T.VOUCHER_SUB_TYPE, T.TRANS_MODE,COST_CENTRE_NAME\n" +
                        "          FROM (SELECT VTS.VOUCHER_ID,COST_CENTRE_NAME,\n" +
                        "                       VTS.LEDGER_ID,MT.VOUCHER_SUB_TYPE, \n" +
                        "                       CASE\n" +
                        "                         WHEN LG.GROUP_ID = 12 AND VTS.TRANS_MODE = 'CR' THEN\n" +
                        "                          'TO BANK'\n" +
                        "                         ELSE\n" +
                        "                          CASE\n" +
                        "                            WHEN LG.GROUP_ID = 12 AND VTS.TRANS_MODE = 'DR' THEN\n" +
                        "                             'BY BANK'\n" +
                        "                            ELSE\n" +
                        "                             CASE\n" +
                        "                               WHEN LG.GROUP_ID = 13 AND VTS.TRANS_MODE = 'CR' THEN\n" +
                        "                                'TO CASH'\n" +
                        "                               ELSE\n" +
                        "                                CASE\n" +
                        "                                  WHEN LG.GROUP_ID = 13 AND VTS.TRANS_MODE = 'DR' THEN\n" +
                        "                                   'BY CASH'\n" +
                        "                                END\n" +
                        "                             END\n" +
                        "                          END\n" +
                        "                       END AS 'TRANS_MODE'\n" +
                        "\n" +
                        "                  FROM MASTER_LEDGER_GROUP LG\n" +
                        "\n" +
                        "                  LEFT JOIN MASTER_LEDGER MLD\n" +
                        "                    ON MLD.GROUP_ID = LG.GROUP_ID\n" +
                        "                  LEFT JOIN VOUCHER_TRANS VTS\n" +
                        "                    ON VTS.LEDGER_ID = MLD.LEDGER_ID\n" +
                        "                  LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                        "                    ON VTS.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "                  LEFT JOIN VOUCHER_CC_TRANS VCT\n" +
                        "                    ON VTS.VOUCHER_ID = VCT.VOUCHER_ID\n" +
                        "                  LEFT JOIN MASTER_COST_CENTRE MCC\n" +
                        "                    ON VCT.COST_CENTRE_ID=MCC.COST_CENTRE_ID\n" +
                        "                 WHERE MT.VOUCHER_TYPE IN ('RC', 'PY')\n" +
                        "                   AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "                   AND MT.STATUS = 1\n" +
                        "                   AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "                   AND LG.GROUP_ID IN (12, 13)\n" +
                        "                 ORDER BY VTS.SEQUENCE_NO ASC) AS T\n" +
                        "         GROUP BY T.VOUCHER_ID) AS TA\n" +
                        "    ON VMT.VOUCHER_ID = TA.VOUCHER_ID\n" +
                        " WHERE VMT.VOUCHER_TYPE NOT IN ('CN')\n" +
                        "   AND VMT.STATUS = 1\n" +
                        "   AND VMT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "   AND MLG.GROUP_ID NOT IN (12, 13)\n" +
                        " GROUP BY VMT.VOUCHER_ID, ML.LEDGER_ID, VMT.VOUCHER_DATE\n" +
                        " ORDER BY VOUCHER_NO, VMT.VOUCHER_DATE, VMT.VOUCHER_TYPE ASC";


                        break;
                    }

                case ReportSQLCommand.CashBankVoucher.CashBankReceiptsPayments:
                    {
                        query = "SELECT ML.LEDGER_ID,\n" +
                         "       CASE\n" +
                        "         WHEN ?VOUCHER_TYPE = 'RC' AND VMT.VOUCHER_TYPE ='CN' AND ?GROUP_ID = 12 THEN\n" +
                        "          CONCAT(GROUP_CONCAT(ML.LEDGER_NAME ORDER BY VT.SEQUENCE_NO\n" + //VT.VOUCHER_ID DESC
                        "                              SEPARATOR ', '),\n" +
                        "                 IF(VMT.VOUCHER_SUB_TYPE='GN',  ' (CASH DEPOSIT) ', ''))\n" +
                        "         WHEN ?VOUCHER_TYPE = 'RC' AND VMT.VOUCHER_TYPE ='CN' AND ?GROUP_ID = 13 THEN\n" +
                        "          CONCAT(GROUP_CONCAT(ML.LEDGER_NAME ORDER BY VT.VOUCHER_ID DESC\n" +
                        "                              SEPARATOR ' '),\n" +
                        "                 ' (CASH WITHDRAWAL) ')\n" +
                        "         WHEN ?VOUCHER_TYPE = 'PY' AND VMT.VOUCHER_TYPE ='CN' AND ?GROUP_ID = 13 THEN\n" +
                        "          CONCAT(GROUP_CONCAT(ML.LEDGER_NAME ORDER BY VT.VOUCHER_ID DESC\n" +
                        "                              SEPARATOR ' '),\n" +
                        "                 ' (CASH DEPOSIT) ')\n" +
                        "         WHEN ?VOUCHER_TYPE = 'PY' AND VMT.VOUCHER_TYPE ='CN' AND ?GROUP_ID = 12 THEN\n" +
                        "          CONCAT(GROUP_CONCAT(ML.LEDGER_NAME ORDER BY VT.VOUCHER_ID DESC\n" +
                        "                              SEPARATOR ' '),\n" +
                        "                 IF(VMT.VOUCHER_TYPE = 'GN', ' (CASH WITHDRAWAL)', ''))\n" +
                        "         ELSE\n" +
                        "          GROUP_CONCAT(ML.LEDGER_NAME ORDER BY VT.SEQUENCE_NO SEPARATOR ', ')\n" + //ML.LEDGER_NAME
                        "       END AS LEDGER_NAME, TA.LEDGER_NAME AS CASH_BANK,\n" +
                        "       VMT.VOUCHER_ID,VMT.VOUCHER_SUB_TYPE,\n" +
                        "       VMT.VOUCHER_DATE, CONCAT(DATE_FORMAT(VOUCHER_DATE, '%b') , CONCAT(' '  , DATE_FORMAT(VOUCHER_DATE, '%Y'))) MONTH_YEAR_NAME, \n" +
                        "       DATE_FORMAT(VMT.VOUCHER_DATE,'%Y - %m') MONTH_YEAR, VMT.VOUCHER_NO,\n" +
                        "       VMT.VOUCHER_TYPE, TA.CHEQUE_NO,\n" +
                        "       TA.TRANS_MODE,\n" +
                        "       VMT.NARRATION,\n" +
                        "       CASE\n" +
                        "          WHEN ?VOUCHER_TYPE = 'RC' THEN\n" +
                            //"       CASE\n" +
                            //"         WHEN VT.TRANS_MODE = 'CR' THEN\n" +
                        "          IF(SUM(IF(VT.TRANS_MODE = 'DR', -VT.AMOUNT,  VT.AMOUNT)) > 0,SUM(IF(VT.TRANS_MODE = 'DR', -VT.AMOUNT,  VT.AMOUNT)),0)\n" + //SUM(IFNULL(VT.AMOUNT, 0))
                            //"         ELSE\n" +
                            //"          0.00\n" +
                            //"       END AS 'CREDIT',\n" +
                            //"       CASE\n" +
                            //"         WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                        "          WHEN ?VOUCHER_TYPE = 'PY' THEN\n" +
                        "          IF(SUM(IF(VT.TRANS_MODE = 'CR', -VT.AMOUNT,  VT.AMOUNT))>0, SUM(IF(VT.TRANS_MODE = 'CR', -VT.AMOUNT,  VT.AMOUNT)), 0 )\n" + //SUM(IFNULL(VT.AMOUNT, 0))
                        "       END AS AMOUNT\n" +
                            //"         ELSE\n" +
                            //"          0.00\n" +
                            //"       END AS 'DEBIT'\n" +
                        "  FROM MASTER_LEDGER_GROUP AS MLG\n" +
                        " INNER JOIN MASTER_LEDGER AS ML\n" +
                        "    ON MLG.GROUP_ID = ML.GROUP_ID\n" +
                        " INNER JOIN PROJECT_LEDGER AS PL\n" +
                        "    ON ML.LEDGER_ID = PL.LEDGER_ID\n" +
                        " INNER JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                        "    ON PL.PROJECT_ID = VMT.PROJECT_ID\n" +
                        " INNER JOIN VOUCHER_TRANS AS VT\n" +
                        "    ON PL.LEDGER_ID = VT.LEDGER_ID\n" +
                        "   AND VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                        " INNER JOIN MASTER_PROJECT AS MP\n" +
                        "    ON VMT.PROJECT_ID = MP.PROJECT_ID\n" +
                        "  JOIN (SELECT T.VOUCHER_ID, T.LEDGER_ID,T.LEDGER_NAME,T.VOUCHER_SUB_TYPE, T.TRANS_MODE, T.CHEQUE_NO " +
                        "          FROM (SELECT VTS.VOUCHER_ID,\n" +
                        "                       VTS.LEDGER_ID,MLD.LEDGER_NAME,MT.VOUCHER_SUB_TYPE, VTS.CHEQUE_NO, \n" +
                        "                       CASE\n" +
                        "                         WHEN LG.GROUP_ID = 12 AND VTS.TRANS_MODE = 'CR' THEN\n" +
                        "                          'TO BANK'\n" +
                        "                         ELSE\n" +
                        "                          CASE\n" +
                        "                            WHEN LG.GROUP_ID = 12 AND VTS.TRANS_MODE = 'DR' THEN\n" +
                        "                             'BY BANK'\n" +
                        "                            ELSE\n" +
                        "                             CASE\n" +
                        "                               WHEN LG.GROUP_ID = 13 AND VTS.TRANS_MODE = 'CR' THEN\n" +
                        "                                'TO CASH'\n" +
                        "                               ELSE\n" +
                        "                                CASE\n" +
                        "                                  WHEN LG.GROUP_ID = 13 AND VTS.TRANS_MODE = 'DR' THEN\n" +
                        "                                   'BY CASH'\n" +
                        "                                END\n" +
                        "                             END\n" +
                        "                          END\n" +
                        "                       END AS 'TRANS_MODE'\n" +
                        "                  FROM MASTER_LEDGER_GROUP LG\n" +
                        "                  LEFT JOIN MASTER_LEDGER MLD\n" +
                        "                    ON MLD.GROUP_ID = LG.GROUP_ID\n" +
                        "                  LEFT JOIN VOUCHER_TRANS VTS\n" +
                        "                    ON VTS.LEDGER_ID = MLD.LEDGER_ID\n" +
                        "                  LEFT JOIN VOUCHER_MASTER_TRANS MT\n" +
                        "                    ON VTS.VOUCHER_ID = MT.VOUCHER_ID\n" +
                        "                 WHERE (MT.VOUCHER_TYPE = ?VOUCHER_TYPE OR MT.VOUCHER_TYPE ='CN')\n" +
                        "                   AND IF(?VOUCHER_TYPE = 'RC', ( (MT.VOUCHER_SUB_TYPE ='FD' AND  VTS.TRANS_MODE='DR') OR MT.VOUCHER_SUB_TYPE ='GN'), 1=1)\n" +
                        "                   AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "                   AND MT.STATUS = 1 AND MLD.LEDGER_ID IN (?LEDGER_ID)\n" +
                        "                   AND MT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "                   AND LG.GROUP_ID IN (12, 13) \n" +
                        "                 ORDER BY VTS.SEQUENCE_NO ASC) AS T\n" +
                        "         GROUP BY T.VOUCHER_ID) AS TA\n" +
                        "    ON VMT.VOUCHER_ID = TA.VOUCHER_ID\n" +
                        " WHERE \n" +                           //VMT.VOUCHER_TYPE NOT IN ('CN')
                        "   VMT.STATUS = 1\n" +
                        "   AND VMT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "   AND (\n" +
                        "     (MLG.GROUP_ID NOT IN (12, 13)) OR\n" +
                        "     (VMT.VOUCHER_TYPE IN ('CN') AND IF(?VOUCHER_TYPE = 'RC',VT.TRANS_MODE = 'CR',VT.TRANS_MODE = 'DR') AND IF(?GROUP_ID = 13,MLG.GROUP_ID = 12,MLG.GROUP_ID = 13))\n" +
                        "     )\n" +
                        " GROUP BY VMT.VOUCHER_ID, VMT.VOUCHER_DATE\n" +
                        " ORDER BY VMT.VOUCHER_DATE, VMT.VOUCHER_NO";
                        break;
                    }
                case ReportSQLCommand.CashBankVoucher.FetchGSTInvoiceByJournalVoucher:
                    {
                        query = @"SELECT GIM.GST_INVOICE_ID, IFNULL(GIM.BOOKING_VOUCHER_ID, VGI.VOUCHER_ID) AS VOUCHER_ID, GIM.GST_VENDOR_ID, VM.VOUCHER_DATE, ML.LEDGER_NAME, 
                                GIM.GST_VENDOR_INVOICE_NO, GIM.GST_VENDOR_INVOICE_DATE, GIM.GST_VENDOR_INVOICE_TYPE, GMD.ITEM_NAME, GMD.ITEM_DESCRIPTION, GIM.DUE_DATE,
                                (CASE WHEN VM.VOUCHER_TYPE = 'RC' AND GMD.TRANS_MODE='CR' THEN GMD.AMOUNT
                                        WHEN VM.VOUCHER_TYPE = 'PY' AND GMD.TRANS_MODE='DR' THEN GMD.AMOUNT ELSE GMD.AMOUNT END) AS LEDGER_AMOUNT,
                                GMD.CGST AS CGST, GMD.SGST AS SGST, GMD.IGST AS IGST,
                                CB.CASH_BANK, CB.CASH_BANK_AMOUNT,
                                IF(GIM.IS_REVERSE_CHARGE =1, 'Y', 'N') AS IS_REVERSE_CHARGE, GIM.REVERSE_CHARGE_AMOUNT,
                                IFNULL(GIM.TRANSPORT_MODE, '') AS TRANSPORT_MODE, IFNULL(GIM.VEHICLE_NUMBER, '') AS VEHICLE_NUMBER,
                                IFNULL(MGS.CGST, '') AS CGST_RATE, IFNULL(MGS.SGST, '') AS SGST_RATE, IFNULL(MGS.IGST, '') AS CGST_RATE,
                                GIM.SUPPLY_DATE, IFNULL(GIM.SUPPLY_PLACE,'') AS SUPPLY_PLACE, IFNULL(GIM.CHEQUE_IN_FAVOUR, '') AS CHEQUE_IN_FAVOUR,
                                IFNULL(GIM.BILLING_NAME, '') AS BILLING_NAME, IFNULL(GIM.BILLING_GST_NO, '') AS BILLING_GST_NO, IFNULL(GIM.BILLING_ADDRESS, '') AS BILLING_ADDRESS, 
                                IFNULL(BMC.COUNTRY,'') AS BILLING_COUNTRY, IFNULL(BMS.STATE_CODE,'') AS BILLING_STATE_CODE, IFNULL(BMS.STATE_NAME,'') AS BILLING_STATE_NAME, 
                                IFNULL(GIM.SHIPPING_NAME,'') AS SHIPPING_NAME, IFNULL(GIM.SHIPPING_GST_NO,'') AS SHIPPING_GST_NO, IFNULL(GIM.SHIPPING_ADDRESS,'') AS SHIPPING_ADDRESS, 
                                IFNULL(SMC.COUNTRY,'') AS SHIPPING_COUNTRY, IFNULL(SMS.STATE_CODE,'') AS SHIPPING_STATE_CODE, IFNULL(SMS.STATE_NAME,'') AS SHIPPING_STATE_NAME, 
                                GMD.QUANTITY, GMD.UNIT_MEASUREMENT, GMD.UNIT_AMOUNT, GMD.DISCOUNT,
                                IFNULL(GMD.GST_HSN_SAC_CODE,'') AS GST_HSN_SAC_CODE, VM.NARRATION
                                FROM VOUCHER_MASTER_TRANS VM
                                INNER JOIN GST_INVOICE_MASTER GIM ON GIM.BOOKING_VOUCHER_ID = VM.VOUCHER_ID
                                INNER JOIN GST_INVOICE_MASTER_DETAILS GMD ON GMD.GST_INVOICE_ID = GIM.GST_INVOICE_ID 
                                INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = GMD.LEDGER_ID
                                LEFT JOIN (SELECT VM.VOUCHER_ID, ML.LEDGER_NAME AS CASH_BANK, SUM(VT.AMOUNT) AS CASH_BANK_AMOUNT
                                        FROM VOUCHER_MASTER_TRANS VM
                                        INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VM.VOUCHER_ID
                                        INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID
                                        WHERE VM.STATUS = 1 AND ML.GROUP_ID IN (12, 13) AND VT.TRANS_MODE = IF(VM.VOUCHER_TYPE='RC', 'DR', 'CR')
                                        GROUP BY VM.VOUCHER_ID) AS CB ON CB.VOUCHER_ID = VM.VOUCHER_ID
                                LEFT JOIN VOUCHER_GST_INVOICE VGI ON VGI.VOUCHER_ID = VM.VOUCHER_ID
                                LEFT JOIN MASTER_GST_CLASS MGS ON MGS.GST_ID= GMD.LEDGER_GST_CLASS_ID
                                LEFT JOIN MASTER_STATE BMS ON BMS.STATE_ID = GIM.BILLING_STATE_ID
                                LEFT JOIN MASTER_COUNTRY BMC ON BMC.COUNTRY_ID = GIM.BILLING_COUNTRY_ID
                                LEFT JOIN MASTER_STATE SMS ON SMS.STATE_ID = GIM.SHIPPING_STATE_ID
                                LEFT JOIN MASTER_COUNTRY SMC ON SMC.COUNTRY_ID = GIM.SHIPPING_COUNTRY_ID
                                WHERE VM.STATUS = 1 AND VM.GST_VENDOR_ID > 0 
                                AND ML.ACCESS_FLAG <> 2 AND GMD.LEDGER_GST_CLASS_ID >0 AND (GIM.BOOKING_VOUCHER_ID IN (?VOUCHER_ID) OR VGI.VOUCHER_ID IN (?VOUCHER_ID))";
                        //AND GMD.TRANS_MODE = IF(VM.VOUCHER_TYPE='RC', 'CR', 'DR')
                        break;
                    }
                case ReportSQLCommand.CashBankVoucher.FetchJournalInvoice:
                    {
                        query = @"SELECT GIM.GST_INVOICE_ID, IFNULL(GIM.BOOKING_VOUCHER_ID, 0) AS VOUCHER_ID, GIM.GST_VENDOR_ID, VM.VOUCHER_DATE, ML.LEDGER_NAME, 
                                GIM.GST_VENDOR_INVOICE_NO, GIM.GST_VENDOR_INVOICE_DATE, GIM.GST_VENDOR_INVOICE_TYPE, GMD.ITEM_NAME, GMD.ITEM_DESCRIPTION, GIM.DUE_DATE,
                                (CASE WHEN VM.VOUCHER_TYPE = 'RC' AND GMD.TRANS_MODE='CR' THEN GMD.AMOUNT
                                        WHEN VM.VOUCHER_TYPE = 'PY' AND GMD.TRANS_MODE='DR' THEN GMD.AMOUNT ELSE GMD.AMOUNT END) AS LEDGER_AMOUNT,
                                IFNULL(GIM.TRANSPORT_MODE, '') AS TRANSPORT_MODE, IFNULL(GIM.VEHICLE_NUMBER, '') AS VEHICLE_NUMBER,
                                GIM.SUPPLY_DATE, IFNULL(GIM.SUPPLY_PLACE,'') AS SUPPLY_PLACE, IFNULL(GIM.CHEQUE_IN_FAVOUR, '') AS CHEQUE_IN_FAVOUR,
                                IFNULL(GIM.BILLING_NAME, '') AS BILLING_NAME, IFNULL(GIM.BILLING_GST_NO, '') AS BILLING_GST_NO, IFNULL(GIM.BILLING_ADDRESS, '') AS BILLING_ADDRESS, 
                                IFNULL(BMC.COUNTRY,'') AS BILLING_COUNTRY, IFNULL(BMS.STATE_CODE,'') AS BILLING_STATE_CODE, IFNULL(BMS.STATE_NAME,'') AS BILLING_STATE_NAME, 
                                IFNULL(GIM.SHIPPING_NAME,'') AS SHIPPING_NAME, IFNULL(GIM.SHIPPING_GST_NO,'') AS SHIPPING_GST_NO, IFNULL(GIM.SHIPPING_ADDRESS,'') AS SHIPPING_ADDRESS, 
                                IFNULL(SMC.COUNTRY,'') AS SHIPPING_COUNTRY, IFNULL(SMS.STATE_CODE,'') AS SHIPPING_STATE_CODE, IFNULL(SMS.STATE_NAME,'') AS SHIPPING_STATE_NAME, 
                                GMD.QUANTITY, GMD.UNIT_MEASUREMENT, GMD.UNIT_AMOUNT, GMD.DISCOUNT, IFNULL(VGI.AMOUNT,0) AS PAID_AMOUNT, VM.NARRATION
                                FROM VOUCHER_MASTER_TRANS VM
                                INNER JOIN GST_INVOICE_MASTER GIM ON GIM.BOOKING_VOUCHER_ID = VM.VOUCHER_ID
                                INNER JOIN GST_INVOICE_MASTER_DETAILS GMD ON GMD.GST_INVOICE_ID = GIM.GST_INVOICE_ID 
                                INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = GMD.LEDGER_ID
                                LEFT JOIN MASTER_STATE BMS ON BMS.STATE_ID = GIM.BILLING_STATE_ID
                                LEFT JOIN MASTER_COUNTRY BMC ON BMC.COUNTRY_ID = GIM.BILLING_COUNTRY_ID
                                LEFT JOIN MASTER_STATE SMS ON SMS.STATE_ID = GIM.SHIPPING_STATE_ID
                                LEFT JOIN MASTER_COUNTRY SMC ON SMC.COUNTRY_ID = GIM.SHIPPING_COUNTRY_ID
                                LEFT JOIN ( SELECT VGI.GST_INVOICE_ID, SUM(VGI.AMOUNT) AS AMOUNT FROM VOUCHER_GST_INVOICE VGI
                                            INNER JOIN VOUCHER_MASTER_TRANS VM ON VM.VOUCHER_ID = VGI.VOUCHER_ID AND STATUS = 1 GROUP BY VGI.GST_INVOICE_ID) AS VGI
                                          ON VGI.GST_INVOICE_ID = GIM.GST_INVOICE_ID
                                WHERE VM.STATUS = 1 AND VM.GST_VENDOR_ID > 0 
                                AND ML.ACCESS_FLAG <> 2 AND GMD.LEDGER_GST_CLASS_ID >0 AND GIM.BOOKING_VOUCHER_ID IN (?VOUCHER_ID)";
                        //AND GMD.TRANS_MODE = IF(VM.VOUCHER_TYPE='RC', 'CR', 'DR')
                        break;
                    }
                case ReportSQLCommand.CashBankVoucher.FetchGSTInvoiceByRPVoucher:
                    {
                        query = @"SELECT VM.VOUCHER_ID, VM.GST_VENDOR_ID, VM.VOUCHER_DATE, ML.LEDGER_NAME, 
                                VM.GST_VENDOR_INVOICE_NO, VM.GST_VENDOR_INVOICE_DATE, VM.GST_VENDOR_INVOICE_TYPE,
                                (CASE WHEN VM.VOUCHER_TYPE = 'RC' AND GMD.TRANS_MODE='CR' THEN GMD.AMOUNT
                                        WHEN VM.VOUCHER_TYPE = 'PY' AND GMD.TRANS_MODE='DR' THEN GMD.AMOUNT END) AS LEDGER_AMOUNT,
                                GMD.CGST AS CGST, GMD.SGST AS SGST, GMD.IGST AS IGST,
                                CB.CASH_BANK, CB.CASH_BANK_AMOUNT,
                                IF(GIM.IS_REVERSE_CHARGE =1, 'Y', 'N') AS IS_REVERSE_CHARGE, GIM.REVERSE_CHARGE_AMOUNT,
                                IFNULL(GIM.TRANSPORT_MODE, '') AS TRANSPORT_MODE, IFNULL(GIM.VEHICLE_NUMBER, '') AS VEHICLE_NUMBER,
                                IFNULL(MGS.CGST, '') AS CGST_RATE, IFNULL(MGS.SGST, '') AS SGST_RATE, IFNULL(MGS.IGST, '') AS CGST_RATE,
                                GIM.SUPPLY_DATE, IFNULL(GIM.SUPPLY_PLACE,'') AS SUPPLY_PLACE, IFNULL(GIM.CHEQUE_IN_FAVOUR, '') AS CHEQUE_IN_FAVOUR,
                                IFNULL(GIM.BILLING_NAME, '') AS BILLING_NAME, IFNULL(GIM.BILLING_GST_NO, '') AS BILLING_GST_NO, IFNULL(GIM.BILLING_ADDRESS, '') AS BILLING_ADDRESS, 
                                IFNULL(BMC.COUNTRY,'') AS BILLING_COUNTRY, IFNULL(BMS.STATE_CODE,'') AS BILLING_STATE_CODE, IFNULL(BMS.STATE_NAME,'') AS BILLING_STATE_NAME, 
                                IFNULL(GIM.SHIPPING_NAME,'') AS SHIPPING_NAME, IFNULL(GIM.SHIPPING_GST_NO,'') AS SHIPPING_GST_NO, IFNULL(GIM.SHIPPING_ADDRESS,'') AS SHIPPING_ADDRESS, 
                                IFNULL(SMC.COUNTRY,'') AS SHIPPING_COUNTRY, IFNULL(SMS.STATE_CODE,'') AS SHIPPING_STATE_CODE, IFNULL(SMS.STATE_NAME,'') AS SHIPPING_STATE_NAME, 
                                IFNULL(GMD.GST_HSN_SAC_CODE,'') AS GST_HSN_SAC_CODE, VM.NARRATION, GMD.QUANTITY, GMD.UNIT_MEASUREMENT, GMD.UNIT_AMOUNT, GMD.DISCOUNT
                                FROM VOUCHER_MASTER_TRANS VM
                                INNER JOIN VOUCHER_GST_INVOICE VGI ON VGI.VOUCHER_ID = VM.VOUCHER_ID
                                INNER JOIN GST_INVOICE_MASTER GIM ON GIM.GST_INVOICE_ID = VGI.GST_INVOICE_ID
                                INNER JOIN GST_INVOICE_MASTER_DETAILS GMD ON GMD.GST_INVOICE_ID = GIM.GST_INVOICE_ID 
                                INNER JOIN (SELECT VM.VOUCHER_ID, 
                                        IF(ML.GROUP_ID = 12,
                                        CONCAT(ML.LEDGER_NAME, CONCAT(' - ' , CONCAT(MB.BANK, CONCAT(' - ', MB.BRANCH))),  ' ' , IFNULL(MB.IFSCCODE, '') ), ML.LEDGER_NAME) AS CASH_BANK, 
                                        SUM(VT.AMOUNT) AS CASH_BANK_AMOUNT
                                        FROM VOUCHER_MASTER_TRANS VM
                                        INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VM.VOUCHER_ID
                                        INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID
                                        LEFT JOIN MASTER_BANK_ACCOUNT BA ON BA.LEDGER_ID = ML.LEDGER_ID
                                        LEFT JOIN MASTER_BANK MB ON BA.BANK_ID = MB.BANK_ID
                                        WHERE VM.STATUS = 1 AND ML.GROUP_ID IN (12, 13) AND VT.TRANS_MODE = IF(VM.VOUCHER_TYPE='RC', 'DR', 'CR')
                                        GROUP BY VM.VOUCHER_ID) AS CB ON CB.VOUCHER_ID = VM.VOUCHER_ID
                                INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = GMD.LEDGER_ID
                                LEFT JOIN MASTER_GST_CLASS MGS ON MGS.GST_ID= GMD.LEDGER_GST_CLASS_ID
                                LEFT JOIN MASTER_STATE BMS ON BMS.STATE_ID = GIM.BILLING_STATE_ID
                                LEFT JOIN MASTER_COUNTRY BMC ON BMC.COUNTRY_ID = GIM.BILLING_COUNTRY_ID
                                LEFT JOIN MASTER_STATE SMS ON SMS.STATE_ID = GIM.SHIPPING_STATE_ID
                                LEFT JOIN MASTER_COUNTRY SMC ON SMC.COUNTRY_ID = GIM.SHIPPING_COUNTRY_ID
                                WHERE VM.STATUS = 1 AND VM.GST_VENDOR_ID > 0 AND GMD.TRANS_MODE = IF(VM.VOUCHER_TYPE='RC', 'CR', 'DR')
                                AND ML.ACCESS_FLAG <> 2 AND GMD.LEDGER_GST_CLASS_ID >0 AND VM.VOUCHER_ID IN (?VOUCHER_ID)";
                        break;
                    }
                #endregion

                #region Journal Transactions
                case ReportSQLCommand.CashBankVoucher.JournalTransactions:
                    {
                        query = "SELECT ML.LEDGER_ID,\n" +
                        "       ML.LEDGER_NAME,\n" +
                        "       VMT.VOUCHER_ID,VMT.VOUCHER_SUB_TYPE,\n" +
                        "       VMT.VOUCHER_DATE,\n" +
                        "       VMT.VOUCHER_NO,\n" +
                        "       VMT.VOUCHER_TYPE,\n" +
                            //"       VMT.NARRATION,\n" + //On 06/06/2017, to show individual jounral narration or general narration
                        "       IF(VT.NARRATION=NULL OR VT.NARRATION='', VMT.NARRATION, VT.NARRATION) AS NARRATION1,\n" +
                        "       CONCAT( IF(IFNULL(VT.NARRATION, '')='', IFNULL(VMT.NARRATION, ''), IFNULL(VT.NARRATION, '')) , IF(VMT.VOUCHER_SUB_TYPE='FD', CONCAT(' FD: ', FD.FD_ACCOUNT_NUMBER), '') ) AS NARRATION,\n" +
                        "       VT.TRANS_MODE,\n" +
                        "       CASE\n" +
                        "         WHEN VT.TRANS_MODE = 'CR' THEN\n" +
                        "          IFNULL(SUM(VT.AMOUNT), 0)\n" +
                        "         ELSE\n" +
                        "          0.00\n" +
                        "       END AS 'CREDIT',\n" +
                        "       CASE\n" +
                        "         WHEN VT.TRANS_MODE = 'DR' THEN\n" +
                        "          IFNULL(SUM(VT.AMOUNT), 0)\n" +
                        "         ELSE\n" +
                        "          0.00\n" +
                        "       END AS 'DEBIT'\n" +
                        " FROM MASTER_LEDGER_GROUP AS MLG\n" +
                        " INNER JOIN MASTER_LEDGER AS ML\n" +
                        "    ON MLG.GROUP_ID = ML.GROUP_ID\n" +
                        " INNER JOIN PROJECT_LEDGER AS PL\n" +
                        "    ON ML.LEDGER_ID = PL.LEDGER_ID\n" +
                        " INNER JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                        "    ON PL.PROJECT_ID = VMT.PROJECT_ID\n" +
                        " INNER JOIN VOUCHER_TRANS AS VT\n" +
                        "    ON PL.LEDGER_ID = VT.LEDGER_ID\n" +
                        "   AND VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                        " INNER JOIN MASTER_PROJECT AS MP\n" +
                        "    ON VMT.PROJECT_ID = MP.PROJECT_ID\n" +
                        " LEFT JOIN (SELECT FDA.FD_ACCOUNT_ID, 0 AS VOUCHER_ID, RNO.FD_INTEREST_VOUCHER_ID, RNO.FD_VOUCHER_ID,\n" +
                        "          RNO.RENEWAL_DATE, IFNULL(RNO.RECEIPT_NO,'') AS RECEIPT_NO,\n" +
                        "          CONCAT(FDA.FD_ACCOUNT_NUMBER,  IF(IFNULL(RNO.RECEIPT_NO,'')='', '', CONCAT(' (R: ', IFNULL(RNO.RECEIPT_NO,''),')')) ) AS FD_ACCOUNT_NUMBER\n" +
                        "          FROM FD_ACCOUNT AS FDA\n" +
                        "          INNER JOIN (SELECT FR.FD_ACCOUNT_ID, FR.FD_INTEREST_VOUCHER_ID, FR.FD_VOUCHER_ID,FR.RENEWAL_DATE, \n" +
                        "                   SUBSTRING_INDEX(GROUP_CONCAT(FR1.RECEIPT_NO ORDER BY FR1.RENEWAL_DATE DESC SEPARATOR '|'), '|', 1) AS RECEIPT_NO \n" +
                        "                   FROM FD_RENEWAL AS FR\n" +
                        "                   LEFT JOIN (SELECT FR1.FD_ACCOUNT_ID, FR1.RENEWAL_DATE AS RENEWAL_DATE, IFNULL(FR1.RECEIPT_NO, '') AS RECEIPT_NO\n" +
                        "                       FROM FD_RENEWAL AS FR1\n" +
                        "                       INNER JOIN FD_ACCOUNT FD1 ON FD1.FD_ACCOUNT_ID = FR1.FD_ACCOUNT_ID\n" +
                        "                       WHERE FD1.STATUS =1 AND FD1.PROJECT_ID IN (?PROJECT_ID) AND FR1.STATUS =1 AND FR1.FD_TYPE = 'RN' AND FR1.RENEWAL_DATE<=?DATE_TO) AS FR1\n" +
                        "                   ON FR1.FD_ACCOUNT_ID= FR.FD_ACCOUNT_ID AND FR1.RENEWAL_DATE<FR.RENEWAL_DATE\n" +
                        "                   WHERE STATUS =1 GROUP BY FR.FD_ACCOUNT_ID, FR.FD_RENEWAL_ID) AS RNO\n" + //FR1.RENEWAL_DATE
                        "           ON RNO.FD_ACCOUNT_ID = FDA.FD_ACCOUNT_ID WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "           UNION ALL SELECT FDA.FD_ACCOUNT_ID, FDA.FD_VOUCHER_ID, 0 AS FD_INTEREST_VOUCHER_ID, 0 AS FD_VOUCHER_ID, FDA.INVESTMENT_DATE, '' AS RECEIPT_NO, \n" +
                        "           FDA.FD_ACCOUNT_NUMBER FROM FD_ACCOUNT AS FDA WHERE FDA.STATUS=1 AND FDA.PROJECT_ID IN (?PROJECT_ID)) AS FD\n" +
                        "    ON FD.VOUCHER_ID = VMT.VOUCHER_ID OR FD.FD_INTEREST_VOUCHER_ID = VMT.VOUCHER_ID OR FD.FD_VOUCHER_ID = VMT.VOUCHER_ID\n" +
                        " WHERE VMT.VOUCHER_TYPE IN ('JN')\n" +
                        "   AND VMT.STATUS = 1\n" +
                        "   AND VMT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "   AND MLG.GROUP_ID NOT IN (12, 13)\n" +
                        " GROUP BY VMT.VOUCHER_ID, ML.LEDGER_ID, VMT.VOUCHER_DATE\n" +
                        " ORDER BY VMT.VOUCHER_DATE, LENGTH(VMT.VOUCHER_NO), VMT.VOUCHER_NO ASC, VMT.VOUCHER_TYPE ASC, VT.SEQUENCE_NO";//VMT.VOUCHER_ID, -- it is order with VOUCHER_NO, VMT.VOUCHER_DATE, VMT.VOUCHER_TYPE ASC

                        break;
                    }
                #endregion

                #region cashBankJournalByVoucher
                case ReportSQLCommand.CashBankVoucher.DonorReceipts:
                    {
                        query = "SELECT VMT.VOUCHER_ID,\n" +
                                "       VMT.VOUCHER_NO,\n" +
                                "       CASE\n" +
                                "         WHEN T.TRANS_MODE = 'CASH' THEN\n" +
                                "          T.TRANS_MODE\n" +
                                "         ELSE\n" +
                                "          T.CHEQUE_NO\n" +
                                "       END AS TRANS_MODE,\n" +
                                "       T.DRAWN_ON,\n" +
                                "       T.CHEQUE_NO,\n" +
                                "       T.DRAWN_BANK,\n" +
                                "       VMT.VOUCHER_DATE,\n" +
                                "       VMT.DONOR_ID,\n" +
                            //"       VMT.NAME_ADDRESS,\n" + -- Commanded by chinna
                                "       MD.NAME AS NAME_ADDRESS,\n" +
                                "       REGNO,EIGHTYGNO,\n" +
                                "       IP.URL AS BOSCO_URL,\n" +
                                "       IP.ADDRESS AS BOSCO_ADDRESS,\n" +
                                "       IP.PHONE AS BOSCO_PHONE,\n" +
                                "       IP.EMAIL AS BOSCO_EMAIL,\n" +
                                "       IP.PANNO AS BOSCO_PANNO,\n" +
                                "       MD.ADDRESS,\n" +
                                "       MD.PHONE,\n" +
                                "       MD.EMAIL,\n" +
                                "       MP.PROJECT_CODE,\n" +
                                "       VT.SEQUENCE_NO,\n" +
                                "       ML.LEDGER_NAME AS LEDGER_NAME,\n" +
                                "       IF((VMT.VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') OR\n" +
                                "          (VMT.VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'),\n" +
                                "          -IFNULL(VT.AMOUNT, 0),\n" +
                                "          IFNULL(VT.AMOUNT, 0)) AS AMOUNT,\n" +
                                "       VT.TRANS_MODE AS AMOUNT_TRANS_TYPE,\n" +
                                "       VMT.NARRATION\n" +
                                "  FROM VOUCHER_MASTER_TRANS VMT\n" +
                                "  LEFT JOIN MASTER_DONAUD MD\n" +
                                "    ON VMT.DONOR_ID = MD.DONAUD_ID\n" +
                                "  LEFT JOIN VOUCHER_TRANS VT\n" +
                                "    ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "  LEFT JOIN MASTER_LEDGER ML\n" +
                                "    ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                "  LEFT JOIN MASTER_PROJECT MP\n" +
                                "    ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                                "  LEFT JOIN MASTER_INSTI_PERFERENCE IP\n" +
                                "    ON MP.CUSTOMERID = IP.CUSTOMERID\n" +
                                " INNER JOIN (SELECT VMT.VOUCHER_ID,\n" +
                                "                    VT.MATERIALIZED_ON AS DRAWN_ON,\n" +
                                "                    CONCAT(MB.BANK, ',', MB.BRANCH) AS DRAWN_BANK,\n" +
                                "                    VT.CHEQUE_NO AS CHEQUE,\n" +
                                "                    VT.CHEQUE_NO AS CHEQUE_NO,\n" +
                                "                    CASE\n" +
                                "                      WHEN ML.GROUP_ID = 12 AND VT.TRANS_MODE = 'CR' THEN\n" +
                                "                       'BANK'\n" +
                                "                      ELSE\n" +
                                "                       CASE\n" +
                                "                         WHEN ML.GROUP_ID = 12 AND VT.TRANS_MODE = 'DR' THEN\n" +
                                "                          'BANK'\n" +
                                "                         ELSE\n" +
                                "                          CASE\n" +
                                "                            WHEN ML.GROUP_ID = 13 AND VT.TRANS_MODE = 'CR' THEN\n" +
                                "                             'CASH'\n" +
                                "                            ELSE\n" +
                                "                             CASE\n" +
                                "                               WHEN ML.GROUP_ID = 13 AND VT.TRANS_MODE = 'DR' THEN\n" +
                                "                                'CASH'\n" +
                                "                             END\n" +
                                "                          END\n" +
                                "                       END\n" +
                                "                    END AS 'TRANS_MODE'\n" +
                                "               FROM VOUCHER_MASTER_TRANS VMT\n" +
                                "               LEFT JOIN VOUCHER_TRANS VT\n" +
                                "                 ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "               LEFT JOIN MASTER_LEDGER ML\n" +
                                "                 ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                "               LEFT JOIN MASTER_PROJECT MP\n" +
                                "                 ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                                "               LEFT JOIN MASTER_BANK_ACCOUNT MBA\n" +
                                "                 ON ML.LEDGER_ID = MBA.LEDGER_ID\n" +
                                "               LEFT JOIN MASTER_BANK MB\n" +
                                "                 ON MB.BANK_ID = MBA.BANK_ID\n" +
                                "              WHERE VMT.VOUCHER_ID IN (?VOUCHER_ID)\n" +
                                "                AND GROUP_ID IN (12, 13)\n" +
                                "              GROUP BY VOUCHER_ID\n" +
                                "              ORDER BY TRANS_MODE DESC) AS T\n" +
                                "    ON VT.VOUCHER_ID = T.VOUCHER_ID\n" +
                                " WHERE VMT.VOUCHER_ID IN (?VOUCHER_ID)\n" +
                                "   AND GROUP_ID NOT IN (12, 13)\n" +
                                " GROUP BY VMT.VOUCHER_DATE, VMT.VOUCHER_ID, VT.SEQUENCE_NO\n" +
                                " ORDER BY VMT.VOUCHER_DATE, VOUCHER_NO ASC;";

                        break;
                    }
                case ReportSQLCommand.CashBankVoucher.FetchcashBankByVoucher:
                    {
                        query = "SELECT VMT.VOUCHER_ID, ML.LEDGER_ID,VT.SEQUENCE_NO,\n" +
                                "       VMT.VOUCHER_NO,\n" +
                                "       CASE\n" +
                                "         WHEN T.TRANS_MODE = 'CASH' THEN\n" +
                                "          T.TRANS_MODE\n" +
                                "         ELSE\n" +
                                "          T.CHEQUE_NO\n" +
                                "       END AS TRANS_MODE,\n" +
                                "       T.DRAWN_ON,\n" +
                                "       T.CHEQUE,\n" +
                                "       VMT.VOUCHER_DATE,\n" +
                                "       VMT.DONOR_ID,\n" +
                                "       VMT.NAME_ADDRESS,\n" +
                                "       MD.ADDRESS,\n" +
                                "       MD.PHONE,\n" +
                                "       MP.PROJECT_CODE,\n" +
                                "       VT.SEQUENCE_NO,\n" +
                                "       ML.LEDGER_NAME AS LEDGER_NAME,\n" +
                                "       IF((vmt.VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') OR\n" +
                                "          (vmt.VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'),\n" +
                                "          -IFNULL(VT.AMOUNT, 0),\n" +
                                "          IFNULL(VT.AMOUNT, 0)) AS AMOUNT, T.AMOUNT AS CASH_BANK_AMOUNT, \n" +
                                "       IFNULL(MC.CURRENCY_SYMBOL, '') AS CURRENCY_SYMBOL, IFNULL(MC.CURRENCY_NAME, '') AS CURRENCY_NAME, VT.TRANS_MODE AS AMOUNT_TRANS_TYPE,\n" +
                                "       CONCAT(VT.NARRATION, IF(VMT.VOUCHER_SUB_TYPE='FD', CONCAT(' FD: ', FD.FD_ACCOUNT_NUMBER), '')) AS NARRATION,\n" +
                                "       CONCAT(VMT.NARRATION, IF(VMT.VOUCHER_SUB_TYPE='FD', CONCAT(' FD: ', FD.FD_ACCOUNT_NUMBER), '')) AS GENERAL_NARRATION\n" +
                                "  FROM VOUCHER_MASTER_TRANS VMT\n" +
                                "  LEFT JOIN MASTER_DONAUD MD ON VMT.DONOR_ID = MD.DONAUD_ID\n" +
                                "  LEFT JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "  LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                "  LEFT JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                                "  LEFT JOIN MASTER_COUNTRY MC ON MC.COUNTRY_ID = VMT.CURRENCY_COUNTRY_ID\n" +
                                " INNER JOIN (SELECT VMT.VOUCHER_ID,\n" +
                                "                    VT.MATERIALIZED_ON AS DRAWN_ON,\n" +
                                "                    VT.CHEQUE_NO AS CHEQUE,\n" +
                                "                    CONCAT(CONCAT(MBA.ACCOUNT_NUMBER, ' - '), VT.CHEQUE_NO) AS CHEQUE_NO,\n" +
                                "                    CASE\n" +
                                "                      WHEN ML.GROUP_ID = 12 AND VT.TRANS_MODE = 'CR' THEN\n" +
                                "                       'BANK'\n" +
                                "                      ELSE\n" +
                                "                       CASE\n" +
                                "                         WHEN ML.GROUP_ID = 12 AND VT.TRANS_MODE = 'DR' THEN\n" +
                                "                          'BANK'\n" +
                                "                         ELSE\n" +
                                "                          CASE\n" +
                                "                            WHEN ML.GROUP_ID = 13 AND VT.TRANS_MODE = 'CR' THEN\n" +
                                "                             'CASH'\n" +
                                "                            ELSE\n" +
                                "                             CASE\n" +
                                "                               WHEN ML.GROUP_ID = 13 AND VT.TRANS_MODE = 'DR' THEN\n" +
                                "                                'CASH'\n" +
                                "                             END\n" +
                                "                          END\n" +
                                "                       END\n" +
                                "                    END AS 'TRANS_MODE', VT.AMOUNT\n" +
                                "               FROM VOUCHER_MASTER_TRANS VMT\n" +
                                "               LEFT JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "               LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                "             -- LEFT JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                                "               LEFT JOIN MASTER_BANK_ACCOUNT MBA ON ML.LEDGER_ID = MBA.LEDGER_ID\n" +
                                "                 \n" +
                                "              WHERE VMT.VOUCHER_ID IN (?VOUCHER_ID)\n" +
                                "                AND GROUP_ID IN (12, 13)\n" +
                                "              ORDER BY TRANS_MODE DESC) AS T\n" +
                                "    ON VT.VOUCHER_ID = T.VOUCHER_ID\n" +
                                " LEFT JOIN (SELECT FDA.FD_ACCOUNT_ID, 0 AS VOUCHER_ID, RNO.FD_INTEREST_VOUCHER_ID, RNO.FD_VOUCHER_ID,\n" +
                                "          RNO.RENEWAL_DATE, IFNULL(RNO.RECEIPT_NO,'') AS RECEIPT_NO,\n" +
                                "          CONCAT(FDA.FD_ACCOUNT_NUMBER,  IF(IFNULL(RNO.RECEIPT_NO,'')='', '', CONCAT(' (R: ', IFNULL(RNO.RECEIPT_NO,''),')')) ) AS FD_ACCOUNT_NUMBER\n" +
                                "          FROM FD_ACCOUNT AS FDA\n" +
                                "          INNER JOIN (SELECT FR.FD_ACCOUNT_ID, FR.FD_INTEREST_VOUCHER_ID, FR.FD_VOUCHER_ID,FR.RENEWAL_DATE, \n" +
                                "                   SUBSTRING_INDEX(GROUP_CONCAT(FR1.RECEIPT_NO ORDER BY FR1.RENEWAL_DATE DESC SEPARATOR '|'), '|', 1) AS RECEIPT_NO \n" +
                                "                   FROM FD_RENEWAL AS FR\n" +
                                "                   LEFT JOIN (SELECT FR1.FD_ACCOUNT_ID, FR1.RENEWAL_DATE AS RENEWAL_DATE, IFNULL(FR1.RECEIPT_NO, '') AS RECEIPT_NO\n" +
                                "                       FROM FD_RENEWAL AS FR1\n" +
                                "                       INNER JOIN FD_ACCOUNT FD1 ON FD1.FD_ACCOUNT_ID = FR1.FD_ACCOUNT_ID\n" +
                                "                       WHERE FD1.STATUS =1 AND FR1.STATUS =1 AND FR1.FD_TYPE = 'RN' AND FR1.RENEWAL_DATE<=?DATE_TO) AS FR1\n" + //AND FD1.PROJECT_ID IN (?PROJECT_ID) 
                                "                   ON FR1.FD_ACCOUNT_ID= FR.FD_ACCOUNT_ID AND FR1.RENEWAL_DATE<FR.RENEWAL_DATE\n" +
                                "                   WHERE STATUS =1 GROUP BY FR.FD_ACCOUNT_ID, FR.FD_RENEWAL_ID) AS RNO\n" + //FR1.RENEWAL_DATE
                                "           ON RNO.FD_ACCOUNT_ID = FDA.FD_ACCOUNT_ID WHERE FDA.STATUS=1 \n" + //AND FDA.PROJECT_ID IN (?PROJECT_ID)
                                "           UNION ALL SELECT FDA.FD_ACCOUNT_ID, FDA.FD_VOUCHER_ID, 0 AS FD_INTEREST_VOUCHER_ID, 0 AS FD_VOUCHER_ID, FDA.INVESTMENT_DATE, '' AS RECEIPT_NO, \n" +
                                "           FDA.FD_ACCOUNT_NUMBER FROM FD_ACCOUNT AS FDA WHERE FDA.STATUS=1 ) AS FD\n" + //AND FDA.PROJECT_ID IN (?PROJECT_ID)
                                "    ON FD.VOUCHER_ID = VMT.VOUCHER_ID OR FD.FD_INTEREST_VOUCHER_ID = VMT.VOUCHER_ID OR FD.FD_VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                " WHERE VMT.VOUCHER_ID IN (?VOUCHER_ID)\n" +
                                "   AND GROUP_ID NOT IN (12, 13)\n" +
                                " GROUP BY VMT.VOUCHER_DATE, VMT.VOUCHER_ID, VT.SEQUENCE_NO\n" +
                                " ORDER BY VMT.VOUCHER_DATE,SEQUENCE_NO, voucher_no ASC;";  //  we changed squence No order in Voucher Screen 29.09.2017
                        break;
                    }
                case ReportSQLCommand.CashBankVoucher.FetchPurchaseslipVoucher:
                    {
                        query = "SELECT VMT.VOUCHER_ID, IF(VT.LEDGER_ID IN (?CGST,?SGST,?IGST) , ML.LEDGER_NAME , CONCAT(ASSET_ITEM,' - ',AC.ASSET_CLASS)) AS ASSET_ITEM, IF(VT.LEDGER_ID IN (?CGST,?SGST,?IGST), ' ', AIOD.QUANTITY) QUANTITY, IF(VT.LEDGER_ID IN (?CGST,?SGST,?IGST) , ' ' , AT.AMOUNT) AS AMOUNT1,\n" +
                                "       VMT.VOUCHER_NO,\n" +
                                "       CASE\n" +
                                "         WHEN T.TRANS_MODE = 'CASH' THEN\n" +
                                "          T.TRANS_MODE\n" +
                                "         ELSE\n" +
                                "          T.CHEQUE_NO\n" +
                                "       END AS TRANS_MODE,\n" +
                                "       T.DRAWN_ON,\n" +
                                "       T.CHEQUE,\n" +
                                "       VMT.VOUCHER_DATE,\n" +
                                "       VMT.DONOR_ID,\n" +
                                "       VMT.NAME_ADDRESS,\n" +
                                "       MD.ADDRESS,\n" +
                                "       MD.PHONE,\n" +
                                "       MP.PROJECT_CODE,\n" +
                                "       VT.SEQUENCE_NO,\n" +
                                "       ML.LEDGER_NAME AS LEDGER_NAME,\n" +
                            //"       IF((vmt.VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') OR\n" +
                            //"          (vmt.VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'),\n" +
                            //"          -IFNULL(VT.AMOUNT, 0),\n" +
                            //"          IFNULL(VT.AMOUNT, 0)) AS AMOUNT,\n" +
                                "      IF(VT.LEDGER_ID IN (?CGST,?SGST,?IGST), VT.AMOUNT, AIOD.QUANTITY * AT.AMOUNT) AS AMOUNT,\n" +
                                "       VT.TRANS_MODE AS AMOUNT_TRANS_TYPE,\n" +
                                "       VMT.NARRATION\n" +
                                "  FROM VOUCHER_MASTER_TRANS VMT\n" +
                                "  LEFT JOIN MASTER_DONAUD MD\n" +
                                "    ON VMT.DONOR_ID = MD.DONAUD_ID\n" +
                                "  LEFT JOIN VOUCHER_TRANS VT\n" +
                                "    ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                " LEFT JOIN ASSET_IN_OUT_MASTER AIOM\n" +
                                "    ON AIOM.VOUCHER_ID = VT.VOUCHER_ID\n" +
                               "  INNER JOIN ASSET_IN_OUT_DETAIL AIOD\n" +
                                "   ON AIOM.IN_OUT_ID =AIOD.IN_OUT_ID AND AIOD.IN_OUT_ID =?IN_OUT_ID\n" +
                               "  INNER JOIN ASSET_ITEM AI \n" +
                               "   ON AI.ITEM_ID = AIOD.ITEM_ID\n" +
                               "  INNER JOIN ASSET_CLASS AC \n" +
                               " ON AC.ASSET_CLASS_ID = AI.ASSET_CLASS_ID\n" +
                               "  INNER JOIN ASSET_TRANS AT  \n" +
                               "   ON AT.IN_OUT_DETAIL_ID = AIOD.IN_OUT_DETAIL_ID\n" +
                               "  INNER JOIN ASSET_ITEM_DETAIL AID \n" +
                               "   ON AID.ITEM_DETAIL_ID = AT.ITEM_DETAIL_ID\n" +
                                "  LEFT JOIN MASTER_LEDGER ML\n" +
                                "    ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                "  LEFT JOIN MASTER_PROJECT MP\n" +
                                "    ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                                " INNER JOIN (SELECT VMT.VOUCHER_ID,\n" +
                                "                    VT.MATERIALIZED_ON AS DRAWN_ON,\n" +
                                "                    VT.CHEQUE_NO AS CHEQUE,\n" +
                                "                    CONCAT(CONCAT(MBA.ACCOUNT_NUMBER, ' - '), VT.CHEQUE_NO) AS CHEQUE_NO,\n" +
                                "                    CASE\n" +
                                "                      WHEN ML.GROUP_ID = 12 AND VT.TRANS_MODE = 'CR' THEN\n" +
                                "                       'BANK'\n" +
                                "                      ELSE\n" +
                                "                       CASE\n" +
                                "                         WHEN ML.GROUP_ID = 12 AND VT.TRANS_MODE = 'DR' THEN\n" +
                                "                          'BANK'\n" +
                                "                         ELSE\n" +
                                "                          CASE\n" +
                                "                            WHEN ML.GROUP_ID = 13 AND VT.TRANS_MODE = 'CR' THEN\n" +
                                "                             'CASH'\n" +
                                "                            ELSE\n" +
                                "                             CASE\n" +
                                "                               WHEN ML.GROUP_ID = 13 AND VT.TRANS_MODE = 'DR' THEN\n" +
                                "                                'CASH'\n" +
                                "                             END\n" +
                                "                          END\n" +
                                "                       END\n" +
                                "                    END AS 'TRANS_MODE'\n" +
                                "               FROM VOUCHER_MASTER_TRANS VMT\n" +
                                "               LEFT JOIN VOUCHER_TRANS VT\n" +
                                "                 ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "               LEFT JOIN MASTER_LEDGER ML\n" +
                                "                 ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                "             -- LEFT JOIN MASTER_PROJECT MP\n" +
                                "             -- ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                                "               LEFT JOIN MASTER_BANK_ACCOUNT MBA\n" +
                                "                 ON ML.LEDGER_ID = MBA.LEDGER_ID\n" +
                                "              WHERE VMT.VOUCHER_ID IN (?VOUCHER_ID)\n" +
                                "                AND GROUP_ID IN (12, 13)\n" +
                                "              ORDER BY TRANS_MODE DESC) AS T\n" +
                                "    ON VT.VOUCHER_ID = T.VOUCHER_ID\n" +
                                " WHERE VMT.VOUCHER_ID IN (?VOUCHER_ID)\n" +
                                "   AND GROUP_ID NOT IN (12, 13)\n" +
                                " GROUP BY  vmt.VOUCHER_ID, AI.ITEM_ID,ML.GROUP_ID\n" +     // VMT.VOUCHER_DATE, VMT.VOUCHER_ID, VT.SEQUENCE_NO\n" +
                                " ORDER BY VMT.VOUCHER_DATE,SEQUENCE_NO, voucher_no ASC;";  //  we changed squence No order in Voucher Screen 29.09.2017

                        //query = "SELECT VMT.VOUCHER_ID, CONCAT(ASSET_ITEM,' - ',AC.ASSET_CLASS) AS ASSET_ITEM, AIOD.QUANTITY, AT.AMOUNT AS AMOUNT1,\n" +
                        //     "       VMT.VOUCHER_NO,\n" +
                        //     "       CASE\n" +
                        //     "         WHEN T.TRANS_MODE = 'CASH' THEN\n" +
                        //     "          T.TRANS_MODE\n" +
                        //     "         ELSE\n" +
                        //     "          T.CHEQUE_NO\n" +
                        //     "       END AS TRANS_MODE,\n" +
                        //     "       T.DRAWN_ON,\n" +
                        //     "       T.CHEQUE,\n" +
                        //     "       VMT.VOUCHER_DATE,\n" +
                        //     "       VMT.DONOR_ID,\n" +
                        //     "       VMT.NAME_ADDRESS,\n" +
                        //     "       MD.ADDRESS,\n" +
                        //     "       MD.PHONE,\n" +
                        //     "       MP.PROJECT_CODE,\n" +
                        //     "       VT.SEQUENCE_NO,\n" +
                        //     "       ML.LEDGER_NAME AS LEDGER_NAME,\n" +
                        //     "       IF((vmt.VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') OR\n" +
                        //     "          (vmt.VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'),\n" +
                        //     "          -IFNULL(VT.AMOUNT, 0),\n" +
                        //     "          IFNULL(VT.AMOUNT, 0)) AS AMOUNT,\n" +
                        //     "       VT.TRANS_MODE AS AMOUNT_TRANS_TYPE,\n" +
                        //     "       VMT.NARRATION\n" +
                        //     "  FROM VOUCHER_MASTER_TRANS VMT\n" +
                        //     "  LEFT JOIN MASTER_DONAUD MD\n" +
                        //     "    ON VMT.DONOR_ID = MD.DONAUD_ID\n" +
                        //     "  LEFT JOIN VOUCHER_TRANS VT\n" +
                        //     "    ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                        //     " LEFT JOIN ASSET_IN_OUT_MASTER AIOM\n" +
                        //     "    ON AIOM.VOUCHER_ID = VT.VOUCHER_ID\n" +
                        //    "  INNER JOIN ASSET_IN_OUT_DETAIL AIOD\n" +
                        //     "   ON AIOM.IN_OUT_ID =AIOD.IN_OUT_ID AND AIOD.IN_OUT_ID =?IN_OUT_ID\n" +
                        //    "  INNER JOIN ASSET_ITEM AI \n" +
                        //    "   ON AI.ITEM_ID = AIOD.ITEM_ID\n" +
                        //    "  INNER JOIN ASSET_CLASS AC \n" +
                        //    " ON AC.ASSET_CLASS_ID = AI.ASSET_CLASS_ID\n" +
                        //    "  INNER JOIN ASSET_TRANS AT  \n" +
                        //    "   ON AT.IN_OUT_DETAIL_ID = AIOD.IN_OUT_DETAIL_ID\n" +
                        //    "  INNER JOIN ASSET_ITEM_DETAIL AID \n" +
                        //    "   ON AID.ITEM_DETAIL_ID = AT.ITEM_DETAIL_ID\n" +
                        //     "  LEFT JOIN MASTER_LEDGER ML\n" +
                        //     "    ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                        //     "  LEFT JOIN MASTER_PROJECT MP\n" +
                        //     "    ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                        //     " INNER JOIN (SELECT VMT.VOUCHER_ID,\n" +
                        //     "                    VT.MATERIALIZED_ON AS DRAWN_ON,\n" +
                        //     "                    VT.CHEQUE_NO AS CHEQUE,\n" +
                        //     "                    CONCAT(CONCAT(MBA.ACCOUNT_NUMBER, ' - '), VT.CHEQUE_NO) AS CHEQUE_NO,\n" +
                        //     "                    CASE\n" +
                        //     "                      WHEN ML.GROUP_ID = 12 AND VT.TRANS_MODE = 'CR' THEN\n" +
                        //     "                       'BANK'\n" +
                        //     "                      ELSE\n" +
                        //     "                       CASE\n" +
                        //     "                         WHEN ML.GROUP_ID = 12 AND VT.TRANS_MODE = 'DR' THEN\n" +
                        //     "                          'BANK'\n" +
                        //     "                         ELSE\n" +
                        //     "                          CASE\n" +
                        //     "                            WHEN ML.GROUP_ID = 13 AND VT.TRANS_MODE = 'CR' THEN\n" +
                        //     "                             'CASH'\n" +
                        //     "                            ELSE\n" +
                        //     "                             CASE\n" +
                        //     "                               WHEN ML.GROUP_ID = 13 AND VT.TRANS_MODE = 'DR' THEN\n" +
                        //     "                                'CASH'\n" +
                        //     "                             END\n" +
                        //     "                          END\n" +
                        //     "                       END\n" +
                        //     "                    END AS 'TRANS_MODE'\n" +
                        //     "               FROM VOUCHER_MASTER_TRANS VMT\n" +
                        //     "               LEFT JOIN VOUCHER_TRANS VT\n" +
                        //     "                 ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                        //     "               LEFT JOIN MASTER_LEDGER ML\n" +
                        //     "                 ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                        //     "             -- LEFT JOIN MASTER_PROJECT MP\n" +
                        //     "             -- ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                        //     "               LEFT JOIN MASTER_BANK_ACCOUNT MBA\n" +
                        //     "                 ON ML.LEDGER_ID = MBA.LEDGER_ID\n" +
                        //     "              WHERE VMT.VOUCHER_ID IN (?VOUCHER_ID)\n" +
                        //     "                AND GROUP_ID IN (12, 13)\n" +
                        //     "              ORDER BY TRANS_MODE DESC) AS T\n" +
                        //     "    ON VT.VOUCHER_ID = T.VOUCHER_ID\n" +
                        //     " WHERE VMT.VOUCHER_ID IN (?VOUCHER_ID)\n" +
                        //     "   AND GROUP_ID NOT IN (12, 13)\n" +
                        //     " GROUP BY VMT.VOUCHER_DATE, VMT.VOUCHER_ID, VT.SEQUENCE_NO\n" +
                        //     " ORDER BY VMT.VOUCHER_DATE,SEQUENCE_NO, voucher_no ASC;";  //  we changed squence No order in Voucher Screen 29.09.2017
                        break;
                    }
                case ReportSQLCommand.CashBankVoucher.FetchPurchaseStockSlip:
                    {
                        query = @" SELECT CONCAT(SI.NAME, ' - ',SG.GROUP_NAME) AS ASSET_ITEM,SPD.QUANTITY, SPD.UNIT_PRICE AS 'AMOUNT1',
                                                            (SPD.QUANTITY * SPD.UNIT_PRICE) AS AMOUNT, '' AS TRANS_MODE, '' AS 'DRAWN_ON', 
                                                            '' AS 'CHEQUE', SMP.PURCHASE_DATE AS VOUCHER_DATE,SMP.VENDOR_ID AS 'DONOR_ID',
                                                            SMP.NAME_ADDRESS AS 'NAME_ADDRESS','' AS 'ADDRESS',  MD.PHONE,  MP.PROJECT_CODE,
                                                            '' AS 'SEQUENCE_NO', '' AS 'LEDGER_NAME', 'DR' AS 'AMOUNT_TRANS_TYPE',SMP.NARRATION,
                                                             CASE
                                                                                  WHEN ML.GROUP_ID = 12 THEN
                                                                                    CONCAT(MBA.ACCOUNT_NUMBER, ' - ')
                                                                                  ELSE
                                                                                      CASE
                                                                                        WHEN ML.GROUP_ID = 13 THEN
                                                                                         'CASH'
                                                                                   END
                                                                                END AS 'TRANS_MODE'
                                                            FROM STOCK_MASTER_PURCHASE SMP
                                                            INNER JOIN STOCK_PURCHASE_DETAILS SPD
                                                            ON SMP.PURCHASE_ID = SPD.PURCHASE_ID
                                                            LEFT JOIN STOCK_ITEM SI
                                                            ON SI.ITEM_ID = SPD.ITEM_ID
                                                            LEFT JOIN MASTER_DONAUD MD
                                                            ON SMP.VENDOR_ID = MD.DONAUD_ID
                                                            LEFT JOIN MASTER_PROJECT MP
                                                            ON MP.PROJECT_ID = SMP.PROJECT_ID
                                                            LEFT JOIN MASTER_LEDGER ML
                                                            ON ML.LEDGER_ID = SMP.LEDGER_ID AND ML.GROUP_ID IN (12, 13)
                                                            LEFT JOIN MASTER_BANK_ACCOUNT MBA
                                                            ON ML.LEDGER_ID = MBA.LEDGER_ID
                                                            LEFT JOIN STOCK_GROUP SG
                                                            ON SG.GROUP_ID = SI.GROUP_ID
                                                            WHERE SMP.PURCHASE_ID = ?PURCHASE_ID;";
                        break;
                    }
                case ReportSQLCommand.CashBankVoucher.FetchcashBankContraByVoucher:
                    {
                        query = "SELECT VMT.VOUCHER_ID,\n" +
                                "       VMT.VOUCHER_NO,\n" +
                                "       CASE\n" +
                                "         WHEN T.TRANS_MODE = 'CASH' THEN\n" +
                                "          T.TRANS_MODE\n" +
                                "         ELSE\n" +
                                "          T.CHEQUE_NO\n" +
                                "       END AS TRANS_MODE,\n" +
                                "       T.DRAWN_ON,\n" +
                                "       T.CHEQUE,\n" +
                                "       VMT.VOUCHER_DATE,\n" +
                                "       VMT.DONOR_ID,\n" +
                                "       VMT.NAME_ADDRESS,\n" +
                                "       MD.ADDRESS,\n" +
                                "       MD.PHONE,\n" +
                                "       MP.PROJECT_CODE,\n" +
                                "       VT.SEQUENCE_NO,\n" +
                                "       ML.LEDGER_NAME AS LEDGER_NAME,\n" +
                                "       IF((vmt.VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') OR\n" +
                                "          (vmt.VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'),\n" +
                                "          -IFNULL(VT.AMOUNT, 0),\n" +
                                "          IFNULL(VT.AMOUNT, 0)) AS AMOUNT,\n" +
                                "       VT.TRANS_MODE AS AMOUNT_TRANS_TYPE,\n" +
                                "       VMT.NARRATION\n" +
                                "  FROM VOUCHER_MASTER_TRANS VMT\n" +
                                "  LEFT JOIN MASTER_DONAUD MD\n" +
                                "    ON VMT.DONOR_ID = MD.DONAUD_ID\n" +
                                "  LEFT JOIN VOUCHER_TRANS VT\n" +
                                "    ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "  LEFT JOIN MASTER_LEDGER ML\n" +
                                "    ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                "  LEFT JOIN MASTER_PROJECT MP\n" +
                                "    ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                                " INNER JOIN (SELECT VMT.VOUCHER_ID,\n" +
                                "                    VT.MATERIALIZED_ON AS DRAWN_ON,\n" +
                                "                    VT.CHEQUE_NO AS CHEQUE,\n" +
                                "                    CONCAT(CONCAT(MBA.ACCOUNT_NUMBER, ' - '), VT.CHEQUE_NO) AS CHEQUE_NO,\n" +
                                "                    CASE\n" +
                                "                      WHEN ML.GROUP_ID = 12 AND VT.TRANS_MODE = 'CR' THEN\n" +
                                "                       'BANK'\n" +
                                "                      ELSE\n" +
                                "                       CASE\n" +
                                "                         WHEN ML.GROUP_ID = 12 AND VT.TRANS_MODE = 'DR' THEN\n" +
                                "                          'BANK'\n" +
                                "                         ELSE\n" +
                                "                          CASE\n" +
                                "                            WHEN ML.GROUP_ID = 13 AND VT.TRANS_MODE = 'CR' THEN\n" +
                                "                             'CASH'\n" +
                                "                            ELSE\n" +
                                "                             CASE\n" +
                                "                               WHEN ML.GROUP_ID = 13 AND VT.TRANS_MODE = 'DR' THEN\n" +
                                "                                'CASH'\n" +
                                "                             END\n" +
                                "                          END\n" +
                                "                       END\n" +
                                "                    END AS 'TRANS_MODE'\n" +
                                "               FROM VOUCHER_MASTER_TRANS VMT\n" +
                                "               LEFT JOIN VOUCHER_TRANS VT\n" +
                                "                 ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "               LEFT JOIN MASTER_LEDGER ML\n" +
                                "                 ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                "             -- LEFT JOIN MASTER_PROJECT MP\n" +
                                "             -- ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                                "               LEFT JOIN MASTER_BANK_ACCOUNT MBA\n" +
                                "                 ON ML.LEDGER_ID = MBA.LEDGER_ID\n" +
                                "              WHERE VMT.VOUCHER_ID IN (?VOUCHER_ID)\n" +
                                "                AND GROUP_ID IN (12, 13)\n" +
                                "              ORDER BY TRANS_MODE) AS T\n" +
                                "    ON VT.VOUCHER_ID = T.VOUCHER_ID\n" +
                                " WHERE VMT.VOUCHER_ID IN (?VOUCHER_ID) AND VMT.VOUCHER_TYPE = 'CN' AND VT.TRANS_MODE = 'CR'\n" +
                            //"   AND GROUP_ID NOT IN (12, 13)\n" +
                                " GROUP BY VMT.VOUCHER_DATE, VMT.VOUCHER_ID, VT.SEQUENCE_NO\n" +
                                " ORDER BY VMT.VOUCHER_DATE,SEQUENCE_NO, voucher_no ASC;";  //  we changed squence No order in Voucher Screen 29.09.2017
                        break;
                    }
                #endregion

                #region JournalByVoucher
                case ReportSQLCommand.CashBankVoucher.FetchJournalByVoucher:
                    {
                        query = "SELECT VMT.VOUCHER_ID,VMT.VOUCHER_NO,DATE(VMT.VOUCHER_DATE) AS VOUCHER_DATE,VMT.NAME_ADDRESS,MP.PROJECT_CODE, " +
                            "VT.SEQUENCE_NO, ML.LEDGER_ID,  ML.LEDGER_NAME AS LEDGER_NAME, " +
                            "CASE WHEN VT.TRANS_MODE ='CR' THEN  VT.AMOUNT ELSE 0 END AS CREDIT, " +
                            "CASE WHEN VT.TRANS_MODE ='DR' THEN  VT.AMOUNT ELSE 0 END AS DEBIT, " +
                            "IFNULL(MC.CURRENCY_SYMBOL, '') AS CURRENCY_SYMBOL, IFNULL(MC.CURRENCY_NAME, '') AS CURRENCY_NAME, \n" +
                            //"VMT.NARRATION " + //On 06/06/2017, to show individual jounral narration or general narration
                            //"IF(IFNULL(VT.NARRATION,'') ='', '',  CONCAT(VT.NARRATION, IF(VMT.VOUCHER_SUB_TYPE='FD', CONCAT(' FD: ', FD.FD_ACCOUNT_NUMBER), '') )) AS NARRATION,\n" +
                            "CONCAT(VT.NARRATION, IF(VMT.VOUCHER_SUB_TYPE='FD', CONCAT(' FD: ', FD.FD_ACCOUNT_NUMBER), '')) AS NARRATION,\n" +
                            "CONCAT(VMT.NARRATION, IF(VMT.VOUCHER_SUB_TYPE='FD', CONCAT(' FD: ', FD.FD_ACCOUNT_NUMBER), '')) AS GENERAL_NARRATION\n" +
                            "FROM VOUCHER_MASTER_TRANS VMT " +
                            "LEFT JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID=VMT.VOUCHER_ID " +
                            "LEFT JOIN MASTER_COUNTRY MC ON MC.COUNTRY_ID = VMT.CURRENCY_COUNTRY_ID " +
                            "LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID=VT.LEDGER_ID " +
                            "LEFT JOIN MASTER_PROJECT MP ON MP.PROJECT_ID=VMT.PROJECT_ID " +
                            " LEFT JOIN (SELECT FDA.FD_ACCOUNT_ID, 0 AS VOUCHER_ID, RNO.FD_INTEREST_VOUCHER_ID, RNO.FD_VOUCHER_ID,\n" +
                            "          RNO.RENEWAL_DATE, IFNULL(RNO.RECEIPT_NO,'') AS RECEIPT_NO,\n" +
                            "          CONCAT(FDA.FD_ACCOUNT_NUMBER,  IF(IFNULL(RNO.RECEIPT_NO,'')='', '', CONCAT(' (R: ', IFNULL(RNO.RECEIPT_NO,''),')')) ) AS FD_ACCOUNT_NUMBER\n" +
                            "          FROM FD_ACCOUNT AS FDA\n" +
                            "          INNER JOIN (SELECT FR.FD_ACCOUNT_ID, FR.FD_INTEREST_VOUCHER_ID, FR.FD_VOUCHER_ID,FR.RENEWAL_DATE, \n" +
                            "                   SUBSTRING_INDEX(GROUP_CONCAT(FR1.RECEIPT_NO ORDER BY FR1.RENEWAL_DATE DESC SEPARATOR '|'), '|', 1) AS RECEIPT_NO \n" +
                            "                   FROM FD_RENEWAL AS FR\n" +
                            "                   LEFT JOIN (SELECT FR1.FD_ACCOUNT_ID, FR1.RENEWAL_DATE AS RENEWAL_DATE, IFNULL(FR1.RECEIPT_NO, '') AS RECEIPT_NO\n" +
                            "                       FROM FD_RENEWAL AS FR1\n" +
                            "                       INNER JOIN FD_ACCOUNT FD1 ON FD1.FD_ACCOUNT_ID = FR1.FD_ACCOUNT_ID\n" +
                            "                       WHERE FD1.STATUS =1  AND FR1.STATUS =1 AND FR1.FD_TYPE = 'RN' AND FR1.RENEWAL_DATE<=?DATE_TO) AS FR1\n" + //AND FD1.PROJECT_ID IN (?PROJECT_ID)
                            "                   ON FR1.FD_ACCOUNT_ID= FR.FD_ACCOUNT_ID AND FR1.RENEWAL_DATE<FR.RENEWAL_DATE\n" +
                            "                   WHERE STATUS =1 GROUP BY FR.FD_ACCOUNT_ID, FR.FD_RENEWAL_ID) AS RNO\n" + //FR1.RENEWAL_DATE
                            "           ON RNO.FD_ACCOUNT_ID = FDA.FD_ACCOUNT_ID WHERE FDA.STATUS=1 \n" + //AND FDA.PROJECT_ID IN (?PROJECT_ID)
                            "           UNION ALL SELECT FDA.FD_ACCOUNT_ID, FDA.FD_VOUCHER_ID, 0 AS FD_INTEREST_VOUCHER_ID, 0 AS FD_VOUCHER_ID, FDA.INVESTMENT_DATE, '' AS RECEIPT_NO, \n" +
                            "           FDA.FD_ACCOUNT_NUMBER FROM FD_ACCOUNT AS FDA WHERE FDA.STATUS=1 ) AS FD\n" + //AND FDA.PROJECT_ID IN (?PROJECT_ID)
                            "    ON FD.VOUCHER_ID = VMT.VOUCHER_ID OR FD.FD_INTEREST_VOUCHER_ID = VMT.VOUCHER_ID OR FD.FD_VOUCHER_ID = VMT.VOUCHER_ID\n" +
                            "WHERE VMT.VOUCHER_ID IN(?VOUCHER_ID) ORDER BY VMT.VOUCHER_DATE ASC";
                        break;
                    }
                case ReportSQLCommand.CashBankVoucher.FetchJournalContraByVoucher:
                    {
                        query = "SELECT VMT.VOUCHER_ID,VMT.VOUCHER_NO,DATE(VMT.VOUCHER_DATE) AS VOUCHER_DATE,VMT.NAME_ADDRESS,MP.PROJECT_CODE,\n" +
                             "VT.SEQUENCE_NO,\n" +
                             "IF(ML.GROUP_ID = 12, CONCAT(ML.LEDGER_NAME, CONCAT(' - ' , CONCAT(MB.BANK, CONCAT(' - ', MB.BRANCH)))) , \n" +
                             "ML.LEDGER_NAME) AS LEDGER_NAME, \n" +
                             "CASE WHEN VT.TRANS_MODE ='CR' THEN  VT.AMOUNT ELSE 0 END AS CREDIT,\n" +
                             "CASE WHEN VT.TRANS_MODE ='DR' THEN  VT.AMOUNT ELSE 0 END AS DEBIT, \n" +
                             "IFNULL(MC.CURRENCY_SYMBOL, '') AS CURRENCY_SYMBOL, IFNULL(MC.CURRENCY_NAME, '') AS CURRENCY_NAME, \n" +
                            //"VMT.NARRATION " + //On 06/06/2017, to show individual jounral narration or general narration
                             "IF(IFNULL(VT.NARRATION,'') ='', '',  CONCAT(VT.NARRATION, IF(VMT.VOUCHER_SUB_TYPE='FD', CONCAT(' FD: ', FD.FD_ACCOUNT_NUMBER), '') )) AS NARRATION,\n" +
                             "CONCAT(VMT.NARRATION, IF(VMT.VOUCHER_SUB_TYPE='FD', CONCAT(' FD: ', FD.FD_ACCOUNT_NUMBER), '') ) AS GENERAL_NARRATION\n" +
                             "FROM VOUCHER_MASTER_TRANS VMT " +
                             "LEFT JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID=VMT.VOUCHER_ID " +
                             "LEFT JOIN MASTER_COUNTRY MC ON MC.COUNTRY_ID = VMT.CURRENCY_COUNTRY_ID " +
                             "LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID=VT.LEDGER_ID " +
                             "LEFT JOIN MASTER_BANK_ACCOUNT BA ON ML.LEDGER_ID = BA.LEDGER_ID\n" +
                             "LEFT JOIN MASTER_BANK MB ON BA.BANK_ID = MB.BANK_ID\n" +
                             "LEFT JOIN MASTER_PROJECT MP ON MP.PROJECT_ID=VMT.PROJECT_ID\n" +
                             "LEFT JOIN (SELECT FDA.FD_ACCOUNT_ID, 0 AS VOUCHER_ID, RNO.FD_INTEREST_VOUCHER_ID, RNO.FD_VOUCHER_ID,\n" +
                             "          RNO.RENEWAL_DATE, IFNULL(RNO.RECEIPT_NO,'') AS RECEIPT_NO,\n" +
                             "          CONCAT(FDA.FD_ACCOUNT_NUMBER,  IF(IFNULL(RNO.RECEIPT_NO,'')='', '', CONCAT(' (R: ', IFNULL(RNO.RECEIPT_NO,''),')')) ) AS FD_ACCOUNT_NUMBER\n" +
                             "          FROM FD_ACCOUNT AS FDA\n" +
                             "          INNER JOIN (SELECT FR.FD_ACCOUNT_ID, FR.FD_INTEREST_VOUCHER_ID, FR.FD_VOUCHER_ID,FR.RENEWAL_DATE, \n" +
                             "                   SUBSTRING_INDEX(GROUP_CONCAT(FR1.RECEIPT_NO ORDER BY FR1.RENEWAL_DATE DESC SEPARATOR '|'), '|', 1) AS RECEIPT_NO \n" +
                             "                   FROM FD_RENEWAL AS FR\n" +
                             "                   LEFT JOIN (SELECT FR1.FD_ACCOUNT_ID, FR1.RENEWAL_DATE AS RENEWAL_DATE, IFNULL(FR1.RECEIPT_NO, '') AS RECEIPT_NO\n" +
                             "                       FROM FD_RENEWAL AS FR1\n" +
                             "                       INNER JOIN FD_ACCOUNT FD1 ON FD1.FD_ACCOUNT_ID = FR1.FD_ACCOUNT_ID\n" +
                             "                       WHERE FD1.STATUS =1 AND FR1.STATUS =1 AND FR1.FD_TYPE = 'RN' AND FR1.RENEWAL_DATE<=?DATE_TO) AS FR1\n" + //AND FD1.PROJECT_ID IN (?PROJECT_ID) 
                             "                   ON FR1.FD_ACCOUNT_ID= FR.FD_ACCOUNT_ID AND FR1.RENEWAL_DATE<FR.RENEWAL_DATE\n" +
                             "                   WHERE STATUS =1 GROUP BY FR.FD_ACCOUNT_ID, FR.FD_RENEWAL_ID) AS RNO\n" + //FR1.RENEWAL_DATE
                             "           ON RNO.FD_ACCOUNT_ID = FDA.FD_ACCOUNT_ID WHERE FDA.STATUS=1 \n" + //AND FDA.PROJECT_ID IN (?PROJECT_ID)
                             "           UNION ALL SELECT FDA.FD_ACCOUNT_ID, FDA.FD_VOUCHER_ID, 0 AS FD_INTEREST_VOUCHER_ID, 0 AS FD_VOUCHER_ID, FDA.INVESTMENT_DATE, '' AS RECEIPT_NO, \n" +
                             "           FDA.FD_ACCOUNT_NUMBER FROM FD_ACCOUNT AS FDA WHERE FDA.STATUS=1 ) AS FD\n" + //AND FDA.PROJECT_ID IN (?PROJECT_ID)
                             "    ON FD.VOUCHER_ID = VMT.VOUCHER_ID OR FD.FD_INTEREST_VOUCHER_ID = VMT.VOUCHER_ID OR FD.FD_VOUCHER_ID = VMT.VOUCHER_ID\n" +
                             "WHERE VMT.VOUCHER_ID IN(?VOUCHER_ID) ORDER BY VMT.VOUCHER_DATE, VT.SEQUENCE_NO";
                        break;
                    }
                #endregion

                #region CashBankReceiptPaymentDetails
                case ReportSQLCommand.CashBankVoucher.FetchCashBankReceiptPaymentDetails:
                    {
                        query = "SELECT VMT.VOUCHER_ID,\n" +
                                "     CASE WHEN ML.GROUP_ID=12 THEN \n" + // CONCAT(CONCAT(ML.LEDGER_NAME, ' ( ',CONCAT(MB.BANK,' - '),MB.BRANCH,' ) ',' - '),VT.CHEQUE_NO) \n" +
                                "     CONCAT(ML.LEDGER_NAME,' - ',MB.BANK,' , ',MB.BRANCH, IF(VT.CHEQUE_NO='','',CONCAT('(Cheque/DD/Ref.No.: ',VT.CHEQUE_NO, ')'))) \n " +
                                "        ELSE LEDGER_NAME \n" +
                                "      END AS LEDGER_NAME,\n" +
                                "    --  IF((vmt.VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') OR\n" +
                                "       --   (vmt.VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'),\n" +
                                "      --  -IFNULL(VT.AMOUNT, 0),\n" +
                                "      --    IFNULL(VT.AMOUNT, 0)) AS AMOUNT,\n" +
                                "   --    CASE\n" +
                                "    --     WHEN VT.TRANS_MODE = 'CR' THEN\n" +
                                "    --      -VT.AMOUNT\n" +
                                "   --      ELSE\n" +
                                "    --      VT.AMOUNT\n" +
                                "    --   END AS AMOUNT,\n" +
                                "   --   CONCAT(CONCAT(VT.AMOUNT,' '),VT.TRANS_MODE)  AS AMOUNT, \n" + // Modified  by Praveen 02.03.2015
                                "     VT.AMOUNT  AS AMOUNT, \n" +
                                "       CASE\n" +
                                "         WHEN ML.GROUP_ID = 12 AND VT.TRANS_MODE = 'CR' THEN\n" +
                                "          'by Cheque/Draft.No'\n" +
                                "         ELSE\n" +
                                "          CASE\n" +
                                "            WHEN ML.GROUP_ID = 12 AND VT.TRANS_MODE = 'DR' THEN\n" +
                                "             'by Cheque/Draft.No'\n" +
                                "            ELSE\n" +
                                "             CASE\n" +
                                "               WHEN ML.GROUP_ID = 13 AND VT.TRANS_MODE = 'CR' THEN\n" +
                                "                'by Cash'\n" +
                                "               ELSE\n" +
                                "                CASE\n" +
                                "                  WHEN ML.GROUP_ID = 13 AND VT.TRANS_MODE = 'DR' THEN\n" +
                                "                   'by Cash'\n" +
                                "                END\n" +
                                "             END\n" +
                                "          END\n" +
                                "       END AS 'TRANS_MODE', VT.CHEQUE_NO,\n" +
                                "       IF(VT.CHEQUE_REF_DATE='0001-01-01 00;00:00', NULL,VT.CHEQUE_REF_DATE) AS CHEQUE_REF_DATE, VT.CHEQUE_REF_BANKNAME, VT.CHEQUE_REF_BRANCH ,VT.FUND_TRANSFER_TYPE_NAME\n" +
                                "  FROM VOUCHER_MASTER_TRANS VMT\n" +
                                "  LEFT JOIN VOUCHER_TRANS VT\n" +
                                "    ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "  LEFT JOIN MASTER_LEDGER ML\n" +
                                "    ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                "  LEFT JOIN MASTER_BANK_ACCOUNT MBA\n" +
                                "    ON ML.LEDGER_ID = MBA.LEDGER_ID\n" +
                                "  LEFT JOIN MASTER_BANK MB\n" +
                                "    ON MB.BANK_ID=MBA.BANK_ID\n" +
                                " WHERE VMT.VOUCHER_ID IN (?VOUCHER_ID)\n" +
                                "   AND GROUP_ID IN (12, 13)\n" +
                                " ORDER BY GROUP_ID DESC";

                        break;
                    }
                case ReportSQLCommand.CashBankVoucher.FetchCashBankStockDetails:
                    {
                        query = @"SELECT SMP.PURCHASE_ID,
                                     CASE WHEN ML.GROUP_ID=12 THEN
                                     CONCAT(ML.LEDGER_NAME,' - ',MB.BANK,' , ',MB.BRANCH)
                                         ELSE LEDGER_NAME
                                      END AS LEDGER_NAME,
                                     SMP.NET_PAY AS AMOUNT
                                  FROM STOCK_MASTER_PURCHASE AS SMP
                                  LEFT JOIN MASTER_LEDGER ML
                                    ON ML.LEDGER_ID = SMP.LEDGER_ID
                                  LEFT JOIN MASTER_BANK_ACCOUNT MBA
                                    ON ML.LEDGER_ID = MBA.LEDGER_ID
                                  LEFT JOIN MASTER_BANK MB
                                    ON MB.BANK_ID=MBA.BANK_ID
                                 WHERE SMP.PURCHASE_ID IN (?PURCHASE_ID)
                                   AND GROUP_ID IN (12, 13)
                                 ORDER BY GROUP_ID DESC";
                        break;
                    }
                case ReportSQLCommand.CashBankVoucher.FetchCashBankContraDetails:
                    {
                        query = "SELECT VMT.VOUCHER_ID,\n" +
                                "     CASE WHEN ML.GROUP_ID=12 THEN \n" + // CONCAT(CONCAT(ML.LEDGER_NAME, ' ( ',CONCAT(MB.BANK,' - '),MB.BRANCH,' ) ',' - '),VT.CHEQUE_NO) \n" +
                                "     CONCAT(ML.LEDGER_NAME,' - ',MB.BANK,' , ',MB.BRANCH, IF(VT.CHEQUE_NO='','',CONCAT('(Cheque/DD/Ref.No.: ',VT.CHEQUE_NO, ')'))) \n " +
                                "        ELSE LEDGER_NAME \n" +
                                "      END AS LEDGER_NAME,\n" +
                                "    --  IF((vmt.VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') OR\n" +
                                "       --   (vmt.VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'),\n" +
                                "      --  -IFNULL(VT.AMOUNT, 0),\n" +
                                "      --    IFNULL(VT.AMOUNT, 0)) AS AMOUNT,\n" +
                                "   --    CASE\n" +
                                "    --     WHEN VT.TRANS_MODE = 'CR' THEN\n" +
                                "    --      -VT.AMOUNT\n" +
                                "   --      ELSE\n" +
                                "    --      VT.AMOUNT\n" +
                                "    --   END AS AMOUNT,\n" +
                                "   --   CONCAT(CONCAT(VT.AMOUNT,' '),VT.TRANS_MODE)  AS AMOUNT, \n" + // Modified  by Praveen 02.03.2015
                                "     VT.AMOUNT  AS AMOUNT, \n" +
                                "       CASE\n" +
                                "         WHEN ML.GROUP_ID = 12 AND VT.TRANS_MODE = 'CR' THEN\n" +
                                "          'by Cheque/Draft.No'\n" +
                                "         ELSE\n" +
                                "          CASE\n" +
                                "            WHEN ML.GROUP_ID = 12 AND VT.TRANS_MODE = 'DR' THEN\n" +
                                "             'by Cheque/Draft.No'\n" +
                                "            ELSE\n" +
                                "             CASE\n" +
                                "               WHEN ML.GROUP_ID = 13 AND VT.TRANS_MODE = 'CR' THEN\n" +
                                "                'by Cash'\n" +
                                "               ELSE\n" +
                                "                CASE\n" +
                                "                  WHEN ML.GROUP_ID = 13 AND VT.TRANS_MODE = 'DR' THEN\n" +
                                "                   'by Cash'\n" +
                                "                END\n" +
                                "             END\n" +
                                "          END\n" +
                                "       END AS 'TRANS_MODE', VT.CHEQUE_NO,\n" +
                                "        VT.CHEQUE_REF_DATE, VT.CHEQUE_REF_BANKNAME, VT.CHEQUE_REF_BRANCH\n" +
                                "  FROM VOUCHER_MASTER_TRANS VMT\n" +
                                "  LEFT JOIN VOUCHER_TRANS VT\n" +
                                "    ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "  LEFT JOIN MASTER_LEDGER ML\n" +
                                "    ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                "  LEFT JOIN MASTER_BANK_ACCOUNT MBA\n" +
                                "    ON ML.LEDGER_ID = MBA.LEDGER_ID\n" +
                                "  LEFT JOIN MASTER_BANK MB\n" +
                                "    ON MB.BANK_ID=MBA.BANK_ID\n" +
                                " WHERE VMT.VOUCHER_ID IN (?VOUCHER_ID) AND VMT.VOUCHER_TYPE = 'CN' AND VT.TRANS_MODE = 'DR'\n" +
                            //"   AND GROUP_ID IN (12, 13)\n" +
                                " ORDER BY GROUP_ID DESC";

                        break;
                    }
                #endregion

                case ReportSQLCommand.CashBankVoucher.FetchChequePrintingSetting:
                    {
                        query = "SELECT BANK_ID, SETTING_NAME, SETTING_VALUE FROM MASTER_SETTING_CHEQUE_PRINTING WHERE BANK_ID=?BANK_ID;";
                        break;
                    }
                case ReportSQLCommand.CashBankVoucher.FetchChequePrinting:
                    {
                        //query = "SELECT BVA.VOUCHER_ID, VMT.VOUCHER_NO, VMT.VOUCHER_DATE, BVA.BANK_ID, BVA.BANK_LEDGER, BVP.LEDGER_NAME as PARTY_LEDGER, BVA.AMOUNT FROM VOUCHER_MASTER_TRANS VMT\n" +
                        //        "INNER JOIN (SELECT VT.VOUCHER_ID, MB.BANK_ID, CONCAT(ML.LEDGER_NAME, CONCAT(' - ' , CONCAT(MB.BANK, CONCAT(' - ', MB.BRANCH)))) AS BANK_LEDGER, VT.AMOUNT FROM VOUCHER_TRANS VT\n" +
                        //        "INNER JOIN MASTER_LEDGER ML ON  ML.LEDGER_ID = VT.LEDGER_ID\n" +
                        //        "INNER JOIN master_bank_ACCOUNT ba\n" +
                        //        "ON ML.LEDGER_ID = BA.LEDGER_ID\n" +
                        //        "INNER JOIN MASTER_BANK MB\n" +
                        //        "ON BA.BANK_ID = MB.BANK_ID WHERE VT.TRANS_MODE ='CR' AND ML.GROUP_ID=12) AS BVA\n" +
                        //        "ON BVA.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                        //        "INNER JOIN (SELECT VT.VOUCHER_ID, ML.LEDGER_NAME FROM VOUCHER_TRANS VT\n" +
                        //        "INNER JOIN MASTER_LEDGER ML ON  ML.LEDGER_ID = VT.LEDGER_ID WHERE VT.TRANS_MODE ='DR') AS BVP\n" +
                        //        "ON BVP.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                        //        "WHERE VMT.VOUCHER_TYPE = 'PY' AND VMT.STATUS= 1 {AND VMT.VOUCHER_ID = ?VOUCHER_ID}\n" +
                        //        "ORDER BY VMT.VOUCHER_DATE, VMT.VOUCHER_NO ASC";

                        query = "SELECT VT.VOUCHER_ID, VT.LEDGER_ID, VMT.VOUCHER_NO, VMT.VOUCHER_DATE, BVP.LEDGER_NAME as PARTY_LEDGER, VMT.NAME_ADDRESS,\n" +
                               "CONCAT(ML.LEDGER_NAME, CONCAT(' - ' , CONCAT(MB.BANK, CONCAT(' - ', MB.BRANCH)))) AS BANK_LEDGER,\n" +
                               "VT.AMOUNT, MB.BANK_ID\n" +
                               "FROM VOUCHER_TRANS VT\n" +
                               "INNER JOIN MASTER_LEDGER ML ON  ML.LEDGER_ID = VT.LEDGER_ID INNER JOIN master_bank_ACCOUNT BA ON ML.LEDGER_ID = BA.LEDGER_ID\n" +
                               "INNER JOIN MASTER_BANK MB ON BA.BANK_ID = MB.BANK_ID\n" +
                               "INNER JOIN VOUCHER_MASTER_TRANS VMT ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                               "INNER JOIN (SELECT VT.VOUCHER_ID, ML.LEDGER_NAME FROM VOUCHER_TRANS VT\n" +
                               "INNER JOIN MASTER_LEDGER ML ON  ML.LEDGER_ID = VT.LEDGER_ID WHERE VT.TRANS_MODE ='DR' AND VT.VOUCHER_ID = ?VOUCHER_ID\n" +
                               "ORDER BY VT.SEQUENCE_NO ASC LIMIT 1) AS BVP\n" +
                               "ON BVP.VOUCHER_ID = VT.VOUCHER_ID\n" +
                               "WHERE VT.TRANS_MODE ='CR' AND VMT.VOUCHER_ID = ?VOUCHER_ID\n" +
                               "AND ML.GROUP_ID = 12 AND VMT.VOUCHER_TYPE IN ('PY', 'CN') AND VMT.STATUS= 1\n" +
                               "ORDER BY VMT.VOUCHER_DATE, VMT.VOUCHER_NO ASC";
                        break;
                    }
            }
            return query;
        }
    }


    public class ReportForeginContribution
    {
        public string GetReportSQL(ReportSQLCommand.ForeginContribution queryId)
        {
            string query = string.Empty;
            switch (queryId)
            {
                #region FC Country
                case ReportSQLCommand.ForeginContribution.FCCountry:
                    {
                        //    query = "SELECT MC.COUNTRY, T.AMOUNT,@a:=@a+1 SORT_ID,\n" +
                        //"           MC.COUNTRY_ID\n" +
                        //"           FROM (SELECT VOUCHER_ID,\n" +
                        //"               VOUCHER_DATE,\n" +
                        //"               CURRENCY_COUNTRY_ID,\n" +
                        //"               SUM(ACTUAL_AMOUNT) AS AMOUNT\n" +
                        //"           FROM VOUCHER_MASTER_TRANS\n" +
                        //"           WHERE DONOR_ID > 0\n" +
                        //"           AND STATUS = 1\n" +
                        //"           AND PROJECT_ID IN(?PROJECT_ID)\n" +
                        //"           AND VOUCHER_TYPE = 'RC'\n" +
                        //"           AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO \n" +
                        //"           GROUP BY CURRENCY_COUNTRY_ID) AS T\n" +
                        //"           JOIN MASTER_COUNTRY AS MC\n" +
                        //"           ON T.CURRENCY_COUNTRY_ID = MC.COUNTRY_ID , (SELECT @a:= 0) AS a";

                        query = "SELECT MC.COUNTRY, IFNULL(T.AMOUNT,0) AS AMOUNT,@a:=@a+1 SORT_ID,\n" +
                                  "           MC.COUNTRY_ID\n" +
                                  "           FROM MASTER_COUNTRY AS MC \n" +
                                  "         LEFT JOIN (SELECT VOUCHER_ID,\n" +
                                  "               VOUCHER_DATE,\n" +
                                  "               CURRENCY_COUNTRY_ID,\n" +
                                  "               SUM(ACTUAL_AMOUNT) AS AMOUNT\n" +
                                  "           FROM VOUCHER_MASTER_TRANS\n" +
                                  "           WHERE DONOR_ID > 0\n" +
                                  "           AND STATUS = 1\n" +
                                  "           AND PROJECT_ID IN(?PROJECT_ID)\n" +
                                  "           AND VOUCHER_TYPE = 'RC'\n" +
                                  "           AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO \n" +
                                  "           GROUP BY CURRENCY_COUNTRY_ID) AS T\n" +
                                  "           ON T.CURRENCY_COUNTRY_ID = MC.COUNTRY_ID , (SELECT @a:= 0) AS a";

                        break;

                    }
                #endregion

                #region FC Drill Down Report
                case ReportSQLCommand.ForeginContribution.FCDrillDownReport:
                    {
                        query = "SELECT DATE(VMT.VOUCHER_DATE) AS RECEIPT_DATE,VMT.VOUCHER_ID,\n" +
                        "       MCH.CONTRIBUTION_ID, VMT.VOUCHER_SUB_TYPE, '" + DrillDownType.LEDGER_CASHBANK_VOUCHER + "' AS PARTICULAR_TYPE,\n" +
                        "       MC.COUNTRY_ID, MD.DONAUD_ID, MCH.FC_PURPOSE AS PURPOSE, MC.COUNTRY, MD.NAME AS DONOR,\n" +
                        "       CASE\n" +
                        "         WHEN MD.TYPE = 1 THEN\n" +
                        "          'Institutional'\n" +
                        "         ELSE\n" +
                        "          CASE\n" +
                        "            WHEN MD.TYPE = 2 THEN\n" +
                        "             'Individual'\n" +
                        "          END\n" +
                        "       END AS TYPE, SUM(ACTUAL_AMOUNT) AS AMOUNT,\n" +
                        "       MCE.CURRENCY_NAME, VMT.EXCHANGE_RATE, VMT.CONTRIBUTION_AMOUNT\n" +
                        "  FROM VOUCHER_MASTER_TRANS VMT\n" +
                        "  INNER JOIN MASTER_CONTRIBUTION_HEAD MCH ON MCH.CONTRIBUTION_ID = VMT.PURPOSE_ID\n" +
                        "  INNER JOIN MASTER_DONAUD MD ON MD.DONAUD_ID = VMT.DONOR_ID\n" +
                        "  LEFT JOIN MASTER_COUNTRY MC ON MC.COUNTRY_ID = MD.COUNTRY_ID\n" +
                        "  LEFT JOIN MASTER_COUNTRY MCE ON MCE.COUNTRY_ID = VMT.EXCHANGE_COUNTRY_ID\n" +
                        "  LEFT JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                        "  LEFT JOIN MASTER_DIVISION MDI ON MDI.DIVISION_ID = MP.DIVISION_ID\n" +
                        " WHERE VMT.STATUS = 1\n" +
                        "  { AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO}\n" +
                        "  { AND VMT.VOUCHER_DATE = ?DATE_AS_ON}\n" +
                        "  { AND MCH.CONTRIBUTION_ID IN (?CONTRIBUTION_ID)}\n" +
                        "  { AND MC.COUNTRY_ID IN (?COUNTRY_ID)}\n" +
                        "  { AND MD.DONAUD_ID IN (?DONAUD_ID)}\n" +
                        "  { AND VMT.PROJECT_ID IN (?PROJECT_ID)}\n" +
                        " GROUP BY VMT.VOUCHER_ID ORDER BY DONOR,VOUCHER_DATE";
                        break;
                    }
                #endregion

                #region FC Purpose
                case ReportSQLCommand.ForeginContribution.FCPurpose:
                    query = "SELECT VMT.VOUCHER_DATE AS RECEIPT_DATE,\n" +
                            " MCH.CONTRIBUTION_ID,MC.COUNTRY_ID,MD.DONAUD_ID,\n" +
                            " MCH.FC_PURPOSE AS PURPOSE, MC.COUNTRY, MD.NAME AS DONOR,\n" +
                            " CASE WHEN MD.TYPE=1 THEN 'Institutional' ELSE \n" +
                            " CASE WHEN MD.TYPE=2 THEN 'Individual' END END AS TYPE, MCE.CURRENCY_NAME, VMT.EXCHANGE_RATE, \n" +
                            " SUM(VMT.CONTRIBUTION_AMOUNT) AS CONTRIBUTION_AMOUNT, SUM(ACTUAL_AMOUNT) AS AMOUNT\n" +
                            " FROM VOUCHER_MASTER_TRANS VMT\n" +
                            " INNER JOIN MASTER_CONTRIBUTION_HEAD MCH ON MCH.CONTRIBUTION_ID = VMT.PURPOSE_ID\n" +
                            " INNER JOIN MASTER_DONAUD MD ON MD.DONAUD_ID = VMT.DONOR_ID\n" +
                            " LEFT JOIN MASTER_COUNTRY MC ON MC.COUNTRY_ID = MD.COUNTRY_ID\n" +
                            " LEFT JOIN MASTER_COUNTRY MCE ON MCE.COUNTRY_ID = VMT.EXCHANGE_COUNTRY_ID\n" +
                            " LEFT JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                            " LEFT JOIN MASTER_DIVISION MDI ON MDI.DIVISION_ID = MP.DIVISION_ID\n" +
                            " WHERE VMT.STATUS = 1 AND VMT.PROJECT_ID IN (?PROJECT_ID) AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                            " GROUP BY MCH.FC_PURPOSE,DONOR, VMT.VOUCHER_DATE, VMT.EXCHANGE_COUNTRY_ID, VMT.EXCHANGE_RATE";
                    break;
                case ReportSQLCommand.ForeginContribution.FCPurposeWiseContribution:
                    {
                        query = "SELECT *\n" +
                                "  FROM (SELECT VMT.VOUCHER_DATE AS RECEIPT_DATE,\n" +
                                "               MD.DONAUD_ID,\n" +
                                "               MD.NAME AS DONOR,\n" +
                                "               MD.ADDRESS,\n" +
                                "               MC.COUNTRY,\n" +
                                "               MD.PAN AS PAN_NO,\n" +
                                "               SUM(VMT.ACTUAL_AMOUNT) AS AMOUNT, MCE.CURRENCY_NAME, VMT.EXCHANGE_RATE, SUM(VMT.CONTRIBUTION_AMOUNT) AS CONTRIBUTION_AMOUNT,\n" +
                                "               VMT.STATUS,\n" +
                                "               MDI.DIVISION_ID\n" +
                                "          FROM VOUCHER_MASTER_TRANS VMT\n" +
                                "         INNER JOIN MASTER_CONTRIBUTION_HEAD MCH ON MCH.CONTRIBUTION_ID = VMT.PURPOSE_ID\n" +
                                "         INNER JOIN MASTER_DONAUD MD ON MD.DONAUD_ID = VMT.DONOR_ID\n" +
                                "         LEFT JOIN MASTER_COUNTRY MC ON MC.COUNTRY_ID = MD.COUNTRY_ID\n" +
                                "         LEFT JOIN MASTER_COUNTRY MCE ON MCE.COUNTRY_ID = VMT.EXCHANGE_COUNTRY_ID\n" +
                                "         LEFT JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                                "         LEFT JOIN MASTER_DIVISION MDI ON MDI.DIVISION_ID = MP.DIVISION_ID\n" +
                                "    WHERE VMT.STATUS = 1 AND VMT.PROJECT_ID IN(?PROJECT_ID) AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "       GROUP BY DONAUD_ID, VMT.VOUCHER_DATE, VMT.EXCHANGE_COUNTRY_ID, VMT.EXCHANGE_RATE) AS T\n" +
                                "   {WHERE AMOUNT =?DONOR_EQUALS}\n" +
                                "   {WHERE AMOUNT <>?DONOR_NOT_EQUALS}\n" +
                                "   {WHERE AMOUNT >?DONOR_GREATER_THAN}\n" +
                                "   {WHERE AMOUNT >=?DONOR_GREATER_EQUALS}\n" +
                                "   {WHERE AMOUNT <?DONOR_LEES_THAN}\n" +
                                "   {WHERE AMOUNT <=?DONOR_LEES_EQUALS}";
                        break;
                    }
                #endregion

                #region FcDonorInstitutional
                case ReportSQLCommand.ForeginContribution.FCDonorInstitutional:
                    {
                        query = "SELECT DATE(VMT.VOUCHER_DATE) AS DATE_AND_MONTH_OF_RECEIPTS,\n" +
                        "       MCH.FC_PURPOSE  AS 'PURPOSE',\n" +
                        "       MCH.CONTRIBUTION_ID,MC.COUNTRY_ID,MD.DONAUD_ID,\n" +
                        "       MC.COUNTRY,\n" +
                        "       MD.NAME AS 'DONOR',\n" +
                            //"       TRIM(CONCAT( \n" +
                            //"                   CAST(IF(PLACE = '', '', CONCAT(PLACE, ',')) as CHAR),\n" +
                            //"                   CAST(IF(STATE = '', '', CONCAT(STATE, ',')) as CHAR),\n" +
                            //"                   CAST(IF(ADDRESS = '', '', CONCAT(ADDRESS, ',')) as CHAR))) AS DONOR_ADDRESS,\n" +
                        "      CONCAT(MD.ADDRESS,' , ',MC.COUNTRY) AS DONOR_ADDRESS,\n" +
                        "       SUM(ACTUAL_AMOUNT) AS AMOUNT\n" +
                        "\n" +
                        "  FROM VOUCHER_MASTER_TRANS VMT\n" +
                        "\n" +
                        " INNER JOIN MASTER_CONTRIBUTION_HEAD MCH\n" +
                        "    ON MCH.CONTRIBUTION_ID = VMT.PURPOSE_ID\n" +
                        " INNER JOIN MASTER_DONAUD MD\n" +
                        "    ON MD.DONAUD_ID = VMT.DONOR_ID\n" +
                        "  LEFT JOIN MASTER_COUNTRY MC\n" +
                        "    ON MC.COUNTRY_ID = MD.COUNTRY_ID\n" +
                        "  LEFT JOIN MASTER_PROJECT MP\n" +
                        "    ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                        "  LEFT JOIN MASTER_DIVISION MDI\n" +
                        "    ON MDI.DIVISION_ID = MP.DIVISION_ID\n" +
                        "\n" +
                        " WHERE VMT.STATUS = 1\n" +
                            // "   AND MDI.DIVISION_ID = 2\n" +
                        "   AND MD.TYPE=1 AND VMT.VOUCHER_TYPE='RC' \n" +
                        "   AND VMT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND\n" +
                        "       ?DATE_TO\n" +
                        " GROUP BY MCH.FC_PURPOSE,MD.NAME,VMT.VOUCHER_DATE";
                        break;
                    }
                #endregion

                #region FcDonorIndividual
                case ReportSQLCommand.ForeginContribution.FCDonorIndividual:
                    {
                        query = "SELECT DATE(VMT.VOUCHER_DATE) AS DATE_AND_MONTH_OF_RECEIPTS,\n" +
                        "       MCH.FC_PURPOSE  AS 'PURPOSE',\n" +
                        "       MC.COUNTRY,\n" +
                        "       MCH.CONTRIBUTION_ID,MC.COUNTRY_ID,MD.DONAUD_ID,\n" +
                        "       MD.NAME AS 'DONOR',\n" +
                            //"       TRIM(CONCAT( \n" +
                            //"                   CAST(IF(PLACE = '', '', CONCAT(PLACE, ',')) as CHAR),\n" +
                            //"                   CAST(IF(STATE = '', '', CONCAT(STATE, ',')) as CHAR),\n" +
                            //"                   CAST(IF(ADDRESS = '', '', CONCAT(ADDRESS, ',')) as CHAR))) AS DONOR_ADDRESS,\n" +
                        "      CONCAT(MD.ADDRESS,' , ',MC.COUNTRY) AS DONOR_ADDRESS,\n" +
                        "       SUM(ACTUAL_AMOUNT) AS AMOUNT\n" +
                        "\n" +
                        "  FROM VOUCHER_MASTER_TRANS VMT\n" +
                        "\n" +
                        " INNER JOIN MASTER_CONTRIBUTION_HEAD MCH\n" +
                        "    ON MCH.CONTRIBUTION_ID = VMT.PURPOSE_ID\n" +
                        " INNER JOIN MASTER_DONAUD MD\n" +
                        "    ON MD.DONAUD_ID = VMT.DONOR_ID\n" +
                        "  LEFT JOIN MASTER_COUNTRY MC\n" +
                        "    ON MC.COUNTRY_ID = MD.COUNTRY_ID\n" +
                        "  LEFT JOIN MASTER_PROJECT MP\n" +
                        "    ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                        "  LEFT JOIN MASTER_DIVISION MDI\n" +
                        "    ON MDI.DIVISION_ID = MP.DIVISION_ID\n" +
                        "\n" +
                        " WHERE VMT.STATUS = 1\n" +
                            //  "   AND MDI.DIVISION_ID = 2\n"+
                        "   AND MD.TYPE=2 AND VMT.VOUCHER_TYPE='RC' \n" +
                        "   AND VMT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND\n" +
                        "       ?DATE_TO\n" +
                        " GROUP BY MCH.FC_PURPOSE, MD.NAME,VMT.VOUCHER_DATE;";      //MD.NAME;"; VMT.VOUCHER_DATE;";  // MCH.FC_PURPOSE, MD.NAME

                        break;
                    }
                #endregion

                #region ExecutiveMembers
                case ReportSQLCommand.ForeginContribution.ExecutiveMembers:
                    {
                        query = "SELECT " +
                            "EXECUTIVE_ID, " +
                            "EXECUTIVE, " +
                            "NAME, " +
                            "ROLE, " +
                            "OCCUPATION, " +
                            "PLACE, " +
                            "STATE_NAME, " +
                            "COUNTRY, " +
                            "ADDRESS, " +
                            "PIN_CODE, " +
                            "PAN_SSN, " +
                            "AADHAR_NO, " +
                            "CUSTOMERID, " +
                            "DATE_OF_APPOINTMENT, " +
                            "DATE_OF_EXIT  " +
                            //  "IMAGES, " +
                            " FROM " +
                            "MASTER_EXECUTIVE_COMMITTEE E " +
                            "INNER JOIN MASTER_COUNTRY C ON E.COUNTRY_ID=C.COUNTRY_ID " +
                            "INNER JOIN MASTER_STATE MS ON MS.STATE_ID=E.STATE_ID WHERE (DATE_OF_APPOINTMENT BETWEEN ?YEAR_FROM AND ?YEAR_TO OR DATE_OF_EXIT BETWEEN ?YEAR_FROM AND ?YEAR_TO) { AND CUSTOMERID =?CUSTOMERID } " +
                            " ORDER BY EXECUTIVE ASC";

                        break;
                    }
                case ReportSQLCommand.ForeginContribution.BankInfoDetails:
                    {
                        query = " SELECT CONCAT(mba.ACCOUNT_NUMBER) AS ACCOUNT_NO," +
                                "    '' AS ACCOUNT_TYPE," +
                                 "   mb.BANK AS BANK_NAME," +
                                  "  mb.ADDRESS AS BANK_ADDRESS," +
                                  "  BSRCODE AS BSR_CODE," +
                                  "  mb.MICRCODE AS MICR_CODE," +
                                  "  mb.IFSCCODE AS IFSC_CODE," +
                                  "  mb.BRANCH AS CITY," +
                                  "  mb.SWIFTCODE," +
                                  "  DATE_FORMAT(MBA.DATE_OPENED,'%d-%m-%Y') AS DATE_OPENED," +
                                  "  DATE_FORMAT(MBA.DATE_CLOSED,'%d-%m-%Y') AS DATE_CLOSED" +
                               " FROM" +
                                "    PROJECT_LEDGER PL" +
                                 "   INNER JOIN MASTER_LEDGER ML ON PL.LEDGER_ID = ML.LEDGER_ID" +
                                  "  LEFT JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = PL.PROJECT_ID" +
                                  "  LEFT JOIN MASTER_INSTI_PERFERENCE MIP ON MIP.CUSTOMERID = MP.CUSTOMERID" +
                                  "  INNER JOIN MASTER_BANK_ACCOUNT MBA ON MBA.LEDGER_ID = ML.LEDGER_ID" +
                                  "  INNER JOIN MASTER_BANK MB ON MBA.BANK_ID = MB.BANK_ID" +
                                " WHERE " +
                                  "  mp.PROJECT_ID IN (?PROJECT_ID)" +
                                  " { AND mip.CUSTOMERID = ?CUSTOMERID } " +
                                " GROUP BY ML.LEDGER_ID ORDER BY " +
                                  "  mb.BRANCH,MBA.ACCOUNT_NUMBER";
                        break;
                    }
                #endregion

                #region FC6
                case ReportSQLCommand.ForeginContribution.FC6Purpose:
                    {
                        //On 11/07/2024, To generate all pojects remove division id =2 
                        query = "SELECT MCH.FC_PURPOSE AS PURPOSE,MCH.CONTRIBUTION_ID,T.DONOR_ID AS DONAUD_ID,T.VOUCHER_ID,\n" +
                                "       IFNULL(SUM(T.PRE_CASH),0)  + IF(PP.TRANS_MODE='CR',-(PP.AMOUNT),PP.AMOUNT)  AS PRE_CASH,\n" +
                                "       0.0 AS PRE_KIND,\n" +
                                "       SUM(T.FIRST_AMOUNT) AS FIRST_CASH,\n" +
                                "       0.0 AS FIRST_KIND,\n" +
                                "       SUM(T.SUBSEQUENT_AMOUNT) AS SECOND_CASH,\n" +
                                "       0.0 AS SECOND_KIND,\n" +
                                "       IFNULL(SUM(T.PRE_CASH + T.FIRST_AMOUNT + T.SUBSEQUENT_AMOUNT),0) + IF(PP.TRANS_MODE='CR',-(PP.AMOUNT),PP.AMOUNT) AS UTILISED_TOTAL,\n" +
                                "       SUM(T.UTILISED_CASH) AS UTILISED_CASH,\n" +
                                "       0.0 AS UTILISED_KIND,\n" +
                                "       IFNULL(SUM(T.FIRST_AMOUNT + T.SUBSEQUENT_AMOUNT + T.PRE_CASH),0) + IF(PP.TRANS_MODE='CR',-(PP.AMOUNT),PP.AMOUNT) -\n" +
                                "       IFNULL(SUM(T.UTILISED_CASH),0) AS BALANCE_CASH,\n" +
                                "       0.0 AS BALANCE_KIND,\n" +
                                "       T.ADDRESS,\n" +
                                "       IF(IFNULL(SUM(T.PRE_CASH),0) + IF(PP.TRANS_MODE='CR',-(PP.AMOUNT),PP.AMOUNT) > 0 or\n" +
                                "          SUM(T.FIRST_AMOUNT) > 0 or\n" +
                                "          SUM(T.UTILISED_CASH)>0 OR \n" +
                                "          SUM(T.SUBSEQUENT_AMOUNT) > 0,\n" +
                                "          1,\n" +
                                "          0) AS HAS_TRANS\n" +
                                "  FROM MASTER_CONTRIBUTION_HEAD MCH\n" +
                                "  LEFT JOIN PROJECT_PURPOSE AS PP ON PP.CONTRIBUTION_ID = MCH.CONTRIBUTION_ID\n" +
                                "   AND PP.PROJECT_ID IN(?PROJECT_ID)\n" +
                                "  LEFT JOIN (SELECT VMT.PROJECT_ID, MCH.CONTRIBUTION_ID,VMT.DONOR_ID, VMT.VOUCHER_ID,\n" +
                                "                    VMT.CONTRIBUTION_TYPE,\n" +
                                "                    MCH.FC_PURPOSE AS PURPOSE,\n" +
                                "                    MP.NOTES AS ADDRESS,\n" +
                                "                    0.0 AS FIRST_AMOUNT,\n" +
                                "                    CASE\n" +
                                "                      WHEN VMT.CONTRIBUTION_TYPE = 'S' THEN\n" +
                                "                       VMT.ACTUAL_AMOUNT\n" +
                                "                      ELSE\n" +
                                "                       0.0\n" +
                                "                    END AS SUBSEQUENT_AMOUNT,\n" +
                                "                    0.0 AS PRE_CASH,\n" +
                                "                    0.00 AS UTILISED_CASH\n" +
                                "               FROM MASTER_CONTRIBUTION_HEAD MCH\n" +
                                "\n" +
                                "               LEFT JOIN VOUCHER_MASTER_TRANS VMT\n" +
                                "                 ON VMT.PURPOSE_ID = MCH.CONTRIBUTION_ID\n" +
                                "               LEFT JOIN MASTER_PROJECT MP\n" +
                                "                 ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                                "               LEFT JOIN MASTER_DIVISION MD\n" +
                                "                 ON MP.DIVISION_ID = MD.DIVISION_ID\n" +
                                "\n" +
                                "              WHERE MD.DIVISION_ID = 2 AND VMT.STATUS=1\n" +
                                "                AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "                AND VMT.VOUCHER_TYPE = 'RC' AND VMT.PURPOSE_ID>0 AND MP.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "             UNION ALL\n" +
                                "\n" +
                                "             SELECT VMT.PROJECT_ID, MCH.CONTRIBUTION_ID,VMT.DONOR_ID,VMT.VOUCHER_ID,\n" +
                                "                    VMT.CONTRIBUTION_TYPE,\n" +
                                "                    MCH.FC_PURPOSE AS PURPOSE,\n" +
                                "                    MP.NOTES AS ADDRESS,\n" +
                                "                    CASE\n" +
                                "                      WHEN VMT.CONTRIBUTION_TYPE = 'F' THEN\n" +
                                "                       VMT.ACTUAL_AMOUNT\n" +
                                "                      ELSE\n" +
                                "                       0.0\n" +
                                "                    END AS FIRST_AMOUNT,\n" +
                                "                    0.0 AS SUBSEQUENT_AMOUNT,\n" +
                                "                    0.0 AS PRE_CASH,\n" +
                                "                    0.00 AS UTILISED_CASH\n" +
                                "\n" +
                                "               FROM MASTER_CONTRIBUTION_HEAD MCH\n" +
                                "\n" +
                                "               LEFT JOIN VOUCHER_MASTER_TRANS VMT\n" +
                                "                 ON VMT.PURPOSE_ID = MCH.CONTRIBUTION_ID\n" +
                                "               LEFT JOIN MASTER_PROJECT MP\n" +
                                "                 ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                                "               LEFT JOIN MASTER_DIVISION MD\n" +
                                "                 ON MP.DIVISION_ID = MD.DIVISION_ID\n" +
                                "              WHERE MD.DIVISION_ID = 2 AND VMT.STATUS=1 \n" +
                                "                AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "                AND VMT.VOUCHER_TYPE = 'RC' AND VMT.PURPOSE_ID>0 AND MP.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "             UNION ALL\n" +
                                "\n" +
                               "             SELECT T.PROJECT_ID, T.CONTRIBUTION_ID,\n" +
                                "                    T.DONOR_ID,\n" +
                                "                    T.VOUCHER_ID,\n" +
                                "                    T.CONTRIBUTION_TYPE,\n" +
                                "                    T.PURPOSE,\n" +
                                "                    T.ADDRESS,\n" +
                                "                    0.0 AS FIRST_AMOUNT,\n" +
                                "                    0.0 AS SUBSEQUENT_AMOUNT,\n" +
                                "                    SUM(T.PRE_CASH) AS PRE_CASH,\n" +
                                "                    0.00 AS UTILISED_CASH\n" +
                                "               FROM (SELECT VMT.PROJECT_ID, MCH.CONTRIBUTION_ID,\n" +
                                "                            VMT.DONOR_ID,\n" +
                                "                            VMT.VOUCHER_ID,\n" +
                                "                            VMT.CONTRIBUTION_TYPE,\n" +
                                "                            MCH.FC_PURPOSE        AS PURPOSE,\n" +
                                "                            MP.NOTES              AS ADDRESS,\n" +
                                "                            0.0                   AS FIRST_AMOUNT,\n" +
                                "                            0.0                   AS SUBSEQUENT_AMOUNT,\n" +
                                "                            VMT.ACTUAL_AMOUNT     AS PRE_CASH,\n" +
                                "                            0.00                  AS UTILISED_CASH\n" +
                                "                       FROM VOUCHER_MASTER_TRANS VMT\n" +
                                "                       LEFT JOIN MASTER_CONTRIBUTION_HEAD MCH\n" +
                                "                         ON MCH.CONTRIBUTION_ID = VMT.PURPOSE_ID\n" +
                                "                       LEFT JOIN MASTER_PROJECT MP\n" +
                                "                         ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                                "                       LEFT JOIN MASTER_DIVISION MD\n" +
                                "                         ON MP.DIVISION_ID = MD.DIVISION_ID\n" +
                                "                      WHERE MD.DIVISION_ID = 2\n" +
                                "                        AND VMT.STATUS = 1\n" +
                                "                        AND VMT.VOUCHER_TYPE = 'RC'\n" +
                                "                        AND VMT.VOUCHER_DATE < ?DATE_FROM\n" +
                                "             AND VMT.VOUCHER_TYPE = 'RC' AND VMT.PURPOSE_ID>0 AND MP.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "             UNION ALL\n" +
                                "\n" +
                                "             SELECT VMT.PROJECT_ID, MCH.CONTRIBUTION_ID,\n" +
                                "                            VMT.DONOR_ID,\n" +
                                "                            VMT.VOUCHER_ID,\n" +
                                "                            VMT.CONTRIBUTION_TYPE,\n" +
                                "                            MCH.FC_PURPOSE        AS PURPOSE,\n" +
                                "                            MP.NOTES              AS ADDRESS,\n" +
                                "                            0.0                   AS FIRST_AMOUNT,\n" +
                                "                            0.0                   AS SUBSEQUENT_AMOUNT,\n" +
                                "                            -VT.AMOUNT            AS PRE_CASH,\n" +
                                "                            0.00                  AS UTILISED_CASH\n" +
                                "                      FROM VOUCHER_MASTER_TRANS VMT\n" +
                                "                      INNER JOIN VOUCHER_TRANS VT ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                "                      INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                "                      LEFT JOIN MASTER_CONTRIBUTION_HEAD MCH ON MCH.CONTRIBUTION_ID = VMT.PURPOSE_ID\n" +
                                "                      LEFT JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                                "                      LEFT JOIN MASTER_DIVISION MD ON MP.DIVISION_ID = MD.DIVISION_ID\n" +
                                "                      WHERE MD.DIVISION_ID = 2 AND VMT.STATUS = 1 AND VMT.PURPOSE_ID>0 AND MP.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                        AND VMT.VOUCHER_DATE < ?DATE_FROM\n" +
                                "                        AND VMT.VOUCHER_TYPE IN ('RC', 'PY') AND VT.TRANS_MODE='DR' AND ML.GROUP_ID NOT IN (12, 13, 14) \n" +
                                "                        ) AS T\n" +
                                "             GROUP BY CONTRIBUTION_ID\n" +
                                "\n" +
                                "             UNION ALL\n" +
                                "             SELECT VMT.PROJECT_ID, MCH.CONTRIBUTION_ID,VMT.DONOR_ID,VMT.VOUCHER_ID,\n" +
                                "                    VMT.CONTRIBUTION_TYPE,\n" +
                                "                    MCH.FC_PURPOSE AS PURPOSE,\n" +
                                "                    MP.NOTES AS ADDRESS,\n" +
                                "                    0.0 AS FIRST_AMOUNT,\n" +
                                "                    0.0 AS SUBSEQUENT_AMOUNT,\n" +
                                "                    0.0 AS PRE_CASH,\n" +
                                "                    SUM(VT.AMOUNT) AS UTILISED_CASH\n" +
                                "               FROM VOUCHER_MASTER_TRANS VMT\n" +
                                "              INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "              INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                "              LEFT JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                                "              LEFT JOIN MASTER_CONTRIBUTION_HEAD MCH ON VMT.PURPOSE_ID = MCH.CONTRIBUTION_ID\n" +
                                "              LEFT JOIN MASTER_DIVISION MD ON MP.DIVISION_ID = MD.DIVISION_ID\n" +
                                "              WHERE MD.DIVISION_ID = 2 AND VMT.STATUS = 1 AND VMT.VOUCHER_TYPE IN ('RC', 'PY') AND VT.TRANS_MODE='DR'\n" +
                                "               AND ML.GROUP_ID NOT IN (12, 13, 14) AND VMT.PURPOSE_ID>0 AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "               AND MP.PROJECT_ID IN (?PROJECT_ID) GROUP BY VMT.PURPOSE_ID) AS T\n" +
                                "    ON T.CONTRIBUTION_ID = MCH.CONTRIBUTION_ID AND T.PROJECT_ID = PP.PROJECT_ID\n" +
                                " GROUP BY MCH.CONTRIBUTION_ID";

                        break;
                    }

                case ReportSQLCommand.ForeginContribution.FC6PurposeCashBank:
                    {

                        query = @"SELECT MCH.CONTRIBUTION_ID, MCH.FC_PURPOSE AS PURPOSE, SUM(IFNULL(VM.PRE_CASH, 0)) AS PRE_CASH, 
                                (SUM(IFNULL(VM.PRE_BANK, 0)) + IFNULL(PP.AMOUNT,0)) AS PRE_BANK,

                                SUM(IFNULL(VM.CASH_FIRST_AMOUNT, 0)) AS FIRST_CASH, SUM(IFNULL(VM.BANK_FIRST_AMOUNT, 0)) AS FIRST_BANK,
                                SUM(IFNULL(VM.CASH_SUBSEQUENT_AMOUNT, 0)) AS SECOND_CASH, SUM(IFNULL(VM.BANK_SUBSEQUENT_AMOUNT, 0)) AS SECOND_BANK,
                                SUM(IFNULL(VM.CASH_UTILISED_CASH, 0)) AS UTILISED_CASH, SUM(IFNULL(VM.BANK_UTILISED_CASH, 0)) AS UTILISED_BANK
                                FROM MASTER_CONTRIBUTION_HEAD MCH
                                LEFT JOIN (SELECT PP.CONTRIBUTION_ID, SUM(IF(PP.TRANS_MODE='CR',-(PP.AMOUNT), PP.AMOUNT)) AS AMOUNT FROM PROJECT_PURPOSE AS PP 
                                   WHERE PP.PROJECT_ID IN (?PROJECT_ID) GROUP BY PP.CONTRIBUTION_ID) PP ON PP.CONTRIBUTION_ID = MCH.CONTRIBUTION_ID
                                LEFT JOIN
                                (SELECT VMT.PROJECT_ID, MCH.CONTRIBUTION_ID, VMT.DONOR_ID, VMT.VOUCHER_ID, VMT.CONTRIBUTION_TYPE, MCH.FC_PURPOSE AS PURPOSE, MP.NOTES AS ADDRESS,

                                IF (VMT.VOUCHER_TYPE = 'RC' AND CB.CASH_FLAG =1 AND (VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO) AND
                                       VMT.CONTRIBUTION_TYPE = 'F', VMT.ACTUAL_AMOUNT, 0) AS CASH_FIRST_AMOUNT,

                                IF (VMT.VOUCHER_TYPE = 'RC' AND CB.BANK_FLAG =1 AND (VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO) AND
                                       VMT.CONTRIBUTION_TYPE = 'F', VMT.ACTUAL_AMOUNT, 0) AS BANK_FIRST_AMOUNT,

                                IF (VMT.VOUCHER_TYPE = 'RC' AND CB.CASH_FLAG =1 AND (VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO) AND
                                       VMT.CONTRIBUTION_TYPE = 'S', VMT.ACTUAL_AMOUNT, 0) AS CASH_SUBSEQUENT_AMOUNT,

                                IF (VMT.VOUCHER_TYPE = 'RC' AND CB.BANK_FLAG =1 AND (VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO) AND
                                       VMT.CONTRIBUTION_TYPE = 'S', VMT.ACTUAL_AMOUNT, 0) AS BANK_SUBSEQUENT_AMOUNT,

                                IF ( (CB.CASH_FLAG =1 AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO), SUM(IF(VT.TRANS_MODE = 'DR', (VT.AMOUNT*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), 0)), 0) AS CASH_UTILISED_CASH,

                                IF ( (CB.BANK_FLAG =1 AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO), SUM(IF(VT.TRANS_MODE = 'DR', (VT.AMOUNT*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), 0)), 0) AS BANK_UTILISED_CASH,

                                IF(CB.CASH_FLAG =1 AND VMT.VOUCHER_DATE<?DATE_FROM, (VMT.ACTUAL_AMOUNT- SUM(IF(VT.TRANS_MODE = 'DR', (VT.AMOUNT*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), 0)) ), 0 ) AS PRE_CASH,
                                IF(CB.BANK_FLAG =1 AND VMT.VOUCHER_DATE<?DATE_FROM, (VMT.ACTUAL_AMOUNT- SUM(IF(VT.TRANS_MODE = 'DR', (VT.AMOUNT*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), 0)) ), 0 ) AS PRE_BANK

                                FROM MASTER_CONTRIBUTION_HEAD MCH
                                INNER JOIN VOUCHER_MASTER_TRANS VMT ON VMT.PURPOSE_ID = MCH.CONTRIBUTION_ID
                                INNER JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = VMT.PROJECT_ID
                                INNER JOIN MASTER_DIVISION MD ON MP.DIVISION_ID = MD.DIVISION_ID
                                INNER JOIN VOUCHER_TRANS AS VT ON VT.VOUCHER_ID = VMT.VOUCHER_ID
                                INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID AND ML.GROUP_ID NOT IN (12, 13, 14)

                                INNER JOIN (SELECT VT.VOUCHER_ID, IF(ML.GROUP_ID = 13, 1,0 ) AS CASH_FLAG, IF(ML.GROUP_ID = 12, 1,0 ) AS BANK_FLAG
                                  FROM VOUCHER_TRANS VT INNER JOIN VOUCHER_MASTER_TRANS VM ON VM.VOUCHER_ID = VT.VOUCHER_ID
                                  INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID AND ML.GROUP_ID IN (12, 13)
                                  WHERE VM.STATUS = 1 AND VM.VOUCHER_DATE<=?DATE_TO AND VM.VOUCHER_TYPE IN ('RC', 'PY')
                                  AND VM.PURPOSE_ID>0 AND VM.PROJECT_ID IN (?PROJECT_ID)
                                  GROUP BY VT.VOUCHER_ID, VT.LEDGER_ID) AS CB ON CB.VOUCHER_ID = VMT.VOUCHER_ID
                                WHERE VMT.STATUS = 1 AND VMT.VOUCHER_DATE<=?DATE_TO
                                AND VMT.VOUCHER_TYPE IN ('RC', 'PY') AND VMT.PURPOSE_ID>0 AND MP.PROJECT_ID IN (?PROJECT_ID)
                                GROUP BY VT.VOUCHER_ID) VM ON VM.CONTRIBUTION_ID = MCH.CONTRIBUTION_ID  GROUP BY MCH.CONTRIBUTION_ID;";

                        break;
                    }
                #endregion

                #region FC Purpose Distributuion

                case ReportSQLCommand.ForeginContribution.FCPurposeCumulative:
                    {
                        query = @"SELECT MCH.CONTRIBUTION_ID, MCH.CODE, MCH.FC_PURPOSE AS PURPOSE, IFNULL(PP.OP_BALANCE,0) AS OP_BALANCE,
                                 IFNULL(FC_TRANS.PREVIOUS_BALANCE, 0) AS PREVIOUS_BALANCE, IFNULL(FC_TRANS.RECEIPTS, 0) AS RECEIPTS,
                                 IFNULL(FC_TRANS.UTILISED, 0) AS UTILISED
                                 FROM MASTER_CONTRIBUTION_HEAD MCH
                                 INNER JOIN (SELECT PP.CONTRIBUTION_ID,  SUM(IF(PP.TRANS_MODE = 'DR', IFNULL(PP.AMOUNT, 0), -IFNULL(PP.AMOUNT,0))) AS OP_BALANCE FROM 
                                        PROJECT_PURPOSE PP WHERE PP.PROJECT_ID IN (?PROJECT_ID) GROUP BY PP.CONTRIBUTION_ID) PP ON PP.CONTRIBUTION_ID = MCH.CONTRIBUTION_ID
                                 LEFT JOIN (SELECT VMT.VOUCHER_ID, VMT.PURPOSE_ID,
                                    SUM( IF((VT.TRANS_MODE='CR' AND (VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO)),
                                            (IFNULL(VT.AMOUNT,0)*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), 0) ) AS RECEIPTS,
                                    SUM( IF((VT.TRANS_MODE='DR'  AND (VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO)),
                                            (IFNULL(VT.AMOUNT,0)*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), 0) ) AS UTILISED,
                                    SUM(IF(VMT.VOUCHER_DATE<?DATE_FROM,  
                                            IF( VT.TRANS_MODE='CR', (IFNULL(VT.AMOUNT,0)*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), 
                                                    -(IFNULL(VT.AMOUNT,0)*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1))), 0 )) AS PREVIOUS_BALANCE
                                    FROM VOUCHER_MASTER_TRANS VMT
                                                INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VMT.VOUCHER_ID
                                                INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID AND ML.GROUP_ID NOT IN (12, 13, 14)
                                                WHERE VMT.STATUS = 1 AND VMT.VOUCHER_DATE BETWEEN ?DATE_PROGRESS_FROM AND ?DATE_TO
                                                AND VMT.PROJECT_ID IN (?PROJECT_ID)
                                                AND VMT.VOUCHER_TYPE IN ('RC', 'PY')
                                                AND VMT.PURPOSE_ID > 0 GROUP BY VMT.PURPOSE_ID) AS FC_TRANS
                                 ON FC_TRANS.PURPOSE_ID = MCH.CONTRIBUTION_ID;";
                        break;
                    }
                case ReportSQLCommand.ForeginContribution.FCPurposeCumulativeSummary:
                    {
                        query = @"SELECT SUM( IF(VT.TRANS_MODE = 'CR', (IFNULL(VT.AMOUNT,0)*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), 0) ) AS RECEIPTS,
                            SUM( IF(VT.TRANS_MODE = 'DR', (IFNULL(VT.AMOUNT,0)*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), 0) ) AS UTILISED,
                            SUM( IF(VT.TRANS_MODE = 'CR' AND ML.IS_BANK_INTEREST_LEDGER = 1 AND VMT.VOUCHER_SUB_TYPE='FD', 
                                    (IFNULL(VT.AMOUNT,0)*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), 0) ) AS FD_INTEREST_AMOUNT,
                            SUM( IF(VT.TRANS_MODE = 'CR' AND ML.IS_BANK_SB_INTEREST_LEDGER = 1 AND VMT.VOUCHER_SUB_TYPE='GN', 
                                    (IFNULL(VT.AMOUNT,0)*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), 0) ) AS SB_INTEREST_AMOUNT,
                            SUM( IF(VT.TRANS_MODE = 'DR' AND ML.IS_BANK_COMMISSION_LEDGER = 1 AND VMT.VOUCHER_SUB_TYPE='GN', 
                                    (IFNULL(VT.AMOUNT,0)*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), 0) ) AS BANK_COMMISSION_AMOUNT
                            FROM VOUCHER_MASTER_TRANS VMT
                            INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VMT.VOUCHER_ID
                            INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID AND ML.GROUP_ID NOT IN (12, 13, 14)
                            WHERE VMT.STATUS = 1 AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO
                            AND VMT.PROJECT_ID IN (?PROJECT_ID) AND
                            ( VMT.VOUCHER_TYPE IN ('RC', 'PY') OR (VMT.VOUCHER_TYPE = 'JN' AND VMT.VOUCHER_SUB_TYPE = 'FD') );";
                        break;
                    }
                case ReportSQLCommand.ForeginContribution.FCPurposeDistribution:
                    {
                        query = @"SELECT MCH.CONTRIBUTION_ID, MCH.CODE, MCH.FC_PURPOSE AS PURPOSE, MC.ABBREVATION AS ABBREVATION, MC.COST_CENTRE_NAME,
                                 SUM(IFNULL(FC_TRANS.PREVIOUS_BALANCE, 0)) AS PREVIOUS_BALANCE, SUM(IFNULL(FC_TRANS.RECEIPTS, 0)) AS RECEIPTS,
                                 SUM(IFNULL(FC_TRANS.UTILISED, 0)) AS UTILISED
                                 FROM MASTER_CONTRIBUTION_HEAD MCH
                                 
                                 LEFT JOIN (
                                    SELECT VMT.PURPOSE_ID, VCT.COST_CENTRE_ID, 
                                    SUM( IF((VT.TRANS_MODE = 'CR' AND (VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO)),
                                            (IFNULL(VCT.AMOUNT,0)*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), 0) ) AS RECEIPTS,
                                    SUM( IF((VT.TRANS_MODE = 'DR' AND (VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO)),
                                            (IFNULL(VCT.AMOUNT,0)*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), 0) ) AS UTILISED,
                                    SUM( IF(VMT.VOUCHER_DATE<?DATE_FROM, IF(VT.TRANS_MODE = 'CR', 
                                            (IFNULL(VCT.AMOUNT,0)*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), -(IFNULL(VCT.AMOUNT,0)*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1))), 0 )) AS PREVIOUS_BALANCE
                                    FROM VOUCHER_MASTER_TRANS VMT
                                                INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VMT.VOUCHER_ID
                                                INNER JOIN MASTER_LEDGER ML ON ML.LEDGEr_ID = VT.LEDGER_ID
                                                LEFT JOIN VOUCHER_CC_TRANS VCT ON VCT.VOUCHER_ID = VT.VOUCHER_ID AND VCT.LEDGER_ID = VT.LEDGER_ID
                                                WHERE VMT.STATUS = 1 AND VMT.VOUCHER_DATE BETWEEN ?DATE_PROGRESS_FROM AND ?DATE_TO
                                                AND VMT.PROJECT_ID IN (?PROJECT_ID)
                                                AND VMT.VOUCHER_TYPE IN ('RC', 'PY') AND ML.GROUP_ID NOT IN (12, 13, 14)
                                                AND VMT.PURPOSE_ID > 0 GROUP BY VMT.PURPOSE_ID, VCT.COST_CENTRE_ID
                                    UNION ALL
                                    SELECT PP.CONTRIBUTION_ID, PPC.COST_CENTRE_ID,
                                    0 AS RECEIPTS,
                                    0 AS UTILISED,
                                    SUM(IF(PPC.TRANS_MODE = 'DR', IFNULL(PPC.AMOUNT, 0), -IFNULL(PPC.AMOUNT,0))) AS OP_BALANCE
                                    FROM PROJECT_PURPOSE PP
                                    LEFT JOIN PROJECT_PURPOSE_COSTCENTRE PPC ON PPC.PROJECT_ID = PP.PROJECT_ID AND PPC.CONTRIBUTION_ID = PP.CONTRIBUTION_ID
                                    WHERE PP.PROJECT_ID IN (?PROJECT_ID) AND PP.PROJECT_ID IN (?PROJECT_ID) GROUP BY PP.CONTRIBUTION_ID, PPC.COST_CENTRE_ID
                                 ) AS FC_TRANS
                                 ON FC_TRANS.PURPOSE_ID = MCH.CONTRIBUTION_ID
                                 LEFT JOIN MASTER_COST_CENTRE MC ON MC.COST_CENTRE_ID = FC_TRANS.COST_CENTRE_ID 
                                 GROUP BY MCH.CONTRIBUTION_ID, MC.COST_CENTRE_ID";

                        break;
                    }
                #endregion

                #region FC Bank

                #endregion

                #region FC6 Inst Perfrence
                case ReportSQLCommand.ForeginContribution.FCInstPreference:
                    {
                        query = "SELECT CONCAT(CONCAT(SOCIETYNAME, ','), ADDRESS) AS NAMEADDRESS,\n" +
                            "       CONCAT(REGNO,IF(REGDATE > '0001-01-01',CONCAT(' - ', DATE_FORMAT(REGDATE,'%d/%m/%Y')),'')) AS REGNODATE,\n" +
                            "       ASSOCIATIONNATURE AS NASS,DENOMINATION as DRASS,\n" +
                            "     OTHER_ASSOCIATION_NATURE, OTHER_DENOMINATION, \n" +
                            "    CONCAT(FCRINO,IF(FCRIREGDATE > '0001-01-01',CONCAT(' - ', DATE_FORMAT(FCRIREGDATE,'%d/%m/%Y')),'')) AS FCRIREGDATE, \n" +
                            " CONCAT(PERMISSIONNO,IF(PERMISSIONDATE > '0001-01-01',CONCAT(' - ', DATE_FORMAT(PERMISSIONDATE,'%d/%m/%Y')),'')) AS PERNODATE,MS.STATE_NAME \n" +
                            "  FROM MASTER_INSTI_PERFERENCE AS MIP \n" +
                            "  LEFT JOIN MASTER_STATE MS \n" +
                            "    ON MIP.STATE_ID=MS.STATE_ID \n" +
                            " { WHERE MIP.CUSTOMERID=?CUSTOMERID }";

                        break;
                    }
                #endregion

                #region FC Contribution
                case ReportSQLCommand.ForeginContribution.FCContribution:
                    {
                        query = "SELECT VMT.VOUCHER_ID,\n" +
                                "       PROJECT_ID,\n" +
                                "       VOUCHER_TYPE,\n" +
                                "       DONOR_ID,\n" +
                                "       SUM(IFNULL(AMOUNT, 0)) AS 'AMOUNT'\n" +
                                "  FROM VOUCHER_MASTER_TRANS AS VMT\n" +
                                " INNER JOIN VOUCHER_TRANS AS VT\n" +
                                "    ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                " WHERE VMT.DONOR_ID NOT IN (0)\n" +
                            //   "   AND PROJECT_ID IN(?PROJECT_ID)\n" +
                                "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO";
                        break;
                    }
                #endregion

                #region FC6 Donor
                case ReportSQLCommand.ForeginContribution.FC6Donor:
                    {
                        query = "SELECT @sno:=@sno+1 as SNO, CONCAT(MD.NAME,' - ',MD.ADDRESS) AS DONOR_ADDRESS, CASE\n" +
                                "         WHEN MD.TYPE = 1 THEN\n" +
                                "          'Institutional'\n" +
                                "         WHEN MD.TYPE = 2 THEN\n" +
                                "          'Individual'\n" +
                                "       END AS DONOR_TYPE,\n" +
                                "       MCH.FC_PURPOSE AS 'PURPOSE',\n" +
                                "       DATE(VMT.VOUCHER_DATE) AS DOF_RECEIPTS,\n" +
                                "       SUM(ACTUAL_AMOUNT) AS AMOUNT\n" +
                                "  FROM VOUCHER_MASTER_TRANS VMT\n" +
                                "\n" +
                                " INNER JOIN MASTER_CONTRIBUTION_HEAD MCH\n" +
                                "    ON MCH.CONTRIBUTION_ID = VMT.PURPOSE_ID\n" +
                                " INNER JOIN MASTER_DONAUD MD\n" +
                                "    ON MD.DONAUD_ID = VMT.DONOR_ID\n" +
                                "  LEFT JOIN MASTER_COUNTRY MC\n" +
                                "    ON MC.COUNTRY_ID = MD.COUNTRY_ID\n" +
                                "  LEFT JOIN MASTER_PROJECT MP\n" +
                                "    ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                                "  LEFT JOIN MASTER_DIVISION MDI\n" +
                                "    ON MDI.DIVISION_ID = MP.DIVISION_ID,(select @sno:=0) as x\n" +
                                "\n" +
                                " WHERE VMT.STATUS = 1\n" +
                                "   AND MDI.DIVISION_ID = 2\n" +
                                "   AND VMT.VOUCHER_TYPE = 'RC' AND VMT.PURPOSE_ID > 0\n" +
                                "   AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM  AND ?DATE_TO\n" +
                                "   AND MP.PROJECT_ID IN (?PROJECT_ID)\n" +
                                " GROUP BY VMT.VOUCHER_DATE,VMT.DONOR_ID ORDER BY VMT.VOUCHER_DATE,SNO";   // ,MCH.FC_PURPOSE

                        break;
                    }
                #endregion

                #region FC6 Donor Amount
                case ReportSQLCommand.ForeginContribution.FC6DonorAmount:
                    {
                        query = "SELECT IFNULL(SUM(T.INS), 0)AS INSTITUTE,\n" +
                                "       IFNULL(SUM(T.IND_ABV), 0)AS INDIV_ABOVE,\n" +
                                "       IFNULL(SUM(T.IND_BLW), 0)AS INDIV_BELOW\n" +
                                "  FROM (SELECT CASE\n" +
                                "                 WHEN MD.TYPE = 1 THEN\n" +
                                "                  SUM(ACTUAL_AMOUNT)\n" +
                                "               END AS INS,\n" +
                                "               0 AS IND_ABV,\n" +
                                "               0 AS IND_BLW\n" +
                                "          FROM VOUCHER_MASTER_TRANS VMT\n" +
                                "\n" +
                                "         INNER JOIN MASTER_CONTRIBUTION_HEAD MCH\n" +
                                "            ON MCH.CONTRIBUTION_ID = VMT.PURPOSE_ID\n" +
                                "         INNER JOIN MASTER_DONAUD MD\n" +
                                "            ON MD.DONAUD_ID = VMT.DONOR_ID\n" +
                                "          LEFT JOIN MASTER_PROJECT MP\n" +
                                "            ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                                "          LEFT JOIN MASTER_DIVISION MDI\n" +
                                "            ON MDI.DIVISION_ID = MP.DIVISION_ID\n" +
                                "\n" +
                                "         WHERE VMT.STATUS = 1\n" +
                                "           AND MDI.DIVISION_ID = 2\n" +
                                "           AND VMT.VOUCHER_TYPE = 'RC'\n" +
                                "           AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO \n" +
                                  "   AND MP.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "         GROUP BY MD.TYPE\n" +
                                "\n" +
                                "        UNION ALL\n" +
                                "\n" +
                                "        SELECT 0 AS INS,\n" +
                                "               CASE\n" +
                                "                 WHEN MD.TYPE = 2 AND SUM(ACTUAL_AMOUNT) >= 100000 THEN\n" +
                                "                  SUM(ACTUAL_AMOUNT)\n" +
                                "               END AS IND_ABV,\n" +
                                "               0 IND_BLW\n" +
                                "          FROM VOUCHER_MASTER_TRANS VMT\n" +
                                "\n" +
                                "         INNER JOIN MASTER_CONTRIBUTION_HEAD MCH\n" +
                                "            ON MCH.CONTRIBUTION_ID = VMT.PURPOSE_ID\n" +
                                "         INNER JOIN MASTER_DONAUD MD\n" +
                                "            ON MD.DONAUD_ID = VMT.DONOR_ID\n" +
                                "          LEFT JOIN MASTER_PROJECT MP\n" +
                                "            ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                                "          LEFT JOIN MASTER_DIVISION MDI\n" +
                                "            ON MDI.DIVISION_ID = MP.DIVISION_ID\n" +
                                "\n" +
                                "         WHERE VMT.STATUS = 1\n" +
                                "           AND MDI.DIVISION_ID = 2\n" +
                                "           AND VMT.VOUCHER_TYPE = 'RC'\n" +
                                "           AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO \n" +
                                  "   AND MP.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "         GROUP BY MD.TYPE\n" +
                                "\n" +
                                "        UNION ALL\n" +
                                "\n" +
                                "        SELECT 0 AS INS,\n" +
                                "               0 IND_ABV,\n" +
                                "               CASE\n" +
                                "                 WHEN MD.TYPE = 2 AND SUM(ACTUAL_AMOUNT) < 100000 THEN\n" +
                                "                  SUM(ACTUAL_AMOUNT)\n" +
                                "               END AS IND_BLW\n" +
                                "\n" +
                                "          FROM VOUCHER_MASTER_TRANS VMT\n" +
                                "\n" +
                                "         INNER JOIN MASTER_CONTRIBUTION_HEAD MCH\n" +
                                "            ON MCH.CONTRIBUTION_ID = VMT.PURPOSE_ID\n" +
                                "         INNER JOIN MASTER_DONAUD MD\n" +
                                "            ON MD.DONAUD_ID = VMT.DONOR_ID\n" +
                                "          LEFT JOIN MASTER_PROJECT MP\n" +
                                "            ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                                "          LEFT JOIN MASTER_DIVISION MDI\n" +
                                "            ON MDI.DIVISION_ID = MP.DIVISION_ID\n" +
                                "\n" +
                                "         WHERE VMT.STATUS = 1\n" +
                                "           AND MDI.DIVISION_ID = 2\n" +
                                "           AND VMT.VOUCHER_TYPE = 'RC'\n" +
                                "           AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO \n" +
                                  "   AND MP.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "         GROUP BY MD.TYPE) AS T";

                        break;
                    }
                #endregion

                #region FC6 Bank Details
                case ReportSQLCommand.ForeginContribution.FC6BankAccount:
                    {
                        //query = "SELECT BA.BANK_ID, MBA.ACCOUNT_NUMBER, BA.BANK, BA.BRANCH, BA.ADDRESS\n" +
                        //        "  FROM MASTER_BANK_ACCOUNT MBA\n" +
                        //        " INNER JOIN MASTER_BANK BA\n" +
                        //        "    ON MBA.BANK_ID = BA.BANK_ID\n" +
                        //        " INNER JOIN PROJECT_LEDGER PL\n" +
                        //        "    ON PL.LEDGER_ID = MBA.LEDGER_ID\n" +
                        //        " INNER JOIN MASTER_PROJECT MP\n" +
                        //        "    ON PL.PROJECT_ID = MP.PROJECT_ID\n" +
                        //        " INNER JOIN MASTER_INSTI_PERFERENCE MIP\n" +
                        //        "    ON MIP.CUSTOMERID = MP.CUSTOMERID\n" +
                        //        " WHERE MBA.IS_FCRA_ACCOUNT > 0\n" +
                        //        "   AND MP.CUSTOMERID = ?CUSTOMERID\n" +
                        //        " GROUP BY MBA.LEDGER_ID;";
                        query = "SELECT ML.LEDGER_ID, MBA.ACCOUNT_NUMBER, MB.BANK, MB.BRANCH, MB.ADDRESS\n" +
                                "  FROM MASTER_INSTI_PERFERENCE MIP\n" +
                                " INNER JOIN MASTER_LEDGER ML\n" +
                                "    ON ML.LEDGER_ID = MIP.LEDGER_ID\n" +
                                " INNER JOIN MASTER_BANK_ACCOUNT MBA\n" +
                                "    ON ML.LEDGER_ID = MBA.LEDGER_ID\n" +
                                " INNER JOIN MASTER_BANK MB\n" +
                                "    ON MBA.BANK_ID = MB.BANK_ID \n" +
                                " WHERE MIP.CUSTOMERID=?CUSTOMERID ";

                        break;
                    }
                #endregion

                #region FC6 Bank Interest Amount
                case ReportSQLCommand.ForeginContribution.FC6BankInterestAmount:
                    {
                        query = "SELECT IFNULL(SUM(VT.AMOUNT),0) AS AMOUNT\n" +
                                "  FROM VOUCHER_MASTER_TRANS VMT\n" +
                                "\n" +
                                " INNER JOIN VOUCHER_TRANS VT\n" +
                                "    ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                " INNER JOIN MASTER_PROJECT MP\n" +
                                "    ON MP.PROJECT_ID = VMT.PROJECT_ID\n" +
                                " INNER JOIN MASTER_LEDGER ML\n" +
                                "    ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                " WHERE VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "   AND VMT.PROJECT_ID IN(?PROJECT_ID)\n" +
                                "   AND ML.IS_BANK_INTEREST_LEDGER = 1\n" +
                                "   AND VMT.STATUS = 1\n" +
                                " --  AND VMT.PURPOSE_ID > 0\n" +
                                "  AND VMT.STATUS = 1 \n" +
                                "   AND MP.DIVISION_ID = 2";
                        break;
                    }
                #endregion

                #region FC6 Designated Bank Amount
                case ReportSQLCommand.ForeginContribution.FC6DesignatedBankAmount:
                    {

                        query = @"SELECT SUM(RECEIPT_CURRENT_AMOUNT) AS RECEIPT_CURRENT_AMOUNT, SUM(PAYMENT_CURRENT_AMOUNT) AS PAYMENT_CURRENT_AMOUNT, 
                                        SUM(PREVIOUS_AMOUNT) AS PREVIOUS_AMOUNT
                                    FROM (SELECT SUM(IF(VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND VT.TRANS_MODE = 'CR' ,  VT.AMOUNT, 0)) AS RECEIPT_CURRENT_AMOUNT,
                                            SUM(IF(VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND VT.TRANS_MODE = 'DR',  VT.AMOUNT, 0)) AS PAYMENT_CURRENT_AMOUNT,
                                            (SUM(IF(VOUCHER_DATE <?DATE_FROM AND VT.TRANS_MODE = 'CR', VT.AMOUNT, 0)) +
                                            SUM(IF(VOUCHER_DATE <?DATE_FROM AND VT.TRANS_MODE = 'DR', -VT.AMOUNT, 0))) AS PREVIOUS_AMOUNT
                                    FROM VOUCHER_MASTER_TRANS VMT
                                    INNER JOIN VOUCHER_TRANS VT ON VMT.VOUCHER_ID = VT.VOUCHER_ID
                                    INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID AND ML.GROUP_ID NOT IN (12, 13, 14) 
                                            AND (IS_BANK_INTEREST_LEDGER = 1 OR IS_BANK_SB_INTEREST_LEDGER = 1)
                                    WHERE VMT.PROJECT_ID IN (?PROJECT_ID) AND VMT.STATUS = 1 AND VMT.PURPOSE_ID = 0
                                      AND IF(?INCLUDE_FD_SIMPLE_INTEREST = 1 OR ?INCLUDE_FD_ACCUMULATED_INTEREST= 1, VMT.VOUCHER_SUB_TYPE IN ('GN','FD'), VMT.VOUCHER_SUB_TYPE = 'GN')
                                      AND VMT.VOUCHER_DATE<=?DATE_TO AND IF(?INCLUDE_FD_ACCUMULATED_INTEREST= 1 AND ?INCLUDE_FD_SIMPLE_INTEREST = 0, 
                                            VMT.VOUCHER_TYPE IN ('PY', 'JN'), 
                                            IF(?INCLUDE_FD_ACCUMULATED_INTEREST= 1 AND ?INCLUDE_FD_SIMPLE_INTEREST = 1, VMT.VOUCHER_TYPE IN ('RC', 'PY', 'JN'), VMT.VOUCHER_TYPE IN ('RC', 'PY')))
                                    UNION ALL
                                    SELECT 0 AS RECEIPT_CURRENT_AMOUNT, 0 AS PAYMENT_CURRENT_AMOUNT,
                                        SUM(IF(LB.TRANS_MODE='CR', IFNULL(LB.AMOUNT,0), -IFNULL(LB.AMOUNT,0)) ) AS OP FROM LEDGER_BALANCE AS LB 
                                        INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = LB.LEDGER_ID AND (IS_BANK_INTEREST_LEDGER = 1 OR IS_BANK_SB_INTEREST_LEDGER = 1)
                                    WHERE LB.TRANS_FLAG = 'OP' AND LB.PROJECT_ID IN (?PROJECT_ID)) AS T";

                        break;
                    }

                case ReportSQLCommand.ForeginContribution.FC6DesignatedBankAmountCashBank:
                    {
                        query = @"SELECT SUM(RECEIPT_CURRENT_AMOUNT_CASH) AS RECEIPT_CURRENT_AMOUNT_CASH, SUM(RECEIPT_CURRENT_AMOUNT_BANK) AS RECEIPT_CURRENT_AMOUNT_BANK,
                                        SUM(PAYMENT_CURRENT_AMOUNT_CASH) AS PAYMENT_CURRENT_AMOUNT_CASH, SUM(PAYMENT_CURRENT_AMOUNT_BANK) AS PAYMENT_CURRENT_AMOUNT_BANK,
                                        SUM(PREVIOUS_AMOUNT_CASH) AS PREVIOUS_AMOUNT_CASH, SUM(PREVIOUS_AMOUNT_BANK) AS PREVIOUS_AMOUNT_BANK
                                FROM (SELECT SUM(IF(VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND VT.TRANS_MODE = 'CR' AND CB.IS_CASH = 1, (VT.AMOUNT*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), 0)) AS RECEIPT_CURRENT_AMOUNT_CASH,
                                SUM(IF(VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND VT.TRANS_MODE = 'CR' AND CB.IS_BANK = 1, (VT.AMOUNT*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), 0)) AS RECEIPT_CURRENT_AMOUNT_BANK,

                                SUM(IF(VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND VT.TRANS_MODE = 'DR' AND CB.IS_CASH = 1, (VT.AMOUNT*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), 0)) AS PAYMENT_CURRENT_AMOUNT_CASH,
                                SUM(IF(VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND VT.TRANS_MODE = 'DR' AND CB.IS_BANK = 1, (VT.AMOUNT*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), 0)) AS PAYMENT_CURRENT_AMOUNT_BANK,

                                (SUM(IF(VOUCHER_DATE <?DATE_FROM AND VT.TRANS_MODE = 'CR' AND CB.IS_CASH = 1, (VT.AMOUNT*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), 0)) +
                                    SUM(IF(VOUCHER_DATE <?DATE_FROM AND VT.TRANS_MODE = 'DR'AND CB.IS_CASH = 1, -(VT.AMOUNT*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), 0))) AS PREVIOUS_AMOUNT_CASH,

                                (SUM(IF(VOUCHER_DATE <?DATE_FROM AND VT.TRANS_MODE = 'CR' AND CB.IS_BANK = 1, (VT.AMOUNT*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), 0)) +
                                    SUM(IF(VOUCHER_DATE <?DATE_FROM AND VT.TRANS_MODE = 'DR'AND CB.IS_BANK = 1, -(VT.AMOUNT*IF(VMT.IS_MULTI_CURRENCY=1, VMT.EXCHANGE_RATE, 1)), 0))) AS PREVIOUS_AMOUNT_BANK
                                FROM VOUCHER_MASTER_TRANS VMT
                                INNER JOIN VOUCHER_TRANS VT ON VMT.VOUCHER_ID = VT.VOUCHER_ID
                                INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID AND ML.GROUP_ID NOT IN (12, 13, 14)
                                            AND (IS_BANK_INTEREST_LEDGER = 1 OR IS_BANK_SB_INTEREST_LEDGER = 1)

                                INNER JOIN (SELECT VT.VOUCHER_ID, IF(ML.GROUP_ID = 13, 1, 0) AS IS_CASH, IF(ML.GROUP_ID IN (12, 14), 1, 0) AS IS_BANK
                                FROM VOUCHER_TRANS VT INNER JOIN VOUCHER_MASTER_TRANS VM ON VM.VOUCHER_ID = VT.VOUCHER_ID AND VM.VOUCHER_DATE<=?DATE_TO
                                INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID AND ML.GROUP_ID IN (12, 13, 14)
                                WHERE VM.VOUCHER_DATE<=?DATE_TO AND VM.STATUS=1 AND VM.PROJECT_ID IN (?PROJECT_ID) GROUP BY VT.VOUCHER_ID) CB ON CB.VOUCHER_ID = VMT.VOUCHER_ID
                                WHERE VMT.PROJECT_ID IN (?PROJECT_ID) AND VMT.STATUS = 1 AND VMT.VOUCHER_DATE<=?DATE_TO AND VMT.PURPOSE_ID = 0
                                      AND IF(?INCLUDE_FD_ACCUMULATED_INTEREST= 1, VMT.VOUCHER_TYPE IN ('RC', 'PY', 'JN') AND VMT.VOUCHER_SUB_TYPE IN ('GN','FD'), VMT.VOUCHER_TYPE IN ('RC', 'PY') )
                                UNION ALL
                                SELECT 0 AS RECEIPT_CURRENT_AMOUNT_CASH, 0 RECEIPT_CURRENT_AMOUNT_BANK, 0 AS PAYMENT_CURRENT_AMOUNT_CASH, 0 AS PAYMENT_CURRENT_AMOUNT_BANK,
                                0 AS PREVIOUS_AMOUNT_CASH, SUM(IF(LB.TRANS_MODE='CR', IFNULL(LB.AMOUNT,0), -IFNULL(LB.AMOUNT,0)) ) AS PREVIOUS_AMOUNT_BANK 
                                FROM LEDGER_BALANCE AS LB 
                                INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = LB.LEDGER_ID AND (IS_BANK_INTEREST_LEDGER = 1 OR IS_BANK_SB_INTEREST_LEDGER = 1)
                                WHERE LB.TRANS_FLAG = 'OP' AND LB.PROJECT_ID IN (?PROJECT_ID)) T";
                        //AND IF(?INCLUDE_FD_ACCUMULATED_INTEREST = 1, VMT.VOUCHER_SUB_TYPE IN ('GN','FD'), VMT.VOUCHER_SUB_TYPE = 'GN')

                        break;
                    }
                #endregion

                #region FC6 Fixed Deposit
                case ReportSQLCommand.ForeginContribution.FC6FixedDeposit:
                    {
                        //query = "SELECT SUM(AMOUNT) AS BALANCE_AMOUNT\n" +
                        //        "  FROM FD_ACCOUNT\n" +
                        //        " WHERE TRANS_TYPE = 'IN'\n" +
                        //        "   AND INVESTMENT_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        //        "   AND PROJECT_ID IN (?PROJECT_ID)\n" +
                        //        "   AND STATUS = 1 ";
                        //query = "SELECT SUM(VT.AMOUNT) BALANCE_AMOUNT\n" +
                        //        "  FROM VOUCHER_MASTER_TRANS VMT\n" +
                        //        " INNER JOIN FD_RENEWAL FDR\n" +
                        //        "    ON FDR.FD_INTEREST_VOUCHER_ID = VMT.VOUCHER_ID\n" +
                        //        " INNER JOIN VOUCHER_TRANS VT\n" +
                        //        "    ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                        //        " WHERE RENEWAL_DATE <= ?DATE_TO\n" +
                        //        "   AND TRANS_MODE = 'CR' \n" +
                        //        "   AND VMT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //        "   AND IS_DELETED = 1\n" +
                        //        "   AND VMT.STATUS = 1;";

                        //query =
                        //          "SELECT SUM(T.AMOUNT) AS BALANCE_AMOUNT\n" +
                        //         "  FROM (SELECT SUM(VT.AMOUNT) AS AMOUNT, VT.TRANS_MODE\n" +
                        //         "          FROM VOUCHER_MASTER_TRANS VMT\n" +
                        //         "         INNER JOIN VOUCHER_TRANS VT\n" +
                        //         "            ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                        //         "          JOIN (SELECT VMT.VOUCHER_ID, VT.LEDGER_ID\n" +
                        //         "                 FROM VOUCHER_MASTER_TRANS VMT\n" +
                        //         "                INNER JOIN FD_RENEWAL FDR\n" +
                        //         "                   ON FDR.FD_INTEREST_VOUCHER_ID = VMT.VOUCHER_ID\n" +
                        //         "                INNER JOIN VOUCHER_TRANS VT\n" +
                        //         "                   ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                        //         "                WHERE RENEWAL_DATE <= ?DATE_TO\n" +
                        //         "                  AND TRANS_MODE = 'CR'\n" +
                        //         "                  AND VMT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //         "                  AND IS_DELETED = 1\n" +
                        //         "                  AND VMT.STATUS = 1\n" +
                        //         "                  AND VMT.STATUS = 1\n" +
                        //         "                GROUP BY TRANS_MODE) AS T1\n" +
                        //         "            ON T1.LEDGER_ID = VT.LEDGER_ID\n" +
                        //         "           AND T1.VOUCHER_ID <> VMT.VOUCHER_ID\n" +
                        //         "         WHERE PROJECT_ID IN (?PROJECT_ID)\n" +
                        //         "           AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        //         "           AND VOUCHER_TYPE = 'RC'\n" +
                        //         "         GROUP BY TRANS_MODE\n" +
                        //         "\n" +
                        //         "        UNION ALL\n" +
                        //         "        SELECT SUM(VT.AMOUNT) BALANCE_AMOUNT, VT.TRANS_MODE\n" +
                        //         "          FROM VOUCHER_MASTER_TRANS VMT\n" +
                        //         "         INNER JOIN FD_RENEWAL FDR\n" +
                        //         "            ON FDR.FD_INTEREST_VOUCHER_ID = VMT.VOUCHER_ID\n" +
                        //         "         INNER JOIN VOUCHER_TRANS VT\n" +
                        //         "            ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                        //         "         WHERE RENEWAL_DATE <= ?DATE_TO\n" +
                        //         "           AND TRANS_MODE = 'CR'\n" +
                        //         "           AND VMT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //         "           AND IS_DELETED = 1\n" +
                        //         "           AND VMT.STATUS = 1) AS T;";
                        query = "SELECT SUM(T.AMOUNT) AS BALANCE_AMOUNT\n" +
                                    "  FROM (SELECT SUM(VT.AMOUNT) AS AMOUNT, VT.TRANS_MODE\n" +
                                    "          FROM VOUCHER_MASTER_TRANS VMT\n" +
                                    "         INNER JOIN VOUCHER_TRANS VT\n" +
                                    "            ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                    "          JOIN (SELECT VMT.VOUCHER_ID, VT.LEDGER_ID\n" +
                                    "                 FROM VOUCHER_MASTER_TRANS VMT\n" +
                                    "                INNER JOIN FD_RENEWAL FDR\n" +
                                    "                   ON FDR.FD_INTEREST_VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                    "                INNER JOIN VOUCHER_TRANS VT\n" +
                                    "                   ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                    "                WHERE RENEWAL_DATE <= ?DATE_TO\n" +
                                    "                  AND TRANS_MODE = 'CR'\n" +
                                    "                  AND VOUCHER_SUB_TYPE = 'FD'\n" +
                                    "                  AND VMT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                    "                  AND IS_DELETED = 1\n" +
                                    "                  AND VMT.STATUS = 1\n" +
                                    "                  AND VMT.STATUS = 1\n" +
                                    "                GROUP BY TRANS_MODE) AS T1\n" +
                                    "            ON VT.LEDGER_ID = T1.LEDGER_ID\n" +
                                    "         WHERE PROJECT_ID IN (?PROJECT_ID)\n" +
                                    "           AND VOUCHER_SUB_TYPE <> 'FD'\n" +
                                    "           AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                    "           AND VOUCHER_TYPE = 'RC'\n" +
                                    "           AND TRANS_MODE = 'CR'\n" +
                                    "         GROUP BY TRANS_MODE\n" +
                                    "\n" +
                                    "        UNION ALL\n" +
                                    "        SELECT SUM(VT.AMOUNT) BALANCE_AMOUNT, VT.TRANS_MODE\n" +
                                    "          FROM VOUCHER_MASTER_TRANS VMT\n" +
                                    "         INNER JOIN FD_RENEWAL FDR\n" +
                                    "            ON FDR.FD_INTEREST_VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                    "         INNER JOIN VOUCHER_TRANS VT\n" +
                                    "            ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                    "         WHERE RENEWAL_DATE <= ?DATE_TO\n" +
                                    "           AND TRANS_MODE = 'CR'\n" +
                                    "           AND VOUCHER_SUB_TYPE = 'FD'\n" +
                                    "           AND VMT.PROJECT_ID IN (?PROJECT_ID)\n" +
                                    "           AND IS_DELETED = 1\n" +
                                    "           AND VMT.STATUS = 1) AS T;";

                        break;
                    }
                #endregion

                case ReportSQLCommand.ForeginContribution.DonorDetailMonthlyAbstract:
                    {
                        query = @"SELECT VT.VOUCHER_ID, VT.LEDGER_ID, MD.DONAUD_ID, MP.PROJECT, MD.NAME AS DONOR_NAME,
                                (IF(VM.VOUCHER_DATE >= ?DATE_FROM,
                                   IF ((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'),
                                   -IFNULL(VT.AMOUNT, 0), IFNULL(VT.AMOUNT, 0)), 0)) AS AMOUNT_PERIOD,
                                (IF ((?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'),
                                -IFNULL(VT.AMOUNT, 0), IFNULL(VT.AMOUNT, 0))) AS AMOUNT_PROGRESSIVE
                                FROM VOUCHER_TRANS VT
                                INNER JOIN VOUCHER_MASTER_TRANS VM ON VM.VOUCHER_ID = VT.VOUCHER_ID AND VM.STATUS = 1
                                    AND VM.VOUCHER_DATE BETWEEN ?DATE_PROGRESS_FROM AND ?DATE_TO AND VM.PROJECT_ID IN (?PROJECT_ID)
                                    AND VM.VOUCHER_TYPE IN ('RC', 'PY') AND VT.TRANS_MODE IN (?TRANS_MODE)
                                INNER JOIN MASTER_DONAUD MD ON MD.DONAUD_ID = VM.DONOR_ID
                                INNER JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = VM.PROJECT_ID;";
                        break;
                    }

                case ReportSQLCommand.ForeginContribution.DonorDetailReceiptsPayments:
                    {
                        query = @"SELECT VT.VOUCHER_ID, VT.LEDGER_ID,  MD.NAME AS DONOR_NAME, MP.PROJECT,
                                IF ( (?VOUCHER_TYPE = 'RC' AND VT.TRANS_MODE = 'DR') OR (?VOUCHER_TYPE = 'PY' AND VT.TRANS_MODE = 'CR'),
                                   -IFNULL(VT.AMOUNT, 0), IFNULL(VT.AMOUNT, 0)) AS AMOUNT_PERIOD 
                                FROM VOUCHER_TRANS VT
                                INNER JOIN VOUCHER_MASTER_TRANS VM ON VM.VOUCHER_ID = VT.VOUCHER_ID AND VM.STATUS = 1
                                    AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND VM.PROJECT_ID IN (?PROJECT_ID)
                                    AND VM.VOUCHER_TYPE IN ('RC', 'PY') AND VT.TRANS_MODE IN (?TRANS_MODE)
                                INNER JOIN MASTER_DONAUD MD ON MD.DONAUD_ID = VM.DONOR_ID
                                INNER JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = VM.PROJECT_ID;";
                        break;
                    }
            }
            return query;
        }
    }

    public class ReportBudgetVariance
    {
        public string GetReportSQL(ReportSQLCommand.BudgetVariance queryId)
        {
            string query = string.Empty;
            switch (queryId)
            {
                #region Budget Variance
                case ReportSQLCommand.BudgetVariance.BudgetDetails: // SUM(BL.APPROVED_AMOUNT) SUM(BL.APPROVED_AMOUNT) ON 11.03.2018
                    {
                        query = @" SELECT ML.LEDGER_CODE,
                                       ML.LEDGER_ID, ML.LEDGER_NAME, MLG.LEDGER_GROUP, MLG.NATURE_ID,
                                       SUM(BL.APPROVED_AMOUNT/?EXCHANGE_RATE) AS APPROVED_AMOUNT, 
                                       SUM(BL.PROPOSED_AMOUNT/?EXCHANGE_RATE) AS PROPOSED_AMOUNT,
                                       BL.TRANS_MODE,
                                       ML.BUDGET_GROUP_ID, ML.BUDGET_SUB_GROUP_ID,
                                       IFNULL(BG.BUDGET_GROUP, '') AS BUDGET_GROUP, IFNULL(BSG.BUDGET_SUB_GROUP, '') AS BUDGET_SUB_GROUP,
                                       IF(BL.TRANS_MODE='CR','Income','Expenditure')  AS BUDGET_NATURE,
                                       '' AS ACTUAL_AMOUNT,
                                       0 AS YEAR_TO,
                                       'IN %'
                                       FROM BUDGET_LEDGER BL
                                       LEFT JOIN BUDGET_MASTER BM ON BL.BUDGET_ID = BM.BUDGET_ID
                                       LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = BL.LEDGER_ID
                                       LEFT JOIN BUDGET_GROUP BG ON BG.BUDGET_GROUP_ID = ML.BUDGET_GROUP_ID
                                       LEFT JOIN BUDGET_SUB_GROUP BSG ON BSG.BUDGET_SUB_GROUP_ID = ML.BUDGET_SUB_GROUP_ID
                                       INNER JOIN MASTER_LEDGER_GROUP MLG ON ML.GROUP_ID = MLG.GROUP_ID AND ML.LEDGER_ID = BL.LEDGER_ID
                                       WHERE BM.BUDGET_ID IN (?BUDGET_ID) AND BL.PROPOSED_AMOUNT <> 0
                                    GROUP BY ML.LEDGER_ID,TRANS_MODE ORDER BY LEDGER_CODE,BUDGET_SUB_GROUP;";

                        break;
                    }

                /// is_active =1, load the Active Budget details
                /// 
                ///
                case ReportSQLCommand.BudgetVariance.BudgetDetailsByProject:
                    {
                        query = "SELECT BM.BUDGET_ID, ML.LEDGER_ID, MLG.NATURE_ID, ML.LEDGER_CODE,ML.LEDGER_NAME, MLG.GROUP_CODE, MLG.LEDGER_GROUP,\n" +
                                    "SUM(BL.APPROVED_AMOUNT) AS APPROVED_AMOUNT,\n" +
                                    "SUM(BL.PROPOSED_AMOUNT) AS PROPOSED_AMOUNT, BL.TRANS_MODE,\n" +
                                    "CASE\n" +
                                    "WHEN BL.TRANS_MODE = 'DR' THEN\n" +
                                    " IF(ML.BUDGET_GROUP_ID = 1, 'Recurring Expenses', IF(ML.BUDGET_GROUP_ID = 2,'Non - Recurring Expenses',''))\n" +
                                    " ELSE ' '\n" +
                                    "END AS BUDGET_GROUP,\n" +
                                    "IF(BL.TRANS_MODE = 'DR',ML.BUDGET_GROUP_ID, 0) AS BUDGET_GROUP_ID,\n" +
                                    "CASE\n" +
                                    "WHEN BL.TRANS_MODE = 'DR' THEN\n" +
                                    " IF(ML.BUDGET_SUB_GROUP_ID = 1, 'Regular Expenses', IF(ML.BUDGET_SUB_GROUP_ID = 2,'Non - Regular Expenses',''))\n" +
                                    " ELSE ''\n" +
                                    "END AS BUDGET_SUB_GROUP,\n" +
                                    "IF(BL.TRANS_MODE='CR','Income','Expenditure')  AS BUDGET_NATURE,\n" +
                                    "GROUP_CONCAT(BP.PROJECT_ID ORDER BY BP.PROJECT) AS PROJECT_ID, GROUP_CONCAT(BP.PROJECT ORDER BY BP.PROJECT) AS PROJECT\n" +
                                    "FROM BUDGET_LEDGER BL\n" +
                                    "LEFT JOIN BUDGET_MASTER BM ON BL.BUDGET_ID = BM.BUDGET_ID\n" +
                                    "LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = BL.LEDGER_ID\n" +
                                    "INNER JOIN MASTER_LEDGER_GROUP MLG ON ML.GROUP_ID = MLG.GROUP_ID AND ML.LEDGER_ID = BL.LEDGER_ID\n" +
                                    "INNER JOIN (\n" +
                                    "      SELECT BP.BUDGET_ID, GROUP_CONCAT(BP.PROJECT_ID) AS PROJECT_ID, GROUP_CONCAT(MP.PROJECT) AS PROJECT\n" +
                                    "      FROM BUDGET_PROJECT BP\n" +
                                    "      INNER JOIN BUDGET_MASTER BM ON BM.BUDGET_ID = BP.BUDGET_ID AND BM.IS_ACTIVE=1\n" +
                                    "      INNER JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = BP.PROJECT_ID\n" +
                                    "      WHERE (BM.DATE_FROM >= ?DATE_FROM  AND BM.DATE_TO <= ?DATE_TO)\n" +
                                    "      GROUP BY BM.BUDGET_ID\n" +
                                    "    ) AS BP ON BP.BUDGET_ID = BM.BUDGET_ID\n" +
                                    "WHERE (BM.DATE_FROM >= ?DATE_FROM AND BM.DATE_TO <= ?DATE_TO) AND BL.PROPOSED_AMOUNT <> 0\n" +
                                    "AND BP.PROJECT_ID IN (?PROJECT_ID)\n" +
                                    "GROUP BY BM.BUDGET_ID, ML.LEDGER_ID,TRANS_MODE\n" +
                                    "ORDER BY LEDGER_CODE,BUDGET_SUB_GROUP;";
                        break;
                    }
                case ReportSQLCommand.BudgetVariance.BudgetCCLedgerwise:
                    {
                        query = @"SELECT MC.COST_CENTRE_ID, IFNULL(BCC.LEDGER_ID, 0) AS LEDGER_ID, MC.ABBREVATION, MC.COST_CENTRE_NAME, 
                                    IFNULL(BSD.NEW_COUNT, 0) AS NEW_COUNT, IFNULL(BSD.PRESENT_COUNT, 0) AS PRESENT_COUNT,
                                    IFNULL(LG.LEDGER_GROUP, '') AS LEDGER_GROUP, IFNULL(ML.LEDGER_NAME, '') AS LEDGER_NAME, 
                                    IFNULL(BCC.PROPOSED_AMOUNT, 0) AS PROPOSED_AMOUNT, IFNULL(BCC.APPROVED_AMOUNT, 0) AS APPROVED_AMOUNT, IFNULL(BCC.TRANS_MODE, '') AS  TRANS_MODE
                                    FROM MASTER_COST_CENTRE MC
                                    LEFT JOIN BUDGET_STRENGTH_DETAIL BSD ON BSD.COST_CENTRE_ID = MC.COST_CENTRE_ID AND BSD.BUDGET_ID IN (?BUDGET_ID)
                                    LEFT JOIN BUDGET_COSTCENTER BCC ON BCC.COST_CENTRE_ID = MC.COST_CENTRE_ID AND BCC.BUDGET_ID IN (?BUDGET_ID) AND  BCC.PROPOSED_AMOUNT>0
                                    LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = BCC.LEDGER_ID
                                    LEFT JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID;"; //AND BCC.TRANS_MODE = 'CR' AND 
                        break;
                    }

                case ReportSQLCommand.BudgetVariance.BudgetVarianceReport:
                    {
                        query = @"SELECT T.LEDGER_ID, T.LEDGER_CODE, T.LEDGER_NAME, T.LEDGER_GROUP, T.BUDGET_GROUP, T.BUDGET_GROUP_ID, IFNULL(T.COST_CENTRE_IDs,'') AS COST_CENTRE_IDs,
                                  T.BUDGET_SUB_GROUP, T.BUDGET_NATURE, T.APPROVED_AMOUNT, T.ACTUAL_AMOUNT, T.TRANS_MODE,
                                  (IFNULL(T.ACTUAL_AMOUNT, 0)) - (IFNULL(T.APPROVED_AMOUNT, 0)) AS BUDGET_VARIANCE,
                                  ROUND((((IFNULL(T.ACTUAL_AMOUNT, 0)) - (IFNULL(T.APPROVED_AMOUNT, 0)))/ (T.APPROVED_AMOUNT))* 100) AS PERCENTAGE_NUMBER,
                                  CONCAT(ROUND((((IFNULL(T.ACTUAL_AMOUNT, 0)) - (IFNULL(T.APPROVED_AMOUNT, 0)))/ (T.APPROVED_AMOUNT))* 100), ' %') AS PERCENTAGE
                                  FROM
                                    (SELECT ML.LEDGER_ID, ML.BUDGET_GROUP_ID, ML.BUDGET_SUB_GROUP_ID, IFNULL(BCC.COST_CENTRE_IDs,'') AS COST_CENTRE_IDs, ML.LEDGER_CODE, 
                                       IFNULL(BG.BUDGET_GROUP, '') AS BUDGET_GROUP, IFNULL(BSG.BUDGET_SUB_GROUP, '') AS BUDGET_SUB_GROUP,
                                       IF(BL.TRANS_MODE='CR','Income','Expenditure')  AS BUDGET_NATURE,
                                       ML.LEDGER_NAME, MLG.LEDGER_GROUP, MLG.NATURE_ID, BL.TRANS_MODE,
                                       SUM(BL.APPROVED_AMOUNT/?EXCHANGE_RATE) AS APPROVED_AMOUNT,
                                       IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '2', CASE WHEN NATURE_ID IN (1, 2) THEN
                                         IF(NATURE_ID = 1, IFNULL(ACTBAL.AMOUNT_CR, 0) - IFNULL(ACTBAL.AMOUNT_DR, 0), IFNULL(ACTBAL.AMOUNT_DR, 0) - IFNULL(ACTBAL.AMOUNT_CR, 0))
                                          ELSE IF('CR' = BL.TRANS_MODE, IFNULL(ACTBAL.AMOUNT_CR, 0),IFNULL(ACTBAL.AMOUNT_DR, 0))
                                         END , IF('CR' = BL.TRANS_MODE, IFNULL(ACTBAL.AMOUNT_CR, 0),IFNULL(ACTBAL.AMOUNT_DR, 0))) AS ACTUAL_AMOUNT
                                    FROM BUDGET_LEDGER BL
                                    LEFT JOIN BUDGET_MASTER BM ON BL.BUDGET_ID = BM.BUDGET_ID
                                    LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = BL.LEDGER_ID
                                    INNER JOIN MASTER_LEDGER_GROUP MLG ON ML.GROUP_ID = MLG.GROUP_ID AND ML.LEDGER_ID = BL.LEDGER_ID
                                    LEFT JOIN BUDGET_GROUP BG ON BG.BUDGET_GROUP_ID = ML.BUDGET_GROUP_ID
                                    LEFT JOIN BUDGET_SUB_GROUP BSG ON BSG.BUDGET_SUB_GROUP_ID = ML.BUDGET_SUB_GROUP_ID
                                    LEFT JOIN (SELECT VT.LEDGER_ID, 
                                            IFNULL(SUM(IF(VT.TRANS_MODE='CR', (VT.AMOUNT * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)), 0)), 0) AS AMOUNT_CR, 
                                            IFNULL(SUM(IF(VT.TRANS_MODE='DR', (VT.AMOUNT * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)) ,0)), 0) AS AMOUNT_DR
                                            FROM VOUCHER_MASTER_TRANS VMT
                                            INNER JOIN VOUCHER_TRANS VT ON VMT.VOUCHER_ID = VT.VOUCHER_ID
                                            INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID  = VT.LEDGER_ID
                                            WHERE VMT.STATUS = 1 AND VMT.PROJECT_ID IN (?PROJECT_ID) AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND 
                                            IF(?CURRENCY_COUNTRY_ID > 0, VMT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1) AND 
                                            -- { AND ( (VMT.VOUCHER_TYPE NOT IN (?VOUCHER_TYPE)) OR (VMT.VOUCHER_TYPE = 'JN' AND VMT.VOUCHER_SUB_TYPE ='FD') )}
                                            IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '0',
                                             ( (VMT.VOUCHER_TYPE NOT IN ('JN')) OR (VMT.VOUCHER_TYPE = 'JN' AND VMT.VOUCHER_SUB_TYPE ='FD') ), 1=1)
                                            GROUP BY VT.LEDGER_ID) ACTBAL ON ACTBAL.LEDGER_ID = BL.LEDGER_ID

                                    LEFT JOIN (SELECT BCC.BUDGET_ID, BCC.LEDGER_ID, GROUP_CONCAT(BCC.COST_CENTRE_ID) AS COST_CENTRE_IDs FROM BUDGET_COSTCENTER BCC
                                               WHERE 1=1 {AND BCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)} GROUP BY BUDGET_ID, LEDGER_ID) BCC
                                                 ON BCC.BUDGET_ID = BM.BUDGET_ID AND BCC.LEDGER_ID = BL.LEDGER_ID

                                    WHERE BM.BUDGET_ID IN (?BUDGET_ID) AND BM.BUDGET_ACTION IN (2) AND BL.APPROVED_AMOUNT > 0 GROUP BY ML.LEDGER_ID, BL.TRANS_MODE) AS T;";

                        break;
                    }
                case ReportSQLCommand.BudgetVariance.BudgetCCVariation:
                    {
                        query = @"SELECT T.GROUP_ID, T.LEDGER_ID AS LEDGER_ID, T.COST_CENTRE_ID, T.ABBREVATION, T.COST_CENTRE_NAME, T.COST_CENTRE_CATEGORY_NAME, T.LEDGER_NAME, 
                                 T.PROPOSED_AMOUNT, T.APPROVED_AMOUNT, T.BUDGET_TRANS_MODE, T.ACTUAL_AMOUNT,
                                 (IFNULL(T.ACTUAL_AMOUNT, 0)) - (IFNULL(T.APPROVED_AMOUNT, 0)) AS BUDGET_VARIANCE,
                                  ROUND((((IFNULL(T.ACTUAL_AMOUNT, 0)) - (IFNULL(T.APPROVED_AMOUNT, 0)))/ (T.APPROVED_AMOUNT))* 100) AS PERCENTAGE_NUMBER,
                                  CONCAT(ROUND((((IFNULL(T.ACTUAL_AMOUNT, 0)) - (IFNULL(T.APPROVED_AMOUNT, 0)))/ (T.APPROVED_AMOUNT))* 100), ' %') AS PERCENTAGE
                                 FROM (SELECT LG.GROUP_ID, BCC.LEDGER_ID AS LEDGER_ID, BCC.COST_CENTRE_ID, MC.ABBREVATION, MC.COST_CENTRE_NAME, 
                                    IFNULL(MCCC.COST_CENTRE_CATEGORY_NAME,'') AS COST_CENTRE_CATEGORY_NAME, IFNULL(ML.LEDGER_NAME, '') AS LEDGER_NAME, 
                                    SUM(IFNULL(BCC.PROPOSED_AMOUNT, 0)) AS PROPOSED_AMOUNT, SUM(IFNULL(BCC.APPROVED_AMOUNT, 0)) AS APPROVED_AMOUNT, BCC.TRANS_MODE AS BUDGET_TRANS_MODE,
                                    IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '2', CASE WHEN NATURE_ID IN (1, 2) THEN
                                         IF(NATURE_ID = 1, IFNULL(ACTUAL.AMOUNT_CR, 0) - IFNULL(ACTUAL.AMOUNT_DR, 0), IFNULL(ACTUAL.AMOUNT_DR, 0) - IFNULL(ACTUAL.AMOUNT_CR, 0))
                                          ELSE IF('CR' = BL.TRANS_MODE, IFNULL(ACTUAL.AMOUNT_CR, 0),IFNULL(ACTUAL.AMOUNT_DR, 0))
                                         END , IF('CR' = BL.TRANS_MODE, IFNULL(ACTUAL.AMOUNT_CR, 0),IFNULL(ACTUAL.AMOUNT_DR, 0))) AS ACTUAL_AMOUNT
                                    FROM BUDGET_COSTCENTER BCC
                                    INNER JOIN BUDGET_LEDGER BL ON BL.BUDGET_ID = BCC.BUDGET_ID AND BL.LEDGER_ID = BCC.LEDGER_ID AND BL.TRANS_MODE = BCC.TRANS_MODE         
                                    INNER JOIN BUDGET_MASTER BM ON BM.BUDGET_ID = BL.BUDGET_ID AND BM.BUDGET_ID = BCC.BUDGET_ID
                                    INNER JOIN MASTER_COST_CENTRE MC ON BCC.COST_CENTRE_ID = MC.COST_CENTRE_ID
                                    LEFT JOIN COSTCATEGORY_COSTCENTRE CC ON CC.COST_CENTRE_ID = MC.COST_CENTRE_ID
                                    LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC ON MCCC.COST_CENTRECATEGORY_ID= CC.COST_CATEGORY_ID
                                    INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = BCC.LEDGER_ID
                                    INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID

                                    LEFT JOIN (SELECT VCC.LEDGER_ID, VCC.COST_CENTRE_ID, IFNULL(SUM(IF(VT.TRANS_MODE='CR', VCC.AMOUNT,0)), 0) AS AMOUNT_CR, 
                                            IFNULL(SUM(IF(VT.TRANS_MODE='DR', VCC.AMOUNT,0)), 0) AS AMOUNT_DR
                                            FROM VOUCHER_MASTER_TRANS VMT
                                            INNER JOIN VOUCHER_TRANS VT ON VMT.VOUCHER_ID = VT.VOUCHER_ID
                                            INNER JOIN VOUCHER_CC_TRANS VCC ON VCC.VOUCHER_ID = VT.VOUCHER_ID AND VCC.LEDGER_ID = VT.LEDGER_ID
                                            INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID  = VT.LEDGER_ID
                                            WHERE VMT.STATUS = 1 AND VMT.PROJECT_ID IN (?PROJECT_ID) AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND 
                                            -- { AND ( (VMT.VOUCHER_TYPE NOT IN (?VOUCHER_TYPE)) OR (VMT.VOUCHER_TYPE = 'JN' AND VMT.VOUCHER_SUB_TYPE ='FD') )}
                                            IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '0',
                                             ( (VMT.VOUCHER_TYPE NOT IN ('JN')) OR (VMT.VOUCHER_TYPE = 'JN' AND VMT.VOUCHER_SUB_TYPE ='FD') ), 1=1)
                                            GROUP BY VCC.LEDGER_ID, VCC.COST_CENTRE_ID) AS ACTUAL ON ACTUAL.LEDGER_ID = BCC.LEDGER_ID AND ACTUAL.COST_CENTRE_ID = BCC.COST_CENTRE_ID
                                    
                                    WHERE BCC.BUDGET_ID IN (?BUDGET_ID) AND BM.BUDGET_ID IN (?BUDGET_ID) AND BM.IS_ACTIVE=1 AND BM.BUDGET_ACTION IN (2)
                                    {AND MC.COST_CENTRE_ID IN (?COST_CENTRE_ID)} AND ML.GROUP_ID NOT IN (12, 13, 14) AND 
                                    (BCC.APPROVED_AMOUNT>0 OR AMOUNT_DR > 0 ) GROUP BY BCC.LEDGER_ID, BCC.COST_CENTRE_ID, BCC.TRANS_MODE) AS T";
                        break;
                    }
                case ReportSQLCommand.BudgetVariance.BudgetMonthDistribution:
                    {
                        query = @"SELECT BM.BUDGET_ID,
                                               BL.LEDGER_ID,
                                               MLG.GROUP_ID,
                                               ML.LEDGER_NAME,
                                               MLG.LEDGER_GROUP,
                                               BL.APPROVED_AMOUNT AS ANNUAL_BUDGET_AMOUNT,
                                               IFNULL(ANNUAL_ACTUAL.AMOUNT, 0) AS ANNUAL_ACTUAL_AMOUNT,
                                               IFNULL(BL.APPROVED_AMOUNT,0) - (IFNULL(ANNUAL_ACTUAL.AMOUNT,0)) AS ANNUAL_VARIANCE_AMOUNT,
                                               IFNULL(PMBD.PROPOSED_AMOUNT, 0) AS PREVIOUS_MONTH_PROPOSED_BUDGET_AMOUNT,
                                               IFNULL(PMBD.APPROVED_AMOUNT, 0) AS PREVIOUS_MONTH_APPROVED_AMOUNT,
                                               IFNULL(PMONTH_ACTUAL.AMOUNT, 0) AS PREVIOUS_MONTH_ACTUAL_AMOUNT,
                                               IFNULL(PMBD.APPROVED_AMOUNT,0) - IFNULL(PMONTH_ACTUAL.AMOUNT,0) AS PREVIOUS_MONTH_VARIANCE_AMOUNT,
                                               IFNULL(CMBD.PROPOSED_AMOUNT, 0) AS MONTH_PROPOSED_BUDGET_AMOUNT,
                                               IFNULL(CMBD.APPROVED_AMOUNT, 0) AS MONTH_APPROVED_BUDGET_AMOUNT,
                                               PMBD.NARRATION
                                          FROM BUDGET_MASTER BM
                                         INNER JOIN BUDGET_LEDGER BL
                                            ON BL.BUDGET_ID = BM.BUDGET_ID
                                         INNER JOIN MASTER_LEDGER ML
                                            ON ML.LEDGER_ID = BL.LEDGER_ID
                                         INNER JOIN MASTER_LEDGER_GROUP MLG
                                            ON MLG.GROUP_ID = ML.GROUP_ID
                                          LEFT JOIN BUDGET_MONTH_DISTRIBUTION CMBD
                                            ON CMBD.BUDGET_ID = BM.BUDGET_ID
                                           AND CMBD.LEDGER_ID = BL.LEDGER_ID
                                           AND CMBD.MONTH = ?DATE_FROM
                                          LEFT JOIN BUDGET_MONTH_DISTRIBUTION PMBD
                                            ON PMBD.BUDGET_ID = BM.BUDGET_ID
                                           AND PMBD.LEDGER_ID = BL.LEDGER_ID
                                           AND PMBD.MONTH = DATE_ADD(?DATE_FROM, INTERVAL - 1 MONTH)
                                          LEFT JOIN (SELECT VT.LEDGER_ID,
                                                            SUM(IF(VT.TRANS_MODE = 'DR', VT.AMOUNT, -VT.AMOUNT)) AS AMOUNT
                                                       FROM VOUCHER_TRANS VT
                                                      INNER JOIN VOUCHER_MASTER_TRANS VMT
                                                         ON VT.VOUCHER_ID = VMT.VOUCHER_ID
                                                      WHERE VMT.PROJECT_ID IN (?PROJECT_ID)
                                                        AND VMT.STATUS = 1
                                                        AND VOUCHER_DATE BETWEEN ?YEAR_FROM AND
                                                            ?YEAR_TO
                                                      GROUP BY VT.LEDGER_ID) AS ANNUAL_ACTUAL
                                            ON ANNUAL_ACTUAL.LEDGER_ID = BL.LEDGER_ID
                                            LEFT JOIN (SELECT LEDGER_ID, IFNULL(APPROVED_AMOUNT,0) AS ANNUAL_DISTRIBUTED_AMOUNT
                                             FROM BUDGET_MONTH_DISTRIBUTION WHERE BUDGET_ID=?BUDGET_ID GROUP BY LEDGER_ID) AS ADA ON ADA.LEDGER_ID = BL.LEDGER_ID
                                          LEFT JOIN (SELECT VT.LEDGER_ID,
                                                            SUM(IF(VT.TRANS_MODE = 'CR', -VT.AMOUNT, VT.AMOUNT)) AS AMOUNT
                                                       FROM VOUCHER_TRANS VT
                                                      INNER JOIN VOUCHER_MASTER_TRANS VMT
                                                         ON VT.VOUCHER_ID = VMT.VOUCHER_ID
                                                      WHERE VMT.PROJECT_ID IN (?PROJECT_ID)
                                                        AND VMT.STATUS = 1
                                                        AND VOUCHER_DATE BETWEEN
                                                            DATE_ADD(?DATE_FROM, INTERVAL - 1 MONTH) AND
                                                            DATE_ADD(?DATE_TO, INTERVAL - 1 MONTH)
                                                      GROUP BY VT.LEDGER_ID) AS PMONTH_ACTUAL
                                            ON PMONTH_ACTUAL.LEDGER_ID = BL.LEDGER_ID
                                         WHERE BM.BUDGET_ID =?BUDGET_ID";
                        break;
                    }
                case ReportSQLCommand.BudgetVariance.BudgetApprovalByMonth:
                    {
                        query = @"SELECT PL.PROJECT_ID, ML.GROUP_ID, MLG.NATURE_ID, MNN.NATURE, ML.SORT_ID, ML.LEDGER_ID, 0 AS SUB_LEDGER_ID, ML.ACCESS_FLAG, ML.LEDGER_CODE, ML.LEDGER_NAME AS MAIN_LEDGER_NAME,
                                ML.LEDGER_NAME, '' AS SUB_LEDGER_NAME, IF(MLG.NATURE_ID = 1, 'Incomes', IF(MLG.NATURE_ID = 2,'Expenses', IF(MLG.NATURE_ID = 3, 'Assets', 'Liabilities'))) AS LEDGER_GROUP1,
                                MLG.LEDGER_GROUP,
                                IFNULL(M1.PROPOSED_AMOUNT,0) AS M1_PROPOSED_AMOUNT, IFNULL(M1.APPROVED_AMOUNT,0) AS M1_APPROVED_AMOUNT, 
                                IFNULL(PREV_BUDGET.PROPOSED_AMOUNT,0) AS PREV_PROPOSED_AMOUNT, IFNULL(PREV_BUDGET.APPROVED_AMOUNT,0) AS PREV_APPROVED_AMOUNT, 
                                IFNULL(PREV_ACTUAL.PREV_ACTUAL_SPENT,0) - IFNULL(PREV_SUB_LEDGER_ACTUAL.AMOUNT,0) AS PREV_ACTUAL_SPENT,
                                IFNULL(M2.PROPOSED_AMOUNT,0) AS M2_PROPOSED_AMOUNT, IFNULL(M2.APPROVED_AMOUNT,0) AS M2_APPROVED_AMOUNT, 
                                CONCAT(IFNULL(M1.NARRATION,''), CONCAT( IF(M2.NARRATION IS NULL OR M2.NARRATION='','', '/') , IFNULL(M2.NARRATION,''))) AS NARRATION, PREV_BUDGET.NARRATION AS NARRATION1,
                                CASE WHEN ML.BUDGET_GROUP_ID = 1 THEN 'Recurring Expenses' WHEN ML.BUDGET_GROUP_ID = 2 THEN 'Non - Recurring Expenses'
                                ELSE '' END AS BUDGET_GROUP, ML.BUDGET_GROUP_ID,
                                CASE WHEN ML.BUDGET_SUB_GROUP_ID = 1 THEN 'Regular Expenses' WHEN ML.BUDGET_SUB_GROUP_ID = 2 THEN 'Non - Regular Expenses'
                                ELSE '' END AS BUDGET_SUB_GROUP, ML.BUDGET_SUB_GROUP_ID
                                FROM MASTER_LEDGER ML
                                INNER JOIN MASTER_LEDGER_GROUP MLG ON ML.GROUP_ID = MLG.GROUP_ID
                                INNER JOIN MASTER_NATURE MNN ON MNN.NATURE_ID = MLG.NATURE_ID
                                INNER JOIN PROJECT_LEDGER PL ON PL.LEDGER_ID = ML.LEDGER_ID
                                INNER JOIN PROJECT_BUDGET_LEDGER PBL ON PBL.LEDGER_ID = PL.LEDGER_ID AND PBL.PROJECT_ID = PL.PROJECT_ID 
                                LEFT JOIN (SELECT BM.BUDGET_ID, BL.LEDGER_ID, BM.DATE_FROM, BM.DATE_TO, BL.PROPOSED_AMOUNT, BL.APPROVED_AMOUNT, BL.NARRATION, 0 AS SUB_LEDGER_ALONE
                                    FROM BUDGET_MASTER BM
                                    LEFT JOIN BUDGET_LEDGER BL ON BM.BUDGET_ID = BL.BUDGET_ID
                                    WHERE BM.BUDGET_ID IN (?MONTH1_BUDGET_ID) AND BL.TRANS_MODE = 'DR'
                                    -- Un Budgetd Legers (Sub Ledgers alone)
                                    UNION ALL SELECT BM.BUDGET_ID, BSL.LEDGER_ID, BM.DATE_FROM, BM.DATE_TO, 0 AS PROPOSED_AMOUNT, 0 AS APPROVED_AMOUNT, '' AS NARRATION, 1 AS SUB_LEDGER_ALONE
                                    FROM BUDGET_MASTER BM
                                    INNER JOIN BUDGET_SUB_LEDGER BSL ON BM.BUDGET_ID = BSL.BUDGET_ID
                                    LEFT JOIN BUDGET_LEDGER BL ON BL.BUDGET_ID = BM.BUDGET_ID AND BL.LEDGER_ID = BSL.LEDGER_ID
                                    WHERE BM.BUDGET_ID IN (?MONTH1_BUDGET_ID) AND BSL.TRANS_MODE ='DR' AND BL.LEDGER_ID IS NULL GROUP BY LEDGER_ID
                                    ) AS M1 ON M1.LEDGER_ID = ML.LEDGER_ID
                                LEFT JOIN (SELECT BM.BUDGET_ID, BL.LEDGER_ID, BM.DATE_FROM, BM.DATE_TO, BL.PROPOSED_AMOUNT, BL.APPROVED_AMOUNT, NARRATION, 0 AS SUB_LEDGER_ALONE
                                    FROM BUDGET_MASTER BM
                                    LEFT JOIN BUDGET_LEDGER BL ON BM.BUDGET_ID = BL.BUDGET_ID
                                    WHERE BM.BUDGET_ID IN (?MONTH2_BUDGET_ID) AND BL.TRANS_MODE = 'DR'
                                    -- Un Budgetd Legers (Sub Ledgers alone)
                                    UNION ALL SELECT BM.BUDGET_ID, BSL.LEDGER_ID, BM.DATE_FROM, BM.DATE_TO, 0 AS PROPOSED_AMOUNT, 0 AS APPROVED_AMOUNT, '' AS NARRATION, 1 AS SUB_LEDGER_ALONE
                                    FROM BUDGET_MASTER BM
                                    INNER JOIN BUDGET_SUB_LEDGER BSL ON BM.BUDGET_ID = BSL.BUDGET_ID
                                    LEFT JOIN BUDGET_LEDGER BL ON BL.BUDGET_ID = BM.BUDGET_ID AND BL.LEDGER_ID = BSL.LEDGER_ID
                                    WHERE BM.BUDGET_ID IN (?MONTH2_BUDGET_ID) AND BSL.TRANS_MODE ='DR' AND BL.LEDGER_ID IS NULL GROUP BY LEDGER_ID
                                    ) AS M2 ON M2.LEDGER_ID = ML.LEDGER_ID
                                LEFT JOIN (SELECT BM.BUDGET_ID, BL.LEDGER_ID, BM.DATE_FROM, BM.DATE_TO, BL.PROPOSED_AMOUNT, BL.APPROVED_AMOUNT, BL.NARRATION
                                    FROM BUDGET_MASTER BM
                                    LEFT JOIN BUDGET_LEDGER BL ON BM.BUDGET_ID = BL.BUDGET_ID
                                    WHERE BM.BUDGET_ID IN (?PREVIOUS_BUDGET_ID) AND BL.TRANS_MODE = 'DR') AS PREV_BUDGET ON PREV_BUDGET.LEDGER_ID = ML.LEDGER_ID
                                LEFT JOIN (SELECT VT.LEDGER_ID, SUM(VT.AMOUNT) AS PREV_ACTUAL_SPENT
                                    FROM VOUCHER_TRANS VT
                                    INNER JOIN VOUCHER_MASTER_TRANS VMT ON VT.VOUCHER_ID = VMT.VOUCHER_ID
                                    WHERE VMT.PROJECT_ID IN (?PROJECT_ID) AND (VT.TRANS_MODE = 'DR' AND VMT.VOUCHER_TYPE IN ('RC', 'PY'))
                                    AND VMT.STATUS = 1 AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO
                                    GROUP BY VT.LEDGER_ID) AS PREV_ACTUAL ON PREV_ACTUAL.LEDGER_ID = ML.LEDGER_ID
                                   LEFT JOIN (SELECT VT.LEDGER_ID, SUM(VSL.AMOUNT) AS AMOUNT
                                               FROM VOUCHER_TRANS VT
                                              INNER JOIN VOUCHER_MASTER_TRANS VMT
                                                 ON VT.VOUCHER_ID = VMT.VOUCHER_ID
                                              INNER JOIN VOUCHER_SUB_LEDGER_TRANS VSL
                                                 ON VSL.LEDGER_ID = VT.LEDGER_ID AND VSL.VOUCHER_ID=VT.VOUCHER_ID
                                              WHERE VMT.PROJECT_ID IN (?PROJECT_ID)
                                                AND (VT.TRANS_MODE = 'DR' AND
                                                    VMT.VOUCHER_TYPE IN ('RC', 'PY'))
                                                AND VMT.STATUS = 1
                                                AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO
                                              GROUP BY VT.LEDGER_ID) AS PREV_SUB_LEDGER_ACTUAL   
                                        ON PREV_SUB_LEDGER_ACTUAL.LEDGER_ID = ML.LEDGER_ID
                                WHERE PL.PROJECT_ID IN (?PROJECT_ID) AND ((M1.PROPOSED_AMOUNT>0 OR M1.APPROVED_AMOUNT>0) OR (M2.PROPOSED_AMOUNT>0 OR M2.APPROVED_AMOUNT>0) OR M1.SUB_LEDGER_ALONE=1 OR M2.SUB_LEDGER_ALONE=1 OR BUDGET_GROUP_ID=1)
                                GROUP BY ML.LEDGER_ID 
                            UNION ALL
                            SELECT PL.PROJECT_ID, ML.GROUP_ID, MLG.NATURE_ID, MNN.NATURE, ML.SORT_ID, ML.LEDGER_ID, MSL.SUB_LEDGER_ID, ML.ACCESS_FLAG, ML.LEDGER_CODE, ML.LEDGER_NAME AS MAIN_LEDGER_NAME,
                            CONCAT('  ', MSL.SUB_LEDGER_NAME) AS LEDGER_NAME, MSL.SUB_LEDGER_NAME AS SUB_LEDGER_NAME, IF(MLG.NATURE_ID = 1, 'Incomes', IF(MLG.NATURE_ID = 2,'Expenses', IF(MLG.NATURE_ID = 3, 'Assets', 'Liabilities'))) AS LEDGER_GROUP1,
                            MLG.LEDGER_GROUP, IFNULL(M1.PROPOSED_AMOUNT,0) AS M1_PROPOSED_AMOUNT, IFNULL(M1.APPROVED_AMOUNT,0) AS M1_APPROVED_AMOUNT,
                            IFNULL(PREV_BUDGET.PROPOSED_AMOUNT,0) AS PREV_PROPOSED_AMOUNT, IFNULL(PREV_BUDGET.APPROVED_AMOUNT,0) AS PREV_APPROVED_AMOUNT,
                            IFNULL(PREV_ACTUAL.PREV_ACTUAL_SPENT,0) AS PREV_ACTUAL_SPENT,
                            IFNULL(M2.PROPOSED_AMOUNT,0) AS M2_PROPOSED_AMOUNT, IFNULL(M2.APPROVED_AMOUNT,0) AS M2_APPROVED_AMOUNT,
                            CONCAT(IFNULL(M1.NARRATION,''), CONCAT( IF(M2.NARRATION IS NULL OR M2.NARRATION='','', '/') , IFNULL(M2.NARRATION,''))) AS NARRATION, PREV_BUDGET.NARRATION AS NARRATION1,
                                                            CASE WHEN ML.BUDGET_GROUP_ID = 1 THEN 'Recurring Expenses' WHEN ML.BUDGET_GROUP_ID = 2 THEN 'Non - Recurring Expenses'
                                                            ELSE '' END AS BUDGET_GROUP, ML.BUDGET_GROUP_ID,
                                                            CASE WHEN ML.BUDGET_SUB_GROUP_ID = 1 THEN 'Regular Expenses' WHEN ML.BUDGET_SUB_GROUP_ID = 2 THEN 'Non - Regular Expenses'
                                                            ELSE '' END AS BUDGET_SUB_GROUP, ML.BUDGET_SUB_GROUP_ID
                            FROM MASTER_LEDGER ML
                            INNER JOIN MASTER_LEDGER_GROUP MLG ON ML.GROUP_ID = MLG.GROUP_ID
                            INNER JOIN MASTER_NATURE MNN ON MNN.NATURE_ID = MLG.NATURE_ID
                            INNER JOIN PROJECT_LEDGER PL ON PL.LEDGER_ID = ML.LEDGER_ID
                            INNER JOIN PROJECT_BUDGET_LEDGER PBL ON PBL.LEDGER_ID = PL.LEDGER_ID AND PBL.PROJECT_ID = PL.PROJECT_ID 
                            INNER JOIN LEDGER_SUB_LEDGER LSL ON LSL.LEDGER_ID = ML.LEDGER_ID
                            INNER JOIN MASTER_SUB_LEDGER MSL ON MSL.SUB_LEDGER_ID = LSL.SUB_LEDGER_ID
                            LEFT JOIN (SELECT BM.BUDGET_ID, BSL.LEDGER_ID, BSL.SUB_LEDGER_ID, BM.DATE_FROM, BM.DATE_TO, BSL.PROPOSED_AMOUNT, BSL.APPROVED_AMOUNT, NARRATION
                              FROM BUDGET_MASTER BM
                              LEFT JOIN BUDGET_SUB_LEDGER BSL ON BSL.BUDGET_ID = BM.BUDGET_ID
                              -- LEFT JOIN BUDGET_LEDGER BL ON BM.BUDGET_ID = BL.BUDGET_ID
                              WHERE BM.BUDGET_ID IN (?MONTH1_BUDGET_ID) AND BSL.TRANS_MODE = 'DR') AS M1 ON M1.LEDGER_ID = ML.LEDGER_ID AND M1.SUB_LEDGER_ID = MSL.SUB_LEDGER_ID
                            LEFT JOIN (SELECT BM.BUDGET_ID, BSL.LEDGER_ID, BSL.SUB_LEDGER_ID, BM.DATE_FROM, BM.DATE_TO, BSL.PROPOSED_AMOUNT, BSL.APPROVED_AMOUNT, NARRATION
                              FROM BUDGET_MASTER BM
                              -- LEFT JOIN BUDGET_LEDGER BL ON BM.BUDGET_ID = BL.BUDGET_ID
                              LEFT JOIN BUDGET_SUB_LEDGER BSL ON BSL.BUDGET_ID = BM.BUDGET_ID
                              WHERE BM.BUDGET_ID IN (?MONTH2_BUDGET_ID) AND BSL.TRANS_MODE = 'DR') AS M2 ON M2.LEDGER_ID = ML.LEDGER_ID AND M2.SUB_LEDGER_ID = MSL.SUB_LEDGER_ID
                            LEFT JOIN (SELECT BM.BUDGET_ID, BSL.LEDGER_ID, BSL.SUB_LEDGER_ID, BM.DATE_FROM, BM.DATE_TO, BSL.PROPOSED_AMOUNT, BSL.APPROVED_AMOUNT, NARRATION
                              FROM BUDGET_MASTER BM
                              -- LEFT JOIN BUDGET_LEDGER BL ON BM.BUDGET_ID = BL.BUDGET_ID
                              LEFT JOIN BUDGET_SUB_LEDGER BSL ON BSL.BUDGET_ID = BSL.BUDGET_ID
                              WHERE BM.BUDGET_ID IN (?PREVIOUS_BUDGET_ID) AND BSL.TRANS_MODE = 'DR') AS PREV_BUDGET ON PREV_BUDGET.LEDGER_ID = ML.LEDGER_ID AND PREV_BUDGET.SUB_LEDGER_ID = MSL.SUB_LEDGER_ID
                            LEFT JOIN (SELECT VT.LEDGER_ID, VSL.SUB_LEDGER_ID, SUM(VSL.AMOUNT) AS PREV_ACTUAL_SPENT
                              FROM VOUCHER_TRANS VT
                              INNER JOIN VOUCHER_MASTER_TRANS VMT ON VT.VOUCHER_ID = VMT.VOUCHER_ID
                              INNER JOIN VOUCHER_SUB_LEDGER_TRANS VSL ON VSL.LEDGER_ID = VT.LEDGER_ID AND VSL.VOUCHER_ID=VT.VOUCHER_ID
                              WHERE VMT.PROJECT_ID IN (?PROJECT_ID) AND (VT.TRANS_MODE = 'DR' AND VMT.VOUCHER_TYPE IN ('RC', 'PY'))
                              AND VMT.STATUS = 1 AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO
                              GROUP BY VT.LEDGER_ID, VSL.SUB_LEDGER_ID) AS PREV_ACTUAL ON PREV_ACTUAL.LEDGER_ID = ML.LEDGER_ID AND PREV_ACTUAL.SUB_LEDGER_ID = MSL.SUB_LEDGER_ID
                             WHERE PL.PROJECT_ID IN (?PROJECT_ID) AND ((M1.PROPOSED_AMOUNT>0 OR M1.APPROVED_AMOUNT>0) OR (M2.PROPOSED_AMOUNT>0 OR M2.APPROVED_AMOUNT>0))
                            GROUP BY ML.LEDGER_ID,MSL.SUB_LEDGER_ID"; // //{ AND VMT.VOUCHER_TYPE NOT IN (?VOUCHER_TYPE) } SUM(IF(VT.TRANS_MODE = 'CR', VT.AMOUNT, -VT.AMOUNT)) 
                        break;
                    }
                #endregion

                #region Budget Variance  by Month
                case ReportSQLCommand.BudgetVariance.BudgetVaiacneReportByMonth:
                    {
                        query = @"SELECT MONTH(MONTH_YEAR) AS MONTH, LAST_DAY(MONTH_YEAR - INTERVAL 1 MONTH) + INTERVAL 1 DAY AS FIRST_DATE,
                                                    LAST_DAY(MONTH_YEAR - INTERVAL 0 MONTH) AS LAST_DATE,
                                        BL.AMOUNT AS TOTAL,
                                        DATE_FORMAT(MONTH_YEAR, '%b - %Y') AS DURATION,
                                        MLG.LEDGER_GROUP,
                                        ML.LEDGER_ID,
                                        ML.LEDGER_NAME,
                                        BM.BUDGET_NAME,
                                        ML.LEDGER_CODE,
                                        #IF(BL.AMOUNT IS NULL, 0, BL.AMOUNT) AS PROECTED_AMOUNT,
                                        IFNULL((T.AMOUNT), 0) AS ACTUAL_AMOUNT,
                                        IF((T.AMOUNT) > 0,
                                            IFNULL((T.AMOUNT), 0) - IFNULL((T.AMOUNT), 0),
                                            IFNULL((T.AMOUNT), 0) - IFNULL((BL.AMOUNT), 0)) AS BUDGET_VARIANCE,
                                        CASE
                                            WHEN (IFNULL((T.AMOUNT), 0) > 0 AND IFNULL((T.AMOUNT), 0) = 0) AND
                                                IFNULL((BL.AMOUNT), 0) = 0 THEN
                                            '-100'
                                            WHEN (IFNULL((T.AMOUNT), 0) = 0 AND IFNULL((T.AMOUNT), 0) > 0) AND
                                                IFNULL((BL.AMOUNT), 0) = 0 THEN
                                            '-100'
                                            WHEN (IFNULL((BL.AMOUNT), 0) > 0 AND IFNULL((T.AMOUNT), 0) = 0) AND
                                                IFNULL((T.AMOUNT), 0) = 0 THEN
                                            '-100'
                                            WHEN (IFNULL((BL.AMOUNT), 0) = 0 AND IFNULL((T.AMOUNT), 0) > 0) AND
                                                IFNULL((T.AMOUNT), 0) = 0 THEN
                                            '-100'
                                            WHEN (IFNULL((BL.AMOUNT), 0) > 0) AND (IFNULL((T.AMOUNT), 0) > 0) AND
                                                (IFNULL((T.AMOUNT), 0) = 0) AND
                                                IF((T.AMOUNT) > 0,
                                                    IFNULL((T.AMOUNT), 0) - IFNULL((T.AMOUNT), 0),
                                                    IFNULL((T.AMOUNT), 0) - IFNULL((BL.AMOUNT), 0)) != 0 THEN
                                            '-100'
                                            ELSE
                                            IF(T.AMOUNT > 0,
                                                ROUND(IFNULL((((T.AMOUNT - T.AMOUNT) * 100) / T.AMOUNT), 0), 2),
                                                IF(BL.AMOUNT > 0,
                                                ROUND(IFNULL((((T.AMOUNT - BL.AMOUNT) * 100) / BL.AMOUNT), 0),
                                                        2),
                                                0))
                                        END AS 'In %',
                                        IF(MONTH(MONTH_YEAR) = 1 AND AL.LEDGER_ID = BL.LEDGER_ID,
                                            MONTH1,
                                            IF(MONTH(MONTH_YEAR) = 2 AND AL.LEDGER_ID = BL.LEDGER_ID,
                                                MONTH2,
                                                IF(MONTH(MONTH_YEAR) = 3 AND AL.LEDGER_ID = BL.LEDGER_ID,
                                                MONTH3,
                                                IF(MONTH(MONTH_YEAR) = 4 AND AL.LEDGER_ID = BL.LEDGER_ID,
                                                    MONTH4,
                                                    IF(MONTH(MONTH_YEAR) = 5 AND AL.LEDGER_ID = BL.LEDGER_ID,
                                                        MONTH5,
                                                        IF(MONTH(MONTH_YEAR) = 6 AND AL.LEDGER_ID = BL.LEDGER_ID,
                                                            MONTH6,
                                                            IF(MONTH(MONTH_YEAR) = 7 AND AL.LEDGER_ID = BL.LEDGER_ID,
                                                            MONTH7,
                                                            IF(MONTH(MONTH_YEAR) = 8 AND
                                                                AL.LEDGER_ID = BL.LEDGER_ID,
                                                                MONTH8,
                                                                IF(MONTH(MONTH_YEAR) = 9 AND
                                                                    AL.LEDGER_ID = BL.LEDGER_ID,
                                                                    MONTH9,
                                                                    IF(MONTH(MONTH_YEAR) = 10 AND
                                                                        AL.LEDGER_ID = BL.LEDGER_ID,
                                                                        MONTH10,
                                                                        IF(MONTH(MONTH_YEAR) = 11 AND
                                                                        AL.LEDGER_ID = BL.LEDGER_ID,
                                                                        MONTH11,
                                                                        IF(MONTH(MONTH_YEAR) = 12 AND
                                                                            AL.LEDGER_ID = BL.LEDGER_ID,
                                                                            MONTH12,
                                                                            0.00)))))))))))) AS PROECTED_AMOUNT,
                                        IF(MLG.NATURE_ID IN (1, 4), 'CR', 'DR') AS TRANS_MODE
                                    FROM (SELECT (?DATE_FROM - INTERVAL DAYOFMONTH(?DATE_FROM) - 1 DAY) +
                                                INTERVAL NO_OF_MONTH MONTH AS MONTH_YEAR,
                                                NO_OF_MONTH
                                            FROM (SELECT @rownum := @rownum + 1 AS NO_OF_MONTH
                                                    FROM (SELECT 1 UNION
                                                                SELECT 2 UNION
                                                                        SELECT 3 UNION
                                                                                SELECT 4
                          
                                                        ) AS T,
                                                        (SELECT 1 UNION
                                                                SELECT 2 UNION
                                                                        SELECT 3 UNION
                                                                                SELECT 4
                                               
                                                        ) AS T2,
                       
                                                        (SELECT @rownum := -1) AS T0) D1) D2
                                    LEFT JOIN PROJECT_LEDGER PL
                                    INNER JOIN MASTER_LEDGER ML
                                    INNER JOIN MASTER_LEDGER_GROUP MLG
                                    ON ML.GROUP_ID = MLG.GROUP_ID ON ML.LEDGER_ID = PL.LEDGER_ID
                                    AND ML.GROUP_ID NOT IN (12, 13, 14)
                                    AND PL.PROJECT_ID IN (?PROJECT_ID)
                                    LEFT JOIN BUDGET_LEDGER BL
                                    ON PL.LEDGER_ID = BL.LEDGER_ID
                                    AND BUDGET_ID IN (?BUDGET_ID)
                                    LEFT JOIN ALLOT_FUND AL
                                    ON AL.BUDGET_ID = BL.BUDGET_ID
                                    AND AL.LEDGER_ID = BL.LEDGER_ID
                                    LEFT JOIN BUDGET_MASTER BM
                                    ON BM.BUDGET_ID = BL.BUDGET_ID
                                    AND AL.LEDGER_ID = BL.LEDGER_ID
                                    LEFT JOIN (SELECT LB.PROJECT_ID,
                                                    BL.BUDGET_ID,
                                                    LB.LEDGER_ID,
                                                    BL.AMOUNT AS PROECTED_AMOUNT,
                                                    IFNULL(MAX(LB.AMOUNT), 0) AS AMOUNT
                                                    FROM LEDGER_BALANCE LB
                                                LEFT JOIN BUDGET_MASTER BM
                                                    ON BM.PROJECT_ID = LB.PROJECT_ID
                                                LEFT JOIN BUDGET_LEDGER BL
                                                    ON BL.LEDGER_ID = LB.LEDGER_ID
                                                WHERE LB.PROJECT_ID IN (?PROJECT_ID)
                                                AND BM.BUDGET_ID IN(?BUDGET_ID)
                                                AND LB.BALANCE_DATE <=?DATE_TO
                                                GROUP BY LB.PROJECT_ID, LB.LEDGER_ID) AS T
                                    ON T.LEDGER_ID = ML.LEDGER_ID
                                    WHERE D2.MONTH_YEAR <=?DATE_TO;";
                        break;
                    }
                #endregion

                #region Budget Summary
                case ReportSQLCommand.BudgetVariance.BudgetSummary:
                    {
                        query = "SELECT ML.LEDGER_ID,\n" +
                                "       ML.LEDGER_CODE,\n" +
                                "       ML.LEDGER_NAME,\n" +
                                "       IF(PROECTED_AMOUNT IS NULL, 0, PROECTED_AMOUNT) AS PRO_AMOUNT,\n" +
                                "       IF(T.AMOUNT IS NULL, 0, T.AMOUNT) AS ACTUAL_AMOUNT,\n" +
                                "       IF(BL.AMOUNT IS NULL, 0, BL.AMOUNT) AS CURRENT_BUDGET_AMOUNT,\n" +
                                "       T.DATE_FROM AS YEAR_FROM,\n" +
                                "       T.PREVIOUS_BUD_DATE_TO AS YEAR_TO,\n" +
                                "       BM.DATE_FROM AS CURRENT_BUD_YEAR,T.BUDGET_NAME AS 'COMPARE BUDGET',T1.BUDGET_NAME AS BUDGET,\n" +
                                "       BM.DATE_TO AS CURRENT_BUD_TO\n" +
                                "\n" +
                                "  FROM PROJECT_LEDGER PL\n" +
                                " INNER JOIN MASTER_LEDGER ML\n" +
                                " INNER JOIN MASTER_LEDGER_GROUP MLG\n" +
                                "    ON ML.GROUP_ID = MLG.GROUP_ID\n" +
                                "   AND ML.LEDGER_ID = PL.LEDGER_ID\n" +
                                "   AND ML.GROUP_ID NOT IN (12, 13, 14)\n" +
                                "   AND PL.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "  LEFT JOIN BUDGET_LEDGER BL\n" +
                                "    ON PL.LEDGER_ID = BL.LEDGER_ID\n" +
                                "   AND BUDGET_ID =?BUDGET_ID\n" +
                                "  LEFT JOIN ALLOT_FUND AL\n" +
                                "    ON AL.BUDGET_ID = BL.BUDGET_ID\n" +
                                "   AND AL.LEDGER_ID = BL.LEDGER_ID\n" +
                                "  LEFT JOIN BUDGET_MASTER BM\n" +
                                "    ON BM.BUDGET_ID = BL.BUDGET_ID\n" +
                            //"   AND AL.LEDGER_ID = BL.LEDGER_ID\n" +
                                "  LEFT JOIN (SELECT BL.AMOUNT AS PROECTED_AMOUNT,BUDGET_NAME,\n" +
                                "                    SUM(IF(LB.AMOUNT IS NULL, 0, LB.AMOUNT)) AS AMOUNT,\n" +
                                "                    LB.BALANCE_DATE,\n" +
                                "                    BM.DATE_TO AS PREVIOUS_BUD_DATE_TO,\n" +
                                "                    BM.DATE_FROM,\n" +
                                "                    BL.LEDGER_ID,\n" +
                                "                    BL.TRANS_MODE\n" +
                                "               FROM BUDGET_LEDGER BL\n" +
                                "               LEFT JOIN LEDGER_BALANCE LB\n" +
                                "                 ON LB.LEDGER_ID = BL.LEDGER_ID\n" +
                                "                AND LB.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "               LEFT JOIN BUDGET_MASTER BM\n" +
                                "                 ON BL.BUDGET_ID = BM.BUDGET_ID\n" +
                                "              WHERE FIND_IN_SET(BL.BUDGET_ID,?PREVIOUS_BUDGET_ID)\n" +
                                "                AND BM.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                AND (LB.BALANCE_DATE <= BM.DATE_TO OR \n" +
                                "                     LB.BALANCE_DATE IS NULL)\n" +
                                "              GROUP BY BL.BUDGET_ID, BL.LEDGER_ID) AS T\n" +
                                "    ON T.LEDGER_ID = ML.LEDGER_ID\n" +
                                "    LEFT JOIN (SELECT BUDGET_NAME,\n" +
                                "        BL.LEDGER_ID\n" +
                                "        FROM BUDGET_LEDGER BL\n" +
                                "    LEFT JOIN LEDGER_BALANCE LB\n" +
                                "       ON LB.LEDGER_ID = BL.LEDGER_ID\n" +
                                "       AND LB.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "    LEFT JOIN BUDGET_MASTER BM\n" +
                                "       ON BL.BUDGET_ID = BM.BUDGET_ID\n" +
                                "    WHERE FIND_IN_SET(BL.BUDGET_ID,?BUDGET_ID)\n" +
                                "       AND BM.PROJECT_ID IN (?PROJECT_ID))AS T1\n" +
                                " ON T1.LEDGER_ID=ML.LEDGER_ID\n" +
                                " GROUP BY LEDGER_ID HAVING PRO_AMOUNT <>0 OR CURRENT_BUDGET_AMOUNT <> 0;";
                        break;
                    }

                #endregion

                #region Budget Op Closing Balance
                case ReportSQLCommand.BudgetVariance.BudgetOpBalance:
                    {
                        query = "SELECT LG.GROUP_ID,\n" +
                                "       LG.GROUP_CODE,\n" +
                                "       LG.LEDGER_GROUP,\n" +
                                "       ML.LEDGER_ID,\n" +
                                "       ML.LEDGER_CODE,\n" +
                                "       ML.SORT_ID,\n" +
                                "       CASE\n" +
                                "         WHEN LG.GROUP_ID = 12 THEN\n" +
                                "          CONCAT(ML.LEDGER_NAME,\n" +
                                "                 CONCAT(' -', CONCAT(MB.BANK, CONCAT(' -', MB.BRANCH))))\n" +
                                "         ELSE\n" +
                                "          ML.LEDGER_NAME\n" +
                                "       END AS 'LEDGER_NAME',\n" +
                                "       ABS(SUM(CASE\n" +
                                "                 WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                                "                  LB2.AMOUNT\n" +
                                "                 ELSE\n" +
                                "                  -LB2.AMOUNT\n" +
                                "               END)) AS AMOUNT,0 AS AMOUNT_BUDGET,\n" +
                                "       SUM(CASE\n" +
                                "             WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                                "              LB2.AMOUNT\n" +
                                "             ELSE\n" +
                                "              0\n" +
                                "           END) AS AMOUNT_DR,\n" +
                                "       SUM(CASE\n" +
                                "             WHEN LB2.TRANS_MODE = 'CR' THEN\n" +
                                "              LB2.AMOUNT\n" +
                                "             ELSE\n" +
                                "              0\n" +
                                "           END) AS AMOUNT_CR,\n" +
                                "       CASE\n" +
                                "         WHEN (SUM(CASE\n" +
                                "                     WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                                "                      LB2.AMOUNT\n" +
                                "                     ELSE\n" +
                                "                      -LB2.AMOUNT\n" +
                                "                   END) >= 0) THEN\n" +
                                "          'DR'\n" +
                                "         ELSE\n" +
                                "          'CR'\n" +
                                "       END AS TRANS_MODE\n" +
                                "  FROM MASTER_LEDGER AS ML\n" +
                                " INNER JOIN MASTER_LEDGER_GROUP AS LG\n" +
                                "    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "  LEFT JOIN MASTER_BANK_ACCOUNT AS MBA\n" +
                                "    ON ML.LEDGER_ID = MBA.LEDGER_ID\n" +
                                "  LEFT JOIN MASTER_BANK AS MB\n" +
                                "    ON MBA.BANK_ID = MB.BANK_ID\n" +
                                " INNER JOIN (SELECT LB.BALANCE_DATE,\n" +
                                "                    LB.PROJECT_ID,\n" +
                                "                    LB.LEDGER_ID,\n" +
                                "                    LB.AMOUNT,\n" +
                                "                    LB.TRANS_MODE\n" +
                                "               FROM LEDGER_BALANCE AS LB\n" +
                                "               LEFT JOIN (SELECT LBA.PROJECT_ID,\n" +
                                "                                LBA.LEDGER_ID,\n" +
                                "                                MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
                                "                           FROM LEDGER_BALANCE LBA\n" +
                                "                          WHERE 1 = 1\n" +
                                "                            AND LBA.BALANCE_DATE <=?BALANCE_DATE\n" +
                                "                          GROUP BY LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB1\n" +
                                "                 ON LB.PROJECT_ID = LB1.PROJECT_ID\n" +
                                "                AND LB.LEDGER_ID = LB1.LEDGER_ID\n" +
                                "              WHERE LB.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                AND LB.BALANCE_DATE = LB1.BAL_DATE) LB2\n" +
                                "    ON ML.LEDGER_ID = LB2.LEDGER_ID\n" +
                                " WHERE 1 = 1 AND LG.GROUP_ID IN (?GROUP_ID)\n" +
                                " GROUP BY LG.GROUP_ID,\n" +
                                "          LG.GROUP_CODE,\n" +
                                "          LG.LEDGER_GROUP,\n" +
                                "          ML.LEDGER_ID,\n" +
                                "          ML.LEDGER_CODE,\n" +
                                "          ML.LEDGER_NAME\n" +
                                "UNION\n" +
                                "\n" +
                                "SELECT LG.GROUP_ID,\n" +
                                "       LG.GROUP_CODE,\n" +
                                "       LG.LEDGER_GROUP,\n" +
                                "       ML.LEDGER_ID,\n" +
                                "       ML.LEDGER_CODE,\n" +
                                "       ML.SORT_ID,\n" +
                                "       CASE\n" +
                                "         WHEN LG.GROUP_ID = 12 THEN\n" +
                                "          CONCAT(ML.LEDGER_NAME,\n" +
                                "                 CONCAT(' -', CONCAT(MB.BANK, CONCAT(' -', MB.BRANCH))))\n" +
                                "         ELSE\n" +
                                "          ML.LEDGER_NAME\n" +
                                "       END AS 'LEDGER_NAME', 0 AS AMOUNT,\n" +
                                "       ABS(SUM(CASE\n" +
                                "                 WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                                "                  LB2.AMOUNT\n" +
                                "                 ELSE\n" +
                                "                  -LB2.AMOUNT\n" +
                                "               END)) AS AMOUNT_BUDGET,\n" +
                                "       SUM(CASE\n" +
                                "             WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                                "              LB2.AMOUNT\n" +
                                "             ELSE\n" +
                                "              0\n" +
                                "           END) AS AMOUNT_DR,\n" +
                                "       SUM(CASE\n" +
                                "             WHEN LB2.TRANS_MODE = 'CR' THEN\n" +
                                "              LB2.AMOUNT\n" +
                                "             ELSE\n" +
                                "              0\n" +
                                "           END) AS AMOUNT_CR,\n" +
                                "       CASE\n" +
                                "         WHEN (SUM(CASE\n" +
                                "                     WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                                "                      LB2.AMOUNT\n" +
                                "                     ELSE\n" +
                                "                      -LB2.AMOUNT\n" +
                                "                   END) >= 0) THEN\n" +
                                "          'DR'\n" +
                                "         ELSE\n" +
                                "          'CR'\n" +
                                "       END AS TRANS_MODE\n" +
                                "  FROM MASTER_LEDGER AS ML\n" +
                                " INNER JOIN MASTER_LEDGER_GROUP AS LG\n" +
                                "    ON ML.GROUP_ID = LG.GROUP_ID\n" +
                                "  LEFT JOIN MASTER_BANK_ACCOUNT AS MBA\n" +
                                "    ON ML.LEDGER_ID = MBA.LEDGER_ID\n" +
                                "  LEFT JOIN MASTER_BANK AS MB\n" +
                                "    ON MBA.BANK_ID = MB.BANK_ID\n" +
                                " INNER JOIN (SELECT LB.BALANCE_DATE,\n" +
                                "                    LB.PROJECT_ID,\n" +
                                "                    LB.LEDGER_ID,\n" +
                                "                    LB.AMOUNT,\n" +
                                "                    LB.TRANS_MODE\n" +
                                "               FROM LEDGER_BALANCE AS LB\n" +
                                "               LEFT JOIN (SELECT LBA.PROJECT_ID,\n" +
                                "                                LBA.LEDGER_ID,\n" +
                                "                                MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
                                "                           FROM LEDGER_BALANCE LBA\n" +
                                "                          WHERE 1 = 1\n" +
                                "                            AND LBA.BALANCE_DATE <=?DATE_TO\n" +
                                "                          GROUP BY LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB1\n" +
                                "                 ON LB.PROJECT_ID = LB1.PROJECT_ID\n" +
                                "                AND LB.LEDGER_ID = LB1.LEDGER_ID\n" +
                                "              WHERE LB.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                AND LB.BALANCE_DATE = LB1.BAL_DATE) LB2\n" +
                                "    ON ML.LEDGER_ID = LB2.LEDGER_ID\n" +
                                " WHERE 1 = 1 AND LG.GROUP_ID IN (?GROUP_ID)\n" +
                                " GROUP BY LG.GROUP_ID,\n" +
                                "          LG.GROUP_CODE,\n" +
                                "          LG.LEDGER_GROUP,\n" +
                                "          ML.LEDGER_ID,\n" +
                                "          ML.LEDGER_CODE,\n" +
                                "          ML.LEDGER_NAME";
                        break;
                    }
                #endregion

                #region Budget Variance CostCentre
                case ReportSQLCommand.BudgetVariance.BudgetVarianceCostCentre:
                    {
                        //query = "SELECT VCT.VOUCHER_ID,ML.LEDGER_CODE,\n" +
                        //"       VCT.LEDGER_ID,ML.LEDGER_NAME,T.BUDGET_NAME,\n" +
                        //"       VMT.PROJECT_ID,\n" +
                        //"       VCT.COST_CENTRE_ID,MCC.COST_CENTRE_NAME,\n" +
                        //"       IFNULL((T.AMOUNT), 0) AS 'PRO_AMOUNT',\n" +
                        //"       IFNULL((VCT.AMOUNT), 0) AS 'ACTUAL_AMOUNT',\n" +
                        //"       IFNULL((IFNULL((VCT.AMOUNT), 0) - IFNULL((T.AMOUNT), 0)), 0) AS 'BUDGET_VARIANCE',\n" +
                        //"       ROUND(IFNULL((((VCT.AMOUNT - T.AMOUNT) / T.AMOUNT) * 100), 0), 2) AS 'In %'\n" + 
                        //"  FROM VOUCHER_CC_TRANS VCT\n" +
                        //" INNER JOIN VOUCHER_MASTER_TRANS VMT\n" +
                        //"    ON VMT.VOUCHER_ID = VCT.VOUCHER_ID\n" +
                        //"\n" +
                        //" INNER JOIN (SELECT BM.BUDGET_ID,BM.BUDGET_NAME,\n" +
                        //"                    BCC.LEDGER_ID,\n" +
                        //"                    BM.PROJECT_ID,\n" +
                        //"                    BCC.COST_CENTRE_ID,\n" +
                        //"                    SUM(BCC.AMOUNT) AS AMOUNT\n" +
                        //"               FROM BUDGET_MASTER BM\n" +
                        //"              INNER JOIN BUDGET_COSTCENTER BCC\n" +
                        //"                 ON BCC.BUDGET_ID = BM.BUDGET_ID\n" +
                        //"              WHERE BM.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //"                AND COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                        //"              GROUP BY BM.PROJECT_ID, BCC.COST_CENTRE_ID) AS T\n" +
                        //"    ON T.LEDGER_ID = VCT.LEDGER_ID\n" +
                        //"   AND T.COST_CENTRE_ID = VCT.COST_CENTRE_ID\n" +
                        //"\n" +
                        //" INNER JOIN MASTER_COST_CENTRE MCC\n" +
                        //"    ON MCC.COST_CENTRE_ID = VCT.COST_CENTRE_ID\n" + 
                        //" INNER JOIN MASTER_LEDGER ML\n" +
                        //"    ON ML.LEDGER_ID = VCT.LEDGER_ID\n" + 
                        //" WHERE VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        //"   AND VMT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //"   AND VMT.STATUS = 1\n" +
                        //"   AND VCT.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                        //"\n" +
                        //" GROUP BY VMT.PROJECT_ID, VCT.COST_CENTRE_ID;";

                        query = "SELECT BM.BUDGET_ID,\n" +
                        "       BCC.LEDGER_ID,\n" +
                        "       BM.PROJECT_ID,\n" +
                        "       BCC.COST_CENTRE_ID,\n" +
                        "       T.VOUCHER_ID,\n" +
                        "       ML.LEDGER_CODE,\n" +
                        "       T.LEDGER_ID,\n" +
                        "       ML.LEDGER_NAME,\n" +
                        "       BUDGET_NAME,\n" +
                        "       T.PROJECT_ID,\n" +
                        "       BCC.COST_CENTRE_ID,\n" +
                        "       MCC.COST_CENTRE_NAME,\n" +
                        "       IFNULL((BCC.AMOUNT), 0) AS 'PRO_AMOUNT',\n" +
                        "       IFNULL((T.ACT_AMT), 0) AS 'ACTUAL_AMOUNT',\n" +
                        "       IFNULL((IFNULL((T.ACT_AMT), 0) - IFNULL((BCC.AMOUNT), 0)), 0) AS 'BUDGET_VARIANCE',\n" +
                        "       ROUND(IFNULL((((T.ACT_AMT - BCC.AMOUNT) / BCC.AMOUNT) * 100), 0), 2) AS 'In %'\n" +
                        "  FROM BUDGET_MASTER BM\n" +
                        " INNER JOIN BUDGET_COSTCENTER BCC\n" +
                        "    ON BCC.BUDGET_ID = BM.BUDGET_ID\n" +
                        " INNER JOIN MASTER_COST_CENTRE MCC\n" +
                        "    ON MCC.COST_CENTRE_ID = BCC.COST_CENTRE_ID\n" +
                        " INNER JOIN MASTER_LEDGER ML\n" +
                        "    ON ML.LEDGER_ID = BCC.LEDGER_ID\n" +
                        "  LEFT JOIN (SELECT VCT.VOUCHER_ID,\n" +
                        "                    VCT.LEDGER_ID,\n" +
                        "                    VMT.PROJECT_ID,\n" +
                        "                    VCT.COST_CENTRE_ID,\n" +
                        "                    VCT.AMOUNT AS 'ACT_AMT'\n" +
                        "               FROM VOUCHER_CC_TRANS VCT\n" +
                        "              INNER JOIN VOUCHER_MASTER_TRANS VMT\n" +
                        "                 ON VMT.VOUCHER_ID = VCT.VOUCHER_ID\n" +
                        "              WHERE VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "                AND VMT.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "                AND STATUS = 1\n" +
                        "                AND VCT.COST_CENTRE_ID IN (?COST_CENTRE_ID)) as T\n" +
                        "    ON T.LEDGER_ID = BCC.LEDGER_ID\n" +
                        "   AND T.COST_CENTRE_ID = BCC.COST_CENTRE_ID\n" +
                        " WHERE BM.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   AND BCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)\n" +
                        " GROUP BY BM.PROJECT_ID, BCC.LEDGER_ID, BCC.COST_CENTRE_ID;";

                        break;
                    }
                #endregion

                #region Budget Ledgers
                case ReportSQLCommand.BudgetVariance.BudgetLedgers:
                    {
                        query = "SELECT GROUP_ID, IFNULL(PBL.LEDGER_ID,0) AS MAP_BUDGET_LEDGER_ID,\n" +
                           "       NATURE_ID,\n" +
                           "       NATURE,\n" +
                           "       PL.LEDGER_ID,\n" +
                           "       PL.ACCESS_FLAG,\n" +
                           "       PL.LEDGER_CODE,\n" +
                           "       PL.LEDGER_NAME,\n" +
                           "       PL.BUDGET_GROUP_ID, PL.BUDGET_SUB_GROUP_ID, IF(PL.BUDGET_GROUP='', 'Others', PL.BUDGET_GROUP) AS BUDGET_GROUP, PL.BUDGET_SUB_GROUP,IFNULL(PL.BUDGET_GROUP_SORT_ID,7) AS BUDGET_GROUP_SORT_ID,\n" +
                           "       PL.BUDGET_GROUP,\n" +
                           "       PL.BUDGET_SUB_GROUP,\n" +
                           "       PL.GROUP_CODE, PL.LEDGER_GROUP,\n" +
                           "       ?BUDGET_TRANS_MODE AS BUDGET_TRANS_MODE,\n" +
                           "       IFNULL(CUR_BL.PROPOSED_AMOUNT, 0) AS PROPOSED_CURRENT_YR,\n" +
                           "       IFNULL(CUR_BL.APPROVED_AMOUNT, 0) AS APPROVED_CURRENT_YR,\n" +
                           "       IFNULL(PRE_BL.APPROVED_AMOUNT, 0) AS APPROVED_PREVIOUS_YR,\n" +
                           "       IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '2',\n" +
                           "       CASE\n" +
                           "         WHEN NATURE_ID IN (1, 2) THEN\n" +
                           "          IF(NATURE_ID = 1, IFNULL(AMOUNT_CR, 0) - IFNULL(AMOUNT_DR, 0), IFNULL(AMOUNT_DR, 0) - IFNULL(AMOUNT_CR, 0))\n" +
                           "         ELSE\n" +
                           "             IF('CR' = ?BUDGET_TRANS_MODE, IFNULL(ACTUAL.AMOUNT_CR, 0),IFNULL(ACTUAL.AMOUNT_DR, 0))\n" +
                           "       END , IF('CR' = ?BUDGET_TRANS_MODE, IFNULL(ACTUAL.AMOUNT_CR, 0),IFNULL(ACTUAL.AMOUNT_DR, 0))) AS ACTUAL, \n" +
                           "       CUR_BL.NARRATION\n" +
                           "       FROM (SELECT PL.PROJECT_ID,\n" +
                           "               ML.GROUP_ID,\n" +
                           "               MLG.NATURE_ID,\n" +
                           "               MNN.NATURE,\n" +
                           "               ML.LEDGER_ID,\n" +
                           "               ML.ACCESS_FLAG,\n" +
                           "               ML.LEDGER_CODE,\n" +
                           "               ML.LEDGER_NAME,\n" +
                           "               ML.BUDGET_GROUP_ID,\n" +
                           "               ML.BUDGET_SUB_GROUP_ID,\n" +
                           "               IFNULL(BG.BUDGET_GROUP, '') AS BUDGET_GROUP, IFNULL(BSG.BUDGET_SUB_GROUP, '') AS BUDGET_SUB_GROUP,BG.BUDGET_GROUP_SORT_ID,\n" + // Unmapped Ledgers
                           "              MLG.GROUP_CODE, MLG.LEDGER_GROUP\n" +
                           "         FROM MASTER_LEDGER ML\n" +
                           "         INNER JOIN MASTER_LEDGER_GROUP MLG ON ML.GROUP_ID = MLG.GROUP_ID\n" +
                           "         INNER JOIN MASTER_NATURE MNN ON MNN.NATURE_ID = MLG.NATURE_ID\n" +
                           "         INNER JOIN PROJECT_LEDGER PL ON PL.LEDGER_ID = ML.LEDGER_ID\n" +
                           "         LEFT JOIN BUDGET_GROUP BG ON BG.BUDGET_GROUP_ID = ML.BUDGET_GROUP_ID\n" +
                           "         LEFT JOIN BUDGET_SUB_GROUP BSG ON BSG.BUDGET_SUB_GROUP_ID = ML.BUDGET_SUB_GROUP_ID\n" +
                           "         WHERE PL.PROJECT_ID IN (?PROJECT_ID)\n" +
                           "         GROUP BY ML.LEDGER_ID) AS PL\n" +
                           "  LEFT JOIN (SELECT BL.LEDGER_ID, BL.NARRATION, BL.TRANS_MODE,\n" +
                           "               SUM(IFNULL(BL.PROPOSED_AMOUNT, 0)/?EXCHANGE_RATE) AS PROPOSED_AMOUNT,\n" +
                           "               SUM(IFNULL(BL.APPROVED_AMOUNT, 0)/?EXCHANGE_RATE) AS APPROVED_AMOUNT\n" +
                           "               FROM BUDGET_LEDGER BL\n" +
                           "               WHERE BL.BUDGET_ID IN (?BUDGET_ID) AND BL.TRANS_MODE= ?BUDGET_TRANS_MODE GROUP BY BL.LEDGER_ID) AS CUR_BL\n" +
                           "               ON CUR_BL.LEDGER_ID = PL.LEDGER_ID\n" +
                           "  LEFT JOIN (SELECT BL.LEDGER_ID, BL.NARRATION, BL.TRANS_MODE,\n" +
                           "               SUM(IFNULL(BL.PROPOSED_AMOUNT, 0)/?PREVIOUS_YEAR_EX_RATE) AS PROPOSED_AMOUNT,\n" +
                           "               SUM(IFNULL(BL.APPROVED_AMOUNT,0)/?PREVIOUS_YEAR_EX_RATE) AS APPROVED_AMOUNT\n" +
                           "               FROM BUDGET_LEDGER BL\n" +
                           "               INNER JOIN BUDGET_MASTER BM ON BM.BUDGET_ID = BL.BUDGET_ID AND BM.BUDGET_ID IN (?PREVIOUS_BUDGET_ID)\n" +
                           "               WHERE BM.BUDGET_ID IN (?PREVIOUS_BUDGET_ID) AND BL.BUDGET_ID IN (?PREVIOUS_BUDGET_ID) AND\n" +
                           "                     BL.TRANS_MODE= ?BUDGET_TRANS_MODE AND BM.IS_ACTIVE=1 AND BM.BUDGET_ACTION IN (2) GROUP BY BL.LEDGER_ID) AS PRE_BL\n" +
                           "               ON PRE_BL.LEDGER_ID = PL.LEDGER_ID\n" +
                           "  LEFT JOIN (SELECT VT.LEDGER_ID, SUM(IF(VT.TRANS_MODE = 'DR', (VT.AMOUNT * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)), 0)) AS AMOUNT_DR,\n" +
                           "             SUM(IF(VT.TRANS_MODE = 'CR', (VT.AMOUNT * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)), 0)) AS AMOUNT_CR\n" +
                           "             FROM VOUCHER_TRANS VT\n" +
                           "             INNER JOIN VOUCHER_MASTER_TRANS VMT ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                           "             WHERE VMT.PROJECT_ID IN (?PROJECT_ID) AND VMT.STATUS = 1 AND VOUCHER_DATE BETWEEN ?YEAR_FROM AND ?YEAR_TO AND \n" +
                           "             IF(?CURRENCY_COUNTRY_ID > 0, VMT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1) AND \n" +
                           "             IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '0', \n" +
                           "             ( (VMT.VOUCHER_TYPE NOT IN ('JN')) OR (VMT.VOUCHER_TYPE = 'JN' AND VMT.VOUCHER_SUB_TYPE ='FD' AND VT.TRANS_MODE =?BUDGET_TRANS_MODE) ), 1=1) \n" +
                           "             GROUP BY VT.LEDGER_ID) AS ACTUAL ON ACTUAL.LEDGER_ID = PL.LEDGER_ID\n" +
                           "  LEFT JOIN PROJECT_BUDGET_LEDGER AS PBL ON PBL.PROJECT_ID = PL.PROJECT_ID AND PBL.LEDGER_ID = PL.LEDGER_ID\n" +
                           "  WHERE PL.PROJECT_ID IN (?PROJECT_ID) AND IF('CR' = ?BUDGET_TRANS_MODE, NATURE_ID IN (1, 3, 4), NATURE_ID IN (2, 3, 4))\n" +
                           "         AND PL.ACCESS_FLAG NOT IN (2) AND GROUP_ID NOT IN (12,13,14) \n" +
                            //" GROUP BY PL.LEDGER_ID\n" +
                           " ORDER BY PROPOSED_CURRENT_YR DESC, APPROVED_CURRENT_YR DESC";
                        break;
                    }
                case ReportSQLCommand.BudgetVariance.cmfBudgetLedgers:
                    {
                        query = @" SELECT IFNULL(LG.GROUP_CODE, '') AS GROUP_CODE, LG.LEDGER_GROUP,
                                    IFNULL(ML.LEDGER_CODE, '') AS LEDGER_CODE, ACB.LEDGER_NAME,
                                    ACB.PREV_APPROVED_AMOUNT AS 'APPROVED_PREVIOUS_YR', ACB.PREV_ACTUAL_AMOUNT AS 'ACTUAL', ACB.PROPOSED_AMOUNT AS 'PROPOSED_CURRENT_YR', ACB.APPROVED_AMOUNT AS 'APPROVED_CURRENT_YR', ACB.BUDGET_TRANS_MODE
                                    FROM all_community_budget ACB
                                    LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_NAME = ACB.LEDGER_NAME
                                    LEFT JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID";
                        break;
                    }

                #endregion

                #region Budget Statistics
                case ReportSQLCommand.BudgetVariance.BudgetStatistics:
                    {
                        //query = "SELECT BSD.BUDGET_ID, ST.STATISTICS_TYPE, 0 AS PREVIOUS_YEAR, BSD.TOTAL_COUNT AS CURRENT_YEAR FROM BUDGET_STATISTICS_DETAIL BSD " +
                        //        "INNER JOIN MASTER_STATISTICS_TYPE ST ON ST.STATISTICS_TYPE_ID = BSD.STATISTICS_TYPE_ID "+
                        //        "WHERE BUDGET_ID = ?BUDGET_ID;";

                        query = "SELECT ST.STATISTICS_TYPE, BSDPrevious.TOTAL_COUNT AS PREVIOUS_YEAR, BSDCurrent.TOTAL_COUNT AS CURRENT_YEAR " +
                                    " FROM MASTER_STATISTICS_TYPE ST" +
                                    " LEFT JOIN  BUDGET_STATISTICS_DETAIL BSDCurrent ON BSDCurrent.STATISTICS_TYPE_ID = ST.STATISTICS_TYPE_ID AND BSDCurrent.BUDGET_ID IN (?BUDGET_ID)" +
                                    " LEFT JOIN BUDGET_STATISTICS_DETAIL BSDPrevious" +
                                    " ON BSDPrevious.STATISTICS_TYPE_ID = ST.STATISTICS_TYPE_ID" +
                                    " AND BSDPrevious.BUDGET_ID IN (SELECT BM.BUDGET_ID FROM budget_master BM" +
                                    " INNER JOIN BUDGET_PROJECT BP ON BP.BUDGET_ID = BM.BUDGET_ID" +
                                    " WHERE BP.PROJECT_ID IN (?PROJECT) AND BM.DATE_FROM = ?DATE_FROM AND BM.DATE_TO = ?DATE_TO)" +
                                    " WHERE BSDCurrent.TOTAL_COUNT>0 OR BSDPrevious.TOTAL_COUNT;";
                        break;
                    }

                #endregion

                #region Budget Info
                case ReportSQLCommand.BudgetVariance.BudgetInfo:
                    {
                        query = "SELECT BM.BUDGET_ID, GROUP_CONCAT(BP.PROJECT_ID) PROJECT, BM.DATE_FROM, BM.DATE_TO," +
                                " GROUP_CONCAT(MP.PROJECT) AS PROJECT_NAME, BM.BUDGET_TYPE_ID," +
                                " BM.HO_HELP_PROPOSED_AMOUNT, BM.HO_HELP_APPROVED_AMOUNT, BM.BUDGET_ACTION" +
                                " FROM BUDGET_MASTER BM" +
                                " INNER JOIN BUDGET_PROJECT BP ON BP.BUDGET_ID = BM.BUDGET_ID" +
                                " INNER JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = BP.PROJECT_ID" +
                                " WHERE BM.BUDGET_ID IN (?BUDGET_ID) GROUP BY BM.BUDGET_ID;";
                        break;
                    }
                case ReportSQLCommand.BudgetVariance.PreviousBudgetInfoByProjects:
                    {
                        query = "SELECT MP.BUDGET_ID\n" +
                                "FROM BUDGET_MASTER BM\n" +
                                "INNER JOIN BUDGET_PROJECT MP ON MP.BUDGET_ID = BM.BUDGET_ID AND MP.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "WHERE DATE_FROM <= ?YEAR_FROM AND DATE_TO >= ?YEAR_TO AND BM.IS_ACTIVE=1 AND BM.BUDGET_ACTION IN (2)\n" +
                                "ORDER BY DATE_FROM, DATE_TO DESC LIMIT 1";
                        break;
                    }
                case ReportSQLCommand.BudgetVariance.BudgetProjectsByDate:
                    {
                        query = "SELECT GROUP_CONCAT(BM.BUDGET_ID), GROUP_CONCAT(BP.PROJECT_ID) PROJECT, " +
                                " GROUP_CONCAT(MP.PROJECT) AS PROJECT_NAME, BM.BUDGET_TYPE_ID," +
                                " BM.HO_HELP_PROPOSED_AMOUNT, BM.HO_HELP_APPROVED_AMOUNT" +
                                " FROM BUDGET_MASTER BM" +
                                " INNER JOIN BUDGET_PROJECT BP ON BP.BUDGET_ID = BM.BUDGET_ID" +
                                " INNER JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = BP.PROJECT_ID" +
                                " WHERE BM.DATE_FROM=?DATE_FROM AND BM.DATE_TO=?DATE_TO;";
                        break;
                    }
                case ReportSQLCommand.BudgetVariance.BudgetProjectsByDateProjects:
                    {
                        query = "SELECT GROUP_CONCAT(BM.BUDGET_ID), GROUP_CONCAT(BM.BUDGET_NAME) AS BUDGET_NAME, GROUP_CONCAT(BP.PROJECT_ID) PROJECT, " +
                                " GROUP_CONCAT(MP.PROJECT) AS PROJECT_NAME, BM.BUDGET_TYPE_ID," +
                                " BM.HO_HELP_PROPOSED_AMOUNT, BM.HO_HELP_APPROVED_AMOUNT" +
                                " FROM BUDGET_MASTER BM" +
                                " INNER JOIN BUDGET_PROJECT BP ON BP.BUDGET_ID = BM.BUDGET_ID" +
                                " INNER JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = BP.PROJECT_ID" +
                                " WHERE BM.DATE_FROM=?DATE_FROM AND BM.DATE_TO=?DATE_TO AND BP.PROJECT_ID IN (?PROJECT_ID);";
                        break;
                    }
                #endregion

                #region Budget Annual Summary
                case ReportSQLCommand.BudgetVariance.BudgetAnnualSummary:
                    {
                        query = "SELECT 1 IS_EXISTING_PROJECT, BM.BUDGET_ID, 1 AS SEQUENCE_NO, GROUP_CONCAT(distinct CONCAT(MP.PROJECT,CONCAT(' - ',MD.DIVISION))) AS PROJECT,\n" +
                                "SUM(BL.PROPOSED_INCOME_AMOUNT) AS PROPOSED_INCOME_AMOUNT , SUM(BL.PROPOSED_EXPENSE_AMOUNT) AS PROPOSED_EXPENSE_AMOUNT , SUM(BM.HO_HELP_PROPOSED_AMOUNT) AS HO_HELP_PROPOSED_AMOUNT, 0 AS GN_HELP_PROPOSED_AMOUNT,\n" +
                                "'' AS REMARKS, '' AS COST_CENTRE_NAME, 0 AS PROPOSED_CC_EXPENSE_AMOUNT\n" +
                                "FROM BUDGET_MASTER BM\n" +
                                "INNER JOIN BUDGET_PROJECT BP ON BP.BUDGET_ID = BM.BUDGET_ID\n" +
                                "INNER JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = BP.PROJECT_ID\n" +
                                "INNER JOIN MASTER_DIVISION MD ON MP.DIVISION_ID = MD.DIVISION_ID\n" +
                                "INNER JOIN (SELECT BL.BUDGET_ID, SUM(IF(TRANS_MODE='CR', BL.PROPOSED_AMOUNT,0)) AS PROPOSED_INCOME_AMOUNT,\n" +
                                "      SUM(IF(TRANS_MODE='DR', BL.PROPOSED_AMOUNT,0)) AS PROPOSED_EXPENSE_AMOUNT\n" + //AND BL.APPROVED_AMOUNT >0 , AND BM.BUDGET_ACTION=" + (int)BudgetAction.Approved + " 
                                "      FROM BUDGET_LEDGER BL WHERE BL.PROPOSED_AMOUNT >0 GROUP BY BL.BUDGET_ID) BL ON BL.BUDGET_ID = BM.BUDGET_ID\n" +
                                " WHERE BM.BUDGET_ID IN (?BUDGET_ID) AND BM.IS_ACTIVE = 1 AND ((DATE_FROM >= ?DATE_FROM AND DATE_TO <=?DATE_TO) OR \n" +
                                " (BM.BUDGET_TYPE_ID = " + (int)BudgetType.BudgetByCalendarYear + " AND DATE_FROM >= ?YEAR_FROM AND DATE_TO <=?YEAR_TO) OR\n" +
                                "  ((BM.BUDGET_TYPE_ID = 2 AND DATE_FROM BETWEEN  ?YEAR_FROM AND ?YEAR_TO) OR \n" +
                                "  (BM.BUDGET_TYPE_ID = 2 AND DATE_TO BETWEEN  ?YEAR_FROM AND ?YEAR_TO))) \n" +
                                "GROUP BY MP.PROJECT\n" +
                                "UNION ALL\n" +
                                "SELECT 0 IS_EXISTING_PROJECT, 0 AS BUDGET_ID, BNP.SEQUENCE_NO, BNP.NEW_PROJECT AS PROJECT, BNP.PROPOSED_INCOME_AMOUNT,\n" +
                                "BNP.PROPOSED_EXPENSE_AMOUNT, BNP.HO_HELP_PROPOSED_AMOUNT, BNP.GN_HELP_PROPOSED_AMOUNT, BNP.REMARKS,\n" +
                                "IFNULL(MC.COST_CENTRE_NAME, '') AS COST_CENTRE_NAME, IFNULL(BNPD.PROPOSED_EXPENSE_AMOUNT, 0) AS PROPOSED_CC_EXPENSE_AMOUNT\n" +
                                "FROM MASTER_REPORT_BUDGET_NEW_PROJECTS BNP\n" +
                                "LEFT JOIN MASTER_REPORT_BUDGET_NEW_PROJECTS_DETAILS BNPD ON BNPD.BUDGET_ID = BNP.BUDGET_ID AND BNPD.ACC_YEAR_ID = BNP.ACC_YEAR_ID\n" +
                                "    AND BNPD.DEVELOPMENTAL_PROJECT_SEQUENCE_NO = BNP.SEQUENCE_NO\n" +
                                "LEFT JOIN MASTER_COST_CENTRE MC ON MC.COSt_CENTRE_ID = BNPD.COST_CENTRE_ID\n" +
                                "WHERE BNP.INCLUDE_REPORTS =1 AND BNP.ACC_YEAR_ID = ?ACC_YEAR_ID AND BNP.BUDGET_ID IN (?DEVELOPMENTAL_NEW_BUDGETID)";
                        break;
                    }

                case ReportSQLCommand.BudgetVariance.BudgetDevelopmentalProjectDetailsByBudget:
                    {
                        query = "SELECT BNP.BUDGET_ID AS BUDGET_ID, BNP.SEQUENCE_NO, BNP.NEW_PROJECT AS PROJECT, \n" +
                                "BNP.PROPOSED_INCOME_AMOUNT, BNP.PROPOSED_EXPENSE_AMOUNT, BNP.HO_HELP_PROPOSED_AMOUNT, BNP.GN_HELP_PROPOSED_AMOUNT, BNP.REMARKS,\n" +
                                "IFNULL(MC.COST_CENTRE_NAME, '') AS COST_CENTRE_NAME, IFNULL(BNPD.PROPOSED_EXPENSE_AMOUNT, 0) AS PROPOSED_CC_EXPENSE_AMOUNT\n" +
                                "FROM MASTER_REPORT_BUDGET_NEW_PROJECTS BNP\n" +
                                "LEFT JOIN MASTER_REPORT_BUDGET_NEW_PROJECTS_DETAILS BNPD ON BNPD.BUDGET_ID = BNP.BUDGET_ID AND BNPD.ACC_YEAR_ID = BNP.ACC_YEAR_ID\n" +
                                "    AND BNPD.DEVELOPMENTAL_PROJECT_SEQUENCE_NO = BNP.SEQUENCE_NO\n" +
                                "LEFT JOIN MASTER_COST_CENTRE MC ON MC.COSt_CENTRE_ID = BNPD.COST_CENTRE_ID\n" +
                                "WHERE BNP.INCLUDE_REPORTS =1 AND BNP.ACC_YEAR_ID = ?ACC_YEAR_ID AND BNP.BUDGET_ID IN (?BUDGET_ID)";
                        break;
                    }
                #endregion

                #region Budget Annual Monthly Realzation
                case ReportSQLCommand.BudgetVariance.BudgetRealization:
                    {
                        query = "SELECT BM.BUDGET_ID, PBL.LEDGER_ID, ML.GROUP_ID, LG.NATURE_ID, IFNULL(BCC.COST_CENTRE_IDs,'') AS COST_CENTRE_IDs, \n" +
                                "LG.LEDGER_GROUP, ML.LEDGER_CODE, ML.LEDGER_NAME,BL.TRANS_MODE, BL.TRANS_MODE AS BUDGET_TRANS_MODE, IFNULL(BL.PROPOSED_AMOUNT,0) AS PROPOSED_AMOUNT,\n" +
                                "IFNULL(BL.APPROVED_AMOUNT,0) AS APPROVED_AMOUNT,\n" +
                                "BL.NARRATION,\n" +
                                "IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '2',\n" +
                                " CASE\n" +
                                "  WHEN NATURE_ID IN (1, 2) THEN\n" +
                                "   IF(NATURE_ID = 1, IFNULL(ACTUAL.AMOUNT_CR, 0) - IFNULL(ACTUAL.AMOUNT_DR, 0), IFNULL(ACTUAL.AMOUNT_DR, 0) - IFNULL(ACTUAL.AMOUNT_CR, 0))\n" +
                                "  ELSE\n" +
                                "   IF('CR' = ?TRANS_MODE, IFNULL(ACTUAL.AMOUNT_CR, 0),IFNULL(ACTUAL.AMOUNT_DR, 0))\n" +
                                "  END , IF('CR' = ?TRANS_MODE, IFNULL(ACTUAL.AMOUNT_CR, 0),IFNULL(ACTUAL.AMOUNT_DR, 0))) AS ACTUAL_AMOUNT\n" +
                                "FROM BUDGET_MASTER BM\n" +
                                "INNER JOIN BUDGET_PROJECT BP ON BP.BUDGET_ID = BM.BUDGET_ID\n" +
                                "INNER JOIN PROJECT_LEDGER PBL ON PBL.PROJECT_ID = BP.PROJECT_ID\n" +
                                "LEFT JOIN (SELECT BL.LEDGER_ID, BL.TRANS_MODE,\n" +
                                    "SUM(BL.PROPOSED_AMOUNT/?EXCHANGE_RATE) AS PROPOSED_AMOUNT,\n" +
                                    "SUM(BL.APPROVED_AMOUNT/?EXCHANGE_RATE) AS APPROVED_AMOUNT,\n" +
                                    "BL.NARRATION\n" +
                                    "FROM BUDGET_LEDGER AS BL\n" +
                                    "INNER JOIN BUDGET_MASTER BM ON BM.BUDGET_ID = BL.BUDGET_ID\n" +
                                    "INNER JOIN (SELECT BP.BUDGET_ID FROM BUDGET_PROJECT BP WHERE BP.PROJECT_ID IN (?PROJECT_ID) GROUP BY BP.BUDGET_ID) AS BP ON BP.BUDGET_ID = BL.BUDGET_ID\n" +
                                    "WHERE BL.TRANS_MODE =?TRANS_MODE AND BM.IS_ACTIVE=1 AND BM.BUDGET_ACTION IN (2) \n" + // AND BM.DATE_FROM = ?YEAR_FROM  AND BM.DATE_TO = ?YEAR_TO
                                    " AND ((BM.DATE_FROM BETWEEN ?YEAR_FROM  AND ?YEAR_TO)\n" +
                                    " OR (BM.DATE_TO BETWEEN  ?YEAR_FROM  AND ?YEAR_TO))\n" +
                                    "GROUP BY BL.LEDGER_ID, BL.TRANS_MODE) AS BL ON BL.LEDGER_ID = PBL.LEDGER_ID\n" +
                                "LEFT JOIN (SELECT VT.LEDGER_ID, \n" +
                                    "SUM(IF(VT.TRANS_MODE = 'DR', (VT.AMOUNT * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)) , 0)) AS AMOUNT_DR,\n" +
                                    "SUM(IF(VT.TRANS_MODE = 'CR', (VT.AMOUNT * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)), 0)) AS AMOUNT_CR\n" +
                                    "FROM VOUCHER_TRANS VT\n" +
                                    "INNER JOIN VOUCHER_MASTER_TRANS VMT ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                    "INNER JOIN (SELECT BP.PROJECT_ID FROM  BUDGET_PROJECT BP \n" +
                                    "INNER JOIN BUDGET_MASTER BM ON BP.BUDGET_ID = BM.BUDGET_ID\n" +
                                    "AND BP.PROJECT_ID IN (?PROJECT_ID) AND BM.IS_ACTIVE=1 AND BM.BUDGET_ACTION IN (2) \n" +
                                     " AND ((BM.DATE_FROM BETWEEN ?YEAR_FROM  AND ?YEAR_TO)\n" +
                                    " OR (BM.DATE_TO BETWEEN  ?YEAR_FROM  AND ?YEAR_TO)) GROUP BY PROJECT_ID) AS BP\n" +
                                    "ON BP.PROJECT_ID = VMT.PROJECT_ID\n" +
                                    "WHERE VMT.PROJECT_ID IN (?PROJECT_ID) AND VMT.STATUS = 1 AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND\n" +
                                    "IF(?CURRENCY_COUNTRY_ID > 0, VMT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1) AND\n" +
                                    "IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '0', \n" +
                                    " ( (VMT.VOUCHER_TYPE NOT IN ('JN')) OR (VMT.VOUCHER_TYPE = 'JN' AND VMT.VOUCHER_SUB_TYPE ='FD' AND VT.TRANS_MODE =?TRANS_MODE)) \n" +
                                    ", 1=1)\n" +
                                    " \n" + // AND BM.DATE_FROM = ?YEAR_FROM  AND BM.DATE_TO = ?YEAR_TO

                                    "GROUP BY VT.LEDGER_ID) AS ACTUAL ON ACTUAL.LEDGER_ID = PBL.LEDGER_ID\n" +
                                "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = PBL.LEDGER_ID\n" +
                                "INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID\n" +
                                "LEFT JOIN (SELECT BCC.BUDGET_ID, BCC.LEDGER_ID, GROUP_CONCAT(BCC.COST_CENTRE_ID) AS COST_CENTRE_IDs FROM BUDGET_COSTCENTER BCC\n" +
                                "           WHERE 1=1 {AND BCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)} GROUP BY BUDGET_ID, LEDGER_ID) BCC\n" +
                                "             ON BCC.BUDGET_ID = BM.BUDGET_ID AND BCC.LEDGER_ID = BL.LEDGER_ID\n" +
                                "WHERE BP.PROJECT_ID IN (?PROJECT_ID) AND BM.IS_ACTIVE=1 AND BM.BUDGET_ACTION IN (2)\n" + // AND BM.DATE_FROM = ?YEAR_FROM  AND BM.DATE_TO = ?YEAR_TO
                                " AND ((BM.DATE_FROM BETWEEN ?YEAR_FROM  AND ?YEAR_TO)\n" +
                                " OR (BM.DATE_TO BETWEEN  ?YEAR_FROM  AND ?YEAR_TO))\n" +
                                "AND ML.GROUP_ID NOT IN (12, 13, 14) AND (BL.APPROVED_AMOUNT>0 OR AMOUNT_DR > 0 OR AMOUNT_CR >0)\n" +
                               "GROUP BY PBL.LEDGER_ID, BL.TRANS_MODE";

                        break;
                    }

                case ReportSQLCommand.BudgetVariance.BudgetCCRealization:
                    {
                        query = @"SELECT LG.GROUP_ID, BCC.LEDGER_ID AS LEDGER_ID, IFNULL(MCCC.COST_CENTRECATEGORY_ID,0) AS COST_CENTRECATEGORY_ID, BCC.COST_CENTRE_ID, MC.ABBREVATION, MC.COST_CENTRE_NAME, 
                                    IFNULL(MCCC.COST_CENTRE_CATEGORY_NAME,'') AS COST_CENTRE_CATEGORY_NAME, IFNULL(ML.LEDGER_CODE, '') AS LEDGER_CODE, IFNULL(ML.LEDGER_NAME, '') AS LEDGER_NAME, 
                                    SUM(IFNULL(BCC.PROPOSED_AMOUNT, 0)) AS PROPOSED_AMOUNT, SUM(IFNULL(BCC.APPROVED_AMOUNT, 0)) AS APPROVED_AMOUNT, BCC.TRANS_MODE AS BUDGET_TRANS_MODE,
                                    IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '2',
                                    CASE
                                    WHEN LG.NATURE_ID IN (1, 2) THEN
                                    IF(NATURE_ID = 1, IFNULL(ACTUAL.AMOUNT_CR, 0) - IFNULL(ACTUAL.AMOUNT_DR, 0), IFNULL(ACTUAL.AMOUNT_DR, 0) - IFNULL(ACTUAL.AMOUNT_CR, 0))
                                      ELSE
                                       IF('CR' = BL.TRANS_MODE, IFNULL(ACTUAL.AMOUNT_CR, 0),IFNULL(ACTUAL.AMOUNT_DR, 0))
                                      END , IF('CR' = BL.TRANS_MODE, IFNULL(ACTUAL.AMOUNT_CR, 0),IFNULL(ACTUAL.AMOUNT_DR, 0))) AS ACTUAL_AMOUNT
                                    FROM BUDGET_COSTCENTER BCC
                                    INNER JOIN BUDGET_LEDGER BL ON BL.BUDGET_ID = BCC.BUDGET_ID AND BL.LEDGER_ID = BCC.LEDGER_ID AND BL.TRANS_MODE = BCC.TRANS_MODE         
                                    INNER JOIN BUDGET_MASTER BM ON BM.BUDGET_ID = BL.BUDGET_ID AND BM.BUDGET_ID = BCC.BUDGET_ID
                                    INNER JOIN (SELECT BP.BUDGET_ID FROM BUDGET_PROJECT BP WHERE BP.PROJECT_ID IN (?PROJECT_ID) GROUP BY BP.BUDGET_ID) AS BP ON BP.BUDGET_ID = BL.BUDGET_ID
                                    INNER JOIN MASTER_COST_CENTRE MC ON BCC.COST_CENTRE_ID = MC.COST_CENTRE_ID
                                    LEFT JOIN COSTCATEGORY_COSTCENTRE CC ON CC.COST_CENTRE_ID = MC.COST_CENTRE_ID
                                    LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC ON MCCC.COST_CENTRECATEGORY_ID= CC.COST_CATEGORY_ID
                                    INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = BCC.LEDGER_ID
                                    INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID

                                    LEFT JOIN (SELECT VCC.LEDGER_ID, VCC.COST_CENTRE_ID, SUM(IF(VT.TRANS_MODE = 'DR', IFNULL(VCC.AMOUNT,0), 0)) AS AMOUNT_DR, 
                                    SUM(IF(VT.TRANS_MODE = 'CR', IFNULL(VCC.AMOUNT,0), 0)) AS AMOUNT_CR
                                    FROM VOUCHER_TRANS VT
                                    INNER JOIN VOUCHER_MASTER_TRANS VMT ON VT.VOUCHER_ID = VMT.VOUCHER_ID
                                    INNER JOIN VOUCHER_CC_TRANS VCC ON VCC.VOUCHER_ID = VT.VOUCHER_ID AND VCC.LEDGER_ID = VT.LEDGER_ID
                                    INNER JOIN BUDGET_PROJECT BP ON BP.PROJECT_ID = VMT.PROJECT_ID AND BP.PROJECT_ID IN (?PROJECT_ID)
                                    INNER JOIN BUDGET_MASTER BM ON BP.BUDGET_ID = BM.BUDGET_ID
                                    WHERE VMT.PROJECT_ID IN (?PROJECT_ID) AND VMT.STATUS = 1 AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND
                                    IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '0',
                                     ( (VMT.VOUCHER_TYPE NOT IN ('JN')) OR (VMT.VOUCHER_TYPE = 'JN' AND VMT.VOUCHER_SUB_TYPE ='FD' {AND VT.TRANS_MODE =?TRANS_MODE}))
                                    , 1=1) AND BP.PROJECT_ID IN (?PROJECT_ID) AND BM.IS_ACTIVE=1
                                     AND BM.BUDGET_ACTION IN (2) AND BM.DATE_FROM = ?YEAR_FROM AND BM.DATE_TO = ?YEAR_TO
                                    GROUP BY VCC.LEDGER_ID, VCC.COST_CENTRE_ID) AS ACTUAL ON ACTUAL.LEDGER_ID = BCC.LEDGER_ID AND ACTUAL.COST_CENTRE_ID = BCC.COST_CENTRE_ID

                                    WHERE BM.IS_ACTIVE=1 AND BM.BUDGET_ACTION IN (2) {AND BL.TRANS_MODE=?TRANS_MODE} AND BM.DATE_FROM = ?YEAR_FROM  AND BM.DATE_TO = ?YEAR_TO
                                    AND ML.GROUP_ID NOT IN (12, 13, 14) AND (BCC.APPROVED_AMOUNT>0 OR AMOUNT_DR > 0 ) {AND MC.COST_CENTRE_ID IN (?COST_CENTRE_ID)}
                                    GROUP BY BCC.LEDGER_ID, BCC.COST_CENTRE_ID, BCC.TRANS_MODE";
                        break;
                    }

                /// 04/03/2025, to define and separate the cost centre if needed, other wise sum the values based on category wise
                /// if cost centre - need to generate the budget and realized amount
                /// if category sum the values based on category
                /// introduce bcc_id to define whehter group cost centre cateogry or cost centre 
                case ReportSQLCommand.BudgetVariance.BudgetCCRealizationUnderCC:
                    {
                        query = "SELECT \n" +
                                 "PBL.LEDGER_ID, \n" +
                                 "LG.GROUP_ID, \n" +
                                 "IFNULL(PC.COST_CENTRE_ID, 0) AS COST_CENTRE_ID, \n" +
                                 "IFNULL(MCCC.COST_CENTRECATEGORY_ID, 0) AS COST_CENTRECATEGORY_ID, \n" +
                                 "ML.GROUP_ID, \n" +
                                 "LG.NATURE_ID, \n" +
                                 "IFNULL(MC.COST_CENTRE_NAME, '') AS COST_CENTRE_NAME, \n" +
                                 "IFNULL(MCCC.COST_CENTRE_CATEGORY_NAME, '') AS COST_CENTRE_CATEGORY_NAME, \n" +
                                 "LG.LEDGER_GROUP, \n" +
                                 "ML.LEDGER_CODE, \n" +
                                 "ML.LEDGER_NAME, \n" +
                                 "IF(\n" +
                                     "BL.TRANS_MODE IS NULL, \n" +
                                     "IF(NATURE_ID IN (1, 3), 'CR', 'DR'), \n" +
                                     "BL.TRANS_MODE \n" +
                                 ") AS BUDGET_TRANS_MODE, \n" +
                                 "IFNULL(SUM(BL.PROPOSED_AMOUNT), 0) AS PROPOSED_AMOUNT, \n" +
                                 "IFNULL(SUM(BL.APPROVED_AMOUNT), 0) AS APPROVED_AMOUNT, \n" +
                                 "IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '2', \n" +
                                     "CASE \n" +
                                         "WHEN NATURE_ID IN (1, 2) THEN \n" +
                                             "IF(NATURE_ID = 1, IFNULL(SUM(ACTUAL.AMOUNT_CR), 0) - IFNULL(SUM(ACTUAL.AMOUNT_DR), 0), \n" +
                                                "IFNULL(SUM(ACTUAL.AMOUNT_DR), 0) - IFNULL(SUM(ACTUAL.AMOUNT_CR), 0)) \n" +
                                         "ELSE \n" +
                                             "IF('CR' = BL.TRANS_MODE, IFNULL(SUM(ACTUAL.AMOUNT_CR), 0), IFNULL(SUM(ACTUAL.AMOUNT_DR), 0)) \n" +
                                     "END, \n" +
                                     "IF('CR' = BL.TRANS_MODE, IFNULL(SUM(ACTUAL.AMOUNT_CR), 0), IFNULL(SUM(ACTUAL.AMOUNT_DR), 0)) \n" +
                                 ") AS ACTUAL_AMOUNT \n" +
                             "FROM \n" +
                                 "BUDGET_MASTER BM \n" +
                                 "INNER JOIN BUDGET_PROJECT BP \n" +
                                     "ON BP.BUDGET_ID = BM.BUDGET_ID \n" +
                                 "INNER JOIN PROJECT_LEDGER PBL \n" +
                                     "ON PBL.PROJECT_ID = BP.PROJECT_ID \n" +
                                 "INNER JOIN PROJECT_COSTCENTRE PC \n" +
                                     "ON PC.PROJECT_ID = PBL.PROJECT_ID \n" +
                                 "LEFT JOIN ( \n" +
                                     "SELECT \n" +
                                         "BL.LEDGER_ID, \n" +
                                         "IFNULL(BCC.COST_CENTRE_ID, 0) AS COST_CENTRE_ID, \n" +
                                         "BL.TRANS_MODE, \n" +
                                         "SUM(BCC.PROPOSED_AMOUNT) AS PROPOSED_AMOUNT, \n" +
                                         "SUM(BCC.APPROVED_AMOUNT) AS APPROVED_AMOUNT \n" +
                                     "FROM \n" +
                                         "BUDGET_LEDGER AS BL \n" +
                                         "INNER JOIN BUDGET_COSTCENTER BCC \n" +
                                             "ON BCC.BUDGET_ID = BL.BUDGET_ID \n" +
                                             "AND BCC.LEDGER_ID = BL.LEDGER_ID \n" +
                                             "AND BCC.TRANS_MODE = BL.TRANS_MODE \n" +
                                         "INNER JOIN BUDGET_MASTER BM \n" +
                                             "ON BM.BUDGET_ID = BL.BUDGET_ID \n" +
                                         "INNER JOIN ( \n" +
                                             "SELECT BP.BUDGET_ID \n" +
                                             "FROM BUDGET_PROJECT BP \n" +
                                             "WHERE BP.PROJECT_ID IN (?PROJECT_ID) \n" +
                                             "GROUP BY BP.BUDGET_ID \n" +
                                         ") AS BP \n" +
                                             "ON BP.BUDGET_ID = BL.BUDGET_ID \n" +
                                     "WHERE \n" +
                                         "BM.IS_ACTIVE = 1  \n" +
                                         "AND BM.BUDGET_ACTION IN (2) \n" +
                                         "AND BM.DATE_FROM = ?YEAR_FROM \n" +
                                         "AND BM.DATE_TO = ?YEAR_TO \n" +
                                     "GROUP BY \n" +
                                         "BL.LEDGER_ID, BCC.COST_CENTRE_ID, BL.TRANS_MODE \n" +
                                 ") AS BL \n" +
                                     "ON BL.LEDGER_ID = PBL.LEDGER_ID \n" +
                                     "AND BL.COST_CENTRE_ID = PC.COST_CENTRE_ID \n" +
                                 "LEFT JOIN ( \n" +
                                     "SELECT \n" +
                                         "VCC.LEDGER_ID, \n" +
                                         "IFNULL(VCC.COST_CENTRE_ID, 0) AS COST_CENTRE_ID, \n" +
                                         "SUM(IF(VT.TRANS_MODE = 'DR', IFNULL(VCC.AMOUNT, 0), 0)) AS AMOUNT_DR, \n" +
                                         "SUM(IF(VT.TRANS_MODE = 'CR', IFNULL(VCC.AMOUNT, 0), 0)) AS AMOUNT_CR \n" +
                                     "FROM \n" +
                                         "VOUCHER_TRANS VT \n" +
                                         "INNER JOIN VOUCHER_MASTER_TRANS VMT \n" +
                                             "ON VT.VOUCHER_ID = VMT.VOUCHER_ID \n" +
                                         "INNER JOIN VOUCHER_CC_TRANS VCC \n" +
                                             "ON VCC.VOUCHER_ID = VT.VOUCHER_ID \n" +
                                             "AND VCC.LEDGER_ID = VT.LEDGER_ID \n" +
                                     "WHERE \n" +
                                         "VMT.PROJECT_ID IN (?PROJECT_ID)  \n" +
                                         "AND VMT.STATUS = 1 \n" +
                                         "AND VOUCHER_DATE BETWEEN ?YEAR_FROM \n" +
                                         "AND ?YEAR_TO \n" +
                                         "AND IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '0', \n" +
                                             "( (VMT.VOUCHER_TYPE NOT IN ('JN')) \n" +
                                             "OR (VMT.VOUCHER_TYPE = 'JN' AND VMT.VOUCHER_SUB_TYPE = 'FD' {AND VT.TRANS_MODE =?TRANS_MODE}) ), 1 = 1) \n" +
                                     "GROUP BY \n" +
                                         "VCC.LEDGER_ID,IF(1=?BCC_ID,VCC.COST_CENTRE_ID,0)\n" +  // , VCC.COST_CENTRE_ID 04-3-2025
                                 ") AS ACTUAL \n" +
                                     "ON ACTUAL.LEDGER_ID = PBL.LEDGER_ID \n" +
                                     "AND ( \n" +
                                         "ACTUAL.COST_CENTRE_ID = BL.COST_CENTRE_ID \n" +
                                         "OR ACTUAL.COST_CENTRE_ID = PC.COST_CENTRE_ID \n" +
                                     ") \n" +
                                 "INNER JOIN MASTER_LEDGER ML \n" +
                                     "ON ML.LEDGER_ID = PBL.LEDGER_ID \n" +
                                 "INNER JOIN MASTER_LEDGER_GROUP LG \n" +
                                     "ON LG.GROUP_ID = ML.GROUP_ID \n" +
                                 "LEFT JOIN MASTER_COST_CENTRE MC \n" +
                                     "ON MC.COST_CENTRE_ID = BL.COST_CENTRE_ID \n" +
                                     "OR MC.COST_CENTRE_ID = ACTUAL.COST_CENTRE_ID \n" +
                                     "OR MC.COST_CENTRE_ID = PC.COST_CENTRE_ID \n" +
                                 "LEFT JOIN COSTCATEGORY_COSTCENTRE CC \n" +
                                     "ON CC.COST_CENTRE_ID = MC.COST_CENTRE_ID \n" +
                                 "LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC \n" +
                                     "ON MCCC.COST_CENTRECATEGORY_ID = CC.COST_CATEGORY_ID \n" +
                             "WHERE \n" +
                                 "BP.PROJECT_ID IN (?PROJECT_ID) \n" +
                                 "AND BM.IS_ACTIVE = 1 \n" +
                                 "AND BM.BUDGET_ACTION IN (2) \n" +
                                 "AND BM.DATE_FROM = ?YEAR_FROM \n" +
                                 "AND BM.DATE_TO = ?YEAR_TO \n" +
                                 "AND ML.GROUP_ID NOT IN (12, 13, 14) \n" +
                                 "AND (BL.APPROVED_AMOUNT > 0 OR ACTUAL.AMOUNT_DR >0 OR ACTUAL.AMOUNT_CR>0) \n" +
                                 "{AND MC.COST_CENTRE_ID IN (?COST_CENTRE_ID)} \n" +
                             "GROUP BY \n" +
                                 "PBL.LEDGER_ID, \n" +
                                 " BL.TRANS_MODE, \n" +
                                 "IF(1=?BCC_ID,MC.COST_CENTRE_ID,MCCC.COST_CENTRECATEGORY_ID)";
                        // 26/02/2025, Chinna, it is used to verify it
                        //                        query = @"SELECT LG.GROUP_ID, BCC.LEDGER_ID AS LEDGER_ID, IFNULL(MCCC.COST_CENTRECATEGORY_ID,0) AS COST_CENTRECATEGORY_ID, BCC.COST_CENTRE_ID, MC.ABBREVATION, MC.COST_CENTRE_NAME, 
                        //                                    IFNULL(MCCC.COST_CENTRE_CATEGORY_NAME,'') AS COST_CENTRE_CATEGORY_NAME, IFNULL(ML.LEDGER_CODE, '') AS LEDGER_CODE, IFNULL(ML.LEDGER_NAME, '') AS LEDGER_NAME, 
                        //                                    SUM(IFNULL(BCC.PROPOSED_AMOUNT, 0)) AS PROPOSED_AMOUNT, SUM(IFNULL(BCC.APPROVED_AMOUNT, 0)) AS APPROVED_AMOUNT, BCC.TRANS_MODE AS BUDGET_TRANS_MODE,
                        //                                    IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '2',
                        //                                    CASE
                        //                                    WHEN LG.NATURE_ID IN (1, 2) THEN
                        //                                    IF(NATURE_ID = 1, IFNULL(ACTUAL.AMOUNT_CR, 0) - IFNULL(ACTUAL.AMOUNT_DR, 0), IFNULL(ACTUAL.AMOUNT_DR, 0) - IFNULL(ACTUAL.AMOUNT_CR, 0))
                        //                                      ELSE
                        //                                       IF('CR' = BL.TRANS_MODE, IFNULL(ACTUAL.AMOUNT_CR, 0),IFNULL(ACTUAL.AMOUNT_DR, 0))
                        //                                      END , IF('CR' = BL.TRANS_MODE, IFNULL(ACTUAL.AMOUNT_CR, 0),IFNULL(ACTUAL.AMOUNT_DR, 0))) AS ACTUAL_AMOUNT
                        //                                    FROM BUDGET_COSTCENTER BCC
                        //                                    INNER JOIN BUDGET_LEDGER BL ON BL.BUDGET_ID = BCC.BUDGET_ID AND BL.LEDGER_ID = BCC.LEDGER_ID AND BL.TRANS_MODE = BCC.TRANS_MODE         
                        //                                    INNER JOIN BUDGET_MASTER BM ON BM.BUDGET_ID = BL.BUDGET_ID AND BM.BUDGET_ID = BCC.BUDGET_ID
                        //                                    INNER JOIN (SELECT BP.BUDGET_ID FROM BUDGET_PROJECT BP WHERE BP.PROJECT_ID IN (?PROJECT_ID) GROUP BY BP.BUDGET_ID) AS BP ON BP.BUDGET_ID = BL.BUDGET_ID
                        //                                    INNER JOIN MASTER_COST_CENTRE MC ON BCC.COST_CENTRE_ID = MC.COST_CENTRE_ID
                        //                                    LEFT JOIN COSTCATEGORY_COSTCENTRE CC ON CC.COST_CENTRE_ID = MC.COST_CENTRE_ID
                        //                                    LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC ON MCCC.COST_CENTRECATEGORY_ID= CC.COST_CATEGORY_ID
                        //                                    INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = BCC.LEDGER_ID
                        //                                    INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID
                        //
                        //                                    LEFT JOIN (SELECT VCC.LEDGER_ID, VCC.COST_CENTRE_ID, SUM(IF(VT.TRANS_MODE = 'DR', IFNULL(VCC.AMOUNT,0), 0)) AS AMOUNT_DR, 
                        //                                    SUM(IF(VT.TRANS_MODE = 'CR', IFNULL(VCC.AMOUNT,0), 0)) AS AMOUNT_CR
                        //                                    FROM VOUCHER_TRANS VT
                        //                                    INNER JOIN VOUCHER_MASTER_TRANS VMT ON VT.VOUCHER_ID = VMT.VOUCHER_ID
                        //                                    INNER JOIN VOUCHER_CC_TRANS VCC ON VCC.VOUCHER_ID = VT.VOUCHER_ID AND VCC.LEDGER_ID = VT.LEDGER_ID
                        //                                    INNER JOIN BUDGET_PROJECT BP ON BP.PROJECT_ID = VMT.PROJECT_ID AND BP.PROJECT_ID IN (?PROJECT_ID)
                        //                                    INNER JOIN BUDGET_MASTER BM ON BP.BUDGET_ID = BM.BUDGET_ID
                        //                                    WHERE VMT.PROJECT_ID IN (?PROJECT_ID) AND VMT.STATUS = 1 AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND
                        //                                    IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '0',
                        //                                     ( (VMT.VOUCHER_TYPE NOT IN ('JN')) OR (VMT.VOUCHER_TYPE = 'JN' AND VMT.VOUCHER_SUB_TYPE ='FD' {AND VT.TRANS_MODE =?TRANS_MODE}))
                        //                                    , 1=1) AND BP.PROJECT_ID IN (?PROJECT_ID) AND BM.IS_ACTIVE=1
                        //                                     AND BM.BUDGET_ACTION IN (2) AND BM.DATE_FROM = ?YEAR_FROM AND BM.DATE_TO = ?YEAR_TO
                        //                                    GROUP BY VCC.LEDGER_ID, VCC.COST_CENTRE_ID) AS ACTUAL ON ACTUAL.LEDGER_ID = BCC.LEDGER_ID AND ACTUAL.COST_CENTRE_ID = BCC.COST_CENTRE_ID
                        //
                        //                                    WHERE BM.IS_ACTIVE=1 AND BM.BUDGET_ACTION IN (2) {AND BL.TRANS_MODE=?TRANS_MODE} AND BM.DATE_FROM = ?YEAR_FROM  AND BM.DATE_TO = ?YEAR_TO
                        //                                    AND ML.GROUP_ID NOT IN (12, 13, 14) AND (BCC.APPROVED_AMOUNT>0 OR AMOUNT_DR > 0 ) {AND MC.COST_CENTRE_ID IN (?COST_CENTRE_ID)}
                        //                                    GROUP BY BCC.LEDGER_ID, BCC.COST_CENTRE_ID, BCC.TRANS_MODE";
                        break;
                    }
                #endregion

                #region Budget Annual Approved Budget
                case ReportSQLCommand.BudgetVariance.BudgetAnnualApproved:
                    {
                        query = "SELECT BM.BUDGET_ID, PBL.LEDGER_ID,ML.GROUP_ID, LG.NATURE_ID, IFNULL(BCC.COST_CENTRE_IDs,'') AS COST_CENTRE_IDs, LG.LEDGER_GROUP, ML.LEDGER_CODE, ML.LEDGER_NAME,BL.TRANS_MODE,\n" +
                                "IFNULL(BL.PROPOSED_AMOUNT,0) AS PROPOSED_AMOUNT, IFNULL(BL.APPROVED_AMOUNT,0) AS APPROVED_AMOUNT, BL.NARRATION,\n" +
                                "IFNULL(PREV_BUDGET.PROPOSED_AMOUNT,0) AS PREV_PROPOSED_AMOUNT, IFNULL(PREV_BUDGET.APPROVED_AMOUNT, 0) AS PREV_APPROVED_AMOUNT,\n" +
                            //"IFNULL(PREV_ACTUAL.AMOUNT_CR,0) AS AMOUNT_CR, IFNULL(PREV_ACTUAL.AMOUNT_DR,0) AS AMOUNT_DR\n" +
                                "IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '2',\n" +
                                " CASE\n" +
                                "  WHEN NATURE_ID IN (1, 2) THEN\n" +
                                "   IF(NATURE_ID = 1, IFNULL(PREV_ACTUAL.AMOUNT_CR, 0) - IFNULL(PREV_ACTUAL.AMOUNT_DR, 0), IFNULL(PREV_ACTUAL.AMOUNT_DR, 0) - IFNULL(PREV_ACTUAL.AMOUNT_CR, 0))\n" +
                                "  ELSE\n" +
                                "   IF('CR' = ?TRANS_MODE, IFNULL(PREV_ACTUAL.AMOUNT_CR, 0),IFNULL(PREV_ACTUAL.AMOUNT_DR, 0))\n" +
                                "  END , IF('CR' = ?TRANS_MODE, IFNULL(PREV_ACTUAL.AMOUNT_CR, 0),IFNULL(PREV_ACTUAL.AMOUNT_DR, 0))) AS PREV_ACTUAL_SPENT\n" +
                                "FROM BUDGET_MASTER BM\n" +
                                "INNER JOIN BUDGET_PROJECT BP ON BP.BUDGET_ID = BM.BUDGET_ID\n" +
                                "INNER JOIN PROJECT_LEDGER PBL ON PBL.PROJECT_ID = BP.PROJECT_ID\n" +
                                "LEFT JOIN (SELECT BL.LEDGER_ID, BL.TRANS_MODE,\n" +
                                    "SUM(BL.PROPOSED_AMOUNT/?EXCHANGE_RATE) AS PROPOSED_AMOUNT,\n" +
                                    "SUM(BL.APPROVED_AMOUNT/?EXCHANGE_RATE) AS APPROVED_AMOUNT,\n" +
                                    "BL.NARRATION\n" +
                                    "FROM BUDGET_LEDGER AS BL\n" +
                                    "INNER JOIN BUDGET_MASTER BM ON BM.BUDGET_ID = BL.BUDGET_ID\n" +
                                    "INNER JOIN (SELECT BP.BUDGET_ID FROM BUDGET_PROJECT BP WHERE BP.PROJECT_ID IN (?PROJECT_ID) GROUP BY BP.BUDGET_ID) AS BP ON BP.BUDGET_ID = BL.BUDGET_ID\n" +
                                    "WHERE BL.TRANS_MODE = ?TRANS_MODE AND BM.IS_ACTIVE=1 AND BM.BUDGET_ACTION IN (2)\n" +

                                    // Chinna 02/05/2024
                            // "AND BM.DATE_FROM = ?YEAR_FROM  AND BM.DATE_TO = ?YEAR_TO\n" +

                                    " AND ((BM.DATE_FROM BETWEEN ?YEAR_FROM  AND ?YEAR_TO)\n" +
                                    " OR (BM.DATE_TO BETWEEN  ?YEAR_FROM  AND ?YEAR_TO))\n" +

                                    "GROUP BY BL.LEDGER_ID, BL.TRANS_MODE) AS BL ON BL.LEDGER_ID = PBL.LEDGER_ID\n" +
                                "LEFT JOIN (SELECT VT.LEDGER_ID, \n" +
                                            "SUM(IF(VT.TRANS_MODE = 'DR', (VT.AMOUNT * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)), 0)) AS AMOUNT_DR,\n" +
                                            "SUM(IF(VT.TRANS_MODE = 'CR', (VT.AMOUNT * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)) , 0)) AS AMOUNT_CR\n" +
                                            "FROM VOUCHER_TRANS VT\n" +
                                            "INNER JOIN VOUCHER_MASTER_TRANS VMT ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                            //"INNER JOIN BUDGET_PROJECT BP ON BP.PROJECT_ID = VMT.PROJECT_ID\n" +
                            //"INNER JOIN BUDGET_MASTER BM ON BP.BUDGET_ID = BM.BUDGET_ID\n" +
                                            "WHERE VMT.PROJECT_ID IN (?PROJECT_ID)  AND VMT.STATUS = 1 AND\n" +
                                            "VOUCHER_DATE BETWEEN DATE_ADD(?YEAR_FROM, INTERVAL -1 YEAR) AND DATE_ADD(?YEAR_TO, INTERVAL -1 YEAR) AND \n" +
                                            "IF(?CURRENCY_COUNTRY_ID > 0, VMT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1) AND \n" +
                            //"{ AND ( (VMT.VOUCHER_TYPE NOT IN (?VOUCHER_TYPE)) OR (VMT.VOUCHER_TYPE = 'JN' AND VMT.VOUCHER_SUB_TYPE ='FD' AND VT.TRANS_MODE =?TRANS_MODE) )}\n" +
                                            "IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '0', \n" +
                                            " ( (VMT.VOUCHER_TYPE NOT IN ('JN')) OR (VMT.VOUCHER_TYPE = 'JN' AND VMT.VOUCHER_SUB_TYPE ='FD' AND VT.TRANS_MODE =?TRANS_MODE) ), 1=1)\n" +
                            //"BP.PROJECT_ID IN (?PROJECT_ID) AND BM.IS_ACTIVE=1 AND BM.BUDGET_ACTION IN (2) AND\n" +
                            //"BM.DATE_FROM = DATE_ADD(?YEAR_FROM, INTERVAL -1 YEAR) AND BM.DATE_TO = DATE_ADD(?YEAR_TO, INTERVAL -1 YEAR)\n" +
                                            "GROUP BY VT.LEDGER_ID) AS PREV_ACTUAL ON PREV_ACTUAL.LEDGER_ID = PBL.LEDGER_ID\n" + //VT.TRANS_MODE
                                "LEFT JOIN (SELECT BL.LEDGER_ID,\n" +
                                           "SUM(BL.PROPOSED_AMOUNT/?PREVIOUS_YEAR_EX_RATE) AS PROPOSED_AMOUNT, \n" +
                                           "SUM(BL.APPROVED_AMOUNT/?PREVIOUS_YEAR_EX_RATE) AS APPROVED_AMOUNT, BL.TRANS_MODE, BL.NARRATION\n" +
                                           "FROM BUDGET_MASTER BM\n" +
                                           "INNER JOIN BUDGET_LEDGER BL ON BL.BUDGET_ID = BM.BUDGET_ID\n" +
                                           "INNER JOIN (SELECT BP.BUDGET_ID FROM BUDGET_PROJECT BP WHERE BP.PROJECT_ID IN (?PROJECT_ID) GROUP BY BP.BUDGET_ID) AS BP ON BP.BUDGET_ID = BL.BUDGET_ID\n" +
                                           "WHERE BL.TRANS_MODE = ?TRANS_MODE AND BM.IS_ACTIVE=1 AND \n" +
                                           "BM.DATE_FROM = DATE_ADD(?YEAR_FROM, INTERVAL -1 YEAR) AND BM.DATE_TO = DATE_ADD(?YEAR_TO, INTERVAL -1 YEAR)\n" +
                                           "AND BM.BUDGET_ACTION IN (2) GROUP BY BL.LEDGER_ID, BL.TRANS_MODE) AS PREV_BUDGET\n" +
                                           "ON PREV_BUDGET.LEDGER_ID = PBL.LEDGER_ID\n" + // AND PREV_BUDGET.TRANS_MODE = BL.TRANS_MODE
                                "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = PBL.LEDGER_ID\n" +
                                "INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID\n" +
                                "LEFT JOIN (SELECT BCC.BUDGET_ID, BCC.LEDGER_ID, GROUP_CONCAT(BCC.COST_CENTRE_ID) AS COST_CENTRE_IDs FROM BUDGET_COSTCENTER BCC\n" +
                                "           WHERE 1=1 {AND BCC.COST_CENTRE_ID IN (?COST_CENTRE_ID)} GROUP BY BUDGET_ID, LEDGER_ID) BCC\n" +
                                "             ON BCC.BUDGET_ID = BM.BUDGET_ID AND BCC.LEDGER_ID = BL.LEDGER_ID\n" +
                                "WHERE BP.PROJECT_ID IN (?PROJECT_ID) AND BM.IS_ACTIVE=1 AND BM.BUDGET_ACTION IN (2) \n" +

                                // Chinna 02/05/2024
                            //"AND BM.DATE_FROM = ?YEAR_FROM  AND BM.DATE_TO = ?YEAR_TO\n" +
                                "AND ((BM.DATE_FROM BETWEEN  ?YEAR_FROM AND ?YEAR_TO)\n" +
                                "OR (BM.DATE_TO BETWEEN  ?YEAR_FROM AND ?YEAR_TO))\n" +

                                "AND ML.GROUP_ID NOT IN (12, 13, 14) AND (PREV_BUDGET.APPROVED_AMOUNT >0 OR  BL.APPROVED_AMOUNT>0 OR AMOUNT_DR > 0 OR AMOUNT_CR >0)\n" +
                                "GROUP BY PBL.LEDGER_ID, BL.TRANS_MODE";
                        break;
                    }

                /// 04/03/2025, to define and separate the cost centre if needed, other wise sum the values based on category wise
                /// if cost centre - need to generate the budget and realized amount
                /// if category sum the values based on category
                /// introduce bcc_id to define whehter group cost centre cateogry or cost centre 
                /// // sum hte values for all the fields after grouped
                case ReportSQLCommand.BudgetVariance.BudgetAnnualCCApproved:
                    {
                        query = "SELECT PBL.LEDGER_ID, IFNULL(PC.COST_CENTRE_ID,0) AS COST_CENTRE_ID, IFNULL(MCCC.COST_CENTRECATEGORY_ID,0) AS COST_CENTRECATEGORY_ID,\n" + // MC.cost_centre_id to PC.cost_centre_id
                                "ML.GROUP_ID, LG.NATURE_ID,\n" +
                                "IFNULL(MC.COST_CENTRE_NAME, '') AS COST_CENTRE_NAME, IFNULL(MCCC.COST_CENTRE_CATEGORY_NAME,'') AS COST_CENTRE_CATEGORY_NAME, \n" +
                                "LG.LEDGER_GROUP, ML.LEDGER_CODE, ML.LEDGER_NAME, IF(BL.TRANS_MODE IS NULL,IF(NATURE_ID IN (1,3),'CR','DR'),BL.TRANS_MODE)  AS BUDGET_TRANS_MODE, \n" + // BL.TRANS_MODE IS UPDATED, is null 1,3 is cr and DR
                                "IFNULL(SUM(BL.PROPOSED_AMOUNT),0) AS PROPOSED_AMOUNT, IFNULL(SUM(BL.APPROVED_AMOUNT),0) AS APPROVED_AMOUNT, \n" +
                                "IFNULL(SUM(PREV_BL.PROPOSED_AMOUNT),0) AS PREV_PROPOSED_AMOUNT, IFNULL(SUM(PREV_BL.APPROVED_AMOUNT), 0) AS PREV_APPROVED_AMOUNT,\n" +
                                "IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '2',\n" +
                                " CASE\n" +
                                "  WHEN NATURE_ID IN (1, 2) THEN\n" +
                                "   IF(NATURE_ID = 1, IFNULL(SUM(PREV_ACTUAL.AMOUNT_CR), 0) - IFNULL(SUM(PREV_ACTUAL.AMOUNT_DR), 0), IFNULL(SUM(PREV_ACTUAL.AMOUNT_DR), 0) - IFNULL(SUM(PREV_ACTUAL.AMOUNT_CR), 0))\n" +
                                "  ELSE\n" +
                                "   IF('CR' = BL.TRANS_MODE, IFNULL(SUM(PREV_ACTUAL.AMOUNT_CR), 0),IFNULL(SUM(PREV_ACTUAL.AMOUNT_DR), 0))\n" +
                                "  END , IF('CR' = BL.TRANS_MODE, IFNULL(SUM(PREV_ACTUAL.AMOUNT_CR), 0),IFNULL(SUM(PREV_ACTUAL.AMOUNT_DR), 0))) AS PREV_ACTUAL_SPENT\n" + //?TRANS_MODE
                                "FROM BUDGET_MASTER BM\n" +
                                "INNER JOIN BUDGET_PROJECT BP ON BP.BUDGET_ID = BM.BUDGET_ID\n" +
                                "INNER JOIN PROJECT_LEDGER PBL ON PBL.PROJECT_ID = BP.PROJECT_ID\n" +
                                "INNER JOIN PROJECT_COSTCENTRE PC ON PC.PROJECT_ID = PBL.PROJECT_ID\n" +
                                "LEFT JOIN (SELECT BL.LEDGER_ID, IFNULL(BCC.COST_CENTRE_ID, 0) AS COST_CENTRE_ID, BL.TRANS_MODE,\n" +
                                    "SUM(BCC.PROPOSED_AMOUNT) AS PROPOSED_AMOUNT, SUM(BCC.APPROVED_AMOUNT) AS APPROVED_AMOUNT\n" +
                                    "FROM BUDGET_LEDGER AS BL\n" +
                                    "INNER JOIN BUDGET_COSTCENTER BCC ON BCC.BUDGET_ID = BL.BUDGET_ID AND BCC.LEDGER_ID = BL.LEDGER_ID AND BCC.TRANS_MODE = BL.TRANS_MODE\n" +
                                    "INNER JOIN BUDGET_MASTER BM ON BM.BUDGET_ID = BL.BUDGET_ID\n" +
                                    "INNER JOIN (SELECT BP.BUDGET_ID FROM BUDGET_PROJECT BP WHERE BP.PROJECT_ID IN (?PROJECT_ID) GROUP BY BP.BUDGET_ID) AS BP ON BP.BUDGET_ID = BL.BUDGET_ID\n" +
                                    "WHERE BM.IS_ACTIVE=1 {AND BL.TRANS_MODE = ?TRANS_MODE} AND BM.BUDGET_ACTION IN (2)\n" +
                                        "AND BM.DATE_FROM = ?YEAR_FROM  AND BM.DATE_TO = ?YEAR_TO\n" +
                                    "GROUP BY BL.LEDGER_ID, BCC.COST_CENTRE_ID, BL.TRANS_MODE) AS BL ON BL.LEDGER_ID = PBL.LEDGER_ID AND BL.COST_CENTRE_ID = PC.COST_CENTRE_ID\n" +
                                "LEFT JOIN (SELECT BL.LEDGER_ID, IFNULL(BCC.COST_CENTRE_ID, 0) AS COST_CENTRE_ID, BL.TRANS_MODE,\n" +
                                    "SUM(BCC.PROPOSED_AMOUNT) AS PROPOSED_AMOUNT, SUM(BCC.APPROVED_AMOUNT) AS APPROVED_AMOUNT\n" +
                                    "FROM BUDGET_MASTER BM\n" +
                                    "INNER JOIN BUDGET_LEDGER BL ON BL.BUDGET_ID = BM.BUDGET_ID\n" +
                                    "INNER JOIN BUDGET_COSTCENTER BCC ON BCC.BUDGET_ID = BL.BUDGET_ID AND BCC.LEDGER_ID = BL.LEDGER_ID AND BCC.TRANS_MODE = BL.TRANS_MODE\n" +
                                    "INNER JOIN (SELECT BP.BUDGET_ID FROM BUDGET_PROJECT BP WHERE BP.PROJECT_ID IN (?PROJECT_ID) GROUP BY BP.BUDGET_ID) AS BP ON BP.BUDGET_ID = BL.BUDGET_ID\n" +
                                    "WHERE BM.IS_ACTIVE=1 {AND BL.TRANS_MODE = ?TRANS_MODE} AND \n" +
                                    "BM.DATE_FROM = DATE_ADD(?YEAR_FROM, INTERVAL -1 YEAR) AND BM.DATE_TO = DATE_ADD(?YEAR_TO, INTERVAL -1 YEAR)\n" +
                                    "AND BM.BUDGET_ACTION IN (2) GROUP BY BL.LEDGER_ID, BCC.COST_CENTRE_ID, BL.TRANS_MODE) AS PREV_BL\n" +
                                    "ON PREV_BL.LEDGER_ID = PBL.LEDGER_ID AND PREV_BL.COST_CENTRE_ID = PC.COST_CENTRE_ID\n" +
                                "LEFT JOIN (SELECT VCC.LEDGER_ID, IFNULL(VCC.COST_CENTRE_ID, 0) AS COST_CENTRE_ID, \n" +
                                        "SUM(IF(VT.TRANS_MODE = 'DR', IFNULL(VCC.AMOUNT,0), 0)) AS AMOUNT_DR, SUM(IF(VT.TRANS_MODE = 'CR', IFNULL(VCC.AMOUNT,0), 0)) AS AMOUNT_CR\n" +
                                    "FROM VOUCHER_TRANS VT\n" +
                                    "INNER JOIN VOUCHER_MASTER_TRANS VMT ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                    "INNER JOIN VOUCHER_CC_TRANS VCC ON VCC.VOUCHER_ID = VT.VOUCHER_ID AND VCC.LEDGER_ID = VT.LEDGER_ID\n" +
                                    "WHERE VMT.PROJECT_ID IN (?PROJECT_ID)  AND VMT.STATUS = 1\n" +
                                    "AND VOUCHER_DATE BETWEEN DATE_ADD(?YEAR_FROM, INTERVAL -1 YEAR) AND DATE_ADD(?YEAR_TO, INTERVAL -1 YEAR) AND \n" +
                                    "IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '0', \n" +
                                    " ( (VMT.VOUCHER_TYPE NOT IN ('JN')) OR (VMT.VOUCHER_TYPE = 'JN' AND VMT.VOUCHER_SUB_TYPE ='FD' AND VT.TRANS_MODE ='CR') ), 1=1)\n" + //?TRANS_MODE
                                    "GROUP BY VCC.LEDGER_ID, VCC.COST_CENTRE_ID) AS PREV_ACTUAL ON PREV_ACTUAL.LEDGER_ID = PBL.LEDGER_ID \n" +
                                    "AND (PREV_ACTUAL.COST_CENTRE_ID = BL.COST_CENTRE_ID OR PREV_ACTUAL.COST_CENTRE_ID = PREV_BL.COST_CENTRE_ID OR PREV_ACTUAL.COST_CENTRE_ID = PC.COST_CENTRE_ID)\n" + // added Last condition cost_centre_id for project cost centre
                                "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = PBL.LEDGER_ID\n" +
                                "INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID\n" +
                                "LEFT JOIN MASTER_COST_CENTRE MC ON MC.COST_CENTRE_ID = BL.COST_CENTRE_ID OR MC.COST_CENTRE_ID = PREV_BL.COST_CENTRE_ID OR MC.COST_CENTRE_ID = PREV_ACTUAL.COST_CENTRE_ID OR MC.COST_CENTRE_ID = PC.COST_CENTRE_ID\n" +
                                "LEFT JOIN COSTCATEGORY_COSTCENTRE CC ON CC.COST_CENTRE_ID = MC.COST_CENTRE_ID\n" +
                                "LEFT JOIN MASTER_COST_CENTRE_CATEGORY MCCC ON MCCC.COST_CENTRECATEGORY_ID= CC.COST_CATEGORY_ID\n" +
                                "WHERE BP.PROJECT_ID IN (?PROJECT_ID) AND BM.IS_ACTIVE=1 AND BM.BUDGET_ACTION IN (2) AND BM.DATE_FROM = ?YEAR_FROM  AND BM.DATE_TO = ?YEAR_TO\n" +
                                "AND ML.GROUP_ID NOT IN (12, 13, 14) AND (PREV_BL.APPROVED_AMOUNT >0 OR  BL.APPROVED_AMOUNT>0 OR PREV_ACTUAL.AMOUNT_CR>0 OR PREV_ACTUAL.AMOUNT_DR>0) {AND MC.COST_CENTRE_ID IN (?COST_CENTRE_ID)}\n" + // here also we added the actual amount
                                 "GROUP BY PBL.LEDGER_ID,BL.TRANS_MODE , IF(1=?BCC_ID,MC.COST_CENTRE_ID,MCCC.COST_CENTRECATEGORY_ID)";
                        // "GROUP BY PBL.LEDGER_ID, MC.COST_CENTRE_ID, BL.TRANS_MODE";
                        break;
                    }
                #endregion


                #region Budget Annual Budget Balance Sheet
                case ReportSQLCommand.BudgetVariance.BudgetAnnualBudgetBalanceSheet:
                    {

                        query = "SELECT PBL.LEDGER_ID, ML.GROUP_ID, LG.NATURE_ID, LG.LEDGER_GROUP,\n" +
                               "CONCAT(LG.LEDGER_GROUP, ' - ', MP.PROJECT) AS PROJECT_LEDGER_GROUP,\n" +
                               "ML.LEDGER_CODE, ML.LEDGER_NAME, BL.TRANS_MODE,\n" +
                               "IFNULL(BL.PROPOSED_AMOUNT,0) AS PROPOSED_AMOUNT, IFNULL(BL.APPROVED_AMOUNT,0) AS APPROVED_AMOUNT,\n" +
                            //"IFNULL(AMOUNT_CR,0) AS AMOUNT_CR, IFNULL(AMOUNT_DR,0) AS AMOUNT_DR\n" +
                               "IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '2',\n" +
                                " CASE\n" +
                                "  WHEN NATURE_ID IN (1, 2) THEN\n" +
                                "   IF(NATURE_ID = 1, IFNULL(ACTUAL.AMOUNT_CR, 0) - IFNULL(ACTUAL.AMOUNT_DR, 0), IFNULL(ACTUAL.AMOUNT_DR, 0) - IFNULL(ACTUAL.AMOUNT_CR, 0))\n" +
                                "  ELSE\n" +
                                "   IF('CR' = ?TRANS_MODE, IFNULL(ACTUAL.AMOUNT_CR, 0),IFNULL(ACTUAL.AMOUNT_DR, 0))\n" +
                                "  END , IF('CR' = ?TRANS_MODE, IFNULL(ACTUAL.AMOUNT_CR, 0),IFNULL(ACTUAL.AMOUNT_DR, 0))) AS ACTUAL_AMOUNT\n" +
                               "FROM BUDGET_MASTER BM\n" +
                               "INNER JOIN BUDGET_PROJECT BP ON BP.BUDGET_ID = BM.BUDGET_ID\n" +
                               "INNER JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = BP.PROJECT_ID\n" +
                               "LEFT JOIN PROJECT_LEDGER PBL ON PBL.PROJECT_ID = BP.PROJECT_ID\n" +
                               "LEFT JOIN (SELECT BP.BUDGET_ID, BL.LEDGER_ID, BL.TRANS_MODE,\n" +
                                    "SUM(BL.PROPOSED_AMOUNT/?EXCHANGE_RATE) AS PROPOSED_AMOUNT,\n" +
                                    "SUM(BL.APPROVED_AMOUNT/?EXCHANGE_RATE) AS APPROVED_AMOUNT\n" +
                                    "FROM BUDGET_LEDGER AS BL\n" +
                                    "INNER JOIN BUDGET_MASTER BM ON BM.BUDGET_ID = BL.BUDGET_ID\n" +
                                    "INNER JOIN (SELECT BP.BUDGET_ID FROM BUDGET_PROJECT BP WHERE BP.PROJECT_ID IN (?PROJECT_ID) GROUP BY BP.BUDGET_ID) AS BP ON BP.BUDGET_ID = BL.BUDGET_ID\n" +
                                    "WHERE BL.TRANS_MODE=?TRANS_MODE AND BM.IS_ACTIVE=1\n" +
                                        "AND BM.BUDGET_ACTION IN (2)\n" + // AND BM.DATE_FROM = ?YEAR_FROM  AND BM.DATE_TO = ?YEAR_TO
                                     " AND ((BM.DATE_FROM BETWEEN ?YEAR_FROM  AND ?YEAR_TO)\n" +
                                     " OR (BM.DATE_TO BETWEEN  ?YEAR_FROM  AND ?YEAR_TO))\n" +
                                    "GROUP BY BM.BUDGET_ID, BL.LEDGER_ID, BL.TRANS_MODE) AS BL ON BL.LEDGER_ID = PBL.LEDGER_ID AND BL.BUDGET_ID = BP.BUDGET_ID\n" +
                               "LEFT JOIN (SELECT BM.BUDGET_ID, VT.LEDGER_ID,\n" +
                                        "SUM(IF(VT.TRANS_MODE = 'DR', (VT.AMOUNT * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)), 0)) AS AMOUNT_DR,\n" +
                                        "SUM(IF(VT.TRANS_MODE = 'CR', (VT.AMOUNT * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)), 0)) AS AMOUNT_CR\n" +
                                        "    FROM VOUCHER_TRANS VT\n" +
                                        "    INNER JOIN VOUCHER_MASTER_TRANS VMT ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                        "    INNER JOIN BUDGET_PROJECT BP ON BP.PROJECT_ID = VMT.PROJECT_ID\n" +
                                        "    INNER JOIN BUDGET_MASTER BM ON BP.BUDGET_ID = BM.BUDGET_ID\n" +
                                        "    WHERE VMT.PROJECT_ID IN (?PROJECT_ID) AND VMT.STATUS = 1 AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND \n" +
                                        "    IF(?CURRENCY_COUNTRY_ID > 0, VMT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1) AND \n" +
                            //" { AND ( (VMT.VOUCHER_TYPE NOT IN (?VOUCHER_TYPE)) OR (VMT.VOUCHER_TYPE = 'JN' AND VMT.VOUCHER_SUB_TYPE ='FD' AND VT.TRANS_MODE =?TRANS_MODE) )} \n" +
                                        "IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '0', \n" +
                                        " ( (VMT.VOUCHER_TYPE NOT IN ('JN')) OR (VMT.VOUCHER_TYPE = 'JN' AND VMT.VOUCHER_SUB_TYPE ='FD' AND VT.TRANS_MODE =?TRANS_MODE) ) \n" +
                                        ", 1=1) AND BP.PROJECT_ID IN (?PROJECT_ID) AND  \n" +
                                        "   BM.IS_ACTIVE=1 AND BM.BUDGET_ACTION IN (2) \n" + // AND BM.DATE_FROM = ?YEAR_FROM  AND BM.DATE_TO = ?YEAR_TO
                                        "  AND ((BM.DATE_FROM BETWEEN ?YEAR_FROM  AND ?YEAR_TO)\n" +
                                        "  OR (BM.DATE_TO BETWEEN  ?YEAR_FROM  AND ?YEAR_TO))\n" +
                                        "    GROUP BY BM.BUDGET_ID, VT.LEDGER_ID) AS ACTUAL ON ACTUAL.LEDGER_ID = PBL.LEDGER_ID AND ACTUAL.BUDGET_ID = BM.BUDGET_ID\n" +
                               "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = PBL.LEDGER_ID\n" +
                               "INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID\n" +
                               "WHERE BP.PROJECT_ID IN (?PROJECT_ID) AND BM.IS_ACTIVE=1 AND BM.BUDGET_ACTION IN (2) \n" + // AND BM.DATE_FROM = ?YEAR_FROM  AND BM.DATE_TO = ?YEAR_TO
                               "  AND ((BM.DATE_FROM BETWEEN ?YEAR_FROM  AND ?YEAR_TO)\n" +
                               "  OR (BM.DATE_TO BETWEEN  ?YEAR_FROM  AND ?YEAR_TO))\n" +
                               "AND ML.GROUP_ID NOT IN (12, 13, 14) AND (BL.APPROVED_AMOUNT>0 OR AMOUNT_DR > 0 OR AMOUNT_CR >0)\n" +
                               "GROUP BY BP.BUDGET_ID, PBL.LEDGER_ID, BL.TRANS_MODE";

                        // Chinna 07/05/2024
                        //query = "SELECT PBL.LEDGER_ID, ML.GROUP_ID, LG.NATURE_ID, LG.LEDGER_GROUP,\n" +
                        //       "CONCAT(LG.LEDGER_GROUP, ' - ', MP.PROJECT) AS PROJECT_LEDGER_GROUP,\n" +
                        //       "ML.LEDGER_CODE, ML.LEDGER_NAME, BL.TRANS_MODE,\n" +
                        //       "IFNULL(BL.PROPOSED_AMOUNT,0) AS PROPOSED_AMOUNT, IFNULL(BL.APPROVED_AMOUNT,0) AS APPROVED_AMOUNT,\n" +
                        //    //"IFNULL(AMOUNT_CR,0) AS AMOUNT_CR, IFNULL(AMOUNT_DR,0) AS AMOUNT_DR\n" +
                        //       "IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '2',\n" +
                        //        " CASE\n" +
                        //        "  WHEN NATURE_ID IN (1, 2) THEN\n" +
                        //        "   IF(NATURE_ID = 1, IFNULL(ACTUAL.AMOUNT_CR, 0) - IFNULL(ACTUAL.AMOUNT_DR, 0), IFNULL(ACTUAL.AMOUNT_DR, 0) - IFNULL(ACTUAL.AMOUNT_CR, 0))\n" +
                        //        "  ELSE\n" +
                        //        "   IF('CR' = ?TRANS_MODE, IFNULL(ACTUAL.AMOUNT_CR, 0),IFNULL(ACTUAL.AMOUNT_DR, 0))\n" +
                        //        "  END , IF('CR' = ?TRANS_MODE, IFNULL(ACTUAL.AMOUNT_CR, 0),IFNULL(ACTUAL.AMOUNT_DR, 0))) AS ACTUAL_AMOUNT\n" +
                        //       "FROM BUDGET_MASTER BM\n" +
                        //       "INNER JOIN BUDGET_PROJECT BP ON BP.BUDGET_ID = BM.BUDGET_ID\n" +
                        //       "INNER JOIN MASTER_PROJECT MP ON MP.PROJECT_ID = BP.PROJECT_ID\n" +
                        //       "LEFT JOIN PROJECT_LEDGER PBL ON PBL.PROJECT_ID = BP.PROJECT_ID\n" +
                        //       "LEFT JOIN (SELECT BP.BUDGET_ID, BL.LEDGER_ID, BL.TRANS_MODE, SUM(BL.PROPOSED_AMOUNT) AS PROPOSED_AMOUNT, SUM(BL.APPROVED_AMOUNT) AS APPROVED_AMOUNT\n" +
                        //            "FROM BUDGET_LEDGER AS BL\n" +
                        //            "INNER JOIN BUDGET_MASTER BM ON BM.BUDGET_ID = BL.BUDGET_ID\n" +
                        //            "INNER JOIN (SELECT BP.BUDGET_ID FROM BUDGET_PROJECT BP WHERE BP.PROJECT_ID IN (?PROJECT_ID) GROUP BY BP.BUDGET_ID) AS BP ON BP.BUDGET_ID = BL.BUDGET_ID\n" +
                        //            "WHERE BL.TRANS_MODE=?TRANS_MODE AND BM.IS_ACTIVE=1\n" +
                        //                "AND BM.BUDGET_ACTION IN (2) AND BM.DATE_FROM = ?YEAR_FROM  AND BM.DATE_TO = ?YEAR_TO\n" +
                        //            "GROUP BY BM.BUDGET_ID, BL.LEDGER_ID, BL.TRANS_MODE) AS BL ON BL.LEDGER_ID = PBL.LEDGER_ID AND BL.BUDGET_ID = BP.BUDGET_ID\n" +
                        //       "LEFT JOIN (SELECT BM.BUDGET_ID, VT.LEDGER_ID, SUM(IF(VT.TRANS_MODE = 'DR', IFNULL(VT.AMOUNT,0), 0)) AS AMOUNT_DR,\n" +
                        //                "SUM(IF(VT.TRANS_MODE = 'CR', IFNULL(VT.AMOUNT,0), 0)) AS AMOUNT_CR\n" +
                        //       "    FROM VOUCHER_TRANS VT\n" +
                        //       "    INNER JOIN VOUCHER_MASTER_TRANS VMT ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                        //       "    INNER JOIN BUDGET_PROJECT BP ON BP.PROJECT_ID = VMT.PROJECT_ID\n" +
                        //       "    INNER JOIN BUDGET_MASTER BM ON BP.BUDGET_ID = BM.BUDGET_ID\n" +
                        //       "    WHERE VMT.PROJECT_ID IN (?PROJECT_ID) AND VMT.STATUS = 1 AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND \n" +
                        //    //" { AND ( (VMT.VOUCHER_TYPE NOT IN (?VOUCHER_TYPE)) OR (VMT.VOUCHER_TYPE = 'JN' AND VMT.VOUCHER_SUB_TYPE ='FD' AND VT.TRANS_MODE =?TRANS_MODE) )} \n" +
                        //       "IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '0', \n" +
                        //       " ( (VMT.VOUCHER_TYPE NOT IN ('JN')) OR (VMT.VOUCHER_TYPE = 'JN' AND VMT.VOUCHER_SUB_TYPE ='FD' AND VT.TRANS_MODE =?TRANS_MODE) ) \n" +
                        //       ", 1=1) AND BP.PROJECT_ID IN (?PROJECT_ID) AND  \n" +
                        //       "   BM.IS_ACTIVE=1 AND BM.BUDGET_ACTION IN (2) AND BM.DATE_FROM = ?YEAR_FROM  AND BM.DATE_TO = ?YEAR_TO\n" +
                        //       "    GROUP BY BM.BUDGET_ID, VT.LEDGER_ID) AS ACTUAL ON ACTUAL.LEDGER_ID = PBL.LEDGER_ID AND ACTUAL.BUDGET_ID = BM.BUDGET_ID\n" +
                        //       "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = PBL.LEDGER_ID\n" +
                        //       "INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID\n" +
                        //       "WHERE BP.PROJECT_ID IN (?PROJECT_ID) AND BM.IS_ACTIVE=1 AND BM.BUDGET_ACTION IN (2) AND BM.DATE_FROM = ?YEAR_FROM  AND BM.DATE_TO = ?YEAR_TO\n" +
                        //       "AND ML.GROUP_ID NOT IN (12, 13, 14) AND (BL.APPROVED_AMOUNT>0 OR AMOUNT_DR > 0 OR AMOUNT_CR >0)\n" +
                        //       "GROUP BY BP.BUDGET_ID, PBL.LEDGER_ID, BL.TRANS_MODE";

                        break;
                    }
                #endregion

                #region Budget Annual BudgetAnnualYearComparision
                case ReportSQLCommand.BudgetVariance.BudgetAnnualYearComparision:
                    {
                        query = "SELECT CONCAT(YEAR(DATE_ADD(YEAR_FROM, INTERVAL -NO_YEARS.SN YEAR)) , '-' ,  YEAR(DATE_ADD(YEAR_TO, INTERVAL -NO_YEARS.SN YEAR))) AC_YEAR_NAME,\n" +
                                 "DATE_ADD(YEAR_FROM, INTERVAL -NO_YEARS.SN YEAR) AS YEAR_FROM, DATE_ADD(YEAR_TO, INTERVAL -NO_YEARS.SN YEAR) AS YEAR_TO,\n" +
                                 "BM.NATURE_ID, BM.GROUP_ID, BM.LEDGER_ID, BM.DATE_FROM, BM.DATE_TO, BM.TRANS_MODE, IF(BM.TRANS_MODE='" + Bosco.Report.Base.ReportBase.TransMode.CR.ToString() + "','RECEIPTS','PAYMENTS') AS VOUCHER_TYPE,\n" +
                                 "BM.LEDGER_GROUP, BM.LEDGER_CODE, BM.LEDGER_NAME, \n" +
                                 "IFNULL(BM.PROPOSED_AMOUNT,0) AS PROPOSED_AMOUNT, IFNULL(BM.APPROVED_AMOUNT,0) AS APPROVED_AMOUNT,\n" +
                                 "IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '2', CASE WHEN NATURE_ID IN (1, 2) THEN\n" +
                                 "        IF(NATURE_ID = 1, IFNULL(ACTUAL.AMOUNT_CR, 0) - IFNULL(ACTUAL.AMOUNT_DR, 0), IFNULL(ACTUAL.AMOUNT_DR, 0) - IFNULL(ACTUAL.AMOUNT_CR, 0))\n" +
                                 "         ELSE IF('CR' = BM.TRANS_MODE, IFNULL(ACTUAL.AMOUNT_CR, 0),IFNULL(ACTUAL.AMOUNT_DR, 0))\n" +
                                 "        END , IF('CR' = BM.TRANS_MODE, IFNULL(ACTUAL.AMOUNT_CR, 0),IFNULL(ACTUAL.AMOUNT_DR, 0))) AS ACTUAL_AMOUNT \n" +
                                 "FROM ACCOUNTING_YEAR AY\n" +
                                 "CROSS JOIN (SELECT SN FROM (SELECT 0 SN UNION SELECT 1 SN UNION SELECT 2 SN UNION SELECT 3 SN UNION SELECT 4 SN UNION SELECT 5 SN UNION SELECT 6 SN\n" +
                                 "UNION SELECT 7 SN UNION SELECT 8 SN) AS YRS) AS NO_YEARS\n" +
                                 "LEFT JOIN\n" +
                                 "(SELECT LG.GROUP_ID, BL.LEDGER_ID, LG.NATURE_ID, LG.LEDGER_GROUP, ML.LEDGER_CODE, ML.LEDGER_NAME, BL.DATE_FROM, BL.DATE_TO,\n" +
                                 "BL.TRANS_MODE, BL.PROPOSED_AMOUNT, BL.APPROVED_AMOUNT\n" +
                                 "FROM (SELECT BL.LEDGER_ID, BM.DATE_FROM, BM.DATE_TO, BL.TRANS_MODE,\n" +
                                    "SUM(BL.PROPOSED_AMOUNT/?EXCHANGE_RATE) AS PROPOSED_AMOUNT,\n" +
                                    "SUM(BL.APPROVED_AMOUNT/?EXCHANGE_RATE) AS APPROVED_AMOUNT\n" +
                                    "FROM BUDGET_MASTER BM\n" +
                                    "INNER JOIN BUDGET_PROJECT BP ON BP.BUDGET_ID = BM.BUDGET_ID\n" +
                                    "INNER JOIN BUDGET_LEDGER BL ON BM.BUDGET_ID = BL.BUDGET_ID\n" +
                                    "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = Bl.LEDGER_ID\n" +
                                    "WHERE PROJECT_ID IN (?PROJECT_ID) AND BM.BUDGET_ACTION IN (2) AND BM.IS_ACTIVE=1\n" + //AND BM.BUDGET_TYPE_ID =3 
                                    "GROUP BY BM.DATE_FROM, BM.DATE_TO, BP.PROJECT_ID, BL.LEDGER_ID, BL.TRANS_MODE) AS BL\n" +
                                 "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = BL.LEDGER_ID\n" +
                                 "INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID AND LG.GROUP_ID NOT IN (12, 13, 14)) BM\n" +
                                 "ON BM.DATE_FROM = DATE_ADD(YEAR_FROM, INTERVAL -NO_YEARS.SN YEAR) AND BM.DATE_TO = DATE_ADD(YEAR_TO, INTERVAL -NO_YEARS.SN YEAR)\n" +
                                 "LEFT JOIN(SELECT AC.YEAR_FROM AS ACL_DATE_FROM, AC.YEAR_TO AS ACL_DATE_TO, VT.LEDGER_ID,\n" +
                                    "SUM(IF(VT.TRANS_MODE = 'DR', (VT.AMOUNT * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)), 0)) AS AMOUNT_DR,\n" +
                                    "SUM(IF(VT.TRANS_MODE = 'CR', (VT.AMOUNT * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)), 0)) AS AMOUNT_CR\n" +
                                    "FROM VOUCHER_TRANS VT\n" +
                                    "INNER JOIN VOUCHER_MASTER_TRANS VMT ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                    "INNER JOIN ACCOUNTING_YEAR AC ON VMT.VOUCHER_DATE BETWEEN AC.YEAR_FROM AND AC.YEAR_TO\n" +
                                    "WHERE VMT.PROJECT_ID IN (?PROJECT_ID) AND VMT.STATUS = 1 AND \n" +
                                    "IF(?CURRENCY_COUNTRY_ID > 0, VMT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1) AND \n" +
                            //"{ AND ( (VMT.VOUCHER_TYPE NOT IN (?VOUCHER_TYPE)) OR (VMT.VOUCHER_TYPE = 'JN' AND VMT.VOUCHER_SUB_TYPE ='FD' AND VT.TRANS_MODE =?TRANS_MODE) )}\n" +
                                    "IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '0', \n" +
                                    " ( (VMT.VOUCHER_TYPE NOT IN ('JN')) OR (VMT.VOUCHER_TYPE = 'JN' AND VMT.VOUCHER_SUB_TYPE ='FD') ), 1=1) \n" + // AND VT.TRANS_MODE =?TRANS_MODE
                                    "GROUP BY AC.YEAR_FROM, AC.YEAR_TO, VT.LEDGER_ID) AS ACTUAL ON ACTUAL.LEDGER_ID = BM.LEDGER_ID AND ACTUAL.ACL_DATE_FROM = DATE_ADD(YEAR_FROM, INTERVAL -NO_YEARS.SN YEAR)\n" +
                                 "AND ACTUAL.ACL_DATE_TO = DATE_ADD(YEAR_TO, INTERVAL -NO_YEARS.SN YEAR)\n" +
                                 "WHERE YEAR_FROM = ?DATE_FROM AND YEAR_TO = ?DATE_TO AND NO_YEARS.SN <= ?NO_OF_YEAR"; //NO_YEARS.SN IN (0, 1, 2, 3)
                        break;
                    }
                case ReportSQLCommand.BudgetVariance.BudgetAnnualYearUserDefined:
                    {
                        query = "SELECT CONCAT(YEAR( DATE_FROM) , '-' ,  YEAR(DATE_TO) ) AC_YEAR_NAME, BUD.DATE_FROM AS YEAR_FROM, BUD.DATE_TO AS YEAR_TO,\n" +
                                "LG.NATURE_ID, LG.GROUP_ID,  BUD.LEDGER_ID, BUD.DATE_FROM, BUD.DATE_TO, \n" +
                                "BUD.TRANS_MODE, IF(BUD.TRANS_MODE='CR','RECEIPTS','PAYMENTS') AS VOUCHER_TYPE,\n" +
                                "LG.LEDGER_GROUP, ML.LEDGER_CODE, ML.LEDGER_NAME,\n" +
                                "0.0 AS PROPOSED_AMOUNT, 0.0 AS APPROVED_AMOUNT, BUD.ACTUAL_AMOUNT\n" +
                                "FROM BUDGET_USER_DEFINED_AMOUNT BUD\n" +
                                "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = BUD.LEDGER_ID\n" +
                                "INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID\n" +
                                "WHERE BUD.PROJECT_ID IN (?PROJECT_ID)";
                        break;
                    }
                case ReportSQLCommand.BudgetVariance.FetchuserDefinedBudgetBalance:
                    {
                        query = "SELECT DATE_FROM, DATE_TO, GROUP_ID, LEDGER_ID, TRANS_MODE, ACTUAL_AMOUNT\n" +
                                "FROM BUDGET_USER_DEFINED_AMOUNT WHERE ((DATE_FROM=?DATE_FROM AND DATE_TO=?DATE_TO) OR (DATE_FROM=?YEAR_FROM AND DATE_TO=?YEAR_TO))\n" +
                                "AND GROUP_ID IN (12, 13, 14) AND PROJECT_ID IN (?PROJECT_ID)";
                        break;
                    }
                case ReportSQLCommand.BudgetVariance.BudgetQuaterlyRealization:
                    {
                        query = "SELECT PBL.LEDGER_ID, ML.LEDGER_CODE, LG.LEDGER_GROUP, ML.LEDGER_NAME, BM.APPROVED_AMOUNT,\n" +
                                    "IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '2',\n" +
                                    "CASE WHEN LG.NATURE_ID IN (1, 2) THEN IF(LG.NATURE_ID = 1, IFNULL(Q1_CR, 0) - IFNULL(Q1_DR, 0), IFNULL(Q1_DR, 0) - IFNULL(Q1_CR, 0))\n" +
                                    "ELSE IF('CR' = ?TRANS_MODE, IFNULL(Q1_CR, 0),IFNULL(Q1_DR, 0)) END, \n" +
                                    "IF('CR' = ?TRANS_MODE, IFNULL(Q1_CR, 0),IFNULL(Q1_DR, 0))) AS Q1,\n" + //Q1
                                    "IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '2',\n" +
                                    "CASE WHEN LG.NATURE_ID IN (1, 2) THEN IF(LG.NATURE_ID = 1, IFNULL(Q2_CR, 0) - IFNULL(Q2_DR, 0), IFNULL(Q2_DR, 0) - IFNULL(Q2_CR, 0))\n" +
                                    "ELSE IF('CR' = ?TRANS_MODE, IFNULL(Q2_CR, 0),IFNULL(Q2_DR, 0)) END, \n" +
                                    "IF('CR' = ?TRANS_MODE, IFNULL(Q2_CR, 0),IFNULL(Q2_DR, 0))) AS Q2,\n" + //Q2
                                    "IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '2',\n" +
                                    "CASE WHEN LG.NATURE_ID IN (1, 2) THEN IF(LG.NATURE_ID = 1, IFNULL(Q3_CR, 0) - IFNULL(Q3_DR, 0), IFNULL(Q3_DR, 0) - IFNULL(Q3_CR, 0))\n" +
                                    "ELSE IF('CR' = ?TRANS_MODE, IFNULL(Q3_CR, 0),IFNULL(Q3_DR, 0)) END, \n" +
                                    "IF('CR' = ?TRANS_MODE, IFNULL(Q3_CR, 0),IFNULL(Q3_DR, 0))) AS Q3,\n" + //Q3
                                    "IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '2',\n" +
                                    "CASE WHEN LG.NATURE_ID IN (1, 2) THEN IF(LG.NATURE_ID = 1, IFNULL(Q4_CR, 0) - IFNULL(Q4_DR, 0), IFNULL(Q4_DR, 0) - IFNULL(Q4_CR, 0))\n" +
                                    "ELSE IF('CR' = ?TRANS_MODE, IFNULL(Q4_CR, 0),IFNULL(Q4_DR, 0)) END, \n" +
                                    "IF('CR' = ?TRANS_MODE, IFNULL(Q4_CR, 0),IFNULL(Q4_DR, 0))) AS Q4\n" + //Q4
                                    "FROM (SELECT PBL.LEDGER_ID FROM PROJECT_BUDGET_LEDGER PBL WHERE PBL.PROJECT_ID IN (?PROJECT_ID) GROUP BY PBL.LEDGER_ID) PBL\n" +
                                    "INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = PBL.LEDGER_ID\n" +
                                    "INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID\n" +
                                    "INNER JOIN (SELECT BL.LEDGER_ID, BL.TRANS_MODE,\n" +
                                    "SUM(BL.PROPOSED_AMOUNT/?EXCHANGE_RATE) AS PROPOSED_AMOUNT, SUM(BL.APPROVED_AMOUNT/?EXCHANGE_RATE) AS APPROVED_AMOUNT \n" +
                                    "      FROM BUDGET_MASTER AS BM\n" +
                                    "      INNER JOIN BUDGET_LEDGER BL ON BM.BUDGET_ID = BL.BUDGET_ID\n" +
                                    "      -- INNER JOIN PROJECT_BUDGET_LEDGER PBL ON PBL.LEDGER_ID = BL.LEDGER_ID AND PBL.PROJECT_ID IN (?PROJECT_ID)\n" +
                                    "      WHERE BM.BUDGET_ID IN (?BUDGET_ID) AND BM.BUDGET_ACTION IN (2) AND BL.TRANS_MODE = ?TRANS_MODE GROUP BY BL.LEDGER_ID) BM ON BM.LEDGER_ID = PBL.LEDGER_ID\n" +
                                    "LEFT JOIN (SELECT VT.LEDGER_ID,\n" + //split FY in Quater for FY April to March/Jan to Dec
                                    "SUM( IF( (QUARTER(VMT.VOUCHER_DATE) + IF(MONTH(?YEAR_FROM)=4,-1,0)  ) = 1 AND VT.TRANS_MODE = 'CR', (VT.AMOUNT * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)), 0 )) AS Q1_CR,\n" +
                                    "SUM( IF( (QUARTER(VMT.VOUCHER_DATE) + IF(MONTH(?YEAR_FROM)=4,-1,0)  ) = 1 AND VT.TRANS_MODE = 'DR', (VT.AMOUNT * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)), 0 )) AS Q1_DR,\n" +
                                    "SUM( IF( (QUARTER(VMT.VOUCHER_DATE) + IF(MONTH(?YEAR_FROM)=4,-1,0)  ) = 2 AND VT.TRANS_MODE = 'CR', (VT.AMOUNT * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)), 0 )) AS Q2_CR,\n" +
                                    "SUM( IF( (QUARTER(VMT.VOUCHER_DATE) + IF(MONTH(?YEAR_FROM)=4,-1,0)  ) = 2 AND VT.TRANS_MODE = 'DR', (VT.AMOUNT * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)), 0 )) AS Q2_DR,\n" +
                                    "SUM( IF( (QUARTER(VMT.VOUCHER_DATE) + IF(MONTH(?YEAR_FROM)=4,-1,0)  ) = 3 AND VT.TRANS_MODE = 'CR', (VT.AMOUNT * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)), 0 )) AS Q3_CR,\n" +
                                    "SUM( IF( (QUARTER(VMT.VOUCHER_DATE) + IF(MONTH(?YEAR_FROM)=4,-1,0)  ) = 3 AND VT.TRANS_MODE = 'DR', (VT.AMOUNT * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)), 0 )) AS Q3_DR,\n" +
                                    "SUM( IF( (QUARTER(VMT.VOUCHER_DATE) + IF(MONTH(?YEAR_FROM)=4, 3,0)  ) = 4 AND VT.TRANS_MODE = 'CR', (VT.AMOUNT * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)), 0 )) AS Q4_CR,\n" +
                                    "SUM( IF( (QUARTER(VMT.VOUCHER_DATE) + IF(MONTH(?YEAR_FROM)=4, 3,0)  ) = 4 AND VT.TRANS_MODE = 'DR', (VT.AMOUNT * IF(VMT.IS_MULTI_CURRENCY=1 AND ?CURRENCY_COUNTRY_ID=0, VT.EXCHANGE_RATE, 1)), 0 )) AS Q4_DR\n" +
                                    "FROM VOUCHER_MASTER_TRANS AS VMT\n" +
                                    "INNER JOIN VOUCHER_TRANS AS VT ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                    "INNER JOIN MASTER_LEDGER AS ML ON ML.LEDGER_ID = VT.LEDGER_ID AND ML.GROUP_ID NOT IN (12, 13, 14)\n" +
                                    "INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID\n" +
                                    "WHERE VMT.PROJECT_ID IN (?PROJECT_ID) AND VMT.STATUS = 1 AND VMT.VOUCHER_DATE BETWEEN ?YEAR_FROM AND ?YEAR_TO AND\n" +
                                    " IF(?CURRENCY_COUNTRY_ID > 0, VMT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1) AND\n" +
                            //"{ AND ( (VMT.VOUCHER_TYPE NOT IN (?VOUCHER_TYPE)) OR (VMT.VOUCHER_TYPE = 'JN' AND VMT.VOUCHER_SUB_TYPE ='FD' AND VT.TRANS_MODE =?TRANS_MODE) )}\n" +
                                    "IF(?SHOWBUDGETLEDGERSEPARATERECEIPTPAYMENTACTUALBALANCE <> '0', \n" +
                                    " ( (VMT.VOUCHER_TYPE NOT IN ('JN')) OR (VMT.VOUCHER_TYPE = 'JN' AND VMT.VOUCHER_SUB_TYPE ='FD' AND VT.TRANS_MODE =?TRANS_MODE) ) , 1=1)\n" +
                            //"( (VMT.VOUCHER_TYPE IN ('RC','PY') AND VT.TRANS_MODE =?TRANS_MODE) OR\n" +
                            //"(VMT.VOUCHER_TYPE = 'JN' AND VMT.VOUCHER_SUB_TYPE ='FD' AND VT.TRANS_MODE =?TRANS_MODE) )\n" +
                                    "GROUP BY VT.LEDGER_ID) VMT ON VMT.LEDGER_ID = PBL.LEDGER_ID;";
                        break;
                    }
                #endregion

                #region MultiYearAbstractBudget
                case ReportSQLCommand.BudgetVariance.MultiAbstractBudget:
                    //IFNULL(VT.AMOUNT_PERIOD, 0 ) AS AMOUNT_PERIOD
                    //                    query = @"SELECT ML.LEDGER_ID, ML.LEDGER_CODE,
                    //                            IF(VT.TRANS_MODE='CR' OR BM.BUDGET_TRANS_MODE ='CR', 'CR', IF(VT.TRANS_MODE='DR' OR BM.BUDGET_TRANS_MODE ='DR', 'DR', '')) AS BUDGET_TRANS_MODE,
                    //                            ML.LEDGER_NAME, IFNULL(BG.BUDGET_GROUP, 'Unmapped Budget Ledger') AS BUDGET_GROUP, IFNULL(BSG.BUDGET_SUB_GROUP, 'Unmapped Budget Ledger') AS BUDGET_SUB_GROUP,
                    //                            IFNULL(BG.BUDGET_GROUP_SORT_ID, 100) AS BUDGET_GROUP_SORT_ID, IFNULL(BSG.BUDGET_SUB_GROUP_SORT_ID, 100) AS BUDGET_SUB_GROUP_SORT_ID,
                    //                            IFNULL(VT.PREVIOUS_YEAR2_AMOUNT,0) AS PREVIOUS_YEAR2_AMOUNT,
                    //                            IFNULL(VT.PREVIOUS_YEAR1_AMOUNT, 0) AS PREVIOUS_YEAR1_AMOUNT, IFNULL(BM.PROPOSED_AMOUNT, 0) AS BUDGET_PROPOSED_AMOUNT
                    //                            FROM MASTER_LEDGER AS ML
                    //                            LEFT JOIN (SELECT VT.LEDGER_ID, VT.TRANS_MODE,
                    //                                        SUM( IF((VM.VOUCHER_DATE BETWEEN  DATE_ADD(?DATE_FROM, INTERVAL -2 YEAR) AND DATE_ADD(?DATE_TO, INTERVAL -2 YEAR)), IFNULL(VT.AMOUNT,0 ), 0) ) AS PREVIOUS_YEAR2_AMOUNT,
                    //                                        SUM( IF((VM.VOUCHER_DATE BETWEEN DATE_ADD(?DATE_FROM, INTERVAL -1 YEAR) AND DATE_ADD(?DATE_TO, INTERVAL -1 YEAR)), IFNULL(VT.AMOUNT,0 ), 0)  ) AS PREVIOUS_YEAR1_AMOUNT
                    //                                        FROM VOUCHER_MASTER_TRANS AS VM
                    //                                        INNER JOIN VOUCHER_TRANS AS VT ON VT.VOUCHER_ID = VM.VOUCHER_ID
                    //                                        INNER JOIN MASTER_LEDGER AS ML ON ML.LEDGER_ID = VT.LEDGER_ID AND ML.GROUP_ID NOT IN (12, 13, 14)
                    //                                        WHERE VM.VOUCHER_DATE BETWEEN DATE_ADD(?DATE_FROM, INTERVAL -2 YEAR) AND DATE_ADD(?DATE_TO, INTERVAL -1 YEAR) AND VM.STATUS = 1
                    //                                        AND VM.PROJECT_ID IN (?PROJECT_ID) AND ( (VM.VOUCHER_TYPE IN ('RC','PY')) OR (VM.VOUCHER_TYPE IN ('JN','CN') AND VM.VOUCHER_SUB_TYPE = 'FD') )
                    //                                        GROUP BY VT.LEDGER_ID, VT.TRANS_MODE) AS VT ON VT.LEDGER_ID = ML.LEDGER_ID 
                    //                                LEFT JOIN (SELECT BM.BUDGET_ID, BM.BUDGET_NAME, BL.LEDGER_ID, BL.TRANS_MODE AS BUDGET_TRANS_MODE, SUM(BL.PROPOSED_AMOUNT) AS PROPOSED_AMOUNT
                    //                                        FROM BUDGET_MASTER BM
                    //                                        INNER JOIN BUDGET_LEDGER BL ON BL.BUDGET_ID = BM.BUDGET_ID
                    //                                        WHERE BM.BUDGET_ID IN (?BUDGET_ID) GROUP BY BL.LEDGER_ID, BL.TRANS_MODE) AS BM ON BM.LEDGER_ID = ML.LEDGER_ID AND (VT.TRANS_MODE = BM.BUDGET_TRANS_MODE OR VT.TRANS_MODE IS NULL)
                    //                            LEFT JOIN BUDGET_GROUP BG ON BG.BUDGET_GROUP_ID = ML.BUDGET_GROUP_ID
                    //                            LEFT JOIN BUDGET_SUB_GROUP BSG ON BSG.BUDGET_SUB_GROUP_ID = ML.BUDGET_SUB_GROUP_ID
                    //                            WHERE ML.GROUP_ID NOT IN (12, 13, 14)";
                    //                    //INNER JOIN BUDGET_PROJECT BP ON BP.BUDGET_ID = BM.BUDGET_ID

                    query = @"SELECT ML.LEDGER_ID, LG.NATURE_ID, ML.LEDGER_CODE, BM.BUDGET_TRANS_MODE,
                                ML.LEDGER_NAME, IFNULL(BG.BUDGET_GROUP, 'Unmapped Budget Ledger') AS BUDGET_GROUP, IFNULL(BSG.BUDGET_SUB_GROUP, 'Unmapped Budget Ledger') AS BUDGET_SUB_GROUP,
                                IFNULL(BG.BUDGET_GROUP_SORT_ID, 100) AS BUDGET_GROUP_SORT_ID, IFNULL(BSG.BUDGET_SUB_GROUP_SORT_ID, 100) AS BUDGET_SUB_GROUP_SORT_ID,

                                IF(LG.NATURE_ID IN (1,4), (PREVIOUS_YEAR2_AMOUNT_CR - PREVIOUS_YEAR2_AMOUNT_DR), (PREVIOUS_YEAR2_AMOUNT_DR - PREVIOUS_YEAR2_AMOUNT_CR)) AS PREVIOUS_YEAR2_AMOUNT,
                                IF(LG.NATURE_ID IN (1,4), (PREVIOUS_YEAR1_AMOUNT_CR - PREVIOUS_YEAR1_AMOUNT_DR), (PREVIOUS_YEAR1_AMOUNT_DR - PREVIOUS_YEAR1_AMOUNT_CR)) AS PREVIOUS_YEAR1_AMOUNT,
                                IF(LG.NATURE_ID IN (1,4), (AMOUNT_CR - AMOUNT_DR), (AMOUNT_DR - AMOUNT_CR)) AS AMOUNT_PERIOD,

                                IFNULL(BM.PROPOSED_AMOUNT, 0) AS BUDGET_PROPOSED_AMOUNT
                                FROM MASTER_LEDGER AS ML
                                INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID
                                INNER JOIN (SELECT BM.BUDGET_ID, BM.BUDGET_NAME, BL.LEDGER_ID, BL.TRANS_MODE AS BUDGET_TRANS_MODE, SUM(BL.PROPOSED_AMOUNT) AS PROPOSED_AMOUNT
                                          FROM BUDGET_MASTER BM
                                          INNER JOIN BUDGET_LEDGER BL ON BL.BUDGET_ID = BM.BUDGET_ID
                                          WHERE BM.BUDGET_ID IN (?BUDGET_ID) GROUP BY BL.LEDGER_ID, BL.TRANS_MODE) AS BM ON BM.LEDGER_ID = ML.LEDGER_ID
                                LEFT JOIN (SELECT VT.LEDGER_ID,
                                          SUM( IF((VM.VOUCHER_DATE BETWEEN  DATE_ADD(?DATE_FROM, INTERVAL -2 YEAR) AND DATE_ADD(?DATE_TO, INTERVAL -2 YEAR) 
                                                AND VT.TRANS_MODE = 'CR'), (IFNULL(VT.AMOUNT,0)*IF(VM.IS_MULTI_CURRENCY=1, VM.EXCHANGE_RATE, 1)), 0) ) AS PREVIOUS_YEAR2_AMOUNT_CR,
                                          SUM( IF((VM.VOUCHER_DATE BETWEEN  DATE_ADD(?DATE_FROM, INTERVAL -2 YEAR) AND DATE_ADD(?DATE_TO, INTERVAL -2 YEAR) 
                                                AND VT.TRANS_MODE = 'DR'), (IFNULL(VT.AMOUNT,0)*IF(VM.IS_MULTI_CURRENCY=1, VM.EXCHANGE_RATE, 1)), 0) ) AS PREVIOUS_YEAR2_AMOUNT_DR,
                                          SUM( IF((VM.VOUCHER_DATE BETWEEN DATE_ADD(?DATE_FROM, INTERVAL -1 YEAR) AND DATE_ADD(?DATE_TO, INTERVAL -1 YEAR) 
                                                AND VT.TRANS_MODE = 'CR'), (IFNULL(VT.AMOUNT,0)*IF(VM.IS_MULTI_CURRENCY=1, VM.EXCHANGE_RATE, 1)), 0)  ) AS PREVIOUS_YEAR1_AMOUNT_CR,
                                          SUM( IF((VM.VOUCHER_DATE BETWEEN DATE_ADD(?DATE_FROM, INTERVAL -1 YEAR) AND DATE_ADD(?DATE_TO, INTERVAL -1 YEAR) 
                                                AND VT.TRANS_MODE = 'DR'), (IFNULL(VT.AMOUNT,0)*IF(VM.IS_MULTI_CURRENCY=1, VM.EXCHANGE_RATE, 1)), 0)  ) AS PREVIOUS_YEAR1_AMOUNT_DR,
                                          SUM( IF((VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND VT.TRANS_MODE = 'CR'), (IFNULL(VT.AMOUNT,0)*IF(VM.IS_MULTI_CURRENCY=1, VM.EXCHANGE_RATE, 1)), 0)  ) AS AMOUNT_CR,
                                          SUM( IF((VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND VT.TRANS_MODE = 'DR'), (IFNULL(VT.AMOUNT,0)*IF(VM.IS_MULTI_CURRENCY=1, VM.EXCHANGE_RATE, 1)), 0)  ) AS AMOUNT_DR
                                          FROM VOUCHER_MASTER_TRANS AS VM
                                          INNER JOIN VOUCHER_TRANS AS VT ON VT.VOUCHER_ID = VM.VOUCHER_ID
                                          INNER JOIN MASTER_LEDGER AS ML ON ML.LEDGER_ID = VT.LEDGER_ID AND ML.GROUP_ID NOT IN (12, 13, 14)
                                          WHERE VM.VOUCHER_DATE BETWEEN DATE_ADD(?DATE_FROM, INTERVAL -2 YEAR) AND ?DATE_TO AND VM.STATUS = 1
                                          AND VM.PROJECT_ID IN (?PROJECT_ID) 
                                          GROUP BY VT.LEDGER_ID) AS VT ON VT.LEDGER_ID = ML.LEDGER_ID
                                
                                LEFT JOIN BUDGET_GROUP BG ON BG.BUDGET_GROUP_ID = ML.BUDGET_GROUP_ID
                                LEFT JOIN BUDGET_SUB_GROUP BSG ON BSG.BUDGET_SUB_GROUP_ID = ML.BUDGET_SUB_GROUP_ID
                                WHERE ML.GROUP_ID NOT IN (12, 13, 14) AND BM.BUDGET_TRANS_MODE IN ('CR', 'DR');";
                    //AND ( (VM.VOUCHER_TYPE IN ('RC','PY')) OR (VM.VOUCHER_TYPE IN ('JN','CN') AND VM.VOUCHER_SUB_TYPE = 'FD') )

                    break;
                #endregion

                #region MultiYearAbstractBudgetConsolidated
                case ReportSQLCommand.BudgetVariance.MultiAbstractBudgetConsolidated:
                    //IFNULL(VT.AMOUNT_PERIOD, 0 ) AS AMOUNT_PERIOD
                    /*query = @"SELECT BM.BUDGET_ID, BM.BUDGET_NAME, ML.LEDGER_ID, ML.LEDGER_CODE, ML.BUDGET_GROUP_ID, ML.BUDGET_SUB_GROUP_ID,
                            IF(VT.TRANS_MODE='CR' OR BL.BUDGET_TRANS_MODE ='CR', 'CR', IF(VT.TRANS_MODE='DR' OR BL.BUDGET_TRANS_MODE ='DR', 'DR', '')) AS BUDGET_TRANS_MODE,
                            ML.LEDGER_NAME, IFNULL(BG.BUDGET_GROUP, 'Unmapped Budget Ledger') AS BUDGET_GROUP, IFNULL(BSG.BUDGET_SUB_GROUP, 'Unmapped Budget Ledger') AS BUDGET_SUB_GROUP,
                                IFNULL(BG.BUDGET_GROUP_SORT_ID, 100) AS BUDGET_GROUP_SORT_ID, IFNULL(BSG.BUDGET_SUB_GROUP_SORT_ID, 100) AS BUDGET_SUB_GROUP_SORT_ID,
                            IFNULL(VT.PREVIOUS_YEAR2_AMOUNT,0) AS PREVIOUS_YEAR2_AMOUNT,
                            IFNULL(VT.PREVIOUS_YEAR1_AMOUNT, 0) AS PREVIOUS_YEAR1_AMOUNT, IFNULL(BL.PROPOSED_AMOUNT, 0) AS BUDGET_PROPOSED_AMOUNT
                            FROM MASTER_LEDGER AS ML
                            LEFT JOIN (SELECT BP.BUDGET_ID, VT.LEDGER_ID, VT.TRANS_MODE,
                                        SUM( IF((VM.VOUCHER_DATE BETWEEN  DATE_ADD(?DATE_FROM, INTERVAL -2 YEAR) AND DATE_ADD(?DATE_TO, INTERVAL -2 YEAR)), IFNULL(VT.AMOUNT,0 ), 0) ) AS PREVIOUS_YEAR2_AMOUNT,
                                        SUM( IF((VM.VOUCHER_DATE BETWEEN DATE_ADD(?DATE_FROM, INTERVAL -1 YEAR) AND DATE_ADD(?DATE_TO, INTERVAL -1 YEAR)), IFNULL(VT.AMOUNT,0 ), 0)  ) AS PREVIOUS_YEAR1_AMOUNT
                                        FROM VOUCHER_MASTER_TRANS AS VM
                                        INNER JOIN VOUCHER_TRANS AS VT ON VT.VOUCHER_ID = VM.VOUCHER_ID
                                        INNER JOIN MASTER_LEDGER AS ML ON ML.LEDGER_ID = VT.LEDGER_ID AND ML.GROUP_ID NOT IN (12, 13, 14)
                                        LEFT JOIN (SELECT BP.BUDGET_ID, GROUP_CONCAT(PROJECT_ID) AS PROJECT_ID
                                              FROM BUDGET_PROJECT BP WHERE BP.BUDGET_ID IN (?BUDGET_ID) GROUP BY BP.BUDGET_ID) AS BP ON LOCATE(CONCAT(',', VM.PROJECT_ID, ','), CONCAT(',', BP.PROJECT_ID, ',')) >0
                                        WHERE VM.VOUCHER_DATE BETWEEN DATE_ADD(?DATE_FROM, INTERVAL -2 YEAR) AND DATE_ADD(?DATE_TO, INTERVAL -1 YEAR) AND VM.STATUS = 1
                                        AND VM.PROJECT_ID IN (?PROJECT_ID) AND ( (VM.VOUCHER_TYPE IN ('RC','PY')) OR (VM.VOUCHER_TYPE IN ('JN','CN') AND VM.VOUCHER_SUB_TYPE = 'FD') )
                                        GROUP BY BP.BUDGET_ID, VT.LEDGER_ID, VT.TRANS_MODE) AS VT ON VT.LEDGER_ID = ML.LEDGER_ID 
                             LEFT JOIN (SELECT BM.BUDGET_ID, BL.LEDGER_ID, BL.TRANS_MODE AS BUDGET_TRANS_MODE, SUM(BL.PROPOSED_AMOUNT) AS PROPOSED_AMOUNT
                                        FROM BUDGET_MASTER BM
                                        INNER JOIN BUDGET_LEDGER BL ON BL.BUDGET_ID = BM.BUDGET_ID
                                        WHERE BM.BUDGET_ID IN (?BUDGET_ID) GROUP BY BM.BUDGET_ID, BL.LEDGER_ID, BL.TRANS_MODE) AS BL ON BL.LEDGER_ID = ML.LEDGER_ID 
                                            AND (BL.BUDGET_ID = VT.BUDGET_ID OR VT.BUDGET_ID IS NULL)
                                            AND (VT.TRANS_MODE = BL.BUDGET_TRANS_MODE OR VT.TRANS_MODE IS NULL)
                            INNER JOIN BUDGET_MASTER BM ON (BM.BUDGET_ID = VT.BUDGET_ID OR BM.BUDGET_ID = BL.BUDGET_ID)
                            LEFT JOIN BUDGET_GROUP BG ON BG.BUDGET_GROUP_ID = ML.BUDGET_GROUP_ID
                            LEFT JOIN BUDGET_SUB_GROUP BSG ON BSG.BUDGET_SUB_GROUP_ID = ML.BUDGET_SUB_GROUP_ID
                            WHERE ML.GROUP_ID NOT IN (12, 13, 14)";
                    //INNER JOIN BUDGET_PROJECT BP ON BP.BUDGET_ID = BM.BUDGET_ID*/

                    query = @"SELECT BM.BUDGET_ID, BM.BUDGET_NAME,  ML.LEDGER_ID, LG.NATURE_ID, ML.LEDGER_CODE, BM.BUDGET_TRANS_MODE,
                                ML.LEDGER_NAME, IFNULL(BG.BUDGET_GROUP, 'Unmapped Budget Ledger') AS BUDGET_GROUP, IFNULL(BSG.BUDGET_SUB_GROUP, 'Unmapped Budget Ledger') AS BUDGET_SUB_GROUP,
                                IFNULL(BG.BUDGET_GROUP_SORT_ID, 100) AS BUDGET_GROUP_SORT_ID, IFNULL(BSG.BUDGET_SUB_GROUP_SORT_ID, 100) AS BUDGET_SUB_GROUP_SORT_ID,

                                IF(LG.NATURE_ID IN (1,4), (PREVIOUS_YEAR2_AMOUNT_CR - PREVIOUS_YEAR2_AMOUNT_DR), (PREVIOUS_YEAR2_AMOUNT_DR - PREVIOUS_YEAR2_AMOUNT_CR)) AS PREVIOUS_YEAR2_AMOUNT,
                                IF(LG.NATURE_ID IN (1,4), (PREVIOUS_YEAR1_AMOUNT_CR - PREVIOUS_YEAR1_AMOUNT_DR), (PREVIOUS_YEAR1_AMOUNT_DR - PREVIOUS_YEAR1_AMOUNT_CR)) AS PREVIOUS_YEAR1_AMOUNT,
                                IF(LG.NATURE_ID IN (1,4), (AMOUNT_CR - AMOUNT_DR), (AMOUNT_DR - AMOUNT_CR)) AS AMOUNT_PERIOD,

                                IFNULL(BM.PROPOSED_AMOUNT, 0) AS BUDGET_PROPOSED_AMOUNT
                                FROM MASTER_LEDGER AS ML
                                INNER JOIN MASTER_LEDGER_GROUP LG ON LG.GROUP_ID = ML.GROUP_ID
                                INNER JOIN (SELECT BM.BUDGET_ID, BM.BUDGET_NAME, BL.LEDGER_ID, BL.TRANS_MODE AS BUDGET_TRANS_MODE, SUM(BL.PROPOSED_AMOUNT) AS PROPOSED_AMOUNT
                                          FROM BUDGET_MASTER BM
                                          INNER JOIN BUDGET_LEDGER BL ON BL.BUDGET_ID = BM.BUDGET_ID
                                          WHERE BM.BUDGET_ID IN (?BUDGET_ID) GROUP BY BM.BUDGET_ID, BL.LEDGER_ID, BL.TRANS_MODE) AS BM ON BM.LEDGER_ID = ML.LEDGER_ID
                                LEFT JOIN (SELECT BP.BUDGET_ID, VT.LEDGER_ID,
                                          SUM( IF((VM.VOUCHER_DATE BETWEEN  DATE_ADD(?DATE_FROM, INTERVAL -2 YEAR) AND DATE_ADD(?DATE_TO, INTERVAL -2 YEAR) AND VT.TRANS_MODE = 'CR'), 
                                                (IFNULL(VT.AMOUNT,0)*IF(VM.IS_MULTI_CURRENCY=1, VM.EXCHANGE_RATE, 1)), 0) ) AS PREVIOUS_YEAR2_AMOUNT_CR,
                                          SUM( IF((VM.VOUCHER_DATE BETWEEN  DATE_ADD(?DATE_FROM, INTERVAL -2 YEAR) AND DATE_ADD(?DATE_TO, INTERVAL -2 YEAR) AND VT.TRANS_MODE = 'DR'), 
                                                (IFNULL(VT.AMOUNT,0)*IF(VM.IS_MULTI_CURRENCY=1, VM.EXCHANGE_RATE, 1)), 0) ) AS PREVIOUS_YEAR2_AMOUNT_DR,
                                          SUM( IF((VM.VOUCHER_DATE BETWEEN DATE_ADD(?DATE_FROM, INTERVAL -1 YEAR) AND DATE_ADD(?DATE_TO, INTERVAL -1 YEAR) AND VT.TRANS_MODE = 'CR'), 
                                                (IFNULL(VT.AMOUNT,0)*IF(VM.IS_MULTI_CURRENCY=1, VM.EXCHANGE_RATE, 1)), 0)  ) AS PREVIOUS_YEAR1_AMOUNT_CR,
                                          SUM( IF((VM.VOUCHER_DATE BETWEEN DATE_ADD(?DATE_FROM, INTERVAL -1 YEAR) AND DATE_ADD(?DATE_TO, INTERVAL -1 YEAR) AND VT.TRANS_MODE = 'DR'), 
                                                (IFNULL(VT.AMOUNT,0)*IF(VM.IS_MULTI_CURRENCY=1, VM.EXCHANGE_RATE, 1)), 0)  ) AS PREVIOUS_YEAR1_AMOUNT_DR,
                                          SUM( IF((VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND VT.TRANS_MODE = 'CR'), (IFNULL(VT.AMOUNT,0)*IF(VM.IS_MULTI_CURRENCY=1, VM.EXCHANGE_RATE, 1)), 0)  ) AS AMOUNT_CR,
                                          SUM( IF((VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND VT.TRANS_MODE = 'DR'), (IFNULL(VT.AMOUNT,0)*IF(VM.IS_MULTI_CURRENCY=1, VM.EXCHANGE_RATE, 1)), 0)  ) AS AMOUNT_DR
                                          FROM VOUCHER_MASTER_TRANS AS VM
                                          INNER JOIN VOUCHER_TRANS AS VT ON VT.VOUCHER_ID = VM.VOUCHER_ID
                                          INNER JOIN MASTER_LEDGER AS ML ON ML.LEDGER_ID = VT.LEDGER_ID AND ML.GROUP_ID NOT IN (12, 13, 14)
                                          LEFT JOIN (SELECT BP.BUDGET_ID, GROUP_CONCAT(PROJECT_ID) AS PROJECT_ID
                                              FROM BUDGET_PROJECT BP WHERE BP.BUDGET_ID IN (?BUDGET_ID) GROUP BY BP.BUDGET_ID) AS BP ON LOCATE(CONCAT(',', VM.PROJECT_ID, ','), CONCAT(',', BP.PROJECT_ID, ',')) >0
                                          WHERE VM.VOUCHER_DATE BETWEEN DATE_ADD(?DATE_FROM, INTERVAL -2 YEAR) AND ?DATE_TO AND VM.STATUS = 1
                                          AND VM.PROJECT_ID IN (?PROJECT_ID) 
                                          GROUP BY BP.BUDGET_ID, VT.LEDGER_ID) AS VT ON VT.LEDGER_ID = ML.LEDGER_ID AND VT.BUDGET_ID = BM.BUDGET_ID
                                
                                LEFT JOIN BUDGET_GROUP BG ON BG.BUDGET_GROUP_ID = ML.BUDGET_GROUP_ID
                                LEFT JOIN BUDGET_SUB_GROUP BSG ON BSG.BUDGET_SUB_GROUP_ID = ML.BUDGET_SUB_GROUP_ID
                                WHERE ML.GROUP_ID NOT IN (12, 13, 14) AND BM.BUDGET_TRANS_MODE IN ('CR', 'DR');"; ;

                    break;
                #endregion
            }
            return query;
        }
    }

    #region TDS
    public class ReportTDS
    {
        public string GetReportSQL(ReportSQLCommand.TDS queryId)
        {
            string query = string.Empty;
            switch (queryId)
            {
                #region TDS Party Wise
                case ReportSQLCommand.TDS.TDSPartyWise:
                    {
                        //query = "SELECT TB.BOOKING_ID,\n" +
                        //"       TB.PROJECT_ID,\n" +
                        //"       TB.BOOKING_DATE,\n" +
                        //"       TBD.NATURE_OF_PAYMENT_ID,\n" +
                        //"       TNP.NAME,\n" +
                        //"       ML.LEDGER_NAME,ML.LEDGER_ID,\n" +
                        //"       SUM(TB.AMOUNT) AS AMOUNT,\n" +
                        //"       SUM(TBD.ASSESS_AMOUNT) AS ASSESS_AMOUNT,\n" +
                        //"       SUM(TDD.TAX_AMOUNT) AS TAX_AMOUNT,\n" +
                        //"       T.PAID_AMOUNT AS DEDUCTION_AMOUNT,\n" +
                        //"       0 AS EXCESS_AMOUNT,\n" +
                        //"       IFNULL(SUM(TDD.TAX_AMOUNT) - T.PAID_AMOUNT, SUM(TDD.TAX_AMOUNT)) AS BALANCE_AMOUNT\n" +
                        //"  FROM TDS_BOOKING AS TB\n" +
                        //"  LEFT JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                        //"    ON TB.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                        //"  LEFT JOIN TDS_BOOKING_DETAIL AS TBD\n" +
                        //"    ON TB.BOOKING_ID = TBD.BOOKING_ID\n" +
                        //"  LEFT JOIN TDS_DEDUCTION_DETAIL AS TDD\n" +
                        //"    ON TBD.BOOKING_DETAIL_ID = TDD.BOOKING_DETAIL_ID\n" +
                        //"  LEFT JOIN TDS_NATURE_PAYMENT AS TNP\n" +
                        //"    ON TBD.NATURE_OF_PAYMENT_ID = TNP.NATURE_PAY_ID\n" +
                        //"  LEFT JOIN MASTER_LEDGER AS ML\n" +
                        //"    ON TB.PARTY_LEDGER_ID = ML.LEDGER_ID\n" +
                        //"  LEFT JOIN (SELECT TDD.DEDUCTION_DETAIL_ID,\n" +
                        //"                    TBD.NATURE_OF_PAYMENT_ID,\n" +
                        //"                    TB.PARTY_LEDGER_ID,\n" +
                        //"                    SUM(TPD.PAID_AMOUNT) AS PAID_AMOUNT\n" +
                        //"               FROM TDS_DEDUCTION_DETAIL AS TDD\n" +
                        //"               LEFT JOIN TDS_BOOKING_DETAIL AS TBD\n" +
                        //"                 ON TDD.BOOKING_DETAIL_ID = TBD.BOOKING_DETAIL_ID\n" +
                        //"               LEFT JOIN TDS_BOOKING AS TB\n" +
                        //"                 ON TBD.BOOKING_ID = TB.BOOKING_ID\n" +
                        //"               LEFT JOIN TDS_PAYMENT_DETAIL AS TPD\n" +
                        //"                 ON TDD.DEDUCTION_DETAIL_ID = TPD.DEDUCTION_DETAIL_ID\n" +
                        //"               LEFT JOIN TDS_PAYMENT AS TP\n" +
                        //"                 ON TPD.TDS_PAYMENT_ID = TP.TDS_PAYMENT_ID\n" +
                        //"              WHERE TP.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //"                AND TP.IS_DELETED = 1\n" +
                        //"              GROUP BY TB.PARTY_LEDGER_ID) AS T\n" +
                        //"    ON TDD.DEDUCTION_DETAIL_ID = T.DEDUCTION_DETAIL_ID\n" +
                        //" WHERE TB.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //"   AND TB.IS_DELETED = 1\n" +
                        //"   AND ML.STATUS = 0\n" +
                        //"   AND VMT.STATUS = 1\n" +
                        //"   AND TBD.IS_TDS_DEDUCTED = 1\n" +
                        //"   AND TB.BOOKING_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        //" GROUP BY TB.PARTY_LEDGER_ID";

                        query = "SELECT TB.BOOKING_ID,\n" +
                        "       TB.PROJECT_ID,\n" +
                        "       TB.BOOKING_DATE,\n" +
                            // "       ML.LEDGER_ID,\n" +
                        "       TB.PARTY_LEDGER_ID AS 'LEDGER_ID',\n" +
                        "       ML.LEDGER_NAME,\n" +
                        "       SUM(TD.AMOUNT) AS AMOUNT,\n" +
                        "       SUM(TDD.TAX_AMOUNT) AS TAX_AMOUNT,\n" +
                        "       IFNULL(T.PAID_AMOUNT, 0) AS DEDUCTION_AMOUNT,\n" +
                        "       0 AS EXCESS_AMOUNT,\n" +
                        "       IFNULL(SUM(TDD.TAX_AMOUNT) - T.PAID_AMOUNT, SUM(TDD.TAX_AMOUNT)) AS BALANCE_AMOUNT\n" +
                        "  FROM TDS_BOOKING AS TB\n" +
                        " INNER JOIN TDS_BOOKING_DETAIL AS TBD\n" +
                        "    ON TB.BOOKING_ID = TBD.BOOKING_ID\n" +
                        "  LEFT JOIN TDS_DEDUCTION AS TD\n" +
                        "    ON TB.PARTY_LEDGER_ID = TD.PARTY_LEDGER_ID\n" +
                        " INNER JOIN TDS_DEDUCTION_DETAIL AS TDD\n" +
                        "    ON TBD.BOOKING_DETAIL_ID = TDD.BOOKING_DETAIL_ID\n" +
                        "   AND TD.DEDUCTION_ID = TDD.DEDUCTION_ID\n" +
                        "  LEFT JOIN MASTER_LEDGER AS ML\n" +
                        "    ON TB.PARTY_LEDGER_ID = ML.LEDGER_ID\n" +
                        "  LEFT JOIN (SELECT TDD.DEDUCTION_DETAIL_ID,\n" +
                        "                    TB.PARTY_LEDGER_ID,\n" +
                        "                    SUM(TPD.PAID_AMOUNT) AS PAID_AMOUNT\n" +
                        "               FROM TDS_DEDUCTION_DETAIL AS TDD\n" +
                        "               LEFT JOIN TDS_BOOKING_DETAIL AS TBD\n" +
                        "                 ON TDD.BOOKING_DETAIL_ID = TBD.BOOKING_DETAIL_ID\n" +
                        "               LEFT JOIN TDS_BOOKING AS TB\n" +
                        "                 ON TBD.BOOKING_ID = TB.BOOKING_ID\n" +
                        "               LEFT JOIN TDS_PAYMENT_DETAIL AS TPD\n" +
                        "                 ON TDD.DEDUCTION_DETAIL_ID = TPD.DEDUCTION_DETAIL_ID\n" +
                        "               LEFT JOIN TDS_PAYMENT AS TP\n" +
                        "                 ON TPD.TDS_PAYMENT_ID = TP.TDS_PAYMENT_ID\n" +
                        "              WHERE TP.PROJECT_ID IN (1)\n" +
                        "                AND TP.IS_DELETED = 1\n" +
                        "              GROUP BY TB.PARTY_LEDGER_ID) AS T\n" +
                        "    ON TDD.DEDUCTION_DETAIL_ID = T.DEDUCTION_DETAIL_ID\n" +
                        " WHERE TB.IS_DELETED = 1\n" +
                        "   AND TD.IS_DELETED = 1\n" +
                        "   AND TB.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   AND ML.STATUS = 0\n" +
                        "   AND TBD.IS_TDS_DEDUCTED = 1\n" +
                        "   AND TB.BOOKING_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        " GROUP BY TD.PARTY_LEDGER_ID;";

                        break;
                    }
                #endregion

                #region TDS Paid
                case ReportSQLCommand.TDS.TDSPaid:
                    {
                        query = "SELECT *\n" +
                                "  FROM (SELECT TB.PROJECT_ID,\n" +
                                "               SORT_ID,\n" +
                                "               TB.VOUCHER_ID AS 'JOURNAL_VOUCHER_ID',\n" +
                                "               T.VOUCHER_ID AS 'PAYMENT_VOUCHER_ID',\n" +
                                "               T.VOUCHER_NO AS 'PAYMENT_VOUCHER_NO',\n" +
                                "               VMT.VOUCHER_NO AS 'JOURNAL_VOUCHER_NO',\n" +
                                "               TBD.BOOKING_DETAIL_ID,\n" +
                                "               TDD.DEDUCTION_DETAIL_ID,\n" +
                                "               TBD.NATURE_OF_PAYMENT_ID,\n" +
                                "               TB.BOOKING_DATE,\n" +
                                "               VMT.VOUCHER_NO,IF(SORT_ID=1,VMT.VOUCHER_NO,T.VOUCHER_NO) AS GROUP_VOUCHER_NO,\n" +
                                "               TRANS_TYPE,\n" +
                                "               TB.AMOUNT,\n" +
                                "               TNP.NAME,\n" +
                                "               TB.BOOKING_ID,\n" +
                                "               IF(SORT_ID=2,0, TDD.TAX_AMOUNT) AS TAX_AMOUNT,\n" +
                                "               IF(SORT_ID=2,0,IFNULL(SUM(T.PAID_AMOUNT), 0)) AS PAID_AMOUNT,\n" +
                                "               CONCAT(IFNULL(SUM(T.PAID_AMOUNT), 0), ' Cr') AS GROUP_AMOUNT\n" +
                                "          FROM TDS_BOOKING AS TB\n" +
                                "          LEFT JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                                "            ON TB.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "          LEFT JOIN TDS_BOOKING_DETAIL AS TBD\n" +
                                "            ON TB.BOOKING_ID = TBD.BOOKING_ID\n" +
                                "          LEFT JOIN TDS_DEDUCTION_DETAIL AS TDD\n" +
                                "            ON TBD.BOOKING_DETAIL_ID = TDD.BOOKING_DETAIL_ID\n" +
                                "          LEFT JOIN TDS_NATURE_PAYMENT AS TNP\n" +
                                "            ON TBD.NATURE_OF_PAYMENT_ID = TNP.NATURE_PAY_ID\n" +
                                "          LEFT JOIN (SELECT TDD.DEDUCTION_DETAIL_ID,\n" +
                                "                           TP.VOUCHER_ID,\n" +
                                "                           VMT.VOUCHER_NO,\n" +
                                "                           'Journal' AS TRANS_TYPE,\n" +
                                "                           1 SORT_ID,\n" +
                                "                           TPD.PAID_AMOUNT,\n" +
                                "                           (TDD.TAX_AMOUNT - TPD.PAID_AMOUNT) AS 'TDS_PAID_AMOUNT'\n" +
                                "                      FROM TDS_DEDUCTION_DETAIL AS TDD\n" +
                                "                      LEFT JOIN TDS_PAYMENT_DETAIL AS TPD\n" +
                                "                        ON TDD.DEDUCTION_DETAIL_ID = TPD.DEDUCTION_DETAIL_ID\n" +
                                "                      LEFT JOIN TDS_PAYMENT AS TP\n" +
                                "                        ON TPD.TDS_PAYMENT_ID = TP.TDS_PAYMENT_ID\n" +
                                "                      LEFT JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                                "                        ON TP.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "                     WHERE TP.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                       AND TP.IS_DELETED = 1\n" +
                                "                       AND VMT.STATUS = 1\n" +
                                "                       AND VMT.VOUCHER_TYPE = 'PY') AS T\n" +
                                "            ON TDD.DEDUCTION_DETAIL_ID = T.DEDUCTION_DETAIL_ID\n" +
                                "         WHERE TB.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "           AND TB.IS_DELETED = 1\n" +
                                "           AND VMT.STATUS = 1\n" +
                                "           AND TBD.IS_TDS_DEDUCTED = 1\n" +
                                "           AND TB.BOOKING_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "           AND IFNULL(T.PAID_AMOUNT, 0) <> 0\n" +
                                "         GROUP BY TB.BOOKING_ID\n" +
                                "\n" +
                                "        UNION\n" +
                                "\n" +
                                "        SELECT TB.PROJECT_ID,\n" +
                                "               SORT_ID,\n" +
                                "               TB.VOUCHER_ID AS 'JOURNAL_VOUCHER_ID',\n" +
                                "               T.VOUCHER_ID AS 'PAYMENT_VOUCHER_ID',\n" +
                                "               T.VOUCHER_NO AS 'PAYMENT_VOUCHER_NO',\n" +
                                "               VMT.VOUCHER_NO AS 'JOURNAL_VOUCHER_NO',\n" +
                                "               TBD.BOOKING_DETAIL_ID,\n" +
                                "               TDD.DEDUCTION_DETAIL_ID,\n" +
                                "               TBD.NATURE_OF_PAYMENT_ID,\n" +
                                "               TB.BOOKING_DATE,\n" +
                                "               VMT.VOUCHER_NO,IF(SORT_ID=1,VMT.VOUCHER_NO,T.VOUCHER_NO) AS GROUP_VOUCHER_NO,\n" +
                                "               TRANS_TYPE,\n" +
                                "               TB.AMOUNT,\n" +
                                "               TNP.NAME,\n" +
                                "               TB.BOOKING_ID,\n" +
                                "               IF(SORT_ID=2,0, TDD.TAX_AMOUNT) AS TAX_AMOUNT,\n" +
                                "               IF(SORT_ID=2,0,IFNULL(SUM(T.PAID_AMOUNT), 0)) AS PAID_AMOUNT,\n" +
                                "               CONCAT(IFNULL(SUM(T.PAID_AMOUNT), 0), ' Dr') AS GROUP_AMOUNT\n" +
                                "          FROM TDS_BOOKING AS TB\n" +
                                "          LEFT JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                                "            ON TB.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "          LEFT JOIN TDS_BOOKING_DETAIL AS TBD\n" +
                                "            ON TB.BOOKING_ID = TBD.BOOKING_ID\n" +
                                "          LEFT JOIN TDS_DEDUCTION_DETAIL AS TDD\n" +
                                "            ON TBD.BOOKING_DETAIL_ID = TDD.BOOKING_DETAIL_ID\n" +
                                "          LEFT JOIN TDS_NATURE_PAYMENT AS TNP\n" +
                                "            ON TBD.NATURE_OF_PAYMENT_ID = TNP.NATURE_PAY_ID\n" +
                                "          LEFT JOIN (SELECT TDD.DEDUCTION_DETAIL_ID,\n" +
                                "                            TP.VOUCHER_ID,\n" +
                                "                            VMT.VOUCHER_NO,\n" +
                                "                            'Payment' AS TRANS_TYPE,\n" +
                                "                            2 AS SORT_ID,\n" +
                                "                            TPD.PAID_AMOUNT,\n" +
                                "                            (TDD.TAX_AMOUNT - TPD.PAID_AMOUNT) AS 'TDS_PAID_AMOUNT'\n" +
                                "                       FROM TDS_DEDUCTION_DETAIL AS TDD\n" +
                                "                       LEFT JOIN TDS_PAYMENT_DETAIL AS TPD\n" +
                                "                         ON TDD.DEDUCTION_DETAIL_ID = TPD.DEDUCTION_DETAIL_ID\n" +
                                "                       LEFT JOIN TDS_PAYMENT AS TP\n" +
                                "                         ON TPD.TDS_PAYMENT_ID = TP.TDS_PAYMENT_ID\n" +
                                "                       LEFT JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                                "                         ON TP.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "                      WHERE TP.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                        AND TP.IS_DELETED = 1\n" +
                                "                        AND VMT.STATUS = 1\n" +
                                "                        AND VMT.VOUCHER_TYPE = 'PY') AS T\n" +
                                "            ON TDD.DEDUCTION_DETAIL_ID = T.DEDUCTION_DETAIL_ID\n" +
                                "         WHERE TB.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "           AND TB.IS_DELETED = 1\n" +
                                "           AND VMT.STATUS = 1\n" +
                                "           AND TBD.IS_TDS_DEDUCTED = 1\n" +
                                "           AND TB.BOOKING_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "           AND IFNULL(T.PAID_AMOUNT, 0) <> 0\n" +
                                "         GROUP BY TB.BOOKING_ID) AS T\n" +
                                " ORDER BY PAYMENT_VOUCHER_ID, SORT_ID;";
                        break;
                    }
                #endregion

                #region TDS Computational payable
                case ReportSQLCommand.TDS.TDSComputationPayable:
                    {
                        query = "SELECT *\n" +
                                "  FROM (SELECT T.*\n" +
                                "          FROM (SELECT TB.PROJECT_ID,\n" +
                                "                       TB.VOUCHER_ID,IF(T.VOUCHER_ID IS NULL, 0, T.VOUCHER_ID) AS PAYMENT_VOUCHER_ID,\n" +
                                "                       'Journal' AS TRANS_TYPE,\n" +
                                "                       1 SORT_ID,\n" +
                                "                       VMT.VOUCHER_NO AS 'PAYMENT_VOUCHER_NO',\n" +
                                "                       VMT.VOUCHER_NO AS 'JOURNAL_VOUCHER_NO',\n" +
                                "                       CONCAT(TDD.TAX_AMOUNT, ' Cr') AS GROUP_AMOUNT,\n" +
                                "                       TBD.BOOKING_DETAIL_ID,\n" +
                                "                       TDD.DEDUCTION_DETAIL_ID,\n" +
                                "                       TBD.NATURE_OF_PAYMENT_ID,\n" +
                                "                       TB.BOOKING_DATE,\n" +
                                "                       VMT.VOUCHER_NO,\n" +
                                "                       TB.AMOUNT,\n" +
                                "                       TNP.NAME,\n" +
                                "                       TDD.TAX_AMOUNT,\n" +
                                "                       IFNULL(SUM(T.PAID_AMOUNT), 0) AS 'PENDING_AMOUNT',\n" +
                                "                       IFNULL(TDD.TAX_AMOUNT - SUM(T.PAID_AMOUNT),\n" +
                                "                              TDD.TAX_AMOUNT) AS 'PAID_AMOUNT'\n" +
                                "                  FROM TDS_BOOKING AS TB\n" +
                                "                  LEFT JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                                "                    ON TB.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "                  LEFT JOIN TDS_BOOKING_DETAIL AS TBD\n" +
                                "                    ON TB.BOOKING_ID = TBD.BOOKING_ID\n" +
                                "                  LEFT JOIN TDS_DEDUCTION_DETAIL AS TDD\n" +
                                "                    ON TBD.BOOKING_DETAIL_ID = TDD.BOOKING_DETAIL_ID\n" +
                                "                  LEFT JOIN TDS_NATURE_PAYMENT AS TNP\n" +
                                "                    ON TBD.NATURE_OF_PAYMENT_ID = TNP.NATURE_PAY_ID\n" +
                                "                  LEFT JOIN (SELECT TDD.DEDUCTION_DETAIL_ID,\n" +
                                "                                   TP.VOUCHER_ID,\n" +
                                "\n" +
                                "                                   TPD.PAID_AMOUNT,\n" +
                                "                                   (TDD.TAX_AMOUNT - TPD.PAID_AMOUNT) AS 'TDS_PAID_AMOUNT'\n" +
                                "                              FROM TDS_DEDUCTION_DETAIL AS TDD\n" +
                                "                              LEFT JOIN TDS_PAYMENT_DETAIL AS TPD\n" +
                                "                                ON TDD.DEDUCTION_DETAIL_ID =\n" +
                                "                                   TPD.DEDUCTION_DETAIL_ID\n" +
                                "                              LEFT JOIN TDS_PAYMENT AS TP\n" +
                                "                                ON TPD.TDS_PAYMENT_ID = TP.TDS_PAYMENT_ID\n" +
                                "                              LEFT JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                                "                                ON TP.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "                             WHERE TP.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                               AND TP.IS_DELETED = 1) AS T\n" +
                                "                    ON TDD.DEDUCTION_DETAIL_ID = T.DEDUCTION_DETAIL_ID\n" +
                                "                 WHERE TB.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                   AND TB.IS_DELETED = 1\n" +
                                "                   AND VMT.STATUS = 1\n" +
                                "                   AND TBD.IS_TDS_DEDUCTED = 1\n" +
                                "                   AND TB.BOOKING_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "                 GROUP BY TB.VOUCHER_ID\n" +
                                "                 ORDER BY TB.BOOKING_DATE, VOUCHER_NO ASC) AS T\n" +
                                "         WHERE T.PAID_AMOUNT NOT IN (0)\n" +
                                "\n" +
                                "        UNION\n" +
                                "\n" +
                                "        SELECT PROJECT_ID,\n" +
                                "               VOUCHER_ID,PAYMENT_VOUCHER_ID,\n" +
                                "               TRANS_TYPE,\n" +
                                "               SORT_ID,\n" +
                                "               PAYMENT_VOUCHER_NO,\n" +
                                "               JOURNAL_VOUCHER_NO,\n" +
                                "               GROUP_AMOUNT,\n" +
                                "               BOOKING_DETAIL_ID,\n" +
                                "               DEDUCTION_DETAIL_ID,\n" +
                                "               NATURE_OF_PAYMENT_ID,\n" +
                                "               BOOKING_DATE,\n" +
                                "               VOUCHER_NO,\n" +
                                "               AMOUNT,\n" +
                                "               NAME,\n" +
                                "               IF(SORT_ID = 2, 0, TAX_AMOUNT) AS TAX_AMOUNT,\n" +
                                "               PENDING_AMOUNT,\n" +
                                "               IF(SORT_ID = 2, 0, PAID_AMOUNT) AS PAID_AMOUNT\n" +
                                "          FROM (SELECT TB.PROJECT_ID,\n" +
                                "                       TB.VOUCHER_ID,IF(T.VOUCHER_ID IS NULL, 0, T.VOUCHER_ID) AS PAYMENT_VOUCHER_ID,\n" +
                                "                       'Payment' AS TRANS_TYPE,\n" +
                                "                       2 SORT_ID,\n" +
                                "                       VMT.VOUCHER_NO AS 'PAYMENT_VOUCHER_NO',\n" +
                                "                       VMT.VOUCHER_NO AS 'JOURNAL_VOUCHER_NO',\n" +
                                "                       CONCAT(TDD.TAX_AMOUNT, ' Dr') AS GROUP_AMOUNT,\n" +
                                "                       TBD.BOOKING_DETAIL_ID,\n" +
                                "                       TDD.DEDUCTION_DETAIL_ID,\n" +
                                "                       TBD.NATURE_OF_PAYMENT_ID,\n" +
                                "                       TB.BOOKING_DATE,\n" +
                                "                       VMT.VOUCHER_NO,\n" +
                                "                       TB.AMOUNT,\n" +
                                "                       TNP.NAME,\n" +
                                "                       TDD.TAX_AMOUNT,\n" +
                                "                       IFNULL(SUM(T.PAID_AMOUNT), 0) AS 'PENDING_AMOUNT',\n" +
                                "                       IFNULL(TDD.TAX_AMOUNT - SUM(T.PAID_AMOUNT),\n" +
                                "                              TDD.TAX_AMOUNT) AS 'PAID_AMOUNT'\n" +
                                "                  FROM TDS_BOOKING AS TB\n" +
                                "                  LEFT JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                                "                    ON TB.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "                  LEFT JOIN TDS_BOOKING_DETAIL AS TBD\n" +
                                "                    ON TB.BOOKING_ID = TBD.BOOKING_ID\n" +
                                "                  LEFT JOIN TDS_DEDUCTION_DETAIL AS TDD\n" +
                                "                    ON TBD.BOOKING_DETAIL_ID = TDD.BOOKING_DETAIL_ID\n" +
                                "                  LEFT JOIN TDS_NATURE_PAYMENT AS TNP\n" +
                                "                    ON TBD.NATURE_OF_PAYMENT_ID = TNP.NATURE_PAY_ID\n" +
                                "                  LEFT JOIN (SELECT TDD.DEDUCTION_DETAIL_ID,\n" +
                                "                                   TP.VOUCHER_ID,\n" +
                                "                                   TPD.PAID_AMOUNT,\n" +
                                "                                   (TDD.TAX_AMOUNT - TPD.PAID_AMOUNT) AS 'TDS_PAID_AMOUNT'\n" +
                                "                              FROM TDS_DEDUCTION_DETAIL AS TDD\n" +
                                "                              LEFT JOIN TDS_PAYMENT_DETAIL AS TPD\n" +
                                "                                ON TDD.DEDUCTION_DETAIL_ID =\n" +
                                "                                   TPD.DEDUCTION_DETAIL_ID\n" +
                                "                              LEFT JOIN TDS_PAYMENT AS TP\n" +
                                "                                ON TPD.TDS_PAYMENT_ID = TP.TDS_PAYMENT_ID\n" +
                                "                              LEFT JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                                "                                ON TP.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "                             WHERE TP.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                               AND TP.IS_DELETED = 1) AS T\n" +
                                "                    ON TDD.DEDUCTION_DETAIL_ID = T.DEDUCTION_DETAIL_ID\n" +
                                "                 WHERE TB.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                   AND TB.IS_DELETED = 1\n" +
                                "                   AND VMT.STATUS = 1\n" +
                                "                   AND TBD.IS_TDS_DEDUCTED = 1\n" +
                                "                   AND TB.BOOKING_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "                 GROUP BY TB.VOUCHER_ID HAVING PAYMENT_VOUCHER_ID<>0\n" +
                                "                 ORDER BY TB.BOOKING_DATE, VOUCHER_NO ASC) AS T\n" +
                                "         WHERE T.PAID_AMOUNT NOT IN (0)) AS P\n" +
                                " ORDER BY VOUCHER_ID, SORT_ID;";
                        break;
                    }
                #endregion

                #region Computation payable Drill Down
                case ReportSQLCommand.TDS.TDSComputationPayableDrillDown:
                    {
                        query = "SELECT BOOKING_DATE,\n" +
                                "       NP.NATURE_PAY_ID,\n" +
                                "       B.BOOKING_ID,\n" +
                                "       DTT.TDS_DUTY_TAXTYPE_ID,\n" +
                                "       VOUCHER_NO,\n" +
                                "       NP.NAME,\n" +
                                "       IF(PAN_NUMBER = '' or PAN_NUMBER is null,\n" +
                                "          CONCAT(IF(DTT.TDS_DUTY_TAXTYPE_ID = 2, TDS_RATE, 0), ' %'),\n" +
                                "          CONCAT(IF(DTT.TDS_DUTY_TAXTYPE_ID = 1, TDS_RATE, 0), ' %')) AS TDS_RATE,\n" +
                                "       ASSESS_AMOUNT,\n" +
                                "       LEDGER_NAME AS LEDGER_NAME,\n" +
                                "       IF(TDS_EXEMPTION_LIMIT <= ASSESS_AMOUNT,\n" +
                                "          ROUND((ASSESS_AMOUNT *\n" +
                                "                IF(TDS_DUTY_TAXTYPE_ID IS NULL,\n" +
                                "                    0,\n" +
                                "                    IF(PAN_NUMBER = '' or PAN_NUMBER is null,\n" +
                                "                       CONCAT(IF(DTT.TDS_DUTY_TAXTYPE_ID = 2, TDS_RATE, 0),\n" +
                                "                              ' %'),\n" +
                                "                       CONCAT(IF(DTT.TDS_DUTY_TAXTYPE_ID = 1, TDS_RATE, 0),\n" +
                                "                              ' %')))) / 100,\n" +
                                "                2),\n" +
                                "          0) AS 'TAX_DEDUCTABLE',\n" +
                                "       IF(TDS_EXEMPTION_LIMIT <= ASSESS_AMOUNT,\n" +
                                "          IF(BD.IS_TDS_DEDUCTED = 1,\n" +
                                "             0,\n" +
                                "             IF(TDS_PAYMENT_ID IS NULL,\n" +
                                "                ROUND((ASSESS_AMOUNT *\n" +
                                "                      IF(PAN_NUMBER = '' or PAN_NUMBER is null,\n" +
                                "                          CONCAT(IF(DTT.TDS_DUTY_TAXTYPE_ID = 2, TDS_RATE, 0),\n" +
                                "                                 ' %'),\n" +
                                "                          CONCAT(IF(DTT.TDS_DUTY_TAXTYPE_ID = 1, TDS_RATE, 0),\n" +
                                "                                 ' %'))) / 100,\n" +
                                "                      2),\n" +
                                "                0)),\n" +
                                "          0) AS 'BALANCE_TO_BE_DEDUCTED',\n" +
                                "       IF(TDS_EXEMPTION_LIMIT <= ASSESS_AMOUNT,\n" +
                                "          IF(BD.IS_TDS_DEDUCTED = 1,\n" +
                                "             IF(TDS_PAYMENT_ID IS NULL,\n" +
                                "                ROUND((ASSESS_AMOUNT *\n" +
                                "                      IF(PAN_NUMBER = '' or PAN_NUMBER is null,\n" +
                                "                          CONCAT(IF(DTT.TDS_DUTY_TAXTYPE_ID = 2, TDS_RATE, 0),\n" +
                                "                                 ' %'),\n" +
                                "                          CONCAT(IF(DTT.TDS_DUTY_TAXTYPE_ID = 1, TDS_RATE, 0),\n" +
                                "                                 ' %'))) / 100,\n" +
                                "                      2),\n" +
                                "                0),\n" +
                                "             0),\n" +
                                "          0) AS 'BALANCE_TO_BE_PAID'\n" +
                                "\n" +
                                "  FROM TDS_BOOKING B\n" +
                                "  LEFT JOIN VOUCHER_MASTER_TRANS VMT\n" +
                                "    ON B.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "  LEFT JOIN TDS_BOOKING_DETAIL BD\n" +
                                "    ON B.BOOKING_ID = BD.BOOKING_ID\n" +
                                "  LEFT JOIN TDS_NATURE_PAYMENT NP\n" +
                                "    ON BD.NATURE_OF_PAYMENT_ID = NP.NATURE_PAY_ID\n" +
                                "  LEFT JOIN (SELECT TDS_POLICY_ID,\n" +
                                "                    TDS_DEDUCTEE_TYPE_ID,\n" +
                                "                    TDS_NATURE_PAYMENT_ID,\n" +
                                "                    APPLICABLE_FROM\n" +
                                "               FROM TDS_BOOKING B\n" +
                                "               LEFT JOIN VOUCHER_MASTER_TRANS VMT\n" +
                                "                 ON B.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "               LEFT JOIN TDS_BOOKING_DETAIL BD\n" +
                                "                 ON B.BOOKING_ID = BD.BOOKING_ID\n" +
                                "               LEFT JOIN TDS_NATURE_PAYMENT NP\n" +
                                "                 ON BD.NATURE_OF_PAYMENT_ID = NP.NATURE_PAY_ID\n" +
                                "               LEFT JOIN TDS_POLICY P\n" +
                                "                 ON NP.NATURE_PAY_ID = P.TDS_NATURE_PAYMENT_ID\n" +
                                "                and p.tds_deductee_type_id = b.deductee_type_id\n" +
                                "              ORDER BY APPLICABLE_FROM desc limit 1) P\n" +
                                "    ON NP.NATURE_PAY_ID = P.TDS_NATURE_PAYMENT_ID\n" +
                                "  LEFT JOIN TDS_TAX_RATE TR\n" +
                                "    ON P.TDS_POLICY_ID = TR.TDS_POLICY_ID\n" +
                                "  LEFT JOIN TDS_DUTY_TAXTYPE DTT\n" +
                                "    ON TR.TDS_TAX_TYPE_ID = DTT.TDS_DUTY_TAXTYPE_ID\n" +
                                "   AND DTT.STATUS = 1\n" +
                                "  LEFT JOIN MASTER_LEDGER ML\n" +
                                "    ON B.PARTY_LEDGER_ID = ML.LEDGER_ID\n" +
                                "  LEFT JOIN TDS_CREDTIORS_PROFILE CR\n" +
                                "    ON ML.LEDGER_ID = CR.LEDGER_ID\n" +
                                "  LEFT JOIN TDS_DEDUCTION_DETAIL DD\n" +
                                "    ON BD.BOOKING_DETAIL_ID = DD.BOOKING_DETAIL_ID\n" +
                                "  LEFT JOIN TDS_PAYMENT_DETAIL PD\n" +
                                "    ON DD.DEDUCTION_DETAIL_ID = PD.DEDUCTION_DETAIL_ID\n" +
                                " WHERE B.PARTY_LEDGER_ID =?LEDGER_ID\n" +
                                "   AND B.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "   AND IS_DELETED = 1\n" +
                            //"   AND P.APPLICABLE_FROM <=?BALANCE_DATE\n" +
                                "   AND BOOKING_DATE <=?BALANCE_DATE\n" +
                                " GROUP BY NP.NATURE_PAY_ID, B.BOOKING_ID, DTT.TDS_DUTY_TAXTYPE_ID\n" +
                                "HAVING TDS_RATE <> 0;";
                        break;
                    }
                #endregion

                #region TDS Outstanding Payable
                case ReportSQLCommand.TDS.TDSOutstandingPayable:
                    {
                        query = "SELECT TB.PROJECT_ID,\n" +
                                "       TB.VOUCHER_ID,\n" +
                                "       TBD.BOOKING_DETAIL_ID,\n" +
                                "       TDD.DEDUCTION_DETAIL_ID,\n" +
                                "       TB.BOOKING_DATE,\n" +
                                "       VMT.VOUCHER_NO,\n" +
                                "       TNP.NAME,\n" +
                                "       TDD.TAX_AMOUNT,\n" +
                                "       IFNULL(T.PAID_AMOUNT, TDD.TAX_AMOUNT) AS PAID_AMOUNT,\n" +
                                "       TDD.TAX_AMOUNT AS SUM_TAX_AMOUNT,\n" +
                                "       IFNULL(T.PAID_AMOUNT, TDD.TAX_AMOUNT) AS SUM_PAID_AMOUNT,\n" +
                                "       IFNULL(T.TDS_PAID_AMOUNT, TDD.TAX_AMOUNT) AS TDS_PAID_AMOUNT\n" +
                                "  FROM TDS_BOOKING AS TB\n" +
                                "  LEFT JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                                "    ON TB.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "  LEFT JOIN TDS_BOOKING_DETAIL AS TBD\n" +
                                "    ON TB.BOOKING_ID = TBD.BOOKING_ID\n" +
                                "  LEFT JOIN TDS_DEDUCTION_DETAIL AS TDD\n" +
                                "    ON TBD.BOOKING_DETAIL_ID = TDD.BOOKING_DETAIL_ID\n" +
                                "  LEFT JOIN TDS_NATURE_PAYMENT AS TNP\n" +
                                "    ON TBD.NATURE_OF_PAYMENT_ID = TNP.NATURE_PAY_ID\n" +
                                "  LEFT JOIN (SELECT TDD.DEDUCTION_DETAIL_ID,\n" +
                                "                    TPD.PAID_AMOUNT,\n" +
                                "                    (TDD.TAX_AMOUNT - TPD.PAID_AMOUNT) AS 'TDS_PAID_AMOUNT'\n" +
                                "               FROM TDS_DEDUCTION_DETAIL AS TDD\n" +
                                "               LEFT JOIN TDS_PAYMENT_DETAIL AS TPD\n" +
                                "                 ON TDD.DEDUCTION_DETAIL_ID = TPD.DEDUCTION_DETAIL_ID\n" +
                                "               LEFT JOIN TDS_PAYMENT AS TP\n" +
                                "                 ON TPD.TDS_PAYMENT_ID = TP.TDS_PAYMENT_ID\n" +
                                "                 WHERE TP.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                 AND TP.IS_DELETED = 1) AS T\n" +
                                "    ON TDD.DEDUCTION_DETAIL_ID = T.DEDUCTION_DETAIL_ID\n" +
                                " WHERE TB.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "   AND TB.IS_DELETED = 1\n" +
                                "   AND TBD.IS_TDS_DEDUCTED = 1\n" +
                                "   AND VMT.STATUS = 1\n" +
                                "   AND VMT.VOUCHER_SUB_TYPE = 'TDS'\n" +
                                "   AND TB.BOOKING_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "   AND IFNULL(T.TDS_PAID_AMOUNT, TDD.TAX_AMOUNT) = 0\n" +
                                " ORDER BY TB.BOOKING_DATE, VOUCHER_NO ASC";
                        break;
                    }
                #endregion

                #region TDS Ledger Wise
                case ReportSQLCommand.TDS.TDSLedgerWise:
                    {
                        query = "SELECT T.PROJECT_ID,\n" +
                        "       T.VOUCHER_ID,\n" +
                        "       T.LEDGER_ID,\n" +
                        "       T.LEDGER_NAME,\n" +
                        "       SUM(T.PENDING_AMOUNT) PENDING_AMOUNT\n" +
                        "  FROM (SELECT TB.PROJECT_ID,\n" +
                        "               TB.VOUCHER_ID,\n" +
                        "               TBD.BOOKING_DETAIL_ID,\n" +
                        "               TDD.DEDUCTION_DETAIL_ID,\n" +
                        "               TBD.NATURE_OF_PAYMENT_ID,\n" +
                        "               ML.LEDGER_ID,\n" +
                        "               TB.BOOKING_DATE,\n" +
                        "               ML.LEDGER_NAME,\n" +
                        "               IFNULL(TDD.TAX_AMOUNT - SUM(T.PAID_AMOUNT), TDD.TAX_AMOUNT) AS 'PENDING_AMOUNT'\n" +
                        "          FROM TDS_BOOKING AS TB\n" +
                        "          LEFT JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                        "            ON TB.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                        "          LEFT JOIN TDS_BOOKING_DETAIL AS TBD\n" +
                        "            ON TB.BOOKING_ID = TBD.BOOKING_ID\n" +
                        "          LEFT JOIN TDS_DEDUCTION_DETAIL AS TDD\n" +
                        "            ON TBD.BOOKING_DETAIL_ID = TDD.BOOKING_DETAIL_ID\n" +
                        "          LEFT JOIN TDS_NATURE_PAYMENT AS TNP\n" +
                        "            ON TBD.NATURE_OF_PAYMENT_ID = TNP.NATURE_PAY_ID\n" +
                        "          LEFT JOIN MASTER_LEDGER AS ML\n" +
                        "            ON TB.PARTY_LEDGER_ID = ML.LEDGER_ID\n" +
                        "          LEFT JOIN (SELECT TDD.DEDUCTION_DETAIL_ID,\n" +
                        "                           TPD.PAID_AMOUNT,\n" +
                        "                           (TDD.TAX_AMOUNT - TPD.PAID_AMOUNT) AS 'TDS_PAID_AMOUNT'\n" +
                        "                      FROM TDS_DEDUCTION_DETAIL AS TDD\n" +
                        "                      LEFT JOIN TDS_PAYMENT_DETAIL AS TPD\n" +
                        "                        ON TDD.DEDUCTION_DETAIL_ID = TPD.DEDUCTION_DETAIL_ID\n" +
                        "                      LEFT JOIN TDS_PAYMENT AS TP\n" +
                        "                        ON TPD.TDS_PAYMENT_ID = TP.TDS_PAYMENT_ID\n" +
                        "                     WHERE TP.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "                       AND TP.IS_DELETED = 1) AS T\n" +
                        "            ON TDD.DEDUCTION_DETAIL_ID = T.DEDUCTION_DETAIL_ID\n" +
                        "         WHERE TB.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "           AND TB.IS_DELETED = 1\n" +
                        "           AND VMT.STATUS = 1\n" +
                        "           AND ML.STATUS=0 \n" +
                        "           AND TBD.IS_TDS_DEDUCTED = 1\n" +
                        "           AND TB.BOOKING_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "         GROUP BY VOUCHER_ID\n" +
                        "         ORDER BY TB.BOOKING_DATE, VOUCHER_NO ASC) AS T\n" +
                        " GROUP BY T.LEDGER_ID";
                        break;
                    }

                case ReportSQLCommand.TDS.TDSOutstandingLedgerDrillDown:
                    {
                        query = "SELECT *\n" +
                                "  FROM (SELECT DEDUCTION_DATE AS DATE,\n" +
                                "               NOP.NATURE_PAY_ID,\n" +
                                "               VMT.VOUCHER_NO,\n" +
                                "               TP.VOUCHER_NO AS PAYMENT_VOUCHER_NO,\n" +
                                "               'Journal' VOUCHER_TYPE,\n" +
                                "               1 AS SORT_ID,\n" +
                                "               B.PARTY_LEDGER_ID,\n" +
                                "               NAME AS NATURE_OF_PAYMENT,\n" +
                                "               D.VOUCHER_ID,\n" +
                                "               TAX_AMOUNT AS OPENING_AMOUNT,\n" +
                                "               IF((TAX_AMOUNT - PAID_AMOUNT) IS NULL,\n" +
                                "                  0,\n" +
                                "                  TAX_AMOUNT - PAID_AMOUNT) AS PENDING_AMOUNT\n" +
                                "          FROM TDS_BOOKING B\n" +
                                "          LEFT JOIN TDS_BOOKING_DETAIL BD\n" +
                                "            ON B.BOOKING_ID = BD.BOOKING_ID\n" +
                                "          LEFT JOIN TDS_NATURE_PAYMENT NOP\n" +
                                "            ON BD.NATURE_OF_PAYMENT_ID = NOP.NATURE_PAY_ID\n" +
                                "          LEFT JOIN TDS_DEDUCTION D\n" +
                                "            ON B.PARTY_LEDGER_ID = D.PARTY_LEDGER_ID\n" +
                                "          LEFT JOIN TDS_DEDUCTION_DETAIL DD\n" +
                                "            ON D.DEDUCTION_ID = DD.DEDUCTION_ID\n" +
                                "          LEFT JOIN TDS_PAYMENT_DETAIL PD\n" +
                                "            ON PD.DEDUCTION_DETAIL_ID = DD.DEDUCTION_DETAIL_ID\n" +
                                "          LEFT JOIN (SELECT TDS_PAYMENT_ID, VOUCHER_NO\n" +
                                "                      FROM TDS_PAYMENT AS TP\n" +
                                "                      LEFT JOIN VOUCHER_MASTER_TRANS VMT\n" +
                                "                        ON TP.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "                     WHERE TP.IS_DELETED = 1) AS TP\n" +
                                "            ON PD.TDS_PAYMENT_ID = TP.TDS_PAYMENT_ID\n" +
                                "          LEFT JOIN VOUCHER_MASTER_TRANS VMT\n" +
                                "            ON B.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "         WHERE B.PARTY_LEDGER_ID IN (?LEDGER_ID) AND B.PROJECT_ID IN(?PROJECT_ID)\n" +
                                "           AND B.IS_DELETED = 1\n" +
                                "           AND VMT.STATUS = 1\n" +
                                "           AND BD.IS_TDS_DEDUCTED = 1\n" +
                                "         GROUP BY D.VOUCHER_ID\n" +
                                "        UNION\n" +
                                "        SELECT DEDUCTION_DATE AS DATE,\n" +
                                "               NOP.NATURE_PAY_ID,\n" +
                                "               VMT.VOUCHER_NO,\n" +
                                "               TP.VOUCHER_NO AS PAYMENT_VOUCHER_NO,\n" +
                                "               'Payment' VOUCHER_TYPE,\n" +
                                "               2 AS SORT_ID,\n" +
                                "               B.PARTY_LEDGER_ID,\n" +
                                "               NAME AS NATURE_OF_PAYMENT,\n" +
                                "               D.VOUCHER_ID,\n" +
                                "               0 AS OPENING_AMOUNT,\n" +
                                "               0 AS PENDING_AMOUNT\n" +
                                "          FROM TDS_BOOKING B\n" +
                                "          LEFT JOIN TDS_BOOKING_DETAIL BD\n" +
                                "            ON B.BOOKING_ID = BD.BOOKING_ID\n" +
                                "          LEFT JOIN TDS_NATURE_PAYMENT NOP\n" +
                                "            ON BD.NATURE_OF_PAYMENT_ID = NOP.NATURE_PAY_ID\n" +
                                "          LEFT JOIN TDS_DEDUCTION D\n" +
                                "            ON B.PARTY_LEDGER_ID = D.PARTY_LEDGER_ID\n" +
                                "          LEFT JOIN TDS_DEDUCTION_DETAIL DD\n" +
                                "            ON D.DEDUCTION_ID = DD.DEDUCTION_ID\n" +
                                "          LEFT JOIN TDS_PAYMENT_DETAIL PD\n" +
                                "            ON PD.DEDUCTION_DETAIL_ID = DD.DEDUCTION_DETAIL_ID\n" +
                                "          LEFT JOIN (SELECT TDS_PAYMENT_ID, VOUCHER_NO\n" +
                                "                       FROM TDS_PAYMENT AS TP\n" +
                                "                       LEFT JOIN VOUCHER_MASTER_TRANS VMT\n" +
                                "                         ON TP.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "                      WHERE TP.IS_DELETED = 1) AS TP\n" +
                                "            ON PD.TDS_PAYMENT_ID = TP.TDS_PAYMENT_ID\n" +
                                "          LEFT JOIN VOUCHER_MASTER_TRANS VMT\n" +
                                "            ON B.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "         WHERE B.PARTY_LEDGER_ID IN (?LEDGER_ID) AND B.PROJECT_ID IN(?PROJECT_ID)\n" +
                                "           AND B.IS_DELETED = 1\n" +
                                "           AND VMT.STATUS = 1\n" +
                                "           AND BD.IS_TDS_DEDUCTED = 1\n" +
                                "         GROUP BY D.VOUCHER_ID) AS T\n" +
                                " GROUP BY PAYMENT_VOUCHER_NO, DATE, SORT_ID\n" +
                                "HAVING PAYMENT_VOUCHER_NO IS NOT NULL\n" +
                                " ORDER BY VOUCHER_ID, SORT_ID;";
                        break;
                    }

                #endregion

                #region TDS Nature Of Payments
                case ReportSQLCommand.TDS.TDSNatureOfPayments:
                    {
                        query = "SELECT T.BOOKING_ID,NATURE_OF_PAYMENT_ID,\n" +
                        "       T.PROJECT_ID,\n" +
                        "       T.NAME,\n" +
                        "       T.COMPANY,\n" +
                        "       T.NON_COMPANY,\n" +
                        "       (T.COMPANY + T.NON_COMPANY) AS TOTAL_AMOUNT\n" +
                        "  FROM (SELECT TB.BOOKING_ID,\n" +
                        "               TB.PROJECT_ID,\n" +
                        "               TBD.NATURE_OF_PAYMENT_ID,\n" +
                        "               TNP.NAME,\n" +
                        "               SUM(TDD.TAX_AMOUNT) AS TAX_AMOUNT,\n" +
                        "               T.PAID_AMOUNT,\n" +
                        "               IFNULL(SUM(TDD.TAX_AMOUNT) - T.PAID_AMOUNT,\n" +
                        "                      SUM(TDD.TAX_AMOUNT)) AS COMPANY,\n" +
                        "               0 AS NON_COMPANY\n" +
                        "          FROM TDS_BOOKING AS TB\n" +
                        "          LEFT JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                        "            ON TB.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                        "          LEFT JOIN TDS_BOOKING_DETAIL AS TBD\n" +
                        "            ON TB.BOOKING_ID = TBD.BOOKING_ID\n" +
                        "          LEFT JOIN TDS_DEDUCTION_DETAIL AS TDD\n" +
                        "            ON TBD.BOOKING_DETAIL_ID = TDD.BOOKING_DETAIL_ID\n" +
                        "          LEFT JOIN TDS_NATURE_PAYMENT AS TNP\n" +
                        "            ON TBD.NATURE_OF_PAYMENT_ID = TNP.NATURE_PAY_ID\n" +
                        "          LEFT JOIN (SELECT TDD.DEDUCTION_DETAIL_ID,\n" +
                        "                           TBD.NATURE_OF_PAYMENT_ID,\n" +
                        "                           SUM(TPD.PAID_AMOUNT) AS PAID_AMOUNT\n" +
                        "                      FROM TDS_DEDUCTION_DETAIL AS TDD\n" +
                        "                      LEFT JOIN TDS_BOOKING_DETAIL AS TBD\n" +
                        "                        ON TDD.BOOKING_DETAIL_ID = TBD.BOOKING_DETAIL_ID\n" +
                        "                      LEFT JOIN TDS_PAYMENT_DETAIL AS TPD\n" +
                        "                        ON TDD.DEDUCTION_DETAIL_ID = TPD.DEDUCTION_DETAIL_ID\n" +
                        "                      LEFT JOIN TDS_PAYMENT AS TP\n" +
                        "                        ON TPD.TDS_PAYMENT_ID = TP.TDS_PAYMENT_ID\n" +
                        "                     WHERE TP.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "                       AND TP.IS_DELETED = 1\n" +
                        "                     GROUP BY TBD.NATURE_OF_PAYMENT_ID) AS T\n" +
                        "            ON TDD.DEDUCTION_DETAIL_ID = T.DEDUCTION_DETAIL_ID\n" +
                        "         WHERE TB.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "           AND TB.IS_DELETED = 1\n" +
                        "           AND VMT.STATUS = 1\n" +
                        "           AND TBD.IS_TDS_DEDUCTED = 1\n" +
                        "           AND TB.BOOKING_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "           AND TB.DEDUCTEE_TYPE_ID IN (5)\n" +
                        "         GROUP BY TBD.NATURE_OF_PAYMENT_ID\n" +
                        "        UNION ALL\n" +
                        "        SELECT TB.BOOKING_ID,\n" +
                        "               TB.PROJECT_ID,\n" +
                        "               TBD.NATURE_OF_PAYMENT_ID,\n" +
                        "               TNP.NAME,\n" +
                        "               SUM(TDD.TAX_AMOUNT) AS TAX_AMOUNT,\n" +
                        "               T.PAID_AMOUNT,\n" +
                        "               0 AS COMPANY,\n" +
                        "               IFNULL(SUM(TDD.TAX_AMOUNT) - T.PAID_AMOUNT,\n" +
                        "                      SUM(TDD.TAX_AMOUNT)) AS NON_COMPANY\n" +
                        "          FROM TDS_BOOKING AS TB\n" +
                        "          LEFT JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                        "            ON TB.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                        "          LEFT JOIN TDS_BOOKING_DETAIL AS TBD\n" +
                        "            ON TB.BOOKING_ID = TBD.BOOKING_ID\n" +
                        "          LEFT JOIN TDS_DEDUCTION_DETAIL AS TDD\n" +
                        "            ON TBD.BOOKING_DETAIL_ID = TDD.BOOKING_DETAIL_ID\n" +
                        "          LEFT JOIN TDS_NATURE_PAYMENT AS TNP\n" +
                        "            ON TBD.NATURE_OF_PAYMENT_ID = TNP.NATURE_PAY_ID\n" +
                        "          LEFT JOIN (SELECT TDD.DEDUCTION_DETAIL_ID,\n" +
                        "                            TBD.NATURE_OF_PAYMENT_ID,\n" +
                        "                            SUM(TPD.PAID_AMOUNT) AS PAID_AMOUNT\n" +
                        "                       FROM TDS_DEDUCTION_DETAIL AS TDD\n" +
                        "                       LEFT JOIN TDS_BOOKING_DETAIL AS TBD\n" +
                        "                         ON TDD.BOOKING_DETAIL_ID = TBD.BOOKING_DETAIL_ID\n" +
                        "                       LEFT JOIN TDS_PAYMENT_DETAIL AS TPD\n" +
                        "                         ON TDD.DEDUCTION_DETAIL_ID = TPD.DEDUCTION_DETAIL_ID\n" +
                        "                       LEFT JOIN TDS_PAYMENT AS TP\n" +
                        "                         ON TPD.TDS_PAYMENT_ID = TP.TDS_PAYMENT_ID\n" +
                        "                      WHERE TP.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "                        AND TP.IS_DELETED = 1\n" +
                        "                      GROUP BY TBD.NATURE_OF_PAYMENT_ID) AS T\n" +
                        "            ON TDD.DEDUCTION_DETAIL_ID = T.DEDUCTION_DETAIL_ID\n" +
                        "         WHERE TB.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "           AND TB.IS_DELETED = 1\n" +
                        "           AND VMT.STATUS = 1\n" +
                        "           AND TBD.IS_TDS_DEDUCTED = 1\n" +
                        "           AND TB.BOOKING_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "           AND TB.DEDUCTEE_TYPE_ID NOT IN (5)\n" +
                        "         GROUP BY TBD.NATURE_OF_PAYMENT_ID) AS T\n" +
                        " ORDER BY T.NAME ASC";
                        break;
                    }
                case ReportSQLCommand.TDS.TDSOutstandingNatureOfPaymentsDrillDown:
                    {
                        query = "SELECT *\n" +
                                "  FROM (SELECT BOOKING_DATE AS DATE,TBD.NATURE_OF_PAYMENT_ID,\n" +
                                "               VMT.VOUCHER_ID,\n" +
                                "               VMT.VOUCHER_NO,\n" +
                                "               IF(TP.VOUCHER_NO IS NULL, VMT.VOUCHER_NO, TP.VOUCHER_NO) AS PAYMENT_VOUCHER_NO,\n" +
                                "               LEDGER_NAME,\n" +
                                "               TB.PARTY_LEDGER_ID,\n" +
                                "               TAX_AMOUNT,\n" +
                                "               TAX_AMOUNT - IF(PAID_AMOUNT IS NULL, 0, PAID_AMOUNT) AS PENDING_AMOUNT,\n" +
                                "               1 SORT_ID,\n" +
                                "               'Journal' AS VOUCHER_TYPE,\n" +
                                "               IF(PAID_AMOUNT IS NULL, 0, PAID_AMOUNT) AS PAID_AMOUNT\n" +
                                "\n" +
                                "          FROM TDS_BOOKING TB\n" +
                                "          LEFT JOIN TDS_BOOKING_DETAIL TBD\n" +
                                "            ON TB.BOOKING_ID = TBD.BOOKING_ID\n" +
                                "          LEFT JOIN TDS_DEDUCTION TD\n" +
                                "            ON TB.VOUCHER_ID = TD.VOUCHER_ID\n" +
                                "          LEFT JOIN TDS_DEDUCTION_DETAIL TDD\n" +
                                "            ON TBD.BOOKING_DETAIL_ID = TDD.BOOKING_DETAIL_ID\n" +
                                "          LEFT JOIN VOUCHER_MASTER_TRANS VMT\n" +
                                "            ON TB.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "          LEFT JOIN MASTER_LEDGER ML\n" +
                                "            ON TB.PARTY_LEDGER_ID = ML.LEDGER_ID\n" +
                                "          LEFT JOIN TDS_PAYMENT_DETAIL PD\n" +
                                "            ON PD.DEDUCTION_DETAIL_ID = TDD.DEDUCTION_DETAIL_ID\n" +
                                "          LEFT JOIN (SELECT TDS_PAYMENT_ID, VOUCHER_NO\n" +
                                "                      FROM TDS_PAYMENT AS TP\n" +
                                "                      LEFT JOIN VOUCHER_MASTER_TRANS VMT\n" +
                                "                        ON TP.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "                     WHERE TP.IS_DELETED = 1) AS TP\n" +
                                "            ON PD.TDS_PAYMENT_ID = TP.TDS_PAYMENT_ID\n" +
                                "         WHERE TBD.NATURE_OF_PAYMENT_ID IN (?NATURE_OF_PAYMENT_ID) AND TB.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "           AND VMT.STATUS = 1\n" +
                                "           AND ML.STATUS = 0\n" +
                                "           AND TB.IS_DELETED = 1\n" +
                                "           AND TD.IS_DELETED = 1\n" +
                                "        UNION\n" +
                                "        SELECT BOOKING_DATE AS DATE,TBD.NATURE_OF_PAYMENT_ID,\n" +
                                "               VMT.VOUCHER_ID,\n" +
                                "               VMT.VOUCHER_NO,\n" +
                                "               IF(TP.VOUCHER_NO IS NULL, 0, TP.VOUCHER_NO) AS PAYMENT_VOUCHER_NO,\n" +
                                "               LEDGER_NAME,\n" +
                                "               TB.PARTY_LEDGER_ID,\n" +
                                "               0 AS TAX_AMOUNT,\n" +
                                "               0 AS PENDING_AMOUNT,\n" +
                                "               2 SORT_ID,\n" +
                                "               'Payment' AS VOUCHER_TYPE,\n" +
                                "               0 AS PAID_AMOUNT\n" +
                                "          FROM TDS_BOOKING TB\n" +
                                "          LEFT JOIN TDS_BOOKING_DETAIL TBD\n" +
                                "            ON TB.BOOKING_ID = TBD.BOOKING_ID\n" +
                                "          LEFT JOIN TDS_DEDUCTION TD\n" +
                                "            ON TB.VOUCHER_ID = TD.VOUCHER_ID\n" +
                                "          LEFT JOIN TDS_DEDUCTION_DETAIL TDD\n" +
                                "            ON TBD.BOOKING_DETAIL_ID = TDD.BOOKING_DETAIL_ID\n" +
                                "          LEFT JOIN VOUCHER_MASTER_TRANS VMT\n" +
                                "            ON TB.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "          LEFT JOIN MASTER_LEDGER ML\n" +
                                "            ON TB.PARTY_LEDGER_ID = ML.LEDGER_ID\n" +
                                "          LEFT JOIN TDS_PAYMENT_DETAIL PD\n" +
                                "            ON PD.DEDUCTION_DETAIL_ID = tDD.DEDUCTION_DETAIL_ID\n" +
                                "          LEFT JOIN (SELECT TDS_PAYMENT_ID, VOUCHER_NO\n" +
                                "                       FROM TDS_PAYMENT AS TP\n" +
                                "                       LEFT JOIN VOUCHER_MASTER_TRANS VMT\n" +
                                "                         ON TP.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "                      WHERE TP.IS_DELETED = 1) AS TP\n" +
                                "            ON PD.TDS_PAYMENT_ID = TP.TDS_PAYMENT_ID\n" +
                                "         WHERE TBD.NATURE_OF_PAYMENT_ID IN (?NATURE_OF_PAYMENT_ID) AND TB.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "           AND VMT.STATUS = 1\n" +
                                "           AND ML.STATUS = 0\n" +
                                "           AND TB.IS_DELETED = 1\n" +
                                "           AND TD.IS_DELETED = 1 HAVING PAYMENT_VOUCHER_NO<>0\n" +
                                "         ORDER BY VOUCHER_ID) AS T\n" +
                                " ORDER BY VOUCHER_ID, SORT_ID;";
                        break;
                    }
                #endregion

                #region TDS Form26Q
                case ReportSQLCommand.TDS.TDSForm26Q:
                    {
                        query = "SELECT VMT.VOUCHER_ID,\n" +
                        "       @s := @s + 1 SR_NUMBER,\n" +
                        "       TP.TDS_PAYMENT_ID,\n" +
                        "       SUM(TPD.PAID_AMOUNT) AS AMOUNT,\n" +
                        "       VMT.VOUCHER_DATE,\n" +
                        "       TS.CODE,\n" +
                        "       TDT.NAME,\n" +
                        "       CONCAT('The ', MP.PROJECT, ' - ', MD.DIVISION) AS PROJECT,\n" +
                        "       MAX(CASE\n" +
                        "             WHEN TPD.FLAG = 1 THEN\n" +
                        "              TPD.PAID_AMOUNT\n" +
                        "           END) AS 'INTEREST_AMOUNT',\n" +
                        "       MAX(CASE\n" +
                        "             WHEN TPD.FLAG = 2 THEN\n" +
                        "              TPD.PAID_AMOUNT\n" +
                        "           END) AS 'PENALTY_AMOUNT',\n" +
                        "       (SUM(TPD.PAID_AMOUNT) - IF((MAX(CASE\n" +
                        "                                         WHEN TPD.FLAG = 1 THEN\n" +
                        "                                          TPD.PAID_AMOUNT\n" +
                        "                                       END)) > 0,\n" +
                        "                                  (MAX(CASE\n" +
                        "                                         WHEN TPD.FLAG = 1 THEN\n" +
                        "                                          TPD.PAID_AMOUNT\n" +
                        "                                       END)),\n" +
                        "                                  0) -\n" +
                        "       IF((MAX(CASE\n" +
                        "                  WHEN TPD.FLAG = 2 THEN\n" +
                        "                   TPD.PAID_AMOUNT\n" +
                        "                END)) > 0,\n" +
                        "           (MAX(CASE\n" +
                        "                  WHEN TPD.FLAG = 2 THEN\n" +
                        "                   TPD.PAID_AMOUNT\n" +
                        "                END)),\n" +
                        "           0)) AS TOTAL_AMOUNT,\n" +
                        "       ML.LEDGER_NAME,\n" +
                        "       TPD.FLAG,\n" +
                        "       TAX_DEDUCTION_ACCOUNT_NO,\n" +
                        "       HEAD_OFFICE_TAN_NO,\n" +
                        "       PAN_NO,\n" +
                        "       TAN_REGISTRATION_NO,\n" +
                        "       INCOME_TAX_CIRCLE,\n" +
                        "       DEDUCTOR_TYPE,\n" +
                        "       RESPONSIBLE_PERSON,\n" +
                        "       SON_DAUGHTER_OF,\n" +
                        "       DESIGNATION,\n" +
                        "       TCD.ADDRESS,\n" +
                        "       FLAT_NO,\n" +
                        "       PREMISES,\n" +
                        "       STREET,\n" +
                        "       LOCATION,\n" +
                        "       DISTRICT,\n" +
                        "       STATE,\n" +
                        "       PINCODE,\n" +
                        "       TELEPHONE_NO,\n" +
                        "       FULL_NAME,\n" +
                        "       'No' AS BOOK_ENTRY,\n" +
                        "       EMAIL\n" +
                        "  FROM (SELECT @s := 0) AS s,\n" +
                        "       TDS_COMPANY_DEDUCTORS AS TCD,\n" +
                        "       TDS_PAYMENT AS TP\n" +
                        "  LEFT JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                        "    ON TP.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                        "  LEFT JOIN TDS_PAYMENT_DETAIL AS TPD\n" +
                        "    ON TP.TDS_PAYMENT_ID = TPD.TDS_PAYMENT_ID\n" +
                        "  LEFT JOIN TDS_DEDUCTION_DETAIL AS TDD\n" +
                        "    ON TPD.DEDUCTION_DETAIL_ID = TDD.DEDUCTION_DETAIL_ID\n" +
                        "  LEFT JOIN TDS_BOOKING_DETAIL AS TBD\n" +
                        "    ON TDD.BOOKING_DETAIL_ID = TBD.BOOKING_DETAIL_ID\n" +
                        "  LEFT JOIN TDS_BOOKING AS TB\n" +
                        "    ON TBD.BOOKING_ID = TB.BOOKING_ID\n" +
                        "  LEFT JOIN TDS_DEDUCTEE_TYPE AS TDT\n" +
                        "    ON TB.DEDUCTEE_TYPE_ID = TDT.DEDUCTEE_TYPE_ID\n" +
                        "  LEFT JOIN TDS_NATURE_PAYMENT AS TNP\n" +
                        "    ON TBD.NATURE_OF_PAYMENT_ID = TNP.NATURE_PAY_ID\n" +
                        "  LEFT JOIN TDS_SECTION AS TS\n" +
                        "    ON TNP.TDS_SECTION_ID = TS.TDS_SECTION_ID\n" +
                        "  LEFT JOIN MASTER_LEDGER AS ML\n" +
                        "    ON TP.PAYMENT_LEDGER_ID = ML.LEDGER_ID\n" +
                        "  LEFT JOIN MASTER_BANK_ACCOUNT AS MBA\n" +
                        "    ON ML.LEDGER_ID = MBA.LEDGER_ID\n" +
                        "  LEFT JOIN MASTER_BANK AS MB\n" +
                        "    ON MBA.BANK_ID = MB.BANK_ID\n" +
                        "  LEFT JOIN MASTER_PROJECT AS MP\n" +
                        "    ON TB.PROJECT_ID = MP.PROJECT_ID\n" +
                        "  LEFT JOIN MASTER_DIVISION AS MD\n" +
                        "    ON MP.DIVISION_ID = MD.DIVISION_ID\n" +
                        " WHERE TB.IS_DELETED = 1\n" +
                        "   AND TP.IS_DELETED = 1\n" +
                        "   AND TP.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   AND ML.STATUS = 0\n" +
                        "   AND VMT.STATUS = 1\n" +
                        "   AND TB.DEDUCTEE_TYPE_ID IN (?DEDUCTEE_TYPE_ID)\n" +
                        "   AND TP.PAYMENT_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "   AND TS.CODE IN ('193',\n" +
                        "                   '194',\n" +
                        "                   '194A',\n" +
                        "                   '194B',\n" +
                        "                   '194C',\n" +
                         "                  '94C',\n" +
                        "                   '194D',\n" +
                        "                   '194EE',\n" +
                        "                   '194F',\n" +
                        "                   '194G',\n" +
                        "                   '194H',\n" +
                        "                   '194I',\n" +
                        "                   '194J',\n" +
                        "                   '194LA')\n" +
                        " GROUP BY VMT.VOUCHER_ID\n" +
                        " ORDER BY SR_NUMBER ASC";

                        break;
                    }
                #endregion

                #region TDS Form27Q
                case ReportSQLCommand.TDS.TDSForm27Q:
                    {
                        query = "SELECT VMT.VOUCHER_ID,\n" +
                        "   @s:=@s+1 SR_NUMBER,\n" +
                        "       TP.TDS_PAYMENT_ID,\n" +
                        "       SUM(TPD.PAID_AMOUNT) AS AMOUNT,\n" +
                        "       VMT.VOUCHER_DATE,\n" +
                        "       TS.CODE,\n" +
                        "       TDT.NAME,\n" +
                        "       CONCAT('The ', MP.PROJECT, ' - ', MD.DIVISION) AS PROJECT,\n" +
                        "       MAX(CASE\n" +
                        "             WHEN TPD.FLAG = 1 THEN\n" +
                        "             TPD.PAID_AMOUNT\n" +
                        "           END) AS 'INTEREST_AMOUNT',\n" +
                        "       MAX(CASE\n" +
                        "             WHEN TPD.FLAG = 2 THEN\n" +
                        "              TPD.PAID_AMOUNT\n" +
                        "           END) AS 'PENALTY_AMOUNT',\n" +
                        "       (SUM(TPD.PAID_AMOUNT) - IF((MAX(CASE\n" +
                        "                              WHEN TPD.FLAG = 1 THEN\n" +
                        "                               TPD.PAID_AMOUNT\n" +
                        "                            END)) > 0,\n" +
                        "                       (MAX(CASE\n" +
                        "                              WHEN  TPD.FLAG = 1 THEN\n" +
                        "                              TPD.PAID_AMOUNT\n" +
                        "                            END)),\n" +
                        "                       0) - IF((MAX(CASE\n" +
                        "                                       WHEN TPD.FLAG = 2 THEN\n" +
                        "                                        TPD.PAID_AMOUNT\n" +
                        "                                     END)) > 0,\n" +
                        "                                (MAX(CASE\n" +
                        "                                       WHEN TPD.FLAG = 2 THEN\n" +
                        "                                        TPD.PAID_AMOUNT\n" +
                        "                                     END)),\n" +
                        "                                0)) AS TOTAL_AMOUNT,\n" +
                        "       ML.LEDGER_NAME,\n" +
                        "       TPD.FLAG,\n" +
                        "       TAX_DEDUCTION_ACCOUNT_NO,\n" +
                        "       HEAD_OFFICE_TAN_NO,\n" +
                        "       PAN_NO,\n" +
                        "       TAN_REGISTRATION_NO,\n" +
                        "       INCOME_TAX_CIRCLE,\n" +
                        "       DEDUCTOR_TYPE,\n" +
                        "       RESPONSIBLE_PERSON,\n" +
                        "       SON_DAUGHTER_OF,\n" +
                        "       DESIGNATION,\n" +
                        "       TCD.ADDRESS,\n" +
                        "       FLAT_NO,\n" +
                        "       PREMISES,\n" +
                        "       STREET,\n" +
                        "       LOCATION,\n" +
                        "       DISTRICT,\n" +
                        "       STATE,\n" +
                        "       PINCODE,\n" +
                        "       TELEPHONE_NO,\n" +
                        "       'No' AS BOOK_ENTRY,\n" +
                        "       EMAIL\n" +
                        "  FROM (SELECT @s:= 0) AS s , TDS_COMPANY_DEDUCTORS AS TCD, TDS_PAYMENT AS TP\n" +
                        "  LEFT JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                        "    ON TP.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                        "  LEFT JOIN TDS_PAYMENT_DETAIL AS TPD\n" +
                        "    ON TP.TDS_PAYMENT_ID = TPD.TDS_PAYMENT_ID\n" +
                        "  LEFT JOIN TDS_DEDUCTION_DETAIL AS TDD\n" +
                        "    ON TPD.DEDUCTION_DETAIL_ID = TDD.DEDUCTION_DETAIL_ID\n" +
                        "  LEFT JOIN TDS_BOOKING_DETAIL AS TBD\n" +
                        "    ON TDD.BOOKING_DETAIL_ID = TBD.BOOKING_DETAIL_ID\n" +
                        "  LEFT JOIN TDS_BOOKING AS TB\n" +
                        "    ON TBD.BOOKING_ID = TB.BOOKING_ID\n" +
                        "  LEFT JOIN TDS_DEDUCTEE_TYPE AS TDT\n" +
                        "    ON TB.DEDUCTEE_TYPE_ID = TDT.DEDUCTEE_TYPE_ID\n" +
                        "  LEFT JOIN TDS_NATURE_PAYMENT AS TNP\n" +
                        "    ON TBD.NATURE_OF_PAYMENT_ID = TNP.NATURE_PAY_ID\n" +
                        "  LEFT JOIN TDS_SECTION AS TS\n" +
                        "    ON TNP.TDS_SECTION_ID = TS.TDS_SECTION_ID\n" +
                        "  LEFT JOIN MASTER_LEDGER AS ML\n" +
                        "    ON TP.PAYMENT_LEDGER_ID = ML.LEDGER_ID\n" +
                        "  LEFT JOIN MASTER_BANK_ACCOUNT AS MBA\n" +
                        "    ON ML.LEDGER_ID = MBA.LEDGER_ID\n" +
                        "  LEFT JOIN MASTER_BANK AS MB\n" +
                        "    ON MBA.BANK_ID = MB.BANK_ID\n" +
                        "  LEFT JOIN MASTER_PROJECT AS MP\n" +
                        "    ON TB.PROJECT_ID = MP.PROJECT_ID\n" +
                        "  LEFT JOIN MASTER_DIVISION AS MD\n" +
                        "    ON MP.DIVISION_ID = MD.DIVISION_ID\n" +
                        " WHERE TB.IS_DELETED = 1\n" +
                        "   AND TP.IS_DELETED = 1\n" +
                        "   AND TP.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   AND ML.STATUS = 0\n" +
                        "   AND VMT.STATUS = 1\n" +
                        "   AND TB.DEDUCTEE_TYPE_ID IN (?DEDUCTEE_TYPE_ID)\n" +
                        "   AND TP.PAYMENT_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "   AND TS.CODE IN('194E','195','196A','196B','196C','196D')\n" +
                        " GROUP BY VMT.VOUCHER_ID ORDER BY SR_NUMBER ASC";
                        break;
                    }
                #endregion

                #region Print Form 16A
                case ReportSQLCommand.TDS.TDSPrintForm16A:
                    {
                        query = " SELECT @s:=@s+1 SR_NUMBER,T.* \n" +
                                " FROM (SELECT @s:= 0) AS s,(SELECT TP.TDS_PAYMENT_ID,\n" +
                                " VMT.VOUCHER_ID,\n" +
                                " TB.BOOKING_DATE AS 'DATE_OF_PAYMENT',\n" +
                                " TP.PAYMENT_DATE AS 'DATE_OF_DEPOSITED',\n" +
                                " TBD.NATURE_OF_PAYMENT_ID,\n" +
                                " TB.DEDUCTEE_TYPE_ID,\n" +
                                " TBD.ASSESS_AMOUNT AS 'AMOUNT_PAID',\n" +
                                " TNP.NAME AS 'NATURE_OF_PAYMENT',\n" +
                                " SUM(TPD.PAID_AMOUNT) AS TAX_PAID_AMOUNT,\n" +
                                " TCD.HEAD_OFFICE_TAN_NO,\n" +
                                " TCD.PAN_NO,\n" +
                                " TCD.RESPONSIBLE_PERSON,\n" +
                                " TCD.SON_DAUGHTER_OF,\n" +
                                " TCD.DESIGNATION,\n" +
                                " CONCAT(TCD.RESPONSIBLE_PERSON,',',TCD.DESIGNATION) AS NAME_DESIGNATION,\n" +
                                " TCD.ADDRESS,\n" +
                                " TCD.FLAT_NO,\n" +
                                " TCD.PREMISES,\n" +
                                " TCD.STREET,\n" +
                                " TCD.LOCATION,\n" +
                                " TCD.DISTRICT,\n" +
                                " TCD.STATE,\n" +
                                " TCD.PINCODE,\n" +
                                " TCD.TELEPHONE_NO,\n" +
                                " TCD.EMAIL,\n" +
                                " TCP.NAME AS 'PARTY_NAME',\n" +
                                " TCP.ADDRESS AS 'PARTY_ADDRESS',\n" +
                                " TCP.STATE_ID,\n" +
                                " TCP.COUNTRY_ID,\n" +
                                " TCD.FULL_NAME,\n" +
                                " TCP.PIN_CODE AS 'PARTY_PIN_CODE',\n" +
                                " TCP.EMAIL AS 'PARTY_EMAIL',\n" +
                                " TCP.PAN_NUMBER AS 'PARTY_PAN_NUMBER'\n" +
                                " FROM TDS_COMPANY_DEDUCTORS AS TCD, TDS_PAYMENT AS TP\n" +
                                " LEFT JOIN TDS_PAYMENT_DETAIL AS TPD\n" +
                                " ON TP.TDS_PAYMENT_ID = TPD.TDS_PAYMENT_ID\n" +
                                " LEFT JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                                " ON TP.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                " LEFT JOIN VOUCHER_TRANS AS VT\n" +
                                " ON TP.PAYMENT_LEDGER_ID = VT.LEDGER_ID\n" +
                                " AND VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                                " LEFT JOIN TDS_DEDUCTION_DETAIL AS TDD\n" +
                                " ON TPD.DEDUCTION_DETAIL_ID = TDD.DEDUCTION_DETAIL_ID\n" +
                                " LEFT JOIN TDS_BOOKING_DETAIL AS TBD\n" +
                                " ON TDD.BOOKING_DETAIL_ID = TBD.BOOKING_DETAIL_ID\n" +
                                " LEFT JOIN TDS_BOOKING AS TB\n" +
                                " ON TBD.BOOKING_ID = TB.BOOKING_ID\n" +
                                " LEFT JOIN TDS_NATURE_PAYMENT AS TNP\n" +
                                " ON TBD.NATURE_OF_PAYMENT_ID = TNP.NATURE_PAY_ID\n" +
                                " LEFT JOIN TDS_SECTION AS TS\n" +
                                " ON TNP.TDS_SECTION_ID = TS.TDS_SECTION_ID\n" +
                                " LEFT JOIN MASTER_LEDGER AS ML\n" +
                                " ON TP.PAYMENT_LEDGER_ID = ML.LEDGER_ID\n" +
                                " LEFT JOIN TDS_CREDTIORS_PROFILE AS TCP\n" +
                                " ON TB.PARTY_LEDGER_ID = TCP.LEDGER_ID\n" +
                                " LEFT JOIN MASTER_BANK_ACCOUNT AS MBA\n" +
                                " ON ML.LEDGER_ID = MBA.LEDGER_ID\n" +
                                " LEFT JOIN MASTER_BANK AS MB\n" +
                                " ON MBA.BANK_ID = MB.BANK_ID\n" +
                                " WHERE TB.IS_DELETED = 1\n" +
                                " AND TP.IS_DELETED = 1\n" +
                                " AND TP.PROJECT_ID IN (?PROJECT_ID)\n" +
                                " AND ML.STATUS = 0\n" +
                                " AND VMT.STATUS = 1\n" +
                                "  AND TB.PARTY_LEDGER_ID IN(?LEDGER_ID)\n" +
                                " AND TBD.NATURE_OF_PAYMENT_ID IN (?NATURE_OF_PAYMENT_ID)\n" +
                                " AND TP.PAYMENT_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                " GROUP BY TP.TDS_PAYMENT_ID ORDER BY VMT.VOUCHER_DATE ASC) AS T";
                        break;
                    }
                #endregion

                #region TDS Form 26
                case ReportSQLCommand.TDS.TDSForm26:
                    {
                        query = "SELECT VMT.VOUCHER_ID,\n" +
                         "       @s := @s + 1 SR_NUMBER,\n" +
                         "       TP.TDS_PAYMENT_ID,\n" +
                         "       SUM(TPD.PAID_AMOUNT) AS AMOUNT,\n" +
                         "       VMT.VOUCHER_DATE,\n" +
                         "       TS.CODE,\n" +
                         "       MAX(CASE\n" +
                         "             WHEN TPD.FLAG = 1 THEN\n" +
                         "              TPD.PAID_AMOUNT\n" +
                         "           END) AS 'INTEREST_AMOUNT',\n" +
                         "       MAX(CASE\n" +
                         "             WHEN TPD.FLAG = 2 THEN\n" +
                         "              TPD.PAID_AMOUNT\n" +
                         "           END) AS 'PENALTY_AMOUNT',\n" +
                         "       (SUM(TPD.PAID_AMOUNT) - IF((MAX(CASE\n" +
                         "                                         WHEN TPD.FLAG = 1 THEN\n" +
                         "                                          TPD.PAID_AMOUNT\n" +
                         "                                       END)) > 0,\n" +
                         "                                  (MAX(CASE\n" +
                         "                                         WHEN TPD.FLAG = 1 THEN\n" +
                         "                                          TPD.PAID_AMOUNT\n" +
                         "                                       END)),\n" +
                         "                                  0) -\n" +
                         "       IF((MAX(CASE\n" +
                         "                  WHEN TPD.FLAG = 2 THEN\n" +
                         "                   TPD.PAID_AMOUNT\n" +
                         "                END)) > 0,\n" +
                         "           (MAX(CASE\n" +
                         "                  WHEN TPD.FLAG = 2 THEN\n" +
                         "                   TPD.PAID_AMOUNT\n" +
                         "                END)),\n" +
                         "           0)) AS TOTAL_AMOUNT,\n" +
                         "       ML.LEDGER_NAME,\n" +
                         "       TPD.FLAG,\n" +
                         "       TAX_DEDUCTION_ACCOUNT_NO,\n" +
                         "       HEAD_OFFICE_TAN_NO,\n" +
                         "       PAN_NO,\n" +
                         "       TAN_REGISTRATION_NO,\n" +
                         "       INCOME_TAX_CIRCLE,\n" +
                         "       DEDUCTOR_TYPE,\n" +
                         "       RESPONSIBLE_PERSON,\n" +
                         "       SON_DAUGHTER_OF,\n" +
                         "       DESIGNATION,\n" +
                         "       TCD.ADDRESS,\n" +
                         "       FLAT_NO,\n" +
                         "       PREMISES,\n" +
                         "       STREET,\n" +
                         "       LOCATION,\n" +
                         "       DISTRICT,\n" +
                         "       STATE,\n" +
                         "       PINCODE,\n" +
                         "       TELEPHONE_NO,\n" +
                         "       FULL_NAME,\n" +
                         "       'No' AS BOOK_ENTRY,\n" +
                         "       EMAIL\n" +
                         "  FROM (SELECT @s := 0) AS s,\n" +
                         "       TDS_COMPANY_DEDUCTORS AS TCD,\n" +
                         "       TDS_PAYMENT AS TP\n" +
                         "  LEFT JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                         "    ON TP.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                         "  LEFT JOIN TDS_PAYMENT_DETAIL AS TPD\n" +
                         "    ON TP.TDS_PAYMENT_ID = TPD.TDS_PAYMENT_ID\n" +
                         "  LEFT JOIN TDS_DEDUCTION_DETAIL AS TDD\n" +
                         "    ON TPD.DEDUCTION_DETAIL_ID = TDD.DEDUCTION_DETAIL_ID\n" +
                         "  LEFT JOIN TDS_BOOKING_DETAIL AS TBD\n" +
                         "    ON TDD.BOOKING_DETAIL_ID = TBD.BOOKING_DETAIL_ID\n" +
                         "  LEFT JOIN TDS_BOOKING AS TB\n" +
                         "    ON TBD.BOOKING_ID = TB.BOOKING_ID\n" +
                         "  LEFT JOIN TDS_NATURE_PAYMENT AS TNP\n" +
                         "    ON TBD.NATURE_OF_PAYMENT_ID = TNP.NATURE_PAY_ID\n" +
                         "  LEFT JOIN TDS_SECTION AS TS\n" +
                         "    ON TNP.TDS_SECTION_ID = TS.TDS_SECTION_ID\n" +
                         "  LEFT JOIN MASTER_LEDGER AS ML\n" +
                         "    ON TP.PAYMENT_LEDGER_ID = ML.LEDGER_ID\n" +
                         "  LEFT JOIN MASTER_BANK_ACCOUNT AS MBA\n" +
                         "    ON ML.LEDGER_ID = MBA.LEDGER_ID\n" +
                         "  LEFT JOIN MASTER_BANK AS MB\n" +
                         "    ON MBA.BANK_ID = MB.BANK_ID\n" +
                         " WHERE TB.IS_DELETED = 1\n" +
                         "   AND TP.IS_DELETED = 1\n" +
                         "   AND TP.PROJECT_ID IN (?PROJECT_ID)\n" +
                         "   AND ML.STATUS = 0\n" +
                         "   AND VMT.STATUS = 1\n" +
                         "   AND TB.DEDUCTEE_TYPE_ID IN (?DEDUCTEE_TYPE_ID)\n" +
                         "   AND TP.PAYMENT_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                         "   AND TS.CODE IN ('193',\n" +
                         "                   '194',\n" +
                         "                   '194A',\n" +
                         "                   '194B',\n" +
                         "                   '194C',\n" +
                         "                   '194D',\n" +
                         "                   '194EE',\n" +
                         "                   '194F',\n" +
                         "                   '194G',\n" +
                         "                   '194H',\n" +
                         "                   '194I',\n" +
                         "                    '94C',\n" +
                         "                   '194J',\n" +
                         "                   '194LA')\n" +
                         " GROUP BY VMT.VOUCHER_ID\n" +
                         " ORDER BY SR_NUMBER";


                        break;
                    }
                #endregion

                #region TDS Form 27
                case ReportSQLCommand.TDS.TDSForm27:
                    {
                        query = "SELECT VMT.VOUCHER_ID,\n" +
                            "    @s:=@s+1 SR_NUMBER,\n" +
                        "       TP.TDS_PAYMENT_ID,\n" +
                        "       SUM(TPD.PAID_AMOUNT) AS AMOUNT,\n" +
                        "       VMT.VOUCHER_DATE,\n" +
                        "       TS.CODE,\n" +
                        "       MAX(CASE\n" +
                        "             WHEN TPD.FLAG = 1 THEN\n" +
                        "              TPD.PAID_AMOUNT\n" +
                        "           END) AS 'INTEREST_AMOUNT',\n" +
                        "       MAX(CASE\n" +
                        "             WHEN TPD.FLAG = 2 THEN\n" +
                        "              TPD.PAID_AMOUNT\n" +
                        "           END) AS 'PENALTY_AMOUNT',\n" +
                        "       (SUM(TPD.PAID_AMOUNT)  - IF((MAX(CASE\n" +
                        "                              WHEN TPD.FLAG = 1 THEN\n" +
                        "                              TPD.PAID_AMOUNT\n" +
                        "                            END)) > 0,\n" +
                        "                       (MAX(CASE\n" +
                        "                              WHEN TPD.FLAG = 1 THEN\n" +
                        "                              TPD.PAID_AMOUNT\n" +
                        "                            END)),\n" +
                        "                       0) - IF((MAX(CASE\n" +
                        "                                       WHEN TPD.FLAG = 2 THEN\n" +
                        "                                       TPD.PAID_AMOUNT\n" +
                        "                                     END)) > 0,\n" +
                        "                                (MAX(CASE\n" +
                        "                                       WHEN  TPD.FLAG = 2 THEN\n" +
                        "                                        TPD.PAID_AMOUNT\n" +
                        "                                     END)),\n" +
                        "                                0)) AS TOTAL_AMOUNT,\n" +
                        "       ML.LEDGER_NAME,\n" +
                        "       TPD.FLAG,\n" +
                        "       TAX_DEDUCTION_ACCOUNT_NO,\n" +
                        "       HEAD_OFFICE_TAN_NO,\n" +
                        "       PAN_NO,\n" +
                        "       TAN_REGISTRATION_NO,\n" +
                        "       INCOME_TAX_CIRCLE,\n" +
                        "       DEDUCTOR_TYPE,\n" +
                        "       RESPONSIBLE_PERSON,\n" +
                        "       SON_DAUGHTER_OF,\n" +
                        "       DESIGNATION,\n" +
                        "       TCD.ADDRESS,\n" +
                        "       FLAT_NO,\n" +
                        "       PREMISES,\n" +
                        "       STREET,\n" +
                        "       LOCATION,\n" +
                        "       DISTRICT,\n" +
                        "       STATE,\n" +
                        "       PINCODE,\n" +
                        "       TELEPHONE_NO,\n" +
                        "       'No' AS BOOK_ENTRY,\n" +
                        "       EMAIL\n" +
                        "  FROM (SELECT @s:= 0) AS s , TDS_COMPANY_DEDUCTORS AS TCD, TDS_PAYMENT AS TP\n" +
                        "  LEFT JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                        "    ON TP.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                        "  LEFT JOIN TDS_PAYMENT_DETAIL AS TPD\n" +
                        "    ON TP.TDS_PAYMENT_ID = TPD.TDS_PAYMENT_ID\n" +
                        "  LEFT JOIN TDS_DEDUCTION_DETAIL AS TDD\n" +
                        "    ON TPD.DEDUCTION_DETAIL_ID = TDD.DEDUCTION_DETAIL_ID\n" +
                        "  LEFT JOIN TDS_BOOKING_DETAIL AS TBD\n" +
                        "    ON TDD.BOOKING_DETAIL_ID = TBD.BOOKING_DETAIL_ID\n" +
                        "  LEFT JOIN TDS_BOOKING AS TB\n" +
                        "    ON TBD.BOOKING_ID = TB.BOOKING_ID\n" +
                        "  LEFT JOIN TDS_NATURE_PAYMENT AS TNP\n" +
                        "    ON TBD.NATURE_OF_PAYMENT_ID = TNP.NATURE_PAY_ID\n" +
                        "  LEFT JOIN TDS_SECTION AS TS\n" +
                        "    ON TNP.TDS_SECTION_ID = TS.TDS_SECTION_ID\n" +
                        "  LEFT JOIN MASTER_LEDGER AS ML\n" +
                        "    ON TP.PAYMENT_LEDGER_ID = ML.LEDGER_ID\n" +
                        "  LEFT JOIN MASTER_BANK_ACCOUNT AS MBA\n" +
                        "    ON ML.LEDGER_ID = MBA.LEDGER_ID\n" +
                        "  LEFT JOIN MASTER_BANK AS MB\n" +
                        "    ON MBA.BANK_ID = MB.BANK_ID\n" +
                        " WHERE TB.IS_DELETED = 1\n" +
                        "   AND TP.IS_DELETED = 1\n" +
                        "   AND TP.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   AND ML.STATUS = 0\n" +
                        "   AND VMT.STATUS = 1\n" +
                        "   AND TB.DEDUCTEE_TYPE_ID IN (?DEDUCTEE_TYPE_ID)\n" +
                        "   AND TP.PAYMENT_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "   AND TS.CODE IN('194E','195','196A','196B','196C','196D')\n" +
                        " GROUP BY VMT.VOUCHER_ID  ORDER BY SR_NUMBER ASC";
                        break;
                    }
                #endregion

                #region TDS Challan
                case ReportSQLCommand.TDS.TDSChallan:
                    {
                        query = "SELECT T.DEDUCTEE_TYPE_ID,\n" +
                        "       T.TDS_PAYMENT_ID,\n" +
                        "       T.VOUCHER_ID,\n" +
                        "       T.VOUCHER_DATE,\n" +
                        "       T.PAYMENT_CODE,\n" +
                        "       T.CODE,\n" +
                        "       T.AMOUNT,\n" +
                        "       T.NAME,\n" +
                        "       T.INTEREST_AMOUNT,\n" +
                        "       T.PENALTY_AMOUNT,\n" +
                        "       IF(CASE\n" +
                        "            WHEN T.INTEREST_AMOUNT > 0 OR T.PENALTY_AMOUNT THEN\n" +
                        "             T.AMOUNT - (T.INTEREST_AMOUNT + T.PENALTY_AMOUNT)\n" +
                        "          END > 0,\n" +
                        "          (CASE\n" +
                        "            WHEN T.INTEREST_AMOUNT > 0 OR T.PENALTY_AMOUNT THEN\n" +
                        "             T.AMOUNT - (T.INTEREST_AMOUNT + T.PENALTY_AMOUNT)\n" +
                        "          END),\n" +
                        "          T.AMOUNT) AS TOTAL_AMOUNT,\n" +
                        "       T.LEDGER_NAME,\n" +
                        "       T.PROJECT,\n" +
                        "       T.CHEQUE_NO,\n" +
                        "       T.MATERIALIZED_ON,\n" +
                        "       T.TANNO,\n" +
                        "       T.HEAD_OFFICE_TAN_NO,\n" +
                        "       T.PAN_NO,\n" +
                        "       T.TAN_REGISTRATION_NO,\n" +
                        "       T.INCOME_TAX_CIRCLE,\n" +
                        "       T.DEDUCTOR_TYPE,\n" +
                        "       T.RESPONSIBLE_PERSON,\n" +
                        "       T.SON_DAUGHTER_OF,\n" +
                        "       T.DESIGNATION,\n" +
                        "       T.DEDUCTOR_ADDRESS,\n" +
                        "       T.FLAT_NO,\n" +
                            //  "       T.ADDRESS,\n" +
                        "       T.PREMISES,\n" +
                        "       T.STREET,\n" +
                        "       T.LOCATION,\n" +
                        "       T.ADDRESS,\n" +
                        "       T.DISTRICT,\n" +
                        "       T.STATE AS STATE_NAME,\n" +
                            //"       T.FULL_NAME,\n" +
                        "       T.PINCODE,\n" +
                        "       T.PHONE,\n" +
                        "       T.DEDUCTEE_ADDRESS,\n" +
                        "       T.FULL_NAME,\n" +
                        "       T.EMAIL\n" +
                        "  FROM (SELECT TB.DEDUCTEE_TYPE_ID,\n" +
                        "               TP.TDS_PAYMENT_ID,\n" +
                        "               TP.VOUCHER_ID,\n" +
                        "               VMT.VOUCHER_DATE,\n" +
                        "               TNP.PAYMENT_CODE,\n" +
                        "               TD.CODE,\n" +
                        "               TDT.NAME,\n" +
                        "               UPPER(CONCAT('THE ', MP.PROJECT)) AS PROJECT,\n" +
                        "               SUM(TPD.PAID_AMOUNT) AS AMOUNT,\n" +
                        "               IF(MAX(CASE\n" +
                        "                        WHEN TPD.FLAG = 1 THEN\n" +
                        "                         TPD.PAID_AMOUNT\n" +
                        "                      END) <> 0,\n" +
                        "                  MAX(CASE\n" +
                        "                        WHEN TPD.FLAG = 1 THEN\n" +
                        "                         TPD.PAID_AMOUNT\n" +
                        "                      END),\n" +
                        "                  0) AS 'INTEREST_AMOUNT',\n" +
                        "               IF(MAX(CASE\n" +
                        "                        WHEN TPD.FLAG = 2 THEN\n" +
                        "                         TPD.PAID_AMOUNT\n" +
                        "                      END) <> 0,\n" +
                        "                  MAX(CASE\n" +
                        "                        WHEN TPD.FLAG = 2 THEN\n" +
                        "                         TPD.PAID_AMOUNT\n" +
                        "                      END),\n" +
                        "                  0) AS 'PENALTY_AMOUNT',\n" +
                        "\n" +
                        "               TRIM(BOTH '- ' FROM T.LEDGER_NAME) AS LEDGER_NAME,\n" +
                        "               T.CHEQUE_NO,\n" +
                        "               T.MATERIALIZED_ON,\n" +
                        "               HEAD_OFFICE_TAN_NO AS TANNO,\n" +
                        "               HEAD_OFFICE_TAN_NO,\n" +
                        "               PAN_NO,\n" +
                        "               TAN_REGISTRATION_NO,\n" +
                        "               FULL_NAME,\n" +
                        "               INCOME_TAX_CIRCLE,\n" +
                        "               DEDUCTOR_TYPE,\n" +
                        "               RESPONSIBLE_PERSON,\n" +
                        "               SON_DAUGHTER_OF,\n" +
                        "               DESIGNATION,\n" +
                        "               CONCAT(IF(TCP.ADDRESS  <> '',\n" +
                        "               CONCAT(TCP.ADDRESS , ' ,'),\n" +
                        "                  ''),\n" +
                        "               IF(FLAT_NO <> '',\n" +
                        "               CONCAT(FLAT_NO, ' ,'),\n" +
                        "               ''),\n" +
                        "               IF(STREET <> '', CONCAT(STREET ,' ,'), ''),\n" +
                        "               IF(DISTRICT<>'',CONCAT(DISTRICT,' -'),''),\n" +
                        "               IF(PINCODE<>'' ,CONCAT(PINCODE),'')) AS DEDUCTOR_ADDRESS,\n" +
                            //  "               CONCAT(IF(FLAT_NO <> '',\n" +
                            //"               CONCAT(FLAT_NO, ' ,'),\n" +
                            //"               ''),\n" +
                            //"               IF(STREET <> '', CONCAT(STREET ,' ,'), ''),\n" +
                            //"               IF(DISTRICT<>'',CONCAT(DISTRICT,' -'),''),\n" +
                            //"               IF(PINCODE<>'' ,CONCAT(PINCODE),'')) AS DEDUCTOR_ADDRESS,\n" +
                        "               FLAT_NO,\n" +
                        "               PREMISES,\n" +
                        "               STREET,\n" +
                        "               LOCATION,\n" +
                        "               DISTRICT,\n" +
                        "               TCP.STATE,\n" +
                        "               TCP.ADDRESS,\n" +
                        "               PINCODE,\n" +
                        "               TELEPHONE_NO AS PHONE,\n" +
                        "               CONCAT(IF(TC.ADDRESS  <> '',\n" +
                        "               CONCAT(TC.ADDRESS , ' -'),\n" +
                        "                                          ''),\n" +
                        "               IF(TC.PIN_CODE <> '',\n" +
                        "               CONCAT(TC.PIN_CODE),'')) AS DEDUCTEE_ADDRESS, \n" +
                        "               TCP.EMAIL\n" +
                        "          FROM TDS_COMPANY_DEDUCTORS AS TCP, TDS_PAYMENT AS TP\n" +
                        "          LEFT JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                        "            ON TP.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                        "          LEFT JOIN MASTER_PROJECT AS MP\n" +
                        "            ON TP.PROJECT_ID = MP.PROJECT_ID\n" +
                        "          LEFT JOIN TDS_PAYMENT_DETAIL AS TPD\n" +
                        "            ON TP.TDS_PAYMENT_ID = TPD.TDS_PAYMENT_ID\n" +
                        "          LEFT JOIN TDS_DEDUCTION_DETAIL AS TDD\n" +
                        "            ON TPD.DEDUCTION_DETAIL_ID = TDD.DEDUCTION_DETAIL_ID\n" +
                        "          LEFT JOIN TDS_BOOKING_DETAIL AS TBD\n" +
                        "            ON TDD.BOOKING_DETAIL_ID = TBD.BOOKING_DETAIL_ID\n" +
                        "          LEFT JOIN TDS_BOOKING AS TB\n" +
                        "            ON TBD.BOOKING_ID = TB.BOOKING_ID\n" +
                        "          LEFT JOIN TDS_NATURE_PAYMENT AS TNP\n" +
                        "            ON TBD.NATURE_OF_PAYMENT_ID = TNP.NATURE_PAY_ID\n" +
                        "          LEFT JOIN TDS_SECTION AS TD\n" +
                        "            ON TNP.TDS_SECTION_ID = TD.TDS_SECTION_ID\n" +
                        "          LEFT JOIN TDS_CREDTIORS_PROFILE AS TC \n" +
                        "           ON TB.PARTY_LEDGER_ID=TC.LEDGER_ID \n" +
                        "           LEFT JOIN TDS_DEDUCTEE_TYPE AS TDT\n" +
                        "           ON TB.DEDUCTEE_TYPE_ID=TDT.DEDUCTEE_TYPE_ID\n" +
                        "          LEFT JOIN (SELECT 0 AS DEDUCTEE_TYPE_ID,\n" +
                        "                           TP.TDS_PAYMENT_ID,\n" +
                        "                           TP.VOUCHER_ID,\n" +
                        "                           '' AS PAYMENT_CODE,\n" +
                        "                           '' AS CODE,\n" +
                        "                           SUM(VT.AMOUNT) AS AMOUNT,\n" +
                        "                           0 AS INTEREST_LEDGER,\n" +
                        "                           0 AS PENALTY,\n" +
                        " CONCAT(IF(MB.BANK  <> '',\n" +
                        " CONCAT(MB.BANK  , ' - '),\n" +
                        " ''),\n" +
                        " IF(ML.LEDGER_NAME <> '',\n" +
                        " CONCAT(ML.LEDGER_NAME, ' - '),\n" +
                        " ''),\n" +
                        " IF(MB.BRANCH <> '', CONCAT(MB.BRANCH), '')) AS LEDGER_NAME,\n" +
                        "                           VT.CHEQUE_NO,VT.MATERIALIZED_ON \n" +
                        "                      FROM TDS_COMPANY_DEDUCTORS AS TCP, TDS_PAYMENT AS TP\n" +
                        "                     INNER JOIN VOUCHER_MASTER_TRANS AS VMT\n" +
                        "                        ON TP.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                        "                     INNER JOIN VOUCHER_TRANS AS VT\n" +
                        "                        ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                        "                     INNER JOIN MASTER_LEDGER AS ML\n" +
                        "                        ON VT.LEDGER_ID = ML.LEDGER_ID\n" +
                        "                      LEFT JOIN MASTER_BANK_ACCOUNT AS MBA\n" +
                        "                        ON ML.LEDGER_ID = MBA.LEDGER_ID\n" +
                        "                      LEFT JOIN MASTER_BANK AS MB\n" +
                        "                        ON MBA.BANK_ID = MB.BANK_ID\n" +
                        "                     WHERE TP.VOUCHER_ID IN (?VOUCHER_ID)\n" +
                        "                       AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "                       AND TP.IS_DELETED = 1\n" +
                        "                       AND VT.TRANS_MODE = 'CR'\n" +
                        "                     GROUP BY VMT.VOUCHER_ID) AS T\n" +
                        "            ON TP.VOUCHER_ID = T.VOUCHER_ID\n" +
                        "         WHERE TP.VOUCHER_ID IN (?VOUCHER_ID)\n" +
                        "           AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "           AND VMT.STATUS=1\n" +
                        "           AND TP.IS_DELETED = 1\n" +
                        "           AND TB.IS_DELETED = 1\n" +
                        "         GROUP BY TPD.TDS_PAYMENT_ID) AS T";

                        break;
                    }
                #endregion

                #region TDS Print Form16A Quarter
                case ReportSQLCommand.TDS.TDSPrintForm16AQuarter:
                    {
                        query = "SELECT QUARTER(TP.PAYMENT_DATE) AS quarter,\n" +
                         "       COUNT(TP.PAYMENT_DATE) AS COUNT,\n" +
                         "       VMT.VOUCHER_ID,\n" +
                         "       VOUCHER_DATE,\n" +
                         "       SUM(TPD.PAID_AMOUNT) AS AMOUNT\n" +
                         "  FROM VOUCHER_MASTER_TRANS AS VMT\n" +
                         " INNER JOIN VOUCHER_TRANS AS VT\n" +
                         "    ON VMT.VOUCHER_ID = VT.VOUCHER_ID\n" +
                         " INNER JOIN TDS_PAYMENT AS TP\n" +
                         "    ON VMT.VOUCHER_ID = TP.VOUCHER_ID\n" +
                         " INNER JOIN TDS_PAYMENT_DETAIL AS TPD\n" +
                         "    ON TP.TDS_PAYMENT_ID = TPD.TDS_PAYMENT_ID\n" +
                         "  LEFT JOIN TDS_DEDUCTION_DETAIL AS TDD\n" +
                         "    ON TPD.DEDUCTION_DETAIL_ID = TDD.DEDUCTION_DETAIL_ID\n" +
                         "  LEFT JOIN TDS_BOOKING_DETAIL AS TBD\n" +
                         "    ON TDD.BOOKING_DETAIL_ID = TBD.BOOKING_DETAIL_ID\n" +
                         "  LEFT JOIN TDS_BOOKING AS TB\n" +
                         "    ON TBD.BOOKING_ID = TB.BOOKING_ID\n" +
                         "  LEFT JOIN TDS_NATURE_PAYMENT AS TNP\n" +
                         "    ON TBD.NATURE_OF_PAYMENT_ID = TNP.NATURE_PAY_ID\n" +
                         " WHERE VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                         "   AND TB.PARTY_LEDGER_ID IN (?LEDGER_ID)\n" +
                         "   AND TBD.NATURE_OF_PAYMENT_ID IN (?NATURE_OF_PAYMENT_ID)\n" +
                         "   AND VMT.STATUS = 1\n" +
                         "   AND TP.PROJECT_ID IN (?PROJECT_ID)\n" +
                         "   AND VMT.VOUCHER_TYPE = 'PY'\n" +
                         "   AND VT.TRANS_MODE = 'CR'\n" +
                         " GROUP BY QUARTER(TP.PAYMENT_DATE)\n" +
                         " ORDER BY QUARTER(TP.PAYMENT_DATE)";
                        break;
                    }
                #endregion
            }
            return query;
        }
    }
    #endregion

    #region AssetReport
    public class ReportAssetSQL
    {
        public string GetAssetReportSQL(ReportSQLCommand.Asset queryId)
        {
            string query = string.Empty;
            switch (queryId)
            {
                #region Purchase Register
                case ReportSQLCommand.Asset.PurchaseRegister:
                    {
                        //query = "SELECT AIM.IN_OUT_ID,\n" +
                        //        "       VOUCHER_NO,\n" +
                        //        "       IN_OUT_DATE,\n" +
                        //        "       FLAG,\n" +
                        //        "       ASSET_CLASS,\n" +
                        //        "       ASSET_ITEM,\n" +
                        //        "       QUANTITY,\n" +
                        //        "       TOT_AMOUNT,\n" +
                        //        "       AIDD.AMOUNT,\n" +
                        //        "       BILL_INVOICE_NO,\n" +
                        //        "       AIM.PROJECT_ID,\n" +
                        //        "       VENDOR\n" +
                        //        "  FROM ASSET_IN_OUT_MASTER AIM\n" +
                        //        " INNER JOIN ASSET_IN_OUT_DETAIL AID\n" +
                        //        "    ON AIM.IN_OUT_ID = AID.IN_OUT_ID\n" +
                        //        " INNER JOIN ASSET_ITEM AI\n" +
                        //        "    ON AID.ITEM_ID = AI.ITEM_ID\n" +
                        //        " INNER JOIN ASSET_CLASS AC\n" +
                        //        "    ON AI.ASSET_CLASS_ID = AC.ASSET_CLASS_ID\n" +
                        //        " INNER JOIN ASSET_ITEM_DETAIL AIDD\n" +
                        //        "    ON AID.ITEM_ID = AIDD.ITEM_ID\n" +
                        //        " INNER JOIN ASSET_STOCK_VENDOR ASV\n" +
                        //        "    ON ASV.VENDOR_ID = AIM.VENDOR_ID\n" +
                        //        " INNER JOIN VOUCHER_MASTER_TRANS VMT\n" +
                        //        "    ON AIM.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                        //        "   AND AIM.PROJECT_ID = VMT.PROJECT_ID\n" +
                        //        "   AND IN_OUT_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        //        "   AND FLAG = 'PU'\n" +
                        //        " WHERE AIM.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //        " GROUP BY IN_OUT_DETAIL_ID\n" +
                        //        " ORDER BY IN_OUT_DATE, IN_OUT_ID";


                        query = "SELECT AIM.IN_OUT_ID,\n" +
                         "       VOUCHER_NO,\n" +
                         "       IN_OUT_DATE,\n" +
                         "       FLAG,\n" +
                         "      IF(PARENT.ASSET_CLASS='Primary', AC.ASSET_CLASS,PARENT.ASSET_CLASS)  AS PARENT_CLASS,\n" +
                         "       AC.ASSET_CLASS,\n" +
                         "       ASSET_ITEM,\n" +
                         "       QUANTITY,\n" +
                         "       TOT_AMOUNT,\n" +
                         "       SUM(AIDD.AMOUNT) AS AMOUNT,\n" +
                         "       BILL_INVOICE_NO,\n" +
                         "       AIM.PROJECT_ID,\n" +
                         "       VENDOR\n" +
                         "  FROM ASSET_IN_OUT_MASTER AIM\n" +
                         " INNER JOIN ASSET_IN_OUT_DETAIL AID\n" +
                         "    ON AIM.IN_OUT_ID = AID.IN_OUT_ID\n" +
                         " INNER JOIN ASSET_ITEM AI\n" +
                         "    ON AID.ITEM_ID = AI.ITEM_ID\n" +
                         " INNER JOIN ASSET_CLASS AC\n" +
                         "    ON AI.ASSET_CLASS_ID = AC.ASSET_CLASS_ID\n" +
                         " INNER JOIN ASSET_ITEM_DETAIL AIDD\n" +
                         "    ON AID.ITEM_ID = AIDD.ITEM_ID\n" +
                         " INNER JOIN ASSET_STOCK_VENDOR ASV\n" +
                         "    ON ASV.VENDOR_ID = AIM.VENDOR_ID\n" +
                         " INNER JOIN VOUCHER_MASTER_TRANS VMT\n" +
                         "    ON AIM.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                         "   AND AIM.PROJECT_ID = VMT.PROJECT_ID\n" +
                         "   AND IN_OUT_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                         "   AND FLAG = 'PU'\n" +
                         "  LEFT JOIN ASSET_CLASS PARENT\n" +
                         "    ON AC.PARENT_CLASS_ID = PARENT.ASSET_CLASS_ID\n" +
                         " WHERE AIM.PROJECT_ID IN (?PROJECT_ID) AND IF(?CURRENCY_COUNTRY_ID > 0, VMT.CURRENCY_COUNTRY_ID = ?CURRENCY_COUNTRY_ID, 1=1) \n" +
                         " GROUP BY IN_OUT_DETAIL_ID\n" +
                         " ORDER BY IN_OUT_DATE, IN_OUT_ID;";



                        break;
                    }

                case ReportSQLCommand.Asset.SalesDisposeDonateRegister:
                    {
                        query = "SELECT AIM.IN_OUT_ID,\n" +
                                "       VOUCHER_NO,\n" +
                                "       DATE(IN_OUT_DATE) AS IN_OUT_DATE,\n" +
                                "       CASE\n" +
                                "         WHEN FLAG = 'SL' THEN\n" +
                                "          'Sales'\n" +
                                "         WHEN FLAG = 'DN' THEN\n" +
                                "          'Donate'\n" +
                                "         WHEN FLAG = 'DS' THEN\n" +
                                "          'Disposal'\n" +
                                "       END AS TYPE,\n" +
                                "       SOLD_TO AS PARTY,\n" +
                                "       AC.ASSET_CLASS,IF(PARENT.ASSET_CLASS='Primary', AC.ASSET_CLASS,PARENT.ASSET_CLASS)  AS PARENT_CLASS,\n" +
                                "       ASSET_ITEM,\n" +
                                "       -- ITEM_ID,\n" +
                                "       QUANTITY,\n" +
                                "       AMOUNT,\n" +
                                "       BILL_INVOICE_NO,\n" +
                                "       AIM.PROJECT_ID,VMT.NARRATION\n" +
                                "  FROM ASSET_IN_OUT_MASTER AIM\n" +
                                " INNER JOIN ASSET_IN_OUT_DETAIL AID\n" +
                                "    ON AIM.IN_OUT_ID = AID.IN_OUT_ID\n" +
                                " INNER JOIN ASSET_ITEM AI\n" +
                                "    ON AID.ITEM_ID = AI.ITEM_ID\n" +
                                " INNER JOIN ASSET_CLASS AC\n" +
                                "    ON AI.ASSET_CLASS_ID = AC.ASSET_CLASS_ID\n" +
                                " INNER JOIN ASSET_CLASS PARENT \n" +
                                "  ON AC.PARENT_CLASS_ID = PARENT.ASSET_CLASS_ID \n" +
                                " INNER JOIN VOUCHER_MASTER_TRANS VMT\n" +
                                "    ON AIM.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                "   AND AIM.PROJECT_ID = VMT.PROJECT_ID\n" +
                                "   AND IN_OUT_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "   AND FIND_IN_SET(FLAG, 'SL,DS,DN')\n" +
                                " WHERE AIM.PROJECT_ID IN (?PROJECT_ID)\n" +
                                " ORDER BY IN_OUT_DATE, IN_OUT_ID,AC.ASSET_CLASS,AI.ASSET_ITEM ASC;";
                        break;
                    }

                case ReportSQLCommand.Asset.AssetAMCRegister:
                    {
                        //query = "SELECT AC.ASSET_CLASS,\n" +
                        //"       AARM.AMC_GROUP AS 'ASSET_GROUP',\n" +
                        //"       AARM.PROVIDER,\n" +
                        //"       AARH.RENEWAL_DATE AS 'DATE_OF_AMC',\n" +
                        //"       AARH.PREMIUM_AMOUNT,\n" +
                        //"       AARH.AMC_FROM AS 'AMC_FROM',\n" +
                        //"       AARH.AMC_TO AS 'AMC_TO',\n" +
                        //"       AARH.AMC_TO AS 'RENEWAL_DATE'\n" +
                        //"  FROM ASSET_AMC_RENEWAL_MASTER AARM\n" +
                        //"  LEFT JOIN ASSET_AMC_RENEWAL_HISTORY AARH\n" +
                        //"    ON AARH.AMC_ID = AARH.AMC_ID\n" +
                        //"  LEFT JOIN ASSET_AMC_ITEM_MAPPING AAIM\n" +
                        //"    ON AAIM.AMC_ID = AARM.AMC_ID\n" +
                        //"  LEFT JOIN ASSET_ITEM_DETAIL AID\n" +
                        //"    ON AAIM.ITEM_DETAIL_ID = AID.ITEM_DETAIL_ID\n" +
                        //"  LEFT JOIN ASSET_ITEM AI\n" +
                        //"    ON AI.ITEM_ID = AID.ITEM_ID\n" +
                        //"  LEFT JOIN ASSET_CLASS AC\n" +
                        //"    ON AC.ASSET_CLASS_ID = AI.ASSET_CLASS_ID\n" +
                        //" WHERE AARM.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //"   AND RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        //" GROUP BY AARH.AMC_RENEWAL_ID;";

                        query = "\n" +
                        "SELECT IF(PARENT.ASSET_CLASS='Primary', AC.ASSET_CLASS, PARENT.ASSET_CLASS)  AS PARENT_CLASS,\n" +
                        "       AC.ASSET_CLASS,\n" +
                        "       AARM.AMC_GROUP      AS 'ASSET_GROUP',\n" +
                        "       AARM.PROVIDER,\n" +
                        "       AARH.RENEWAL_DATE   AS 'DATE_OF_AMC',\n" +
                        "       AARH.PREMIUM_AMOUNT,\n" +
                        "       AARH.AMC_FROM       AS 'AMC_FROM',\n" +
                        "       AARH.AMC_TO         AS 'AMC_TO',\n" +
                        "       AARH.AMC_TO         AS 'RENEWAL_DATE'\n" +
                        "  FROM ASSET_AMC_RENEWAL_MASTER AARM\n" +
                        "  LEFT JOIN ASSET_AMC_RENEWAL_HISTORY AARH\n" +
                        "    ON AARM.AMC_ID = AARH.AMC_ID\n" +
                        "  LEFT JOIN ASSET_AMC_ITEM_MAPPING AAIM\n" +
                        "    ON AAIM.AMC_ID = AARM.AMC_ID\n" +
                        "  LEFT JOIN ASSET_ITEM_DETAIL AID\n" +
                        "    ON AAIM.ITEM_DETAIL_ID = AID.ITEM_DETAIL_ID\n" +
                        "  LEFT JOIN ASSET_ITEM AI\n" +
                        "    ON AI.ITEM_ID = AID.ITEM_ID\n" +
                        "  LEFT JOIN ASSET_CLASS AC\n" +
                        "    ON AC.ASSET_CLASS_ID = AI.ASSET_CLASS_ID\n" +
                        "  LEFT JOIN ASSET_CLASS PARENT\n" +
                        "    ON AC.PARENT_CLASS_ID = PARENT.ASSET_CLASS_ID\n" +
                        " WHERE AARM.PROJECT_ID IN (?PROJECT_ID)\n" +
                        "   AND RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        " GROUP BY AARH.AMC_RENEWAL_ID ORDER BY AC.ASSET_CLASS,AI.ASSET_ITEM ASC;";


                        break;
                    }
                case ReportSQLCommand.Asset.AssetInsuranceRegister:
                    {
                        //query = "SELECT ASSET_CLASS,\n" +
                        // "       ASSET_ITEM,\n" +
                        // "       AID.ASSET_ID,\n" +
                        // "       ASM.MANUFACTURER,\n" +
                        // "       AIID.POLICY_NO,\n" +
                        // "       AIID.RENEWAL_DATE,\n" +
                        // "       AIID.PREMIUM_AMOUNT,\n" +
                        // "       AIID.PERIOD_FROM,\n" +
                        // "       AIID.PERIOD_TO,\n" +
                        // "       AIID.PERIOD_TO,\n" +
                        // "       AIID.SUM_INSURED\n" +
                        // "  FROM ASSET_CLASS AC\n" +
                        // " INNER JOIN ASSET_ITEM AI\n" +
                        // "    ON AC.ASSET_CLASS_ID = AI.ASSET_CLASS_ID\n" +
                        // " INNER JOIN ASSET_ITEM_DETAIL AID\n" +
                        // "    ON AID.ITEM_ID = AI.ITEM_ID\n" +
                        // " INNER JOIN MASTER_PROJECT MP\n" +
                        // "    ON MP.PROJECT_ID = AID.PROJECT_ID\n" +
                        // "  LEFT JOIN ASSET_STOCK_MANUFACTURER ASM\n" +
                        // "    ON ASM.MANUFACTURER_ID = AID.MANUFACTURER_ID\n" +
                        // "  LEFT JOIN ASSET_INSURANCE_DETAIL AIID\n" +
                        // "    ON AIID.ITEM_DETAIL_ID = AID.ITEM_DETAIL_ID\n" +
                        // " WHERE AIID.RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        // "   AND MP.PROJECT_ID IN (?PROJECT_ID)";


                        query = "SELECT IF(PARENT.ASSET_CLASS='Primary', AC.ASSET_CLASS, PARENT.ASSET_CLASS) AS PARENT_CLASS,\n" +
                        "       AC.ASSET_CLASS,\n" +
                        "       AI.ASSET_ITEM,\n" +
                        "       AID.ASSET_ID,\n" +
                        "       AIP.COMPANY AS MANUFACTURER,\n" +
                        "       AIID.POLICY_NO,\n" +
                        "       AIID.RENEWAL_DATE,\n" +
                        "       AIID.PREMIUM_AMOUNT,\n" +
                        "       AIID.PERIOD_FROM,\n" +
                        "       AIID.PERIOD_TO,\n" +
                        "       AIID.PERIOD_TO,\n" +
                        "       AIID.SUM_INSURED\n" +
                        "  FROM ASSET_CLASS AC\n" +
                        " INNER JOIN ASSET_ITEM AI\n" +
                        "    ON AC.ASSET_CLASS_ID = AI.ASSET_CLASS_ID\n" +
                        " INNER JOIN ASSET_ITEM_DETAIL AID\n" +
                        "    ON AID.ITEM_ID = AI.ITEM_ID\n" +
                        " INNER JOIN MASTER_PROJECT MP\n" +
                        "    ON MP.PROJECT_ID = AID.PROJECT_ID\n" +
                        "  LEFT JOIN ASSET_STOCK_MANUFACTURER ASM\n" +
                        "    ON ASM.MANUFACTURER_ID = AID.MANUFACTURER_ID\n" +
                        "  LEFT JOIN ASSET_INSURANCE_DETAIL AIID\n" +
                        "    ON AIID.ITEM_DETAIL_ID = AID.ITEM_DETAIL_ID\n" +
                        "  LEFT JOIN ASSET_CLASS PARENT\n" +
                        "    ON AC.PARENT_CLASS_ID = PARENT.ASSET_CLASS_ID\n" +
                        "   LEFT JOIN ASSET_INSURANCE_PLAN AIP \n" +
                        "    ON AIID.INSURANCE_PLAN_ID = AIP.INSURANCE_PLAN_ID \n" +
                        " WHERE AIID.RENEWAL_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        "   AND MP.PROJECT_ID IN (?PROJECT_ID);";


                        break;
                    }
                case ReportSQLCommand.Asset.AssetInKindRegister:
                    {
                        //query = "SELECT AIM.IN_OUT_ID,\n" +
                        //        "       -- VOUCHER_NO,\n" +
                        //        "       IN_OUT_DATE,\n" +
                        //        "       FLAG,\n" +
                        //        "       ASSET_CLASS,\n" +
                        //        "       ASSET_ITEM,\n" +
                        //        "       QUANTITY,\n" +
                        //        "       TOT_AMOUNT,\n" +
                        //        "       AIDD.AMOUNT,\n" +
                        //        "       BILL_INVOICE_NO,\n" +
                        //        "       AIM.PROJECT_ID,\n" +
                        //        "       NAME AS DONOR\n" +
                        //        "  FROM ASSET_IN_OUT_MASTER AIM\n" +
                        //        " INNER JOIN ASSET_IN_OUT_DETAIL AID\n" +
                        //        "    ON AIM.IN_OUT_ID = AID.IN_OUT_ID\n" +
                        //        " INNER JOIN ASSET_ITEM AI\n" +
                        //        "    ON AID.ITEM_ID = AI.ITEM_ID\n" +
                        //        " INNER JOIN ASSET_CLASS AC\n" +
                        //        "    ON AI.ASSET_CLASS_ID = AC.ASSET_CLASS_ID\n" +
                        //        " INNER JOIN ASSET_ITEM_DETAIL AIDD\n" +
                        //        "    ON AID.ITEM_ID = AIDD.ITEM_ID\n" +
                        //        " INNER JOIN MASTER_DONAUD MD\n" +
                        //        "    ON MD.DONAUD_ID = AIM.DONOR_ID\n" +
                        //        "      -- INNER JOIN VOUCHER_MASTER_TRANS VMT\n" +
                        //        "      -- ON AIM.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                        //        "      -- AND AIM.PROJECT_ID = VMT.PROJECT_ID\n" +
                        //        "      AND IN_OUT_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        //        "   AND FLAG = 'IK'\n" +
                        //        " WHERE AIM.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //        " GROUP BY IN_OUT_ID\n" +
                        //        " ORDER BY IN_OUT_DATE, IN_OUT_ID;";

                        query = "SELECT AIM.IN_OUT_ID,\n" +
                          "       -- VOUCHER_NO,\n" +
                          "       IN_OUT_DATE,\n" +
                          "       FLAG,\n" +
                          "       IF(PARENT.ASSET_CLASS='Primary', AC.ASSET_CLASS, PARENT.ASSET_CLASS) AS PARENT_CLASS,\n" +
                          "       AC.ASSET_CLASS,\n" +
                          "       ASSET_ITEM,\n" +
                          "       QUANTITY,\n" +
                          "       TOT_AMOUNT,\n" +
                          "       AIDD.AMOUNT,\n" +
                          "       BILL_INVOICE_NO,\n" +
                          "       AIM.PROJECT_ID,\n" +
                          "       NAME               AS DONOR\n" +
                          "  FROM ASSET_IN_OUT_MASTER AIM\n" +
                          " INNER JOIN ASSET_IN_OUT_DETAIL AID\n" +
                          "    ON AIM.IN_OUT_ID = AID.IN_OUT_ID\n" +
                          " INNER JOIN ASSET_ITEM AI\n" +
                          "    ON AID.ITEM_ID = AI.ITEM_ID\n" +
                          " INNER JOIN ASSET_CLASS AC\n" +
                          "    ON AI.ASSET_CLASS_ID = AC.ASSET_CLASS_ID\n" +
                          " INNER JOIN ASSET_ITEM_DETAIL AIDD\n" +
                          "    ON AID.ITEM_ID = AIDD.ITEM_ID\n" +
                          " INNER JOIN MASTER_DONAUD MD\n" +
                          "    ON MD.DONAUD_ID = AIM.DONOR_ID\n" +
                          "  LEFT JOIN ASSET_CLASS PARENT\n" +
                          "    ON AC.PARENT_CLASS_ID = PARENT.ASSET_CLASS_ID\n" +
                          "      -- INNER JOIN VOUCHER_MASTER_TRANS VMT\n" +
                          "      -- ON AIM.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                          "      -- AND AIM.PROJECT_ID = VMT.PROJECT_ID\n" +
                          "  -- AND IN_OUT_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                          "  -- AND FLAG = 'IK'\n" +
                          " WHERE AIM.PROJECT_ID IN (?PROJECT_ID) AND IN_OUT_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND FLAG = 'IK'\n" +
                          " GROUP BY IN_OUT_ID\n" +
                          " ORDER BY IN_OUT_DATE, IN_OUT_ID,AC.ASSET_CLASS,ASSET_ITEM ASC;";

                        break;
                    }

                case ReportSQLCommand.Asset.FixedAssetSummary:
                    {
                        // Commented on 16-03-2016 for include of depreciation

                        //query = "SELECT T.PARENT_CLASS AS PARENT_CLASS,\n" +
                        //        "       T.CLASS_NAME AS ASSET_CLASS,\n" +
                        //        "       T.ITEM_NAME AS ASSET_ITEM,\n" +
                        //        "       T.NAME,\n" +
                        //        "       SUM(INQTY) - SUM(OUTQTY) AS QUANTITY,\n" +
                        //        "       SUM(T.INVAL) - SUM(T.OUTVAL) AS AMOUNT\n" +
                        //        "\n" +
                        //        "  FROM (SELECT AIM.IN_OUT_ID,\n" +
                        //        "               AST.ITEM_DETAIL_ID,\n" +
                        //        "               AID.ITEM_ID,\n" +
                        //        "               AST.IN_OUT_DETAIL_ID,\n" +
                        //        "               AIM.FLAG,\n" +
                        //        "               COUNT(AID.QUANTITY) AS INQTY,\n" +
                        //        "               PARENT.ASSET_CLASS AS PARENT_CLASS,\n" +
                        //        "               SUM(AII.AMOUNT) AS INVAL,\n" +
                        //        "               0 AS OUTQTY,\n" +
                        //        "               0 AS OUTVAL,\n" +
                        //        "               AC.ASSET_CLASS AS CLASS_NAME,\n" +
                        //        "               AI.ASSET_ITEM AS ITEM_NAME,\n" +
                        //        "               UM.SYMBOL AS NAME\n" +
                        //        "          FROM ASSET_IN_OUT_MASTER AIM\n" +
                        //        "         INNER JOIN ASSET_IN_OUT_DETAIL AID\n" +
                        //        "            ON AIM.IN_OUT_ID = AID.IN_OUT_ID\n" +
                        //        "         INNER JOIN ASSET_TRANS AST\n" +
                        //        "            ON AID.IN_OUT_DETAIL_ID = AST.IN_OUT_DETAIL_ID\n" +
                        //        "         INNER JOIN ASSET_ITEM AI\n" +
                        //        "            ON AI.ITEM_ID = AID.ITEM_ID\n" +
                        //        "         INNER JOIN ASSET_CLASS AC\n" +
                        //        "            ON AC.ASSET_CLASS_ID = AI.ASSET_CLASS_ID\n" +
                        //        "         INNER JOIN ASSET_ITEM_DETAIL AII\n" +
                        //        "            ON AII.ITEM_DETAIL_ID = AST.ITEM_DETAIL_ID\n" +
                        //        "         INNER JOIN UOM UM\n" +
                        //        "            ON AI.UOM_ID = UM.UOM_ID\n" +
                        //        "          LEFT JOIN ASSET_CLASS PARENT\n" +
                        //        "            ON AC.PARENT_CLASS_ID = PARENT.ASSET_CLASS_ID\n" +
                        //        "         WHERE FLAG IN ('PU', 'IK', 'OP')\n" +
                        //        "           AND AIM.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //        "         GROUP BY AIM.IN_OUT_ID, AID.ITEM_ID\n" +
                        //        "\n" +
                        //        "        UNION ALL\n" +
                        //        "\n" +
                        //        "        SELECT AIM.IN_OUT_ID,\n" +
                        //        "               AST.ITEM_DETAIL_ID,\n" +
                        //        "               AID.ITEM_ID,\n" +
                        //        "               AST.IN_OUT_DETAIL_ID,\n" +
                        //        "               AIM.FLAG,\n" +
                        //        "               0 AS INQTY,\n" +
                        //        "               PARENT.ASSET_CLASS AS PARENT_CLASS,\n" +
                        //        "               0 AS INVAL,\n" +
                        //        "               COUNT(AID.QUANTITY) AS OUTQTY,\n" +
                        //        "               SUM(AII.AMOUNT) AS OUTVAL,\n" +
                        //        "               AC.ASSET_CLASS AS CLASS_NAME,\n" +
                        //        "               AI.ASSET_ITEM AS ITEM_NAME,\n" +
                        //        "               UM.SYMBOL AS NAME\n" +
                        //        "          FROM ASSET_IN_OUT_MASTER AIM\n" +
                        //        "         INNER JOIN ASSET_IN_OUT_DETAIL AID\n" +
                        //        "            ON AIM.IN_OUT_ID = AID.IN_OUT_ID\n" +
                        //        "         INNER JOIN ASSET_TRANS AST\n" +
                        //        "            ON AID.IN_OUT_DETAIL_ID = AST.IN_OUT_DETAIL_ID\n" +
                        //        "         INNER JOIN ASSET_ITEM AI\n" +
                        //        "            ON AI.ITEM_ID = AID.ITEM_ID\n" +
                        //        "         INNER JOIN ASSET_CLASS AC\n" +
                        //        "            ON AC.ASSET_CLASS_ID = AI.ASSET_CLASS_ID\n" +
                        //        "          LEFT JOIN ASSET_CLASS PARENT\n" +
                        //        "            ON AC.PARENT_CLASS_ID = PARENT.ASSET_CLASS_ID\n" +
                        //        "         INNER JOIN ASSET_ITEM_DETAIL AII\n" +
                        //        "            ON AII.ITEM_DETAIL_ID = AST.ITEM_DETAIL_ID\n" +
                        //        "         INNER JOIN UOM UM\n" +
                        //        "            ON AI.UOM_ID = UM.UOM_ID\n" +
                        //        "         WHERE FLAG IN ('SL', 'DS', 'DN')\n" +
                        //        "           AND AIM.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //        "           AND AIM.IN_OUT_DATE <= (?DATE_AS_ON)\n" +
                        //        "         GROUP BY AIM.IN_OUT_ID, AID.ITEM_ID) AS T\n" +
                        //        " GROUP BY ITEM_ID;";

                        query = "SELECT IF(PARENT.ASSET_CLASS='Primary',AC.ASSET_CLASS, PARENT.ASSET_CLASS) AS PARENT_CLASS,\n" +
                                "       AC.ASSET_CLASS AS ASSET_CLASS,\n" +
                                "       AI.ASSET_ITEM AS ASSET_ITEM,\n" +
                                "       SYMBOL AS NAME,\n" +
                                "       IOD.ITEM_ID,\n" +
                                "       AI.ASSET_ITEM,\n" +
                                "       SUM(T.PU_TQTY) - SUM(T.SL_TQTY) AS QUANTITY,\n" +
                                "       SUM(T.INAMOUNT) - SUM(T.OUTAMOUNT) AS AMOUNT\n" +
                                "\n" +
                                "  FROM ASSET_IN_OUT_DETAIL IOD\n" +
                                "  LEFT JOIN ASSET_IN_OUT_MASTER IOM\n" +
                                "    ON IOM.IN_OUT_ID = IOD.IN_OUT_ID\n" +
                                "  LEFT JOIN ASSET_ITEM AI\n" +
                                "    ON AI.ITEM_ID = IOD.ITEM_ID\n" +
                                "  LEFT JOIN (SELECT AIOM.IN_OUT_ID,\n" +
                                "                    AIOD.IN_OUT_DETAIL_ID,\n" +
                                "\n" +
                                "                    CASE\n" +
                                "                      WHEN AIOM.FLAG IN ('PU', 'IK', 'OP') THEN\n" +
                                "\n" +
                                "                       IF(IFNULL(DS.BALANCE_AMOUNT, 0) = 0,\n" +
                                "                          AT.AMOUNT,\n" +
                                "                          DS.BALANCE_AMOUNT)\n" +
                                "                      ELSE\n" +
                                "                       0\n" +
                                "                    END AS 'INAMOUNT',\n" +
                                "\n" +
                                "                    CASE\n" +
                                "                      WHEN AIOM.FLAG IN ('SL', 'DN', 'DS') THEN\n" +
                                "\n" +
                                "                       IF(IFNULL(DS.BALANCE_AMOUNT, 0) = 0,\n" +
                                "                          AT.AMOUNT,\n" +
                                "                          DS.BALANCE_AMOUNT)\n" +
                                "                      ELSE\n" +
                                "                       0\n" +
                                "                    END AS 'OUTAMOUNT',\n" +
                                "                    CASE\n" +
                                "                      WHEN AIOM.FLAG IN ('PU', 'IK', 'OP') AND\n" +
                                "                           AIOD.AMOUNT > 0 THEN\n" +
                                "                       1\n" +
                                "                      ELSE\n" +
                                "                       0\n" +
                                "                    END AS 'PU_TQTY',\n" +
                                "                    CASE\n" +
                                "                      WHEN AIOM.FLAG IN ('SL', 'DN', 'DS') AND\n" +
                                "                           AIOD.AMOUNT > 0 THEN\n" +
                                "                       1\n" +
                                "                      ELSE\n" +
                                "                       0\n" +
                                "                    END AS 'SL_TQTY'\n" +
                                "               FROM ASSET_IN_OUT_MASTER AIOM\n" +
                                "               LEFT JOIN ASSET_IN_OUT_DETAIL AIOD\n" +
                                "                 ON AIOD.IN_OUT_ID = AIOM.IN_OUT_ID\n" +
                                "              INNER JOIN ASSET_TRANS AT\n" +
                                "                 ON AT.IN_OUT_DETAIL_ID = AIOD.IN_OUT_DETAIL_ID\n" +
                                "              INNER JOIN ASSET_ITEM_DETAIL AID\n" +
                                "                 ON AT.ITEM_DETAIL_ID = AID.ITEM_DETAIL_ID\n" +
                                "\n" +
                                "               LEFT JOIN (SELECT APD.BALANCE_AMOUNT, APD.ITEM_DETAIL_ID\n" +
                                "                           FROM ASSET_DEPRECIATION_MASTER ADM\n" +
                                "                          INNER JOIN ASSET_DEPRECIATION_DETAIL APD\n" +
                                "                             ON ADM.DEPRECIATION_ID = APD.DEPRECIATION_ID\n" +
                                "                          WHERE ADM.DEPRECIATION_ID IN\n" +
                                "                                (SELECT *\n" +
                                "                                   FROM (SELECT *\n" +
                                "                                           FROM (SELECT *\n" +
                                "                                                   FROM (SELECT DF\n" +
                                "                                                           FROM (SELECT ADM.DEPRECIATION_ID AS PRVID,\n" +
                                "                                                                        IF(?DATE_AS_ON BETWEEN\n" +
                                "                                                                           DEPRECIATION_PERIOD_FROM AND\n" +
                                "                                                                           DEPRECIATION_PERIOD_TO,\n" +
                                "                                                                           ADM.DEPRECIATION_ID,\n" +
                                "                                                                           0) AS DF\n" +
                                "                                                                   FROM ASSET_DEPRECIATION_MASTER ADM) AS T1) AS T2\n" +
                                "                                                 UNION ALL\n" +
                                "                                                 SELECT DEPRECIATION_ID AS DF\n" +
                                "                                                   FROM ASSET_DEPRECIATION_MASTER ADM\n" +
                                "                                                   JOIN (SELECT MAX(DEPRECIATION_PERIOD_FROM) AS PERIOD_FROM,\n" +
                                "                                                                MAX(DEPRECIATION_PERIOD_TO) AS PERIOD_TO\n" +
                                "                                                           FROM ASSET_DEPRECIATION_MASTER) AS D1\n" +
                                "                                                  WHERE ADM.DEPRECIATION_PERIOD_FROM =\n" +
                                "                                                        PERIOD_FROM\n" +
                                "                                                    AND DEPRECIATION_PERIOD_TO =\n" +
                                "                                                        PERIOD_TO) AS DCV\n" +
                                "                                          WHERE DF > 0 LIMIT 1) AS D)) AS DS\n" +
                                "                 ON AID.ITEM_DETAIL_ID = DS.ITEM_DETAIL_ID\n" +
                                "\n" +
                                "              WHERE AIOM.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                AND IN_OUT_DATE <= ?DATE_AS_ON) AS T\n" +
                                "    ON IOD.IN_OUT_DETAIL_ID = T.IN_OUT_DETAIL_ID\n" +
                                "  LEFT JOIN ASSET_CLASS AC\n" +
                                "    ON AC.ASSET_CLASS_ID = AI.ASSET_CLASS_ID\n" +
                                "  LEFT JOIN ASSET_CLASS PARENT\n" +
                                "    ON AC.PARENT_CLASS_ID = PARENT.ASSET_CLASS_ID\n" +
                                " INNER JOIN UOM UM\n" +
                                "    ON AI.UOM_ID = UM.UOM_ID\n" +
                                " WHERE IOM.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "   AND IOM.IN_OUT_DATE <= ?DATE_AS_ON\n" +
                                " GROUP BY ITEM_ID";



                        break;
                    }

                case ReportSQLCommand.Asset.FixedAssetRegister:
                    {
                        //query = "SELECT PROJECT,\n" +
                        //         "       ASSET_CLASS,PARENT_CLASS,\n" +
                        //         "       ASSET_ITEM,\n" +
                        //         "       DATE(INDATE) AS IN_OUT_DATE,\n" +
                        //         "       BILL_INVOICE_NO,\n" +
                        //         "       FLAG,\n" +
                        //         "       SUM(ACTVAL) AS COST_NO,\n" +
                        //         "       SUM(VAL) AS SOLD_NO,\n" +
                        //         "\n" +
                        //         "       SUM(ACTVAL) - SUM(VAL) AS BALANCE_NO,\n" +
                        //         "       SUM(ASSETINAMT) AS COST_AMOUNT,\n" +
                        //         "        ((SUM(ASSETOUTAMT) + SUM(GAIN_AMOUNT)) -  SUM(LOSS_AMOUNT)) AS SOLD_AMOUNT,\n" +
                        //         "       SUM(ASSETINAMT) - SUM(ASSETOUTAMT) AS BALANCE_AMOUNT,ASV.VENDOR\n" +
                        //         "  FROM (SELECT VENDOR_ID,\n" +
                        //         "\n" +
                        //         "         GROUP_CONCAT(ASSETIN ORDER BY ASSETIN SEPARATOR '') AS AIN,\n" +
                        //         "         GROUP_CONCAT(INFLAG ORDER BY ASSETIN SEPARATOR '') AS FLAG,\n" +
                        //         "         GROUP_CONCAT(ASSETOUT ORDER BY ASSETOUT SEPARATOR '') AS AOUT,\n" +
                        //         "         CASE\n" +
                        //         "           WHEN GROUP_CONCAT(ASSETIN ORDER BY ASSETIN SEPARATOR '') =\n" +
                        //         "                GROUP_CONCAT(ASSETOUT ORDER BY ASSETOUT SEPARATOR '') THEN\n" +
                        //         "            1\n" +
                        //         "           ELSE\n" +
                        //         "            0\n" +
                        //         "         END AS VAL,\n" +
                        //         "\n" +
                        //         "         1 AS ACTVAL,\n" +
                        //         "         SUM(ASSETINAMT) AS ASSETINAMT,\n" +
                        //         "         SUM(ASSETOUTAMT) AS ASSETOUTAMT,\n" +
                        //         "           SUM(GAIN_AMOUNT) AS GAIN_AMOUNT,SUM(LOSS_AMOUNT) AS LOSS_AMOUNT,\n" +
                        //         "         INDATE  AS INDATE,\n" +
                        //         "         GROUP_CONCAT(BILL_INVOICE_NO ORDER BY BILL_INVOICE_NO SEPARATOR '') AS BILL_INVOICE_NO,\n" +
                        //         "         PROJECT,\n" +
                        //         "         ASSET_CLASS,PARENT_CLASS,\n" +
                        //         "         ASSET_ITEM\n" +
                        //         "          FROM (SELECT AID.ITEM_DETAIL_ID,\n" +
                        //         "                       FLAG,AIM.VENDOR_ID,\n" +
                        //         "\n" +
                        //         "                       CASE\n" +
                        //         "                         WHEN FLAG IN ('PU', 'OP', 'IK') THEN\n" +
                        //         "                          FLAG\n" +
                        //         "                       END AS INFLAG,\n" +
                        //         " --                      CASE\n" +
                        //         "            --             WHEN FLAG IN ('PU', 'OP', 'IK') THEN\n" +
                        //         "                          IN_OUT_DATE\n" +  // END
                        //         "                        AS INDATE,\n" +
                        //         "                       CASE\n" +
                        //         "                         WHEN FLAG IN ('PU', 'OP', 'IK') THEN\n" +
                        //         "                          BILL_INVOICE_NO\n" +
                        //         "                       END AS BILL_INVOICE_NO,\n" +
                        //         "\n" +
                        //         "                       CASE\n" +
                        //         "                         WHEN FLAG IN ('PU', 'OP', 'IK') THEN\n" +
                        //         "                          AT.ITEM_DETAIL_ID\n" +
                        //         "                         ELSE\n" +
                        //         "                          ''\n" +
                        //         "                       END AS ASSETIN,\n" +
                        //         "\n" +
                        //         "                       CASE\n" +
                        //         "                         WHEN FLAG IN ('SL', 'DS', 'DN') THEN\n" +
                        //         "                          AT.ITEM_DETAIL_ID\n" +
                        //         "                         ELSE\n" +
                        //         "                          ''\n" +
                        //         "                       END AS ASSETOUT,\n" +
                        //         "\n" +
                        //         "                       CASE\n" +
                        //         "                         WHEN FLAG IN ('PU', 'OP', 'IK') THEN\n" +
                        //         "                          AID.AMOUNT\n" +
                        //         "                         ELSE\n" +
                        //         "                          ''\n" +
                        //         "                       END AS ASSETINAMT,\n" +
                        //         "\n" +
                        //         "                       CASE\n" +
                        //         "                         WHEN FLAG IN ('SL', 'DS', 'DN') THEN\n" +
                        //         "                          AID.AMOUNT\n" +
                        //         "                         ELSE\n" +
                        //         "                          ''\n" +
                        //         "                       END AS ASSETOUTAMT,AT.GAIN_AMOUNT ,AT.LOSS_AMOUNT,\n" +
                        //         "                       CONCAT(PROJECT, ' - ',CASE WHEN DIVISION_ID =1 THEN '(LC)' ELSE '(FC)'END) AS PROJECT,\n" +
                        //         "                      AC. ASSET_CLASS,PARENT.ASSET_CLASS AS PARENT_CLASS,\n" +
                        //         "                       ASSET_ITEM\n" +
                        //         "\n" +
                        //         "                  FROM ASSET_IN_OUT_MASTER AIM\n" +
                        //         "\n" +
                        //         "                 INNER JOIN ASSET_IN_OUT_DETAIL AIOD\n" +
                        //         "                    ON AIOD.IN_OUT_ID = AIM.IN_OUT_ID\n" +
                        //         "                 INNER JOIN ASSET_TRANS AT\n" +
                        //         "                    ON AT.IN_OUT_DETAIL_ID = AIOD.IN_OUT_DETAIL_ID\n" +
                        //         "                 INNER JOIN ASSET_ITEM_DETAIL AID\n" +
                        //         "                    ON AT.ITEM_DETAIL_ID = AID.ITEM_DETAIL_ID\n" +
                        //         "\n" +
                        //         "                  LEFT JOIN ASSET_STOCK_VENDOR V\n" +
                        //         "                    ON AIM.VENDOR_ID = V.VENDOR_ID\n" +
                        //         "                  LEFT JOIN ASSET_ITEM AI\n" +
                        //         "                    ON AIOD.ITEM_ID = AI.ITEM_ID\n" +
                        //         "                  LEFT JOIN ASSET_CLASS AC\n" +
                        //         "                    ON AI.ASSET_CLASS_ID = AC.ASSET_CLASS_ID\n" +
                        //         "                   LEFT JOIN ASSET_CLASS PARENT \n" +
                        //         "                       ON AC.PARENT_CLASS_ID = PARENT.ASSET_CLASS_ID \n" +
                        //         "                  LEFT JOIN MASTER_PROJECT MP\n" +
                        //         "                    ON AIM.PROJECT_ID = MP.PROJECT_ID\n" +
                        //         "                 WHERE  AIM.PROJECT_ID IN (?PROJECT_ID) AND  IN_OUT_DATE <= ?DATE_AS_ON \n" +
                        //         "             {   AND AC.ASSET_CLASS_ID IN (?ASSET_CLASS_ID) } \n" +
                        //         "                ) AS T\n" +
                        //         "         GROUP BY ITEM_DETAIL_ID) AS TT\n" +
                        //         "LEFT JOIN ASSET_STOCK_VENDOR ASV\n" +
                        //         "  ON ASV.VENDOR_ID IN (TT.VENDOR_ID)\n" +
                        //         " WHERE DATE(INDATE) <= ?DATE_AS_ON\n" +
                        //         " GROUP BY ASSET_ITEM,FLAG  ORDER BY INDATE,ASSET_CLASS,ASSET_ITEM";


                        // Commented By Praveen on 22-02-2016 This Query to get to know whether the item detail is sold or not (Query based on Asset In not Asset Out)

                        //query = "SELECT PROJECT,\n" +
                        //        "       ASSET_CLASS,PARENT_CLASS,\n" +
                        //        "       ASSET_ITEM,\n" +
                        //        "       DATE(INDATE) AS IN_OUT_DATE,\n" +
                        //        "       BILL_INVOICE_NO,\n" +
                        //        "       FLAG,\n" +
                        //        "       SUM(ACTVAL) AS COST_NO,\n" +
                        //        "       SUM(VAL) AS SOLD_NO,\n" +
                        //        "\n" +
                        //        "       SUM(ACTVAL) - SUM(VAL) AS BALANCE_NO,\n" +
                        //        "       SUM(ASSETINAMT) AS COST_AMOUNT,\n" +
                        //        "        ((SUM(ASSETOUTAMT) + SUM(GAIN_AMOUNT)) -  SUM(LOSS_AMOUNT)) AS SOLD_AMOUNT,\n" +
                        //        "       SUM(ASSETINAMT) - SUM(ASSETOUTAMT) AS BALANCE_AMOUNT,ASV.VENDOR\n" +
                        //        "  FROM (SELECT VENDOR_ID,\n" +
                        //        "\n" +
                        //        "         GROUP_CONCAT(ASSETIN ORDER BY ASSETIN SEPARATOR '') AS AIN,\n" +
                        //        "         GROUP_CONCAT(INFLAG ORDER BY ASSETIN SEPARATOR '') AS FLAG,\n" +
                        //        "         GROUP_CONCAT(ASSETOUT ORDER BY ASSETOUT SEPARATOR '') AS AOUT,\n" +
                        //        "         CASE\n" +
                        //        "           WHEN GROUP_CONCAT(ASSETIN ORDER BY ASSETIN SEPARATOR '') =\n" +
                        //        "                GROUP_CONCAT(ASSETOUT ORDER BY ASSETOUT SEPARATOR '') THEN\n" +
                        //        "            1\n" +
                        //        "           ELSE\n" +
                        //        "            0\n" +
                        //        "         END AS VAL,\n" +
                        //        "\n" +
                        //        "         1 AS ACTVAL,\n" +
                        //        "         SUM(ASSETINAMT) AS ASSETINAMT,\n" +
                        //        "         SUM(ASSETOUTAMT) AS ASSETOUTAMT,\n" +
                        //        "           SUM(GAIN_AMOUNT) AS GAIN_AMOUNT,SUM(LOSS_AMOUNT) AS LOSS_AMOUNT,\n" +
                        //        "         GROUP_CONCAT(INDATE ORDER BY INDATE SEPARATOR '') AS INDATE,\n" +
                        //        "         GROUP_CONCAT(BILL_INVOICE_NO ORDER BY BILL_INVOICE_NO SEPARATOR '') AS BILL_INVOICE_NO,\n" +
                        //        "         PROJECT,\n" +
                        //        "         ASSET_CLASS,PARENT_CLASS,\n" +
                        //        "         ASSET_ITEM\n" +
                        //        "          FROM (SELECT AID.ITEM_DETAIL_ID,\n" +
                        //        "                       FLAG,AIM.VENDOR_ID,\n" +
                        //        "\n" +
                        //        "                       CASE\n" +
                        //        "                         WHEN FLAG IN ('PU', 'OP', 'IK') THEN\n" +
                        //        "                          FLAG\n" +
                        //        "                       END AS INFLAG,\n" +
                        //        "                       CASE\n" +
                        //        "                         WHEN FLAG IN ('PU', 'OP', 'IK') THEN\n" +
                        //        "                          IN_OUT_DATE\n" +
                        //        "                       END AS INDATE,\n" +
                        //        "                       CASE\n" +
                        //        "                         WHEN FLAG IN ('PU', 'OP', 'IK') THEN\n" +
                        //        "                          BILL_INVOICE_NO\n" +
                        //        "                       END AS BILL_INVOICE_NO,\n" +
                        //        "\n" +
                        //        "                       CASE\n" +
                        //        "                         WHEN FLAG IN ('PU', 'OP', 'IK') THEN\n" +
                        //        "                          AT.ITEM_DETAIL_ID\n" +
                        //        "                         ELSE\n" +
                        //        "                          ''\n" +
                        //        "                       END AS ASSETIN,\n" +
                        //        "\n" +
                        //        "                       CASE\n" +
                        //        "                         WHEN FLAG IN ('SL', 'DS', 'DN') THEN\n" +
                        //        "                          AT.ITEM_DETAIL_ID\n" +
                        //        "                         ELSE\n" +
                        //        "                          ''\n" +
                        //        "                       END AS ASSETOUT,\n" +
                        //        "\n" +
                        //        "                       CASE\n" +
                        //        "                         WHEN FLAG IN ('PU', 'OP', 'IK') THEN\n" +
                        //        "                          AID.AMOUNT\n" +
                        //        "                         ELSE\n" +
                        //        "                          ''\n" +
                        //        "                       END AS ASSETINAMT,\n" +
                        //        "\n" +
                        //        "                       CASE\n" +
                        //        "                         WHEN FLAG IN ('SL', 'DS', 'DN') THEN\n" +
                        //        "                          AID.AMOUNT\n" +
                        //        "                         ELSE\n" +
                        //        "                          ''\n" +
                        //        "                       END AS ASSETOUTAMT,AT.GAIN_AMOUNT ,AT.LOSS_AMOUNT,\n" +
                        //        "                       CONCAT(PROJECT, ' - ',CASE WHEN DIVISION_ID =1 THEN '(LC)' ELSE '(FC)'END) AS PROJECT,\n" +
                        //        "                      AC. ASSET_CLASS,PARENT.ASSET_CLASS AS PARENT_CLASS,\n" +
                        //        "                       ASSET_ITEM\n" +
                        //        "\n" +
                        //        "                  FROM ASSET_IN_OUT_MASTER AIM\n" +
                        //        "\n" +
                        //        "                 INNER JOIN ASSET_IN_OUT_DETAIL AIOD\n" +
                        //        "                    ON AIOD.IN_OUT_ID = AIM.IN_OUT_ID\n" +
                        //        "                 INNER JOIN ASSET_TRANS AT\n" +
                        //        "                    ON AT.IN_OUT_DETAIL_ID = AIOD.IN_OUT_DETAIL_ID\n" +
                        //        "                 INNER JOIN ASSET_ITEM_DETAIL AID\n" +
                        //        "                    ON AT.ITEM_DETAIL_ID = AID.ITEM_DETAIL_ID\n" +
                        //        "\n" +
                        //        "                  LEFT JOIN ASSET_STOCK_VENDOR V\n" +
                        //        "                    ON AIM.VENDOR_ID = V.VENDOR_ID\n" +
                        //        "                  LEFT JOIN ASSET_ITEM AI\n" +
                        //        "                    ON AIOD.ITEM_ID = AI.ITEM_ID\n" +
                        //        "                  LEFT JOIN ASSET_CLASS AC\n" +
                        //        "                    ON AI.ASSET_CLASS_ID = AC.ASSET_CLASS_ID\n" +
                        //        "                   LEFT JOIN ASSET_CLASS PARENT \n" +
                        //        "                       ON AC.PARENT_CLASS_ID = PARENT.ASSET_CLASS_ID \n" +
                        //        "                  LEFT JOIN MASTER_PROJECT MP\n" +
                        //        "                    ON AIM.PROJECT_ID = MP.PROJECT_ID\n" +
                        //        "                 WHERE  AIM.PROJECT_ID IN (?PROJECT_ID) AND  IN_OUT_DATE <= ?DATE_AS_ON \n" +
                        //        "             {   AND AC.ASSET_CLASS_ID IN (?ASSET_CLASS_ID) } \n" +
                        //        "                ) AS T\n" +
                        //        "         GROUP BY ITEM_DETAIL_ID) AS TT\n" +
                        //        "LEFT JOIN ASSET_STOCK_VENDOR ASV\n" +
                        //        "  ON ASV.VENDOR_ID IN (TT.VENDOR_ID)\n" +
                        //        " WHERE DATE(INDATE) <= ?DATE_AS_ON\n" +
                        //        " GROUP BY ASSET_ITEM,FLAG  ORDER BY INDATE,ASSET_CLASS,ASSET_ITEM";

                        //// query based on the date
                        //query =

                        //    "SELECT IN_OUT_ID,\n" +
                        //    "       BILL_INVOICE_NO,\n" +
                        //    "       VENDOR,\n" +
                        //    "       PROJECT,\n" +
                        //    "       IN_OUT_DETAIL_ID,\n" +
                        //    "       IN_OUT_DATE,\n" +
                        //    "       QUANTITY,\n" +
                        //    "       ITEM_ID,\n" +
                        //    "       ASSET_ITEM,\n" +
                        //    "       ASSET_CLASS_ID,\n" +
                        //    "       ASSET_CLASS,\n" +
                        //    "       COST_NO,\n" +
                        //    "       COST_AMOUNT,\n" +
                        //    "       SOLD_NO,\n" +
                        //    "       SOLD_AMOUNT,\n" +
                        //    "       BALANCE_NO,\n" +
                        //    "       BALANCE_AMOUNT,\n" +
                        //    "       PARENT_CLASS  FROM \n" +
                        //    "(SELECT FNL.IN_OUT_ID,\n" +
                        //    "       AIM.BILL_INVOICE_NO,\n" +
                        //    "       IFNULL(VENDOR,AIM.SOLD_TO) AS VENDOR,\n" +
                        //    "       CONCAT(PROJECT,\n" +
                        //    "              ' - ',\n" +
                        //    "              CASE\n" +
                        //    "                WHEN DIVISION_ID = 1 THEN\n" +
                        //    "                 '(LC)'\n" +
                        //    "                ELSE\n" +
                        //    "                 '(FC)'\n" +
                        //    "              END) AS PROJECT,\n" +
                        //    "       FNL.IN_OUT_DETAIL_ID,\n" +
                        //    "       FNL.IN_OUT_DATE,\n" +
                        //    "       FNL.QUANTITY,\n" +
                        //    "       FNL.ITEM_ID,\n" +
                        //    "       FNL.ASSET_ITEM,\n" +
                        //    "       FNL.ASSET_CLASS_ID,\n" +
                        //    "       FNL.ASSET_CLASS,\n" +
                        //    "       FNL.PU_QTY AS COST_NO,\n" +
                        //    "       FNL.PU_AMOUNT AS COST_AMOUNT,\n" +
                        //    "       FNL.SL_QTY AS SOLD_NO,\n" +
                        //    "      FNL.SL_AMOUNT AS SOLD_AMOUNT,\n" +
                        //    //"       ((FNL.SL_AMOUNT + FNL.GAIN_AMOUNT) - FNL.LOSS_AMOUNT) AS SOLD_AMOUNT,\n" +
                        //    "       FNL.BAL_QTY AS BALANCE_NO,\n" +
                        //    "       FNL.BAL_AMOUNT AS BALANCE_AMOUNT,FNL.PARENT_CLASS\n" +
                        //    "\n" +
                        //    "  FROM (SELECT TT.IN_OUT_ID,\n" +
                        //    "               TT.IN_OUT_DETAIL_ID,\n" +
                        //    "               TT.IN_OUT_DATE,\n" +
                        //    "               TT.QUANTITY,\n" +
                        //    "               TT.ITEM_ID,\n" +
                        //    "               TT.ASSET_ITEM,\n" +
                        //    "               TT.ASSET_CLASS_ID,\n" +
                        //    "               TT.ASSET_CLASS,\n" +
                        //    "               TT.PU_QTY  AS PU_QTY,\n" +  // + IF(@PITMID = TT.ITEM_ID, @PQTY, 0)
                        //    "               TT.PU_AMOUNT  AS PU_AMOUNT,\n" + // + IF(@PITMID = TT.ITEM_ID, @PAMT, 0)
                        //    "\n" +
                        //    "               TT.SL_QTY AS SL_QTY,\n" +
                        //    "               TT.SL_AMOUNT AS SL_AMOUNT,\n" +
                        //    "               (TT.PU_QTY + IF(@PITMID = TT.ITEM_ID, @PQTY, 0)) - TT.SL_QTY AS BAL_QTY,\n" +
                        //    "               (TT.BAL_AMOUNT + IF(@PITMID = TT.ITEM_ID, @PAMT, 0))  AS BAL_AMOUNT,\n" +
                        //    "               TT.BAL_QTY AS PAR,\n" +
                        //    "               @PITMID AS DD,\n" +
                        //    "               @PQTY :=\n" +
                        //    "               IF(@PITMID = TT.ITEM_ID, TT.BAL_QTY + @PQTY, TT.BAL_QTY) AS SORT1,\n" +
                        //    "               @PAMT :=\n" +
                        //    "               IF(@PITMID = TT.ITEM_ID, TT.BAL_AMOUNT + @PAMT, TT.BAL_AMOUNT) AS SORT2,\n" +
                        //    "               @PITMID := ITEM_ID,\n" +
                        //    "               @PDATE := IN_OUT_DATE,\n" +
                        //    "               TT.PROJECT_ID,\n" +
                        //    "               TT.GAIN_AMOUNT,\n" +
                        //    "               TT.LOSS_AMOUNT,TT.PARENT_CLASS\n" +
                        //    "\n" +
                        //    "          FROM (SELECT IOD.IN_OUT_DETAIL_ID,\n" +
                        //    "                       IOM.IN_OUT_ID,\n" +
                        //    "                       IOM.IN_OUT_DATE,\n" +
                        //    "                       IOD.ITEM_ID,\n" +
                        //    "                       AI.ASSET_ITEM,\n" +
                        //    "                       AI.ASSET_CLASS_ID,\n" +
                        //    "                       AC.ASSET_CLASS,\n" +
                        //    "                       IOM.PROJECT_ID,\n" +
                        //    "                       IOD.QUANTITY,\n" +
                        //    "                        SUM(T.PU_TQTY) AS PU_QTY,\n" +
                        //    "                        SUM(T.PU_AMOUNT) AS PU_AMOUNT,\n" +
                        //    "                        SUM(T.SL_TQTY) AS SL_QTY,\n" +
                        //    "                        SUM(T.SL_AMOUNT) AS SL_AMOUNT,\n" +
                        //    "                        SUM(T.PU_TQTY) - SUM(T.SL_TQTY) AS BAL_QTY,\n" +
                        //    "                        SUM(T.INAMOUNT) - SUM(T.OUTAMOUNT) AS BAL_AMOUNT,\n" +
                        //    "                       T.GAIN_AMOUNT,\n" +
                        //    "                       T.LOSS_AMOUNT,PARENT.ASSET_CLASS AS PARENT_CLASS\n" +
                        //    "                  FROM ASSET_IN_OUT_DETAIL IOD\n" +
                        //    "                  LEFT JOIN ASSET_IN_OUT_MASTER IOM\n" +
                        //    "                    ON IOM.IN_OUT_ID = IOD.IN_OUT_ID\n" +
                        //    "                  LEFT JOIN ASSET_ITEM AI\n" +
                        //    "                    ON AI.ITEM_ID = IOD.ITEM_ID\n" +
                        //    "                  LEFT JOIN (SELECT AIOM.IN_OUT_ID,\n" +
                        //    "                                   AIOD.IN_OUT_DETAIL_ID,\n" +
                        //    "                                   CASE\n" +
                        //    "                                     WHEN AIOM.FLAG IN ('PU', 'IK', 'OP') THEN\n" +
                        //    "                                      AT.AMOUNT\n" +
                        //    "                                     ELSE\n" +
                        //    "                                      0\n" +
                        //    "                                   END AS 'PU_AMOUNT',\n" +
                        //    "\n" +
                        //    "                                   CASE\n" +
                        //    "                                     WHEN AIOM.FLAG IN ('SL', 'DN', 'DS') THEN\n" +
                        //    "                                       ((AT.AMOUNT + AT.GAIN_AMOUNT) - AT.LOSS_AMOUNT)\n" +
                        //    "                                     ELSE\n" +
                        //    "                                      0\n" +
                        //    "                                   END AS 'SL_AMOUNT',\n" +
                        //    "                                   CASE\n" +
                        //    "                                     WHEN AIOM.FLAG IN ('PU', 'IK', 'OP') THEN\n" +
                        //    "                                      AT.AMOUNT\n" +
                        //    "                                     ELSE\n" +
                        //    "                                      0\n" +
                        //    "                                   END AS 'INAMOUNT',\n" +
                        //    "\n" +
                        //    "                                   CASE\n" +
                        //    "                                     WHEN AIOM.FLAG IN ('SL', 'DN', 'DS') THEN\n" +
                        //    "                                      AT.AMOUNT\n" +
                        //    "                                     ELSE\n" +
                        //    "                                      0\n" +
                        //    "                                   END AS 'OUTAMOUNT',\n" +
                        //    "                                           CASE\n" +
                        //    "                                             WHEN AIOM.FLAG IN\n" +
                        //    "                                                  ('PU', 'IK', 'OP') AND\n" +
                        //    "                                                  AIOD.AMOUNT > 0 THEN\n" +
                        //    "                                              1\n" +
                        //    "                                             ELSE\n" +
                        //    "                                              0\n" +
                        //    "                                           END AS 'PU_TQTY',\n" +
                        //    "                                           CASE\n" +
                        //    "                                             WHEN AIOM.FLAG IN\n" +
                        //    "                                                  ('SL', 'DN', 'DS') AND\n" +
                        //    "                                                  AIOD.AMOUNT > 0 THEN\n" +
                        //    "                                              1\n" +
                        //    "                                             ELSE\n" +
                        //    "                                              0\n" +
                        //    "                                           END AS 'SL_TQTY',\n" +
                        //    "                                   AT.GAIN_AMOUNT,\n" +
                        //    "                                   AT.LOSS_AMOUNT\n" +
                        //    "                              FROM ASSET_IN_OUT_MASTER AIOM\n" +
                        //    "                              LEFT JOIN ASSET_IN_OUT_DETAIL AIOD\n" +
                        //    "                                ON AIOD.IN_OUT_ID = AIOM.IN_OUT_ID\n" +
                        //    "                             INNER JOIN ASSET_TRANS AT\n" +
                        //    "                                ON AT.IN_OUT_DETAIL_ID =\n" +
                        //    "                                   AIOD.IN_OUT_DETAIL_ID\n" +
                        //    "                             INNER JOIN ASSET_ITEM_DETAIL AID\n" +
                        //    "                                ON AT.ITEM_DETAIL_ID = AID.ITEM_DETAIL_ID\n" +
                        //    "\n" +
                        //    "                             WHERE AIOM.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //    "                               AND IN_OUT_DATE <= ?DATE_AS_ON) AS T\n" +
                        //    "                    ON IOD.IN_OUT_DETAIL_ID = T.IN_OUT_DETAIL_ID\n" +
                        //    "                  LEFT JOIN ASSET_CLASS AC\n" +
                        //    "                    ON AC.ASSET_CLASS_ID = AI.ASSET_CLASS_ID\n" +
                        //    "                  LEFT JOIN ASSET_CLASS PARENT \n" +
                        //    "                       ON AC.PARENT_CLASS_ID = PARENT.ASSET_CLASS_ID \n" +
                        //    "                 WHERE IOM.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //    "                {   AND AI.ASSET_CLASS_ID IN  (?ASSET_CLASS_ID)  } \n" +
                        //    "                   AND IOM.IN_OUT_DATE <= ?DATE_AS_ON\n" +
                        //    "                 GROUP BY IOM.IN_OUT_DATE, ITEM_ID) AS TT,\n" +
                        //    "               (SELECT @PQTY := 0) X,\n" +
                        //    "               (SELECT @PITMID := 0) Y,\n" +
                        //    "               (SELECT @PAMT := 0) XX\n" +
                        //    "         ORDER BY ITEM_ID,IN_OUT_DATE) AS FNL\n" +
                        //    "\n" +
                        //    "  LEFT JOIN ASSET_IN_OUT_MASTER AIM\n" +
                        //    "    ON AIM.IN_OUT_ID = FNL.IN_OUT_ID\n" +
                        //    "  LEFT JOIN ASSET_IN_OUT_DETAIL IOD\n" +
                        //    "    ON IOD.IN_OUT_ID = AIM.IN_OUT_ID\n" +
                        //    "  LEFT JOIN ASSET_STOCK_VENDOR V\n" +
                        //    "    ON AIM.VENDOR_ID = V.VENDOR_ID\n" +
                        //    "  LEFT JOIN ASSET_ITEM AI\n" +
                        //    "    ON IOD.ITEM_ID = AI.ITEM_ID\n" +
                        //    "  LEFT JOIN ASSET_CLASS AC\n" +
                        //    "    ON AI.ASSET_CLASS_ID = AC.ASSET_CLASS_ID\n" +
                        //    "  LEFT JOIN MASTER_PROJECT MP\n" +
                        //    "    ON AIM.PROJECT_ID = MP.PROJECT_ID\n" +
                        //    "\n" +
                        //    "{ WHERE AC.ASSET_CLASS_ID IN (?ASSET_CLASS_ID)  }\n" +
                        //    " GROUP BY FNL.IN_OUT_DETAIL_ID\n" +
                        //    " ORDER BY AI.ASSET_ITEM,IN_OUT_DATE) AS FG \n" +
                        //    "  ORDER BY IN_OUT_DATE";

                        // query based on the date
                        query =

                            "SELECT IN_OUT_ID,\n" +
                            "       BILL_INVOICE_NO,\n" +
                            "       VENDOR,\n" +
                            "       PROJECT,\n" +
                            "       IN_OUT_DETAIL_ID,\n" +
                            "       IN_OUT_DATE,\n" +
                            "       QUANTITY,\n" +
                            "       ITEM_ID,\n" +
                            "       ASSET_ITEM,\n" +
                            "       ASSET_CLASS_ID,\n" +
                            "       ASSET_CLASS,\n" +
                            "       COST_NO,\n" +
                            "       COST_AMOUNT,\n" +
                            "       SOLD_NO,\n" +
                            "       SOLD_AMOUNT,\n" +
                            "       BALANCE_NO,\n" +
                            "       BALANCE_AMOUNT,\n" +
                            "       PARENT_CLASS  FROM \n" +
                            "(SELECT FNL.IN_OUT_ID,\n" +
                            "       AIM.BILL_INVOICE_NO,\n" +
                            "       IFNULL(VENDOR,AIM.SOLD_TO) AS VENDOR,\n" +
                            "       CONCAT(PROJECT,\n" +
                            "              ' - ',\n" +
                            "              CASE\n" +
                            "                WHEN DIVISION_ID = 1 THEN\n" +
                            "                 '(LC)'\n" +
                            "                ELSE\n" +
                            "                 '(FC)'\n" +
                            "              END) AS PROJECT,\n" +
                            "       FNL.IN_OUT_DETAIL_ID,\n" +
                            "       FNL.IN_OUT_DATE,\n" +
                            "       FNL.QUANTITY,\n" +
                            "       FNL.ITEM_ID,\n" +
                            "       FNL.ASSET_ITEM,\n" +
                            "       FNL.ASSET_CLASS_ID,\n" +
                            "       FNL.ASSET_CLASS,\n" +
                            "       FNL.PU_QTY AS COST_NO,\n" +
                            "       FNL.PU_AMOUNT AS COST_AMOUNT,\n" +
                            "       FNL.SL_QTY AS SOLD_NO,\n" +
                            "      FNL.SL_AMOUNT AS SOLD_AMOUNT,\n" +
                            //"       ((FNL.SL_AMOUNT + FNL.GAIN_AMOUNT) - FNL.LOSS_AMOUNT) AS SOLD_AMOUNT,\n" +
                            "       FNL.BAL_QTY AS BALANCE_NO,\n" +
                            "       FNL.BAL_AMOUNT AS BALANCE_AMOUNT,FNL.PARENT_CLASS\n" +
                            "\n" +
                            "  FROM (SELECT TT.IN_OUT_ID,\n" +
                            "               TT.IN_OUT_DETAIL_ID,\n" +
                            "               TT.IN_OUT_DATE,\n" +
                            "               TT.QUANTITY,\n" +
                            "               TT.ITEM_ID,\n" +
                            "               TT.ASSET_ITEM,\n" +
                            "               TT.ASSET_CLASS_ID,\n" +
                            "               TT.ASSET_CLASS,\n" +
                            "               TT.PU_QTY  AS PU_QTY,\n" +  // + IF(@PITMID = TT.ITEM_ID, @PQTY, 0)
                            "               TT.PU_AMOUNT  AS PU_AMOUNT,\n" + // + IF(@PITMID = TT.ITEM_ID, @PAMT, 0)
                            "\n" +
                            "               TT.SL_QTY AS SL_QTY,\n" +
                            "               TT.SL_AMOUNT AS SL_AMOUNT,\n" +
                            "               (TT.PU_QTY + IF(@PITMID = TT.ITEM_ID, @PQTY, 0)) - TT.SL_QTY AS BAL_QTY,\n" +
                            "               (TT.BAL_AMOUNT + IF(@PITMID = TT.ITEM_ID, @PAMT, 0))  AS BAL_AMOUNT,\n" +
                            "               TT.BAL_QTY AS PAR,\n" +
                            "               @PITMID AS DD,\n" +
                            "               @PQTY :=\n" +
                            "               IF(@PITMID = TT.ITEM_ID, TT.BAL_QTY + @PQTY, TT.BAL_QTY) AS SORT1,\n" +
                            "               @PAMT :=\n" +
                            "               IF(@PITMID = TT.ITEM_ID, TT.BAL_AMOUNT + @PAMT, TT.BAL_AMOUNT) AS SORT2,\n" +
                            "               @PITMID := ITEM_ID,\n" +
                            "               @PDATE := IN_OUT_DATE,\n" +
                            "               TT.PROJECT_ID,\n" +
                            "               TT.GAIN_AMOUNT,\n" +
                            "               TT.LOSS_AMOUNT,TT.PARENT_CLASS\n" +
                            "\n" +
                            "          FROM (SELECT IOD.IN_OUT_DETAIL_ID,\n" +
                            "                       IOM.IN_OUT_ID,\n" +
                            "                       IOM.IN_OUT_DATE,\n" +
                            "                       IOD.ITEM_ID,\n" +
                            "                       AI.ASSET_ITEM,\n" +
                            "                       AI.ASSET_CLASS_ID,\n" +
                            "                       AC.ASSET_CLASS,\n" +
                            "                       IOM.PROJECT_ID,\n" +
                            "                       IOD.QUANTITY,\n" +
                            "                        SUM(T.PU_TQTY) AS PU_QTY,\n" +
                            "                        SUM(T.PU_AMOUNT) AS PU_AMOUNT,\n" +
                            "                        SUM(T.SL_TQTY) AS SL_QTY,\n" +
                            "                        SUM(T.SL_AMOUNT) AS SL_AMOUNT,\n" +
                            "                        SUM(T.PU_TQTY) - SUM(T.SL_TQTY) AS BAL_QTY,\n" +
                            "                        SUM(T.INAMOUNT) - SUM(T.OUTAMOUNT) AS BAL_AMOUNT,\n" +
                            "                       T.GAIN_AMOUNT,\n" +
                            "                       T.LOSS_AMOUNT,IF(PARENT.ASSET_CLASS='Primary', AC.ASSET_CLASS, PARENT.ASSET_CLASS) AS PARENT_CLASS\n" +
                            "                  FROM ASSET_IN_OUT_DETAIL IOD\n" +
                            "                  LEFT JOIN ASSET_IN_OUT_MASTER IOM\n" +
                            "                    ON IOM.IN_OUT_ID = IOD.IN_OUT_ID\n" +
                            "                  LEFT JOIN ASSET_ITEM AI\n" +
                            "                    ON AI.ITEM_ID = IOD.ITEM_ID\n" +
                            "                  LEFT JOIN (SELECT AIOM.IN_OUT_ID,\n" +
                            "                                   AIOD.IN_OUT_DETAIL_ID,\n" +
                            "                                   CASE\n" +
                            "                                     WHEN AIOM.FLAG IN ('PU', 'IK', 'OP') THEN\n" +
                            "                                   --   AT.AMOUNT\n" +
                            "                                    IF(IFNULL(DS.BALANCE_AMOUNT,0) = 0, AT.AMOUNT,DS.BALANCE_AMOUNT) \n" +
                            "                                     ELSE\n" +
                            "                                      0\n" +
                            "                                   END AS 'PU_AMOUNT',\n" +
                            "\n" +
                            "                                   CASE\n" +
                            "                                     WHEN AIOM.FLAG IN ('SL', 'DN', 'DS') THEN\n" +
                            "                      --                 ((AT.AMOUNT + AT.GAIN_AMOUNT) - AT.LOSS_AMOUNT)\n" +
                            "                  (IF(IFNULL(DS.BALANCE_AMOUNT,0) = 0, AT.AMOUNT,DS.BALANCE_AMOUNT) + AT.GAIN_AMOUNT) - AT.LOSS_AMOUNT \n" +
                            "                                     ELSE\n" +
                            "                                      0\n" +
                            "                                   END AS 'SL_AMOUNT',\n" +
                            "                                   CASE\n" +
                            "                                     WHEN AIOM.FLAG IN ('PU', 'IK', 'OP') THEN\n" +
                            "                                  --    AT.AMOUNT\n" +
                            "                   IF(IFNULL(DS.BALANCE_AMOUNT,0) = 0, AT.AMOUNT,DS.BALANCE_AMOUNT)\n" +
                            "                                     ELSE\n" +
                            "                                      0\n" +
                            "                                   END AS 'INAMOUNT',\n" +
                            "\n" +
                            "                                   CASE\n" +
                            "                                     WHEN AIOM.FLAG IN ('SL', 'DN', 'DS') THEN\n" +
                            "                                 --     AT.AMOUNT\n" +
                            "                      IF(IFNULL(DS.BALANCE_AMOUNT,0) = 0, AT.AMOUNT,DS.BALANCE_AMOUNT) \n" +
                            "                                     ELSE\n" +
                            "                                      0\n" +
                            "                                   END AS 'OUTAMOUNT',\n" +
                            "                                           CASE\n" +
                            "                                             WHEN AIOM.FLAG IN\n" +
                            "                                                  ('PU', 'IK', 'OP') AND\n" +
                            "                                                  AIOD.AMOUNT > 0 THEN\n" +
                            "                                              1\n" +
                            "                                             ELSE\n" +
                            "                                              0\n" +
                            "                                           END AS 'PU_TQTY',\n" +
                            "                                           CASE\n" +
                            "                                             WHEN AIOM.FLAG IN\n" +
                            "                                                  ('SL', 'DN', 'DS') AND\n" +
                            "                                                  AIOD.AMOUNT > 0 THEN\n" +
                            "                                              1\n" +
                            "                                             ELSE\n" +
                            "                                              0\n" +
                            "                                           END AS 'SL_TQTY',\n" +
                            "                                   AT.GAIN_AMOUNT,\n" +
                            "                                   AT.LOSS_AMOUNT\n" +
                            "                              FROM ASSET_IN_OUT_MASTER AIOM\n" +
                            "                              LEFT JOIN ASSET_IN_OUT_DETAIL AIOD\n" +
                            "                                ON AIOD.IN_OUT_ID = AIOM.IN_OUT_ID\n" +
                            "                             INNER JOIN ASSET_TRANS AT\n" +
                            "                                ON AT.IN_OUT_DETAIL_ID =\n" +
                            "                                   AIOD.IN_OUT_DETAIL_ID\n" +
                            "                             INNER JOIN ASSET_ITEM_DETAIL AID\n" +
                            "                                ON AT.ITEM_DETAIL_ID = AID.ITEM_DETAIL_ID\n" +
                            "\n" +
                            "                                      LEFT JOIN (\n" +
                            "                                                SELECT APD.BALANCE_AMOUNT,\n" +
                            "                                                        APD.ITEM_DETAIL_ID\n" +
                            "                                                  FROM ASSET_DEPRECIATION_MASTER ADM\n" +
                            "                                                 INNER JOIN ASSET_DEPRECIATION_DETAIL APD\n" +
                            "                                                    ON ADM.DEPRECIATION_ID =\n" +
                            "                                                       APD.DEPRECIATION_ID\n" +
                            "                                                 WHERE ADM.DEPRECIATION_ID IN\n" +
                            "                                                       (SELECT *\n" +
                            "                                                          FROM (SELECT *\n" +
                            "                                                                  FROM (SELECT *\n" +
                            "                                                                          FROM (SELECT DF\n" +
                            "                                                                                  FROM (SELECT ADM.DEPRECIATION_ID AS PRVID,\n" +
                            "                                                                                               IF(?DATE_AS_ON BETWEEN\n" +
                            "                                                                                                  DEPRECIATION_PERIOD_FROM AND\n" +
                            "                                                                                                  DEPRECIATION_PERIOD_TO,\n" +
                            "                                                                                                  ADM.DEPRECIATION_ID,\n" +
                            "                                                                                                  0) AS DF\n" +
                            "                                                                                          FROM ASSET_DEPRECIATION_MASTER ADM) AS T1) AS T2\n" +
                            "                                                                        UNION ALL\n" +
                            "                                                                        SELECT DEPRECIATION_ID AS DF\n" +
                            "                                                                          FROM ASSET_DEPRECIATION_MASTER ADM\n" +
                            "                                                                          JOIN (SELECT MAX(DEPRECIATION_PERIOD_FROM) AS PERIOD_FROM,\n" +
                            "                                                                                       MAX(DEPRECIATION_PERIOD_TO) AS PERIOD_TO\n" +
                            "                                                                                  FROM ASSET_DEPRECIATION_MASTER) AS D1\n" +
                            "                                                                         WHERE ADM.DEPRECIATION_PERIOD_FROM =\n" +
                            "                                                                               PERIOD_FROM\n" +
                            "                                                                           AND DEPRECIATION_PERIOD_TO =\n" +
                            "                                                                               PERIOD_TO) AS DCV\n" +
                            "                                                                 WHERE DF > 0\n" +
                            "                                                                 LIMIT 1) AS D)) AS DS\n" +
                            "                                        ON AID.ITEM_DETAIL_ID =  DS.ITEM_DETAIL_ID\n" +
                            "                             WHERE AIOM.PROJECT_ID IN (?PROJECT_ID)\n" +
                            "                               AND IN_OUT_DATE <= ?DATE_AS_ON) AS T\n" +
                            "                    ON IOD.IN_OUT_DETAIL_ID = T.IN_OUT_DETAIL_ID\n" +
                            "                  LEFT JOIN ASSET_CLASS AC\n" +
                            "                    ON AC.ASSET_CLASS_ID = AI.ASSET_CLASS_ID\n" +
                            "                  LEFT JOIN ASSET_CLASS PARENT \n" +
                            "                       ON AC.PARENT_CLASS_ID = PARENT.ASSET_CLASS_ID \n" +
                            "                 WHERE IOM.PROJECT_ID IN (?PROJECT_ID)\n" +
                            "                {   AND AI.ASSET_CLASS_ID IN  (?ASSET_CLASS_ID)  } \n" +
                            "                   AND IOM.IN_OUT_DATE <= ?DATE_AS_ON\n" +
                            "                 GROUP BY IOM.IN_OUT_DATE, ITEM_ID) AS TT,\n" +
                            "               (SELECT @PQTY := 0) X,\n" +
                            "               (SELECT @PITMID := 0) Y,\n" +
                            "               (SELECT @PAMT := 0) XX\n" +
                            "         ORDER BY ITEM_ID,IN_OUT_DATE) AS FNL\n" +
                            "\n" +
                            "  LEFT JOIN ASSET_IN_OUT_MASTER AIM\n" +
                            "    ON AIM.IN_OUT_ID = FNL.IN_OUT_ID\n" +
                            "  LEFT JOIN ASSET_IN_OUT_DETAIL IOD\n" +
                            "    ON IOD.IN_OUT_ID = AIM.IN_OUT_ID\n" +
                            "  LEFT JOIN ASSET_STOCK_VENDOR V\n" +
                            "    ON AIM.VENDOR_ID = V.VENDOR_ID\n" +
                            "  LEFT JOIN ASSET_ITEM AI\n" +
                            "    ON IOD.ITEM_ID = AI.ITEM_ID\n" +
                            "  LEFT JOIN ASSET_CLASS AC\n" +
                            "    ON AI.ASSET_CLASS_ID = AC.ASSET_CLASS_ID\n" +
                            "  LEFT JOIN MASTER_PROJECT MP\n" +
                            "    ON AIM.PROJECT_ID = MP.PROJECT_ID\n" +
                            "\n" +
                            "{ WHERE AC.ASSET_CLASS_ID IN (?ASSET_CLASS_ID)  }\n" +
                            " GROUP BY  FNL.IN_OUT_DETAIL_ID\n" +
                            " ORDER BY AI.ASSET_ITEM,IN_OUT_DATE) AS FG \n" +
                            "  ORDER BY IN_OUT_DATE";

                        break;

                    }
                case ReportSQLCommand.Asset.FixedAssetItemRegister:
                    {
                        query = @" SELECT IF (PARENT.ASSET_CLASS,AC.ASSET_CLASS,PARENT.ASSET_CLASS) AS PARENT_CLASS,
                                      IOM.IN_OUT_ID,
                                      AC.ASSET_CLASS_ID,
                                      AC.ASSET_CLASS,
                                      BILL_INVOICE_NO,
                                      IFNULL(VENDOR,IOM.SOLD_TO) AS VENDOR,
                                      IOM.IN_OUT_DATE,
                                      PROJECT,
                                      ASSET_ITEM,
                                     AI.ITEM_ID,
                                      AID.ASSET_ID,
                                      CASE
                                        WHEN IOM.FLAG IN ('PU', 'IK', 'OP', 'SL', 'DN', 'DS') THEN IF (
                                          IFNULL (DS.BALANCE_AMOUNT, 0)=0,
                                          AT.AMOUNT,
                                          DS.BALANCE_AMOUNT
                                        )
                                        ELSE 0
                                      END AS 'COST_AMOUNT',
                                      AID.ITEM_DETAIL_ID,
                                      AL.LOCATION,
                                      ACU.CUSTODIAN,
                                      AM.MANUFACTURER,                     
                                      AID.CONDITIONS,
                                      CASE
                                        WHEN AID.ITEM_DETAIL_ID=T.SOLD_ITEM_DETAIL_ID THEN 0
                                        ELSE 1
                                      END AS FLAG_STATUS,
                                      CASE
                                          WHEN IOM.FLAG='PU' THEN 'PURCHASE'
                                          WHEN IOM.FLAG='IK' THEN 'INKIND'
                                          WHEN IOM.FLAG='OP' THEN 'O\P'
                                          END AS TYPE,
                                      CASE
                                        WHEN AID.ITEM_DETAIL_ID=T.SOLD_ITEM_DETAIL_ID THEN T.FLAG
                                        ELSE 'ACTIVE'
                                      END AS STATUS
                                    FROM  ASSET_IN_OUT_MASTER IOM 
                                     INNER JOIN ASSET_IN_OUT_DETAIL IOD ON IOM.IN_OUT_ID=IOD.IN_OUT_ID
                                     INNER JOIN ASSET_TRANS AT ON AT.IN_OUT_DETAIL_ID=IOD.IN_OUT_DETAIL_ID
                                     LEFT JOIN ASSET_ITEM_DETAIL AID ON AT.ITEM_DETAIL_ID = AID.ITEM_DETAIL_ID
                                     LEFT JOIN ASSET_ITEM AI ON AI.ITEM_ID= IOD.ITEM_ID
                                     INNER JOIN ASSET_CLASS AC ON AC.ASSET_CLASS_ID=AI.ASSET_CLASS_ID
                                     LEFT JOIN ASSET_LOCATION AL ON AL.LOCATION_ID=AID.LOCATION_ID
                                     LEFT JOIN ASSET_CUSTODIAN ACU ON ACU.CUSTODIAN_ID=AL.CUSTODIAN_ID
                                     LEFT JOIN ASSET_STOCK_MANUFACTURER AM ON AM.MANUFACTURER_ID=AID.MANUFACTURER_ID
                                     LEFT JOIN MASTER_PROJECT MP ON IOM.PROJECT_ID = MP.PROJECT_ID 
                                     LEFT JOIN ASSET_STOCK_VENDOR V ON IOM.VENDOR_ID = V.VENDOR_ID
                                     LEFT JOIN (
                                        SELECT
                                          AIM.IN_OUT_ID,
                                          CASE
                                            WHEN AIM.FLAG='SL' THEN 'SALES'
                                            WHEN AIM.FLAG='DS' THEN 'DISPOSAL'
                                            WHEN AIM.FLAG='DN' THEN 'DONATION'
		                                    WHEN AIM.FLAG='OP' THEN 'O\P'
                                          END AS FLAG,
                                          AID.IN_OUT_DETAIL_ID,
                                          AT.ITEM_DETAIL_ID AS SOLD_ITEM_DETAIL_ID
                                        FROM
                                          ASSET_IN_OUT_MASTER AIM
                                          INNER JOIN ASSET_IN_OUT_DETAIL AID ON AIM.IN_OUT_ID=AID.IN_OUT_ID
                                          INNER JOIN ASSET_TRANS AT ON AID.IN_OUT_DETAIL_ID=AT.IN_OUT_DETAIL_ID
                                        WHERE
                                          FLAG IN ('SL', 'DN', 'DS')
                                      ) AS T ON T.SOLD_ITEM_DETAIL_ID=AID.ITEM_DETAIL_ID
                                      LEFT JOIN ASSET_CLASS PARENT ON AC.PARENT_CLASS_ID=PARENT.ASSET_CLASS_ID
                                      LEFT JOIN (
                                        SELECT
                                          APD.BALANCE_AMOUNT,
                                          APD.ITEM_DETAIL_ID
                                        FROM
                                          ASSET_DEPRECIATION_MASTER ADM
                                          INNER JOIN ASSET_DEPRECIATION_DETAIL APD ON ADM.DEPRECIATION_ID=APD.DEPRECIATION_ID
                                        WHERE
                                          ADM.DEPRECIATION_ID IN (
                                            SELECT
                                              *
                                            FROM
                                              (
                                                SELECT
                                                  *
                                                FROM
                                                  (
                                                    SELECT
                                                      *
                                                    FROM
                                                      (
                                                        SELECT
                                                          DF
                                                        FROM
                                                          (
                                                            SELECT
                                                              ADM.DEPRECIATION_ID AS PRVID,
                                                              IF (
                                                                ?DATE_AS_ON BETWEEN DEPRECIATION_PERIOD_FROM AND DEPRECIATION_PERIOD_TO,
                                                                ADM.DEPRECIATION_ID,
                                                                0
                                                              ) AS DF
                                                            FROM
                                                              ASSET_DEPRECIATION_MASTER ADM
                                                          ) AS T1
                                                      ) AS T2
                                                    UNION ALL
                                                    SELECT
                                                      DEPRECIATION_ID AS DF
                                                    FROM
                                                      ASSET_DEPRECIATION_MASTER ADM
                                                      JOIN (
                                                        SELECT
                                                          MAX(DEPRECIATION_PERIOD_FROM) AS PERIOD_FROM,
                                                          MAX(DEPRECIATION_PERIOD_TO) AS PERIOD_TO
                                                        FROM
                                                          ASSET_DEPRECIATION_MASTER
                                                      ) AS D1
                                                    WHERE
                                                      ADM.DEPRECIATION_PERIOD_FROM=PERIOD_FROM
                                                      AND DEPRECIATION_PERIOD_TO=PERIOD_TO
                                                  ) AS DCV
                                                WHERE
                                                  DF>0
                                                LIMIT
                                                  1
                                              ) AS D
                                          )
                                      ) AS DS ON AID.ITEM_DETAIL_ID=DS.ITEM_DETAIL_ID
                                    WHERE
                                      AID.PROJECT_ID IN (?PROJECT_ID)
                                     { AND AI.ASSET_CLASS_ID IN (?ASSET_CLASS_ID) }
                                      AND IOM.IN_OUT_DATE <= ?DATE_AS_ON
                                    GROUP BY
                                      AID.ASSET_ID
                                    ORDER BY
                                      AC.ASSET_CLASS,
                                      ASSET_ITEM,
                                      AID.ITEM_DETAIL_ID ASC";
                        break;
                    }
                case ReportSQLCommand.Asset.DepreciationRegister:
                    {
                        query = @"SELECT AC.ASSET_CLASS,T5.STATUS,IFNULL(ISDEP,0) AS ISDEP,
                                                   AI.ASSET_ITEM,
                                                   AAI.ASSET_ID,
                                                   ML.LEDGER_ID,
                                                   ML.LEDGER_NAME,
                                                   IFNULL(T1.PREV_COST, 0) AS PREV_COST,
                                                   IF(T1.PREV_COST > 0, 0, AAI.AMOUNT) AS CUR_COST,
                                                   AI.RETENTION_YRS AS LIFE_YRS,
                                                   AAI.SALVAGE_VALUE,
                                                   T3.METHOD_ID,
                                                   AIM.IN_OUT_ID,
                                                   AID.IN_OUT_DETAIL_ID,
                                                   T2.ACC_AMOUNT AS ACCUMULATE_VALUE,((T1.PREV_COST + IF(T1.PREV_COST > 0, 0, AAI.AMOUNT)) - IFNULL(T2.ACC_AMOUNT,0)) AS TOTAL_VALUE,
                                                  IFNULL(T2.DOP,IN_OUT_DATE) AS DATE_OF_DOD,
                                             --  --     IF(IFNULL(T2.DOP,'') = '' ,DATE(DATE_FORMAT(IN_OUT_DATE,CONCAT(YEAR(IN_OUT_DATE),'/',MONTH(IN_OUT_DATE),'/','01'))),DATE('2023-04-01 00:00:00'))AS DATE_OF_APPLY,
                                                  IF(IFNULL(T2.DOP,'') = '' ,DATE(DATE_FORMAT(IN_OUT_DATE,CONCAT(YEAR(IN_OUT_DATE),'/',MONTH(IN_OUT_DATE),'/','01'))),DATE(ADDDATE(T2.DOP,1)))AS DATE_OF_APPLY,
                                                  AAI.ITEM_DETAIL_ID,
                                                  0.00 AS BALANCE_AMOUNT,0.00 AS DEPRECIATION_VALUE,
                                                  IFNULL(IF(?DEPRECIATION_ID > 0,T3.DEPRECIATION_PERCENTAGE, AI.DEPRECIATION_NO),0.00) AS DEPRECIATION_PERCENTAGE
                                              FROM ASSET_IN_OUT_MASTER AIM
                                             INNER JOIN ASSET_IN_OUT_DETAIL AID
                                                ON AIM.IN_OUT_ID = AID.IN_OUT_ID
                                             INNER JOIN ASSET_TRANS AT
                                                ON AID.IN_OUT_DETAIL_ID = AT.IN_OUT_DETAIL_ID
                                             INNER JOIN ASSET_ITEM_DETAIL AAI
                                                ON AAI.ITEM_DETAIL_ID = AT.ITEM_DETAIL_ID
                                             INNER JOIN ASSET_ITEM AI
                                                ON AAI.ITEM_ID = AI.ITEM_ID
                                             INNER JOIN MASTER_LEDGER ML
                                                ON ML.LEDGER_ID = AI.DEPRECIATION_LEDGER_ID
                                                -- ON ML.LEDGER_ID = AI.ACCOUNT_LEDGER_ID
                                             INNER JOIN ASSET_CLASS AC
                                                ON AC.ASSET_CLASS_ID = AI.ASSET_CLASS_ID
                                              LEFT JOIN (SELECT SUM(DEPRECIATION_VALUE) AS ACC_AMOUNT,
                                                                MAX(DEPRECIATON_PERIOD_TO) AS DOP,
                                                                ITEM_DETAIL_ID
                                                           FROM ASSET_DEPRECIATION_MASTER ADM
                                                          INNER JOIN ASSET_DEPRECIATION_DETAIL ADT
                                                             ON ADM.DEPRECIATION_ID = ADT.DEPRECIATION_ID
                                                          WHERE ADM.PROJECT_ID IN (?PROJECT_ID) AND ADT.DEPRECIATON_PERIOD_TO <= ?DATE_FROM
                                                          GROUP BY ITEM_DETAIL_ID) AS T2
                                                ON AAI.ITEM_DETAIL_ID = T2.ITEM_DETAIL_ID
                                              LEFT JOIN (SELECT AID.ITEM_DETAIL_ID,
                                                                CASE
                                                                  WHEN AID.ITEM_DETAIL_ID = T.SOLD_ITEM_DETAIL_ID THEN
                                                                   0
                                                                  ELSE
                                                                   1
                                                                END AS STATUS
                                                           FROM ASSET_IN_OUT_DETAIL IOD
                                                           LEFT JOIN ASSET_TRANS AT
                                                             ON IOD.IN_OUT_DETAIL_ID = AT.IN_OUT_DETAIL_ID
                                                           LEFT JOIN ASSET_ITEM_DETAIL AID
                                                             ON AT.ITEM_DETAIL_ID = AID.ITEM_DETAIL_ID
                                                           LEFT JOIN (SELECT AIM.IN_OUT_ID,
                                                                            AID.IN_OUT_DETAIL_ID,
                                                                            AT.ITEM_DETAIL_ID AS SOLD_ITEM_DETAIL_ID
                                                                       FROM ASSET_IN_OUT_MASTER AIM
                                                                      INNER JOIN ASSET_IN_OUT_DETAIL AID
                                                                         ON AIM.IN_OUT_ID = AID.IN_OUT_ID
                                                                      INNER JOIN ASSET_TRANS AT
                                                                         ON AID.IN_OUT_DETAIL_ID = AT.IN_OUT_DETAIL_ID
                                                                      WHERE FLAG IN ('SL', 'DN', 'DS')) AS T
                                                             ON T.SOLD_ITEM_DETAIL_ID = AID.ITEM_DETAIL_ID
                                                          GROUP BY ITEM_DETAIL_ID) AS T5
                                                ON AAI.ITEM_DETAIL_ID = T5.ITEM_DETAIL_ID
                                              LEFT JOIN (SELECT ADM.DEPRECIATION_ID,1 AS ISDEP,
                                                                ITEM_DETAIL_ID,
                                                                METHOD_ID,
                                                                DEPRECIATION_PERCENTAGE,
                                                                DEPRECIATION_VALUE,
                                                                BALANCE_AMOUNT,
                                                                DEPRECIATION_APPLY_FROM,
                                                                DEPRECIATON_PERIOD_TO
                                                           FROM ASSET_DEPRECIATION_MASTER ADM
                                                          INNER JOIN ASSET_DEPRECIATION_DETAIL ADT
                                                             ON ADM.DEPRECIATION_ID = ADT.DEPRECIATION_ID
                                                          WHERE ADM.PROJECT_ID IN (?PROJECT_ID)
                                            AND ADM.DEPRECIATION_PERIOD_FROM >= ?DATE_FROM AND ADM.DEPRECIATION_PERIOD_TO <= ?DATE_TO
                                                          GROUP BY ITEM_DETAIL_ID) AS T3
                                                ON AAI.ITEM_DETAIL_ID = T3.ITEM_DETAIL_ID
                                              INNER JOIN (SELECT
                                                          PREV_COST AS PREV_COST,
                                                          CUR_COST AS CUR_COST,
                                                          IN_OUT_ID,
                                                          IN_OUT_DETAIL_ID,
                                                          ITEM_DETAIL_ID
                                                           FROM (SELECT AAI.AMOUNT AS PREV_COST,
                                                                        0   AS CUR_COST,
                                                                        AIM.IN_OUT_ID,
                                                                        AID.IN_OUT_DETAIL_ID,
                                                                        AAI.ITEM_DETAIL_ID
                                                                   FROM ASSET_IN_OUT_MASTER AIM
                                                                  INNER JOIN ASSET_IN_OUT_DETAIL AID
                                                                     ON AIM.IN_OUT_ID = AID.IN_OUT_ID
                                                                  INNER JOIN ASSET_TRANS AT
                                                                     ON AID.IN_OUT_DETAIL_ID = AT.IN_OUT_DETAIL_ID
                                                                  INNER JOIN ASSET_ITEM_DETAIL AAI
                                                                     ON AAI.ITEM_DETAIL_ID = AT.ITEM_DETAIL_ID
                                                                  WHERE IN_OUT_DATE < ?DATE_FROM
                                                                    AND AIM.PROJECT_ID IN (?PROJECT_ID)
                                                                 UNION ALL
                                                                 SELECT 0 AS PREV_COST,
                                                                        AAI.AMOUNT AS CUR_COST,
                                                                        AIM.IN_OUT_ID,
                                                                        AID.IN_OUT_DETAIL_ID,
                                                                        AAI.ITEM_DETAIL_ID
                                                                   FROM ASSET_IN_OUT_MASTER AIM
                                                                  INNER JOIN ASSET_IN_OUT_DETAIL AID
                                                                     ON AIM.IN_OUT_ID = AID.IN_OUT_ID
                                                                  INNER JOIN ASSET_TRANS AT
                                                                     ON AID.IN_OUT_DETAIL_ID = AT.IN_OUT_DETAIL_ID
                                                                  INNER JOIN ASSET_ITEM_DETAIL AAI
                                                                     ON AAI.ITEM_DETAIL_ID = AT.ITEM_DETAIL_ID
                                                                  WHERE IN_OUT_DATE BETWEEN ?DATE_FROM AND ?DATE_TO
                                                                    AND AIM.PROJECT_ID IN (?PROJECT_ID)) AS T
                                                          GROUP BY ITEM_DETAIL_ID) AS T1
                                                ON AAI.ITEM_DETAIL_ID = T1.ITEM_DETAIL_ID
                                             WHERE AIM.PROJECT_ID IN (?PROJECT_ID) AND IS_ASSET_DEPRECIATION=1 AND ISDEP=1   
                                             GROUP BY ITEM_DETAIL_ID";

                        //                        query = @"SELECT AC.ASSET_CLASS,T5.STATUS,IFNULL(ISDEP,0) AS ISDEP,
                        //                                                   AI.ASSET_ITEM,
                        //                                                   AAI.ASSET_ID,
                        //                                             --   ML.LEDGER_ID,
                        //                                             --   ML.LEDGER_NAME,
                        //                                                   IFNULL(T1.PREV_COST, 0) AS PREV_COST,
                        //                                                   IF(T1.PREV_COST > 0, 0, AAI.AMOUNT) AS PREV_CUR_COST,
                        //                                             --      AI.RETENTION_YRS AS LIFE_YRS,
                        //                                             --      AAI.SALVAGE_VALUE,
                        //                                                     T3.METHOD_ID,
                        //                                             --      AIM.IN_OUT_ID,
                        //                                             --      AID.IN_OUT_DETAIL_ID,
                        //                                                   T2.ACC_AMOUNT AS ACCUMULATE_VALUE,((T1.PREV_COST + IF(T1.PREV_COST > 0, 0, AAI.AMOUNT)) - IFNULL(T2.ACC_AMOUNT,0)) AS TOTAL_VALUE,
                        //                                                  IFNULL(T2.DOP,IN_OUT_DATE) AS DATE_OF_DOD,
                        //                                             --  --     IF(IFNULL(T2.DOP,'') = '' ,DATE(DATE_FORMAT(IN_OUT_DATE,CONCAT(YEAR(IN_OUT_DATE),'/',MONTH(IN_OUT_DATE),'/','01'))),DATE('2023-04-01 00:00:00'))AS DATE_OF_APPLY,
                        //                                                  IF(IFNULL(T2.DOP,'') = '' ,DATE(DATE_FORMAT(IN_OUT_DATE,CONCAT(YEAR(IN_OUT_DATE),'/',MONTH(IN_OUT_DATE),'/','01'))),DATE(ADDDATE(T2.DOP,1)))AS DATE_OF_APPLY,
                        //                                                  AAI.ITEM_DETAIL_ID,
                        //                                                  0.00 AS BALANCE_AMOUNT,0.00 AS DEPRECIATION_VALUE,
                        //                                                  IFNULL(IF(1 > 0,T3.DEPRECIATION_PERCENTAGE, AI.DEPRECIATION_NO),0.00) AS DEPRECIATION_PERCENTAGE
                        //                                              FROM ASSET_IN_OUT_MASTER AIM
                        //                                             INNER JOIN ASSET_IN_OUT_DETAIL AID
                        //                                                ON AIM.IN_OUT_ID = AID.IN_OUT_ID
                        //                                             INNER JOIN ASSET_TRANS AT
                        //                                                ON AID.IN_OUT_DETAIL_ID = AT.IN_OUT_DETAIL_ID
                        //                                             INNER JOIN ASSET_ITEM_DETAIL AAI
                        //                                                ON AAI.ITEM_DETAIL_ID = AT.ITEM_DETAIL_ID
                        //                                             INNER JOIN ASSET_ITEM AI
                        //                                                ON AAI.ITEM_ID = AI.ITEM_ID
                        //                                             INNER JOIN MASTER_LEDGER ML
                        //                                                ON ML.LEDGER_ID = AI.DEPRECIATION_LEDGER_ID
                        //                                                -- ON ML.LEDGER_ID = AI.ACCOUNT_LEDGER_ID
                        //                                             INNER JOIN ASSET_CLASS AC
                        //                                                ON AC.ASSET_CLASS_ID = AI.ASSET_CLASS_ID
                        //                                              LEFT JOIN (SELECT SUM(DEPRECIATION_VALUE) AS ACC_AMOUNT,
                        //                                                                MAX(DEPRECIATON_PERIOD_TO) AS DOP,
                        //                                                                ITEM_DETAIL_ID
                        //                                                           FROM ASSET_DEPRECIATION_MASTER ADM
                        //                        
                        //                                                          INNER JOIN ASSET_DEPRECIATION_DETAIL ADT
                        //                                                             ON ADM.DEPRECIATION_ID = ADT.DEPRECIATION_ID
                        //                                                          WHERE ADM.PROJECT_ID=11 AND ADT.DEPRECIATON_PERIOD_TO <= '2023-04-01 00:00:00'
                        //                                                          GROUP BY ITEM_DETAIL_ID) AS T2
                        //                                                ON AAI.ITEM_DETAIL_ID = T2.ITEM_DETAIL_ID
                        //                                              LEFT JOIN (SELECT AID.ITEM_DETAIL_ID,
                        //                                                                CASE
                        //                                                                  WHEN AID.ITEM_DETAIL_ID = T.SOLD_ITEM_DETAIL_ID THEN
                        //                                                                   0
                        //                                                                  ELSE
                        //                                                                   1
                        //                                                                END AS STATUS
                        //                                                           FROM ASSET_IN_OUT_DETAIL IOD
                        //                                                           LEFT JOIN ASSET_TRANS AT
                        //                                                             ON IOD.IN_OUT_DETAIL_ID = AT.IN_OUT_DETAIL_ID
                        //                                                           LEFT JOIN ASSET_ITEM_DETAIL AID
                        //                                                             ON AT.ITEM_DETAIL_ID = AID.ITEM_DETAIL_ID
                        //                                                           LEFT JOIN (SELECT AIM.IN_OUT_ID,
                        //                                                                            AID.IN_OUT_DETAIL_ID,
                        //                                                                            AT.ITEM_DETAIL_ID AS SOLD_ITEM_DETAIL_ID
                        //                                                                       FROM ASSET_IN_OUT_MASTER AIM
                        //                                                                      INNER JOIN ASSET_IN_OUT_DETAIL AID
                        //                                                                         ON AIM.IN_OUT_ID = AID.IN_OUT_ID
                        //                                                                      INNER JOIN ASSET_TRANS AT
                        //                                                                         ON AID.IN_OUT_DETAIL_ID = AT.IN_OUT_DETAIL_ID
                        //                                                                      WHERE FLAG IN ('SL', 'DN', 'DS')) AS T
                        //                                                             ON T.SOLD_ITEM_DETAIL_ID = AID.ITEM_DETAIL_ID
                        //                                                          GROUP BY ITEM_DETAIL_ID) AS T5
                        //                                                ON AAI.ITEM_DETAIL_ID = T5.ITEM_DETAIL_ID
                        //                                              LEFT JOIN (SELECT ADM.DEPRECIATION_ID,1 AS ISDEP,
                        //                                                                ITEM_DETAIL_ID,
                        //                                                                METHOD_ID,
                        //                                                                DEPRECIATION_PERCENTAGE,
                        //                                                                DEPRECIATION_VALUE,
                        //                                                                BALANCE_AMOUNT,
                        //                                                                DEPRECIATION_APPLY_FROM,
                        //                                                                DEPRECIATON_PERIOD_TO
                        //                                                           FROM ASSET_DEPRECIATION_MASTER ADM
                        //                                                          INNER JOIN ASSET_DEPRECIATION_DETAIL ADT
                        //                                                             ON ADM.DEPRECIATION_ID = ADT.DEPRECIATION_ID
                        //                                                          WHERE ADM.PROJECT_ID = 11
                        //                                            AND ADM.DEPRECIATION_PERIOD_FROM >= '2023-04-01 00:00:00' AND ADM.DEPRECIATION_PERIOD_TO <= '2024-03-31 00:00:00' 
                        //                                                          GROUP BY ITEM_DETAIL_ID) AS T3
                        //                                                ON AAI.ITEM_DETAIL_ID = T3.ITEM_DETAIL_ID
                        //                                              INNER JOIN (SELECT
                        //                                                          PREV_COST AS PREV_COST,
                        //                                                          CUR_COST AS CUR_COST,
                        //                                                          IN_OUT_ID,
                        //                                                          IN_OUT_DETAIL_ID,
                        //                                                          ITEM_DETAIL_ID
                        //                                                           FROM (SELECT AAI.AMOUNT    AS PREV_COST,
                        //                                                                        0   AS CUR_COST,
                        //                                                                        AIM.IN_OUT_ID,
                        //                                                                        AID.IN_OUT_DETAIL_ID,
                        //                                                                        AAI.ITEM_DETAIL_ID
                        //                                                                   FROM ASSET_IN_OUT_MASTER AIM
                        //                                                                  INNER JOIN ASSET_IN_OUT_DETAIL AID
                        //                                                                     ON AIM.IN_OUT_ID = AID.IN_OUT_ID
                        //                                                                  INNER JOIN ASSET_TRANS AT
                        //                                                                     ON AID.IN_OUT_DETAIL_ID = AT.IN_OUT_DETAIL_ID
                        //                                                                  INNER JOIN ASSET_ITEM_DETAIL AAI
                        //                                                                     ON AAI.ITEM_DETAIL_ID = AT.ITEM_DETAIL_ID
                        //                                                                  WHERE IN_OUT_DATE < '2023-04-01 00:00:00'
                        //                                                                    AND AIM.PROJECT_ID = 11
                        //                                                                 UNION ALL
                        //                                                                 SELECT 0                    AS PREV_COST,
                        //                                                                        AAI.AMOUNT           AS CUR_COST,
                        //                                                                        AIM.IN_OUT_ID,
                        //                                                                        AID.IN_OUT_DETAIL_ID,
                        //                                                                        AAI.ITEM_DETAIL_ID
                        //                                                                   FROM ASSET_IN_OUT_MASTER AIM
                        //                                                                  INNER JOIN ASSET_IN_OUT_DETAIL AID
                        //                                                                     ON AIM.IN_OUT_ID = AID.IN_OUT_ID
                        //                                                                  INNER JOIN ASSET_TRANS AT
                        //                                                                     ON AID.IN_OUT_DETAIL_ID = AT.IN_OUT_DETAIL_ID
                        //                                                                  INNER JOIN ASSET_ITEM_DETAIL AAI
                        //                                                                     ON AAI.ITEM_DETAIL_ID = AT.ITEM_DETAIL_ID
                        //                                                                  WHERE IN_OUT_DATE BETWEEN '2023-04-01 00:00:00' AND '2024-03-31 00:00:00'
                        //                                                                    AND AIM.PROJECT_ID = 11) AS T
                        //                                                          GROUP BY ITEM_DETAIL_ID) AS T1
                        //                                                ON AAI.ITEM_DETAIL_ID = T1.ITEM_DETAIL_ID
                        //                                             WHERE AIM.PROJECT_ID = 11 AND IS_ASSET_DEPRECIATION=1   AND ISDEP=1   
                        //                                             GROUP BY ITEM_DETAIL_ID";
                        break;
                    }
                case ReportSQLCommand.Asset.ChartofAssets:
                    {
                        //query = "SELECT AC.ASSET_CLASS,AI.ASSET_ITEM,UM.SYMBOL AS NAME FROM ASSET_CLASS AC\n" +
                        //         "INNER JOIN ASSET_ITEM AI\n" +
                        //         "INNER JOIN UOM UM\n" +
                        //         "ON  AC.ASSET_CLASS_ID=AI.ASSET_CLASS_ID ORDER BY AC.ASSET_CLASS,AI.ASSET_ITEM ASC;";


                        query = "SELECT IF(PARENT.ASSET_CLASS='Primary', AC.ASSET_CLASS, PARENT.ASSET_CLASS) AS PARENT_CLASS,\n" +
                        "       AC.ASSET_CLASS,\n" +
                        "       AI.ASSET_ITEM,\n" +
                        "       UM.SYMBOL          AS NAME\n" +
                        "  FROM ASSET_CLASS AC\n" +
                        " INNER JOIN ASSET_ITEM AI\n" +
                        " INNER JOIN UOM UM\n" +
                        "    ON AC.ASSET_CLASS_ID = AI.ASSET_CLASS_ID\n" +
                        "  LEFT JOIN ASSET_CLASS PARENT\n" +
                        "    ON AC.PARENT_CLASS_ID = PARENT.ASSET_CLASS_ID\n" +
                        " ORDER BY AC.ASSET_CLASS, AI.ASSET_ITEM ASC;";
                        break;
                    }
            }
                #endregion
            return query;

        }
    }
    #endregion

    #region NetWorking
    public class ReportNetworkingSQL
    {
        public string GetNetWorkingReportSQL(ReportSQLCommand.NetWorking queryId)
        {
            string query = string.Empty;
            switch (queryId)
            {
                #region ProspectInstitutional
                case ReportSQLCommand.NetWorking.ProspectInstitutional:
                    {
                        query = "SELECT MD.NAME,\n" +
                                "       MDRT.REGISTRATION_TYPE,\n" +
                                "       MD.ADDRESS,\n" +
                                "       MC.COUNTRY,\n" +
                                "       MD.PLACE AS CITYPLACE,\n" +
                                "       MD.PHONE AS PHONENO,\n" +
                                "       MS.STATE_NAME\n" +
                                "  FROM MASTER_DONAUD MD\n" +
                                " INNER JOIN MASTER_DONAUD_REG_TYPE MDRT\n" +
                                "    ON MDRT.REGISTRATION_TYPE_ID = MD.REGISTRATION_TYPE_ID\n" +
                                " INNER JOIN MASTER_COUNTRY MC\n" +
                                "    ON MC.COUNTRY_ID = MD.COUNTRY_ID\n" +
                                " INNER JOIN MASTER_STATE MS\n" +
                                "    ON MS.STATE_ID = MD.STATE_ID\n" +
                                " WHERE MD.COUNTRY_ID IN (?COUNTRY_ID)\n" +
                                "   AND MD.STATE_ID IN (?STATE_ID)\n" +
                                "   AND MD.TYPE=1\n" +
                                "   AND MD.REGISTRATION_TYPE_ID IN (?REGISTRATION_TYPE_ID)\n" +
                                " GROUP BY MC.COUNTRY, MD.NAME, MD.PLACE\n" +
                                "\n" +
                                "UNION ALL\n" +
                                "SELECT MD.NAME,\n" +
                                "       MDRT.REGISTRATION_TYPE,\n" +
                                "       MD.ADDRESS,\n" +
                                "       MC.COUNTRY,\n" +
                                "       MD.PLACE AS CITYPLACE,\n" +
                                "       MD.PHONE AS PHONENO,\n" +
                                "       MS.STATE_NAME\n" +
                                "  FROM MASTER_DONAUD_PROSPECTS MD\n" +
                                " INNER JOIN MASTER_DONAUD_REG_TYPE MDRT\n" +
                                "    ON MDRT.REGISTRATION_TYPE_ID = MD.REGISTRATION_TYPE_ID\n" +
                                " INNER JOIN MASTER_COUNTRY MC\n" +
                                "    ON MC.COUNTRY_ID = MD.COUNTRY_ID\n" +
                                " INNER JOIN MASTER_STATE MS\n" +
                                "    ON MS.STATE_ID = MD.STATE_ID\n" +
                                " WHERE MD.COUNTRY_ID IN (?COUNTRY_ID)\n" +
                                "   AND MD.STATE_ID IN (?STATE_ID)\n" +
                                "   AND MD.TYPE=1\n" +
                                "   AND MD.REGISTRATION_TYPE_ID IN (?REGISTRATION_TYPE_ID)\n" +
                                " GROUP BY MC.COUNTRY, MD.NAME, MD.PLACE;";

                        break;
                    }
                #endregion

                #region ProspectIndividual
                case ReportSQLCommand.NetWorking.ProspectIndividual:
                    {
                        query = "SELECT MD.NAME,\n" +
                                "       MDRT.REGISTRATION_TYPE,\n" +
                                "       MD.ADDRESS,\n" +
                                "       MC.COUNTRY,\n" +
                                "       MD.PLACE AS CITYPLACE,\n" +
                                "       MD.PHONE AS PHONENO,\n" +
                                "       MS.STATE_NAME\n" +
                                "  FROM MASTER_DONAUD MD\n" +
                                " INNER JOIN MASTER_DONAUD_REG_TYPE MDRT\n" +
                                "    ON MDRT.REGISTRATION_TYPE_ID = MD.REGISTRATION_TYPE_ID\n" +
                                " INNER JOIN MASTER_COUNTRY MC\n" +
                                "    ON MC.COUNTRY_ID = MD.COUNTRY_ID\n" +
                                " INNER JOIN MASTER_STATE MS\n" +
                                "    ON MS.STATE_ID = MD.STATE_ID\n" +
                                " WHERE MD.COUNTRY_ID IN (?COUNTRY_ID)\n" +
                                "   AND MD.STATE_ID IN (?STATE_ID)\n" +
                                "   AND MD.TYPE=2\n" +
                                "  {AND MD.LANGUAGE IN (?LANGUAGE)}\n" +
                                "   AND MD.REGISTRATION_TYPE_ID IN (?REGISTRATION_TYPE_ID)\n" +
                                " GROUP BY MC.COUNTRY, MD.NAME, MD.PLACE\n" +
                                "\n" +
                                "UNION ALL\n" +
                                "SELECT MD.NAME,\n" +
                                "       MDRT.REGISTRATION_TYPE,\n" +
                                "       MD.ADDRESS,\n" +
                                "       MC.COUNTRY,\n" +
                                "       MD.PLACE AS CITYPLACE,\n" +
                                "       MD.PHONE AS PHONENO,\n" +
                                "       MS.STATE_NAME\n" +
                                "  FROM MASTER_DONAUD_PROSPECTS MD\n" +
                                " INNER JOIN MASTER_DONAUD_REG_TYPE MDRT\n" +
                                "    ON MDRT.REGISTRATION_TYPE_ID = MD.REGISTRATION_TYPE_ID\n" +
                                " INNER JOIN MASTER_COUNTRY MC\n" +
                                "    ON MC.COUNTRY_ID = MD.COUNTRY_ID\n" +
                                " INNER JOIN MASTER_STATE MS\n" +
                                "    ON MS.STATE_ID = MD.STATE_ID\n" +
                                " WHERE MD.COUNTRY_ID IN (?COUNTRY_ID)\n" +
                                "   AND MD.STATE_ID IN (?STATE_ID)\n" +
                                "   AND MD.TYPE=2\n" +
                                "  {AND MD.LANGUAGE IN (?LANGUAGE)}\n" +
                                "   AND MD.REGISTRATION_TYPE_ID IN (?REGISTRATION_TYPE_ID)\n" +
                                " GROUP BY MC.COUNTRY, MD.NAME, MD.PLACE;";
                        break;
                    }

                #endregion

                #region LabelPrint

                case ReportSQLCommand.NetWorking.LabelPrint:
                    {
                        query = "SELECT * FROM (SELECT MDLT.REF_ID,MDLT.STATUS,\n" +
                        "       CONCAT(MD.NAME, ' ', MD.LASTNAME) AS 'NAME',\n" +
                        "       MD.TYPE,\n" +
                        "       MD.PLACE AS 'CITYPLACE',\n" +
                        "       MD.PINCODE,\n" +
                        "       MD.PHONE,\n" +
                        "       MD.FAX,\n" +
                        "       MD.EMAIL,\n" +
                        "      CONCAT(IFNULL(MS.STATE_NAME,' '), CONCAT(' ', MD.PINCODE)) AS 'STATE',\n" +
                        "       MD.ADDRESS\n" +
                        "  FROM MASTER_DONAUD MD\n" +
                        " INNER JOIN MASTER_DONOR_LETTER_TAGS MDLT\n" +
                        "    ON MDLT.REF_ID = MD.DONAUD_ID\n" +
                        " LEFT JOIN MASTER_STATE MS\n" +
                        "    ON MS.STATE_ID = MD.STATE_ID\n" +
                        " WHERE MDLT.TAG_ID IN (?FD_ACCOUNT_ID) AND MDLT.TYPE=0 AND MDLT.COMMUNICATION_MODE=1 AND MD.ADDRESS<>'Nil' AND LENGTH(TRIM(MD.ADDRESS))<>0\n" +
                        "UNION\n" +
                        "SELECT MDLT.REF_ID,MDLT.STATUS,\n" +
                        "       CONCAT(MDP.NAME, ' ', MDP.LASTNAME) AS 'NAME',\n" +
                        "       MDP.TYPE,\n" +
                        "       MDP.PLACE AS 'CITYPLACE',\n" +
                        "       MDP.PINCODE,\n" +
                        "       MDP.PHONE,\n" +
                        "       MDP.FAX,\n" +
                        "       MDP.EMAIL,\n" +
                        "       CONCAT(IFNULL(MS.STATE_NAME,' '), CONCAT(' ', MDP.PINCODE)) AS 'STATE',\n" +
                        "       MDP.ADDRESS\n" +
                        "  FROM MASTER_DONAUD_PROSPECTS MDP\n" +
                        " LEFT JOIN MASTER_STATE MS\n" +
                        "    ON MS.STATE_ID = MDP.STATE_ID\n" +
                        " INNER JOIN MASTER_DONOR_LETTER_TAGS MDLT\n" +
                        "    ON MDLT.REF_ID = MDP.PROSPECT_ID\n" +
                        " WHERE MDLT.TAG_ID IN (?FD_ACCOUNT_ID) AND MDLT.TYPE=1 AND MDLT.COMMUNICATION_MODE=1 AND MDP.ADDRESS<>'Nil' AND LENGTH(TRIM(MDP.ADDRESS))<>0) AS T ORDER BY T.STATUS,T.REF_ID ASC;";
                        break;
                    }
                #endregion

                #region TrackingSheet

                case ReportSQLCommand.NetWorking.TrackingSheet:
                    {
                        query = "SELECT VMT.VOUCHER_DATE AS DATE_DONATION,\n" +
                                " VMT.VOUCHER_ID,\n" +
                                " VT.AMOUNT,\n" +
                                " MD.NAME,\n" +
                                " MD.ADDRESS\n" +
                                "  FROM VOUCHER_MASTER_TRANS VMT\n" +
                                " INNER JOIN VOUCHER_TRANS VT\n" +
                                "    ON VT.VOUCHER_ID = VMT.VOUCHER_ID\n" +
                                " INNER JOIN MASTER_DONAUD MD\n" +
                                " ON MD.DONAUD_ID = VMT.DONOR_ID\n" +
                                " WHERE VMT.DONOR_ID IN (?DONAUD_ID)\n" +
                                "   AND VMT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO GROUP BY VMT.VOUCHER_ID;";
                        break;
                    }
                #endregion

                #region ContactDesk
                case ReportSQLCommand.NetWorking.Thanksgiving:
                    {
                        query = "SELECT MAD.DONAUD_ID,\n" +
                                "       MAD.NAME,\n" +
                                "       VOUCHER_ID,\n" +
                                "       MP.PROJECT,\n" +
                                "       VOUCHER_DATE,\n" +
                                "       VOUCHER_NO,\n" +
                                "       ACTUAL_AMOUNT AS CONTRIBUTION_AMOUNT,\n" +
                                "       MC.COUNTRY,\n" +
                                "       MS.STATE_NAME,\n" +
                                "       PLACE,\n" +
                                "       ADDRESS,\n" +
                                "       EMAIL,\n" +
                                "       PHONE,\n" +
                                "CASE WHEN MAD.STATUS = 1 THEN 'Sent'  WHEN MAD.STATUS = 0 THEN 'Not Sent' END AS STATUS\n" +
                                "  FROM VOUCHER_MASTER_TRANS AS VMT\n" +
                                "  LEFT JOIN MASTER_PROJECT AS MP\n" +
                                "    ON VMT.PROJECT_ID= MP.PROJECT_ID\n" +
                                "  INNER JOIN MASTER_DONAUD AS MAD\n" +
                                "    ON VMT.DONOR_ID = MAD.DONAUD_ID\n" +
                                "  LEFT JOIN MASTER_COUNTRY AS MC\n" +
                                "    ON MC.COUNTRY_ID = MAD.COUNTRY_ID\n" +
                                "  LEFT JOIN MASTER_STATE AS MS\n" +
                                "    ON MS.STATE_ID = MAD.STATE_ID\n" +
                                " WHERE CONTRIBUTION_AMOUNT > 0 \n" +
                                "   {AND MAD.STATUS IN (?INCLUDE_SENT)}\n" +
                                "   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                " ORDER BY STATUS ASC;";
                        break;
                    }
                case ReportSQLCommand.NetWorking.Appeal:
                    {
                        query = "SELECT DONAUD_ID,NAME,\n" +
                        "       CASE\n" +
                        "         WHEN TYPE = 1 THEN\n" +
                        "          'Institutional'\n" +
                        "         ELSE\n" +
                        "          'Individual'\n" +
                        "       END AS TYPE,\n" +
                        "       MC.COUNTRY,\n" +
                        "       MS.STATE_NAME AS STATE,PHONE,\n" +
                        " CASE WHEN ?COMMUNICATION_MODE=1 THEN\n" +
                        "       MD.APPEAL_SENT_DATE_EMAIL\n" +
                        "  ELSE MD.APPEAL_SENT_DATE_SMS END AS LAST_APPEAL,MD.EMAIL\n" +
                        "  FROM MASTER_DONAUD MD\n" +
                        " LEFT JOIN MASTER_COUNTRY MC\n" +
                        "    ON MC.COUNTRY_ID = MD.COUNTRY_ID\n" +
                        " LEFT JOIN MASTER_STATE MS\n" +
                        "    ON MS.STATE_ID = MD.STATE_ID\n" +
                        " WHERE DONAUD_ID NOT IN (SELECT DONOR_ID\n" +
                        "                           FROM VOUCHER_MASTER_TRANS\n" +
                        "                          WHERE VOUCHER_DATE>=?DATE_AS_ON\n" +
                        "                            AND DONOR_ID <> 0\n" +
                        "                          GROUP BY DONOR_ID) AND MD.IDENTITYKEY=0;";
                        break;
                    }
                case ReportSQLCommand.NetWorking.AnniversariesMail:
                    {
                        query = "SELECT MAD.DONAUD_ID,\n" +
                        "       MAD.NAME,\n" +
                        "       MAD.DOB,\n" +
                        "       MC.COUNTRY,\n" +
                        "       MS.STATE_NAME,\n" +
                        "       MAD.PLACE,\n" +
                        "       MAD.EMAIL,\n" +
                        "       MAD.PHONE,\n" +
                        "       MAD.ADDRESS,\n" +
                        "       MAD.ANNIVERSARY_DATE,\n" +
                        "       MAD.CURRENT_BIRTHDAY_DATE_EMAIL,\n" +
                        "       MAD.CURRENT_MARRIAGE_DATE_EMAIL,\n" +
                        "       MAD.CURRENT_BIRTHDAY_DATE_SMS,\n" +
                        "       MAD.CURRENT_MARRIAGE_DATE_SMS,\n" +
                        "       MAD.MARITAL_STATUS,\n" +
                        "  CASE WHEN ?COMMUNICATION_MODE=1 THEN\n" +
                         "  IF(CURRENT_BIRTHDAY_DATE_EMAIL  BETWEEN ?DATE_FROM AND\n" +
                      " ?DATE_TO, 'Sent','Not Sent')\n" +
                       "ELSE IF(CURRENT_MARRIAGE_DATE_EMAIL BETWEEN ?DATE_FROM  AND \n" +
                       " ?DATE_TO,'Sent','Not Sent') END AS STATUS\n" +
                        "  FROM MASTER_DONAUD AS MAD\n" +
                        " LEFT JOIN MASTER_DONOR_LETTER_TAGS MDLT\n" +
                        "    ON MAD.DONAUD_ID = MDLT.REF_ID\n" +
                        " LEFT JOIN MASTER_DONOR_TAGS MDT\n" +
                        "    ON MDT.TAG_ID = MDLT.TAG_ID\n" +
                        "  LEFT JOIN MASTER_COUNTRY AS MC\n" +
                        "    ON MC.COUNTRY_ID = MAD.COUNTRY_ID\n" +
                        "  LEFT JOIN MASTER_STATE AS MS\n" +
                        "    ON MS.STATE_ID = MAD.STATE_ID\n" +
                        " WHERE IF(?ANNIVERSARY_TYPE = 0,\n" +
                        "        DOB BETWEEN ?DATE_FROM AND ?DATE_TO,\n" +
                        "          ANNIVERSARY_DATE BETWEEN ?DATE_FROM AND ?DATE_TO)\n" +
                        " GROUP BY DONAUD_ID";
                        break;
                    }
                case ReportSQLCommand.NetWorking.AnniversariesSMS:
                    {
                        query = "SELECT MAD.DONAUD_ID,\n" +
                        "       MAD.NAME,\n" +
                        "       MAD.DOB,\n" +
                        "       MC.COUNTRY,\n" +
                        "       MS.STATE_NAME,\n" +
                        "       MAD.PLACE,\n" +
                        "       MAD.EMAIL,\n" +
                        "       MAD.PHONE,\n" +
                        "       MAD.ADDRESS,\n" +
                        "       MAD.ANNIVERSARY_DATE,\n" +
                        "       MAD.CURRENT_BIRTHDAY_DATE_EMAIL,\n" +
                        "       MAD.CURRENT_MARRIAGE_DATE_EMAIL,\n" +
                        "       MAD.CURRENT_BIRTHDAY_DATE_SMS,\n" +
                        "       MAD.CURRENT_MARRIAGE_DATE_SMS,\n" +
                        "       MAD.MARITAL_STATUS,\n" +
                        "  CASE WHEN ?COMMUNICATION_MODE=1 THEN\n" +
                         "  IF(CURRENT_BIRTHDAY_DATE_SMS  BETWEEN ?DATE_FROM AND\n" +
                      " ?DATE_TO, 'Sent','Not Sent')\n" +
                       "ELSE IF(CURRENT_MARRIAGE_DATE_SMS BETWEEN ?DATE_FROM  AND \n" +
                       " ?DATE_TO,'Sent','Not Sent') END AS STATUS\n" +
                        "  FROM MASTER_DONAUD AS MAD\n" +
                        " LEFT JOIN MASTER_DONOR_LETTER_TAGS MDLT\n" +
                        "    ON MAD.DONAUD_ID = MDLT.REF_ID\n" +
                        " LEFT JOIN MASTER_DONOR_TAGS MDT\n" +
                        "    ON MDT.TAG_ID = MDLT.TAG_ID\n" +
                        "  LEFT JOIN MASTER_COUNTRY AS MC\n" +
                        "    ON MC.COUNTRY_ID = MAD.COUNTRY_ID\n" +
                        "  LEFT JOIN MASTER_STATE AS MS\n" +
                        "    ON MS.STATE_ID = MAD.STATE_ID\n" +
                        " WHERE IF(?ANNIVERSARY_TYPE = 0,\n" +
                        "        DOB BETWEEN ?DATE_FROM AND ?DATE_TO,\n" +
                        "          ANNIVERSARY_DATE BETWEEN ?DATE_FROM AND ?DATE_TO)\n" +
                        " GROUP BY DONAUD_ID";
                        break;
                    }
                case ReportSQLCommand.NetWorking.FeastDay:
                    {
                        query = "SELECT T.TAG_ID,\n" +
                               "       T.REF_ID,\n" +
                               "       T.EMAIL_STATUS,\n" +
                               "       T.EMAIL_SENT_DATE,\n" +
                               "       T.NAME,\n" +
                               "       T.PLACE,\n" +
                               "       T.PINCODE,\n" +
                               "       T.PHONE,\n" +
                               "       T.FAX,\n" +
                               "       T.EMAIL,\n" +
                               "       T.ADDRESS,\n" +
                               "       T.PAN,\n" +
                               "       T.TYPE AS TYPE_ID,\n" +
                               "       CASE WHEN T.EMAIL_STATUS=0 THEN 'Not Sent' else 'Sent' END AS STATUS,\n" +
                               "       CASE WHEN T.TYPE=0 THEN 'Donor' else 'Prospect' END AS TYPE\n" +
                               "  FROM ((SELECT MDL.TAG_ID,\n" +
                               "                MDL.REF_ID,\n" +
                               "                MDL.STATUS AS EMAIL_STATUS,\n" +
                               "                MDL.SENT_DATE AS EMAIL_SENT_DATE,\n" +
                               "                MDL.TYPE,\n" +
                               "                MD.NAME,\n" +
                               "                MD.PLACE,\n" +
                               "                MD.PINCODE,\n" +
                               "                MD.RELIGION,\n" +
                               "                MD.LANGUAGE,\n" +
                               "                MS.STATE_NAME,\n" +
                               "                MD.PHONE,\n" +
                               "                MD.FAX,\n" +
                               "                MD.EMAIL,\n" +
                               "                MD.ADDRESS,\n" +
                               "                MD.PAN\n" +
                               "           FROM MASTER_DONOR_LETTER_TAGS MDL\n" +
                               "          INNER JOIN MASTER_DONAUD MD\n" +
                               "             ON MDL.REF_ID = MD.DONAUD_ID\n" +
                               "          LEFT JOIN MASTER_STATE MS\n" +
                               "             ON MD.STATE_ID = MS.STATE_ID\n" +
                               "          WHERE MDL.TYPE = 0 AND MDL.COMMUNICATION_MODE=?REGISTRATION_TYPE_ID) UNION\n" +
                               "        (SELECT MDL.TAG_ID,\n" +
                               "                MDL.REF_ID,\n" +
                               "                MDL.STATUS AS EMAIL_STATUS,\n" +
                               "                MDL.SENT_DATE AS EMAIL_SENT_DATE,\n" +
                               "                MDL.TYPE,\n" +
                               "                MP.NAME,\n" +
                               "                MP.PLACE,\n" +
                               "                MP.PINCODE,\n" +
                               "                MP.RELIGION,\n" +
                               "                MP.LANGUAGE,\n" +
                               "                MS.STATE_NAME,\n" +
                               "                MP.PHONE,\n" +
                               "                MP.FAX,\n" +
                               "                MP.EMAIL,\n" +
                               "                MP.ADDRESS,\n" +
                               "                MP.PAN\n" +
                               "           FROM MASTER_DONOR_LETTER_TAGS MDL\n" +
                               "          INNER JOIN MASTER_DONAUD_PROSPECTS MP\n" +
                               "             ON MDL.REF_ID = MP.PROSPECT_ID\n" +
                               "          LEFT JOIN MASTER_STATE MS\n" +
                               "             ON MP.STATE_ID = MS.STATE_ID\n" +
                               "          WHERE MDL.TYPE = 1 AND MDL.COMMUNICATION_MODE=?REGISTRATION_TYPE_ID)) AS T\n" +
                               " WHERE T.TAG_ID = ?TAG_ID {AND T.EMAIL_STATUS=?INCLUDE_SENT} ORDER BY T.EMAIL_STATUS ASC;";

                        break;
                    }
                #endregion

                #region
                case ReportSQLCommand.NetWorking.DonationStatistics:
                    {
                        query = @"SELECT NAME,
                                       ADDRESS,
                                       RELIGION,
                                       PLACE,
                                       MS.STATE_NAME AS STATE,
                                       PINCODE,
                                       CASE WHEN REGISTRATION_TYPE_ID =1 THEN 'ECS'
                                       WHEN REGISTRATION_TYPE_ID =2 THEN 'Company'
                                       WHEN REGISTRATION_TYPE_ID =3 THEN 'EDC'
                                       WHEN REGISTRATION_TYPE_ID =4 THEN 'Religious Reference'
                                       WHEN REGISTRATION_TYPE_ID =5 THEN 'Foreign'
                                       WHEN REGISTRATION_TYPE_ID =6 THEN 'EDC'
                                       ELSE NULL END AS REGISTRATION_TYPE,
                                       REGISTER_NO,
                                       S.DONOR_ID, S.NO_OF_TIMES, S.FIRST_DONATION,E.LAST_DONATION, E.LAST_DONATION_AMOUNT
                                       FROM MASTER_DONAUD MD LEFT JOIN MASTER_STATE MS ON MD.STATE_ID =MS.STATE_ID
                                  JOIN (
                                SELECT T.DONOR_ID,
                                               COUNT(*) AS NO_OF_TIMES,
                                               T.VOUCHER_DATE AS FIRST_DONATION,
                                               SUM(T.ACTUAL_AMOUNT) AS LAST_DONATION_AMOUNT
                                          FROM (SELECT DONOR_ID, VOUCHER_DATE, ACTUAL_AMOUNT
                                                  FROM VOUCHER_MASTER_TRANS VMT
                                                 WHERE DONOR_ID > 0
                                                   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO
                                                 ORDER BY DONOR_ID, VOUCHER_ID ASC) AS T
                                            GROUP BY DONOR_ID ) AS S,
                                (SELECT T.DONOR_ID,
                                               COUNT(*) AS NO_OF_TIMES,
                                               '' AS FIRST_DONATION,
                                              T.VOUCHER_DATE AS LAST_DONATION,
                                               SUM(T.ACTUAL_AMOUNT) AS LAST_DONATION_AMOUNT
                                          FROM (SELECT DONOR_ID,VOUCHER_DATE, ACTUAL_AMOUNT
                                                  FROM VOUCHER_MASTER_TRANS VMT
                                                 WHERE DONOR_ID > 0
                                                   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO
                                                 ORDER BY DONOR_ID, VOUCHER_ID DESC) AS T
                                           GROUP BY DONOR_ID ) AS E WHERE S.DONOR_ID=E.DONOR_ID AND MD.DONAUD_ID = S.DONOR_ID
                                           AND MD.DONAUD_ID = E.DONOR_ID";

                        //query = "SELECT NAME,\n" + // commanded by chinna
                        //       "       PLACE,\n" +
                        //       "       ADDRESS,\n" +
                        //       "       TT.NO_OF_TIMES,\n" +
                        //       "       TT.LAST_DONATION,\n" +
                        //       "       TT.LAST_DONATION_AMOUNT\n" +
                        //       "  FROM MASTER_DONAUD MD\n" +
                        //       "  JOIN (SELECT DONOR_ID,\n" +
                        //       "               COUNT(*) AS NO_OF_TIMES,\n" +
                        //       "               VOUCHER_DATE AS LAST_DONATION,\n" +
                        //       "               SUM(ACTUAL_AMOUNT) AS LAST_DONATION_AMOUNT\n" +
                        //       "          FROM (SELECT DONOR_ID, VOUCHER_DATE, ACTUAL_AMOUNT\n" +
                        //       "                  FROM VOUCHER_MASTER_TRANS VMT\n" +
                        //       "                 WHERE DONOR_ID > 0\n" +
                        //       "                   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        //       "                 ORDER BY DONOR_ID, VOUCHER_ID DESC) AS T\n" +
                        //       "         GROUP BY DONOR_ID) AS TT\n" +
                        //       "    ON MD.DONAUD_ID = TT.DONOR_ID\n" +
                        //       " ORDER BY NAME;";


                        //query = "SELECT NAME,\n" +
                        //        "       PLACE,\n" +
                        //        "       ADDRESS,\n" +
                        //        "       TT.NO_OF_TIMES,\n" +
                        //        "       TT.LAST_DONATION,\n" +
                        //        "       TT.LAST_DONATION_AMOUNT\n" +
                        //        "  FROM MASTER_DONAUD MD\n" +
                        //        "  JOIN (SELECT DONOR_ID,\n" +
                        //        "               COUNT(*) AS NO_OF_TIMES,\n" +
                        //        "               VOUCHER_DATE AS LAST_DONATION,\n" +
                        //        "               SUM(CONTRIBUTION_AMOUNT) AS LAST_DONATION_AMOUNT\n" +
                        //        "          FROM (SELECT DONOR_ID, VOUCHER_DATE, CONTRIBUTION_AMOUNT\n" +
                        //        "                  FROM VOUCHER_MASTER_TRANS VMT\n" +
                        //        "                 WHERE DONOR_ID > 0\n" +
                        //        "                   AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        //        "                 ORDER BY DONOR_ID, VOUCHER_ID DESC) AS T\n" +
                        //        "         GROUP BY DONOR_ID) AS TT\n" +
                        //        "    ON MD.DONAUD_ID = TT.DONOR_ID\n" +
                        //        " ORDER BY NAME;";
                        break;
                    }
                #endregion
            }
            return query;
        }
    }
    #endregion

    #region Stock
    public class Stock
    {
        public string GetStockSQL(ReportSQLCommand.Stock queryId)
        {
            string query = string.Empty;
            switch (queryId)
            {
                /*
                 * 
                 */
                case ReportSQLCommand.Stock.StockSummaryItem:
                    {
                        query = "SELECT TT.BALANCE_DATE,\n" +
                                "       TT.LOCATION_NAME,\n" +
                                "       TT.ITEM_ID,\n" +
                                "       TT.LOCATION_ID,\n" +
                                "       TT.NAME,\n" +
                                "       TT.RATE,\n" +
                                "       SUM(TT.QUANTITY) AS QUANTITY,\n" +
                                "       TT.RATE * TT.QUANTITY AS VALUE_AMOUNT\n" +
                                "  FROM (SELECT T.BALANCE_DATE,\n" +
                                "               T.LOCATION_NAME,\n" +
                                "               T.ITEM_ID,\n" +
                                "               T.LOCATION_ID,\n" +
                                "               T.NAME,\n" +
                                "               T.RATE,\n" +
                                "               T.QUANTITY,\n" +
                                "               T.RATE * T.QUANTITY AS VALUE_AMOUNT\n" +
                                "          FROM (SELECT ISV.BALANCE_DATE,\n" +
                                "                       SL.LOCATION_NAME,\n" +
                                "                       ISV.ITEM_ID,\n" +
                                "                       SL.LOCATION_ID,\n" +
                                "                       SI.NAME,\n" +
                                "                       ISV.RATE,\n" +
                                "                       ISV.QUANTITY\n" +
                                "                  FROM INVENTORY_STOCK ISV\n" +
                                "                  INNER JOIN STOCK_ITEM SI\n" +
                                "                    ON ISV.ITEM_ID = SI.ITEM_ID\n" +
                                "                  INNER JOIN ASSET_STOCK_LOCATION SL\n" +
                                "                    ON ISV.LOCATION_ID = SL.LOCATION_ID\n" +
                                "                 WHERE ISV.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "                   AND BALANCE_DATE BETWEEN ?DATE_FROM AND\n" +
                                "                       ?DATE_TO\n" +
                                "                 ORDER BY ISV.BALANCE_DATE DESC) AS T\n" +
                                "         WHERE T.QUANTITY NOT IN (0)\n" +
                                "         GROUP BY T.ITEM_ID, T.LOCATION_ID) AS TT\n" +
                                " GROUP BY ITEM_ID";
                        break;
                    }
                case ReportSQLCommand.Stock.StockRegister:
                    {
                        query = "SELECT CASE\n" +
                                "         WHEN ISV.TRANS_FLAG = 'OP' THEN\n" +
                                "          DATE_ADD(ISV.BALANCE_DATE, INTERVAL 1 DAY)\n" +
                                "         ELSE\n" +
                                "          ISV.BALANCE_DATE\n" +
                                "       END AS STOCK_DATE,\n" +
                                "       MP.PROJECT,\n" +
                                "       SG.GROUP_NAME,\n" +
                                "        ASL.LOCATION AS LOCATION_NAME,\n" +
                                "       SI.NAME AS ITEM_NAME,\n" +
                                "       SYMBOL,\n" +
                                "       ISV.RATE,\n" +
                                "       (ISV.QUANTITY * ISV.RATE) AS AMOUNT,\n" +   // SMD.AMOUNT,
                                "       ISV.QUANTITY\n" +
                                "  FROM INVENTORY_STOCK ISV\n" +
                                "  INNER JOIN ASSET_LOCATION ASL\n" +
                                "    ON ISV.LOCATION_ID = ASL.LOCATION_ID\n" +
                                " INNER JOIN MASTER_PROJECT MP\n" +
                                "    ON ISV.PROJECT_ID = MP.PROJECT_ID\n" +
                                " INNER JOIN STOCK_ITEM SI\n" +
                                "    ON ISV.ITEM_ID = SI.ITEM_ID\n" +
                                "    INNER JOIN UOM UM\n" +
                                "    ON SI.UNIT_ID = UM.UOM_ID\n" +
                                " INNER JOIN STOCK_GROUP SG\n" +
                                "    ON SI.GROUP_ID = SG.GROUP_ID\n" +
                                "  LEFT JOIN STOCK_PURCHASE_DETAILS SMD\n" +
                                "    ON ISV.ITEM_ID = SMD.ITEM_ID\n" +
                                "  JOIN (SELECT MAX(BALANCE_DATE) AS BAL_DATE,\n" +
                                "               LOCATION_ID AS LOC_ID,\n" +
                                "               ITEM_ID AS ITM_ID\n" +
                                "          FROM INVENTORY_STOCK ISV\n" +
                                "         WHERE PROJECT_ID IN (?PROJECT_ID) {\n" +
                                "           AND ITEM_ID IN (?ITEM_ID) }\n" +
                                "           AND BALANCE_DATE <= ?DATE_FROM\n" +
                                "         GROUP BY LOCATION_ID, ITEM_ID) AS T\n" +
                                "    ON ISV.LOCATION_ID = T.LOC_ID\n" +
                                "   AND ISV.ITEM_ID IN (T.ITM_ID)\n" +
                                "   AND ISV.BALANCE_DATE = T.BAL_DATE\n" +
                                " WHERE ISV.PROJECT_ID IN (?PROJECT_ID) AND ISV.QUANTITY NOT IN (0) {\n" +
                                "   AND SG.GROUP_ID = ?GROUP_ID}\n" +
                                " GROUP BY ISV.LOCATION_ID, ISV.ITEM_ID\n" +
                                " ORDER BY SI.NAME ASC";

                        //query = "SELECT CASE\n" +
                        //       "         WHEN ISV.TRANS_FLAG = 'OP' THEN\n" +
                        //       "          DATE_ADD(ISV.BALANCE_DATE, INTERVAL 1 DAY)\n" +
                        //       "         ELSE\n" +
                        //       "          ISV.BALANCE_DATE\n" +
                        //       "       END AS STOCK_DATE,\n" +
                        //       "       MP.PROJECT,\n" +
                        //       "       SG.GROUP_NAME,\n" +
                        //       "        ASL.LOCATION AS LOCATION_NAME,\n" +
                        //       "       SI.NAME AS ITEM_NAME,\n" +
                        //       "       SYMBOL,\n" +
                        //       "       ISV.RATE,\n" +
                        //       "       (ISV.QUANTITY * ISV.RATE) AS AMOUNT,\n" +   // SMD.AMOUNT,
                        //       "       ISV.QUANTITY\n" +
                        //       "  FROM INVENTORY_STOCK ISV\n" +
                        //       "  INNER JOIN ASSET_LOCATION ASL\n" +
                        //       "    ON ISV.LOCATION_ID = ASL.LOCATION_ID\n" +
                        //       " INNER JOIN MASTER_PROJECT MP\n" +
                        //       "    ON ISV.PROJECT_ID = MP.PROJECT_ID\n" +
                        //       " INNER JOIN STOCK_ITEM SI\n" +
                        //       "    ON ISV.ITEM_ID = SI.ITEM_ID\n" +
                        //       "    INNER JOIN UOM UM\n" +
                        //       "    ON SI.UNIT_ID = UM.UOM_ID\n" +
                        //       " INNER JOIN STOCK_GROUP SG\n" +
                        //       "    ON SI.GROUP_ID = SG.GROUP_ID\n" +
                        //       "  LEFT JOIN STOCK_PURCHASE_DETAILS SMD\n" +
                        //       "    ON ISV.ITEM_ID = SMD.ITEM_ID\n" +
                        //       "  JOIN (SELECT MAX(BALANCE_DATE) AS BAL_DATE,\n" +
                        //       "               LOCATION_ID AS LOC_ID,\n" +
                        //       "               ITEM_ID AS ITM_ID\n" +
                        //       "          FROM INVENTORY_STOCK ISV\n" +
                        //       "         WHERE PROJECT_ID IN (?PROJECT_ID) {\n" +
                        //       "           AND ITEM_ID IN (?ITEM_ID) }\n" +
                        //       "           AND QUANTITY NOT IN (0)\n" +
                        //       "           AND BALANCE_DATE <= ?DATE_FROM\n" +
                        //       "         GROUP BY LOCATION_ID, ITEM_ID) AS T\n" +
                        //       "    ON ISV.LOCATION_ID = T.LOC_ID\n" +
                        //       "   AND ISV.ITEM_ID IN (T.ITM_ID)\n" +
                        //       "   AND ISV.BALANCE_DATE = T.BAL_DATE\n" +
                        //       " WHERE ISV.PROJECT_ID IN (?PROJECT_ID) {\n" +
                        //       "   AND SG.GROUP_ID = ?GROUP_ID}\n" +
                        //       " GROUP BY ISV.LOCATION_ID, ISV.ITEM_ID\n" +
                        //       " ORDER BY SI.NAME ASC";

                        break;
                    }
                case ReportSQLCommand.Stock.StockTransferredItem:
                    {
                        query = "SELECT IT.ITEM_ID,\n" +
                                "       TRANSFER_DATE AS DATE,\n" +
                                "       SI.NAME AS ITEM_NAME,\n" +
                            //     "       IF(ISI.QUANTITY IS NULL, 0, ISI.QUANTITY) AS TOTAL_QUANTITY,\n" +
                                "      ASL.LOCATION AS FROM_LOCATION,\n" +
                                "      ASLT.LOCATION AS TO_LOCATION,\n" +
                                "       IT.QUANTITY AS TRANSFERED_QTY,\n" +
                                "       SYMBOL\n" +
                            //       "       IF(ISI.QUANTITY IS NULL, 0, ISI.QUANTITY -IT.QUANTITY) AS REMAINING_QTY\n" +
                                "  FROM STOCK_ITEM_TRANSFER IT\n" +
                                "  INNER JOIN STOCK_ITEM SI\n" +
                                "    ON IT.ITEM_ID = SI.ITEM_ID\n" +
                              "INNER JOIN ASSET_LOCATION ASL\n" +
                                    "ON IT.FROM_LOCATION_ID = ASL.LOCATION_ID\n" +
                                  "INNER JOIN ASSET_LOCATION ASLT\n" +
                                    "ON IT.TO_LOCATION_ID = ASLT.LOCATION_ID\n" +
                                  "INNER JOIN UOM UM\n" +
                                    "ON SI.UNIT_ID = UM.UOM_ID\n" +
                                "  INNER JOIN INVENTORY_STOCK ISI\n" +
                                "    ON ISI.PROJECT_ID = IT.PROJECT_ID\n" +
                                "   AND ISI.LOCATION_ID = IT.FROM_LOCATION_ID\n" +
                                "   AND ISI.ITEM_ID = IT.ITEM_ID\n" +
                                " WHERE IT.PROJECT_ID IN(?PROJECT_ID)\n" +
                                "   {AND IT.ITEM_ID IN(?ITEM_ID)}\n" +
                                "   AND TRANSFER_DATE BETWEEN  ?DATE_FROM AND ?DATE_TO GROUP BY TRANSFER_ID;";
                        break;
                    }
                case ReportSQLCommand.Stock.StockLocationSummary:
                    {
                        query = @"SELECT
                                     CASE
                                     WHEN TT.TRANS_FLAG = 'OP' THEN
                                     DATE_ADD(TT.BALANCE_DATE, INTERVAL 1 DAY)
                                     ELSE
                                     TT.BALANCE_DATE
                                     END AS STOCK_DATE,
                                           TT.BALANCE_DATE,
                                           TT.LOCATION_NAME,
                                           TT.PROJECT_ID,
                                           TT.ITEM_ID,
                                           TT.LOCATION_ID,
                                           TT.NAME,
                                           TT.RATE,
                                           TT.SYMBOL,
                                           TT.TRANS_FLAG,
                                           TT.QUANTITY,
                                           TT.RATE * TT.QUANTITY AS VALUE_AMOUNT
                                      FROM (SELECT ISV.BALANCE_DATE AS BALANCE_DATE,
                                                   SL.LOCATION AS LOCATION_NAME,
                                                   ISV.PROJECT_ID,
                                                   ISV.ITEM_ID,
                                                   SL.LOCATION_ID,
                                                   SI.NAME,
                                                   SYMBOL,
                                                   ISV.TRANS_FLAG,
                                                   ISV.RATE,
                                                   ISV.QUANTITY
                                              FROM INVENTORY_STOCK ISV
                                              INNER JOIN STOCK_ITEM SI
                                                ON ISV.ITEM_ID = SI.ITEM_ID
                                              INNER JOIN ASSET_LOCATION SL
                                                ON ISV.LOCATION_ID = SL.LOCATION_ID
                                     INNER JOIN UOM UM
                                        ON SI.UNIT_ID = UM.UOM_ID
                                             JOIN (SELECT MAX(BALANCE_DATE) AS BAL_DATE,
                                                   LOCATION_ID AS LOC_ID,
                                                   ITEM_ID AS ITM_ID
                                              FROM INVENTORY_STOCK ISV
                                             WHERE PROJECT_ID IN (?PROJECT_ID)
                                               AND BALANCE_DATE <= ?DATE_FROM
                                               { AND ISV.LOCATION_ID IN (?LOCATION_ID) }
                                             GROUP BY LOCATION_ID, ITEM_ID) AS T
                                               ON ISV.LOCATION_ID = T.LOC_ID
                                       AND ISV.ITEM_ID = T.ITM_ID
                                       AND ISV.BALANCE_DATE = T.BAL_DATE
                                     WHERE ISV.PROJECT_ID IN (?PROJECT_ID) { AND ISV.LOCATION_ID IN (?LOCATION_ID) }
                                     GROUP BY ISV.LOCATION_ID, ISV.ITEM_ID ) AS TT WHERE TT.QUANTITY NOT IN (0) GROUP BY TT.LOCATION_ID, TT.ITEM_ID";
                        // 22.02.2021 ON 5 PM 
                        //                        query = @"SELECT
                        //                                     CASE
                        //                                     WHEN TT.TRANS_FLAG = 'OP' THEN
                        //                                     DATE_ADD(TT.BALANCE_DATE, INTERVAL 1 DAY)
                        //                                     ELSE
                        //                                     TT.BALANCE_DATE
                        //                                     END AS STOCK_DATE,
                        //                                           TT.BALANCE_DATE,
                        //                                           TT.LOCATION_NAME,
                        //                                           TT.PROJECT_ID,
                        //                                           TT.ITEM_ID,
                        //                                           TT.LOCATION_ID,
                        //                                           TT.NAME,
                        //                                           TT.RATE,
                        //                                           TT.SYMBOL,
                        //                                           TT.TRANS_FLAG,
                        //                                           TT.QUANTITY,
                        //                                           TT.RATE * TT.QUANTITY AS VALUE_AMOUNT
                        //                                      FROM (SELECT ISV.BALANCE_DATE AS BALANCE_DATE,
                        //                                                   SL.LOCATION AS LOCATION_NAME,
                        //                                                   ISV.PROJECT_ID,
                        //                                                   ISV.ITEM_ID,
                        //                                                   SL.LOCATION_ID,
                        //                                                   SI.NAME,
                        //                                                   SYMBOL,
                        //                                                   ISV.TRANS_FLAG,
                        //                                                   ISV.RATE,
                        //                                                   ISV.QUANTITY
                        //                                              FROM INVENTORY_STOCK ISV
                        //                                              INNER JOIN STOCK_ITEM SI
                        //                                                ON ISV.ITEM_ID = SI.ITEM_ID
                        //                                              INNER JOIN ASSET_LOCATION SL
                        //                                                ON ISV.LOCATION_ID = SL.LOCATION_ID
                        //                                     INNER JOIN UOM UM
                        //                                        ON SI.UNIT_ID = UM.UOM_ID
                        //                                             JOIN (SELECT MAX(BALANCE_DATE) AS BAL_DATE,
                        //                                                   LOCATION_ID AS LOC_ID,
                        //                                                   ITEM_ID AS ITM_ID
                        //                                              FROM INVENTORY_STOCK ISV
                        //                                             WHERE PROJECT_ID IN (?PROJECT_ID)
                        //                                               AND QUANTITY NOT IN (0)
                        //                                               AND BALANCE_DATE <= ?DATE_FROM
                        //                                               { AND ISV.LOCATION_ID IN (?LOCATION_ID) }
                        //                                             GROUP BY LOCATION_ID, ITEM_ID) AS T
                        //                                               ON ISV.LOCATION_ID = T.LOC_ID
                        //                                       AND ISV.ITEM_ID = T.ITM_ID
                        //                                       AND ISV.BALANCE_DATE = T.BAL_DATE
                        //                                     WHERE ISV.PROJECT_ID IN (?PROJECT_ID) { AND ISV.LOCATION_ID IN (?LOCATION_ID) }
                        //                                     GROUP BY ISV.LOCATION_ID, ISV.ITEM_ID ) AS TT GROUP BY TT.LOCATION_ID, TT.ITEM_ID";


                        // Chinna 23.01.2021
                        //query = " SELECT\n" +
                        //        " CASE\n" +
                        //        " WHEN T.TRANS_FLAG = 'OP' THEN\n" +
                        //        " DATE_ADD(T.BALANCE_DATE, INTERVAL 1 DAY)\n" +
                        //        " ELSE\n" +
                        //        " T.BALANCE_DATE\n" +
                        //        " END AS STOCK_DATE,\n" +
                        //        " T.BALANCE_DATE,\n" +
                        //        "       T.LOCATION_NAME,\n" +
                        //        "       T.ITEM_ID,\n" +
                        //        "       T.LOCATION_ID,\n" +
                        //        "       T.NAME,\n" +
                        //        "       T.RATE,\n" +
                        //        "       T.SYMBOL,\n" +
                        //        "       T.TRANS_FLAG,\n" +
                        //        "       T.QUANTITY,\n" +
                        //        "       T.RATE * T.QUANTITY AS VALUE_AMOUNT\n" +
                        //        "  FROM (SELECT ISV.BALANCE_DATE,\n" +
                        //        "                SL.LOCATION AS LOCATION_NAME,\n" +
                        //        "               ISV.ITEM_ID,\n" +
                        //        "               SL.LOCATION_ID,\n" +
                        //        "               SI.NAME,\n" +
                        //        "               SYMBOL,\n" +
                        //        "               ISV.TRANS_FLAG,\n" +
                        //        "               ISV.RATE,\n" +
                        //        "               ISV.QUANTITY\n" +
                        //        "          FROM INVENTORY_STOCK ISV\n" +
                        //        "          INNER JOIN STOCK_ITEM SI\n" +
                        //        "            ON ISV.ITEM_ID = SI.ITEM_ID\n" +
                        //        "          INNER JOIN ASSET_LOCATION SL\n" +
                        //        "            ON ISV.LOCATION_ID = SL.LOCATION_ID\n" +
                        //        " INNER JOIN UOM UM\n" +
                        //        "    ON SI.UNIT_ID = UM.UOM_ID\n" +
                        //        "         WHERE ISV.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //        "           AND BALANCE_DATE <=?DATE_FROM\n" +
                        //        "      {AND ISV.LOCATION_ID IN (?LOCATION_ID)}\n" +
                        //        "         ORDER BY SI.NAME ASC) AS T\n" +
                        //        " WHERE T.QUANTITY NOT IN (0)\n" +
                        //        " GROUP BY T.ITEM_ID,T.LOCATION_ID";

                        // CHINNA 13.01.2020
                        //query = " SELECT\n" +
                        //     " CASE\n" +
                        //     " WHEN T.TRANS_FLAG = 'OP' THEN\n" +
                        //     " DATE_ADD(T.BALANCE_DATE, INTERVAL 1 DAY)\n" +
                        //     " ELSE\n" +
                        //     " T.BALANCE_DATE\n" +
                        //     " END AS STOCK_DATE,\n" +
                        //     " T.BALANCE_DATE,\n" +
                        //     "       T.LOCATION_NAME,\n" +
                        //     "       T.ITEM_ID,\n" +
                        //     "       T.LOCATION_ID,\n" +
                        //     "       T.NAME,\n" +
                        //     "       T.RATE,\n" +
                        //     "       T.SYMBOL,\n" +
                        //     "       T.TRANS_FLAG,\n" +
                        //     "       T.QUANTITY,\n" +
                        //     "       T.RATE * T.QUANTITY AS VALUE_AMOUNT\n" +
                        //     "  FROM (SELECT ISV.BALANCE_DATE,\n" +
                        //     "               SL.LOCATION_NAME,\n" +
                        //     "               ISV.ITEM_ID,\n" +
                        //     "               SL.LOCATION_ID,\n" +
                        //     "               SI.NAME,\n" +
                        //     "               SYMBOL,\n" +
                        //     "               ISV.TRANS_FLAG,\n" +
                        //     "               ISV.RATE,\n" +
                        //     "               ISV.QUANTITY\n" +
                        //     "          FROM INVENTORY_STOCK ISV\n" +
                        //     "          INNER JOIN STOCK_ITEM SI\n" +
                        //     "            ON ISV.ITEM_ID = SI.ITEM_ID\n" +
                        //     "          INNER JOIN ASSET_STOCK_LOCATION SL\n" +
                        //     "            ON ISV.LOCATION_ID = SL.LOCATION_ID\n" +
                        //     " INNER JOIN ASSET_STOCK_UNITOFMEASURE UM\n" +
                        //     "    ON SI.UNIT_ID = UM.UNIT_ID\n" +
                        //     "         WHERE ISV.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //     "           AND BALANCE_DATE <=?DATE_FROM\n" +
                        //     "      {AND ISV.LOCATION_ID IN (?LOCATION_ID)}\n" +
                        //     "         ORDER BY SI.NAME ASC) AS T\n" +
                        //     " WHERE T.QUANTITY NOT IN (0)\n" +
                        //     " GROUP BY T.ITEM_ID,T.LOCATION_ID";
                        break;
                    }

                case ReportSQLCommand.Stock.stockGroupLocationwise:
                    {
                        query = "SELECT CASE\n" +
                            "         WHEN T.TRANS_FLAG = 'OP' THEN\n" +
                            "          DATE_ADD(T.BALANCE_DATE, INTERVAL 1 DAY)\n" +
                            "         ELSE\n" +
                            "          T.BALANCE_DATE\n" +
                            "       END AS STOCK_DATE,\n" +
                            "       T.BALANCE_DATE,\n" +
                            "       T.LOCATION_NAME,\n" +
                            "       T.ITEM_ID,\n" +
                            "       T.LOCATION_ID,\n" +
                            "       T.NAME,\n" +
                            "       T.RATE,\n" +
                            "       T.SYMBOL,\n" +
                            "       T.GROUP_NAME,\n" +
                            "       T.TRANS_FLAG,\n" +
                            "       T.QUANTITY,\n" +
                            "       T.RATE * T.QUANTITY AS VALUE_AMOUNT\n" +
                            "  FROM (SELECT ISV.BALANCE_DATE,\n" +
                            "               SL.LOCATION_NAME,\n" +
                            "               ISV.ITEM_ID,\n" +
                            "               SL.LOCATION_ID,\n" +
                            "               SI.NAME,\n" +
                            "               SYMBOL,\n" +
                            "               ISV.TRANS_FLAG,\n" +
                            "               SG.GROUP_NAME,\n" +
                            "               ISV.RATE,\n" +
                            "               ISV.QUANTITY\n" +
                            "          FROM INVENTORY_STOCK ISV\n" +
                            "         INNER JOIN STOCK_ITEM SI\n" +
                            "            ON ISV.ITEM_ID = SI.ITEM_ID\n" +
                            "         INNER JOIN STOCK_GROUP SG\n" +
                            "            ON SI.GROUP_ID = SG.GROUP_ID\n" +
                            "         INNER JOIN ASSET_STOCK_LOCATION SL\n" +
                            "            ON ISV.LOCATION_ID = SL.LOCATION_ID\n" +
                            "         INNER JOIN ASSET_STOCK_UNITOFMEASURE UM\n" +
                            "            ON SI.UNIT_ID = UM.UNIT_ID\n" +
                            "         WHERE ISV.PROJECT_ID IN (?PROJECT_ID)\n" +
                            "         AND BALANCE_DATE <=?DATE_FROM\n" +
                            "         {AND ISV.LOCATION_ID IN (?LOCATION_ID)}\n" +
                            "         ORDER BY SI.NAME ASC) AS T\n" +
                            " WHERE T.QUANTITY NOT IN (0)\n" +
                            " GROUP BY T.ITEM_ID, T.LOCATION_ID";

                        break;
                    }

                case ReportSQLCommand.Stock.StockPurchase:
                    {
                        query = "SELECT LOCATION AS LOCATION_NAME,\n" +
                                   "AG.GROUP_NAME,\n" +
                            //"SC.CATEGORY_NAME,\n" +
                                   "SMD.QUANTITY,\n" +
                                   "SI.NAME,\n" +
                                   "SYMBOL,\n" +
                                   "SMD.UNIT_PRICE AS RATE,\n" +
                                   "SMP.PURCHASE_DATE,\n" +
                                   " (SMD.QUANTITY * SMD.UNIT_PRICE) AS AMOUNT  -- NET_PAY AS AMOUNT\n" +
                              "FROM STOCK_MASTER_PURCHASE SMP\n" +
                             "INNER JOIN STOCK_PURCHASE_DETAILS SMD\n" +
                                "ON SMP.PURCHASE_ID = SMD.PURCHASE_ID\n" +
                             "INNER JOIN STOCK_ITEM SI\n" +
                              "  ON SMD.ITEM_ID = SI.ITEM_ID\n" +
                               "INNER JOIN ASSET_LOCATION ASL\n" +
                                "ON SMD.LOCATION_ID = ASL.LOCATION_ID\n" +
                            //"INNER JOIN ASSET_STOCK_LOCATION ASL\n" +
                            // "  ON SMD.LOCATION_ID = ASL.LOCATION_ID\n" +
                             "INNER JOIN STOCK_GROUP AG\n" +
                              "  ON SI.GROUP_ID = AG.GROUP_ID\n" +
                            " INNER JOIN uom UM\n" +
                                "ON SI.UNIT_ID = UM.UOM_ID\n" +
                            //    " INNER JOIN ASSET_STOCK_UNITOFMEASURE UM\n" +
                            //"    ON SI.UNIT_ID = UM.UNIT_ID\n" +
                            //"INNER JOIN STOCK_CATEGORY SC\n" +
                            //"  ON SI.CATEGORY_ID = SC.CATEGORY_ID\n" +
                             "WHERE SMP.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "           AND PURCHASE_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND TRANS_TYPE=0\n" +
                                "         ORDER BY SMP.PURCHASE_DATE ASC";
                        break;
                    }

                case ReportSQLCommand.Stock.StockReceive:
                    {
                        query = "SELECT LOCATION AS LOCATION_NAME,\n" +
                                   "AG.GROUP_NAME,\n" +
                            //"SC.CATEGORY_NAME,\n" +
                                   "SMD.QUANTITY,\n" +
                                   "SI.NAME,\n" +
                                   "SYMBOL,\n" +
                                   "SMP.PURCHASE_DATE,\n" +
                                   "NET_PAY AS AMOUNT\n" +
                              "FROM STOCK_MASTER_PURCHASE SMP\n" +
                             "INNER JOIN STOCK_PURCHASE_DETAILS SMD\n" +
                                "ON SMP.PURCHASE_ID = SMD.PURCHASE_ID\n" +
                             "INNER JOIN STOCK_ITEM SI\n" +
                              "  ON SMD.ITEM_ID = SI.ITEM_ID\n" +
                            //"INNER JOIN ASSET_STOCK_LOCATION ASL\n" +
                            // "  ON SMD.LOCATION_ID = ASL.LOCATION_ID\n" +
                             "INNER JOIN ASSET_LOCATION ASL\n" +
                               "ON SMD.LOCATION_ID = ASL.LOCATION_ID\n" +
                             "INNER JOIN STOCK_GROUP AG\n" +
                              "  ON SI.GROUP_ID = AG.GROUP_ID\n" +
                              "INNER JOIN UOM UM\n" +
                                    "ON SI.UNIT_ID = UM.UOM_ID\n" +
                            //" INNER JOIN ASSET_STOCK_UNITOFMEASURE UM\n" +
                            //  "    ON SI.UNIT_ID = UM.UNIT_ID\n" +

                            //"INNER JOIN STOCK_CATEGORY SC\n" +
                            //"  ON SI.CATEGORY_ID = SC.CATEGORY_ID\n" +
                             "WHERE SMP.PROJECT_ID IN (?PROJECT_ID)\n" +
                                "           AND PURCHASE_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND TRANS_TYPE=1\n" +
                                "         ORDER BY SMP.PURCHASE_DATE ASC";
                        break;
                    }

                case ReportSQLCommand.Stock.StockSales:
                    {
                        query = "SELECT SALES_DATE,\n" +
                                "       CUSTOMER_NAME,\n" +
                                "       SI.NAME           AS ITEM_NAME,\n" +
                                "       SD.QUANTITY,SD.UNIT_PRICE AS RATE,\n" +
                                "       ASL.LOCATION AS LOCATION_NAME,\n" +
                                "       AG.GROUP_NAME,\n" +
                                "       SYMBOL,\n" +
                                "       AMOUNT\n" +
                            //"       SC.CATEGORY_NAME\n" +
                                "  FROM STOCK_MASTER_SOLD_UTILIZED SM\n" +
                                " INNER JOIN STOCK_SOLD_UTILIZED_DETAILS SD\n" +
                                "    ON SM.SALES_ID = SD.SALES_ID\n" +
                                " INNER JOIN STOCK_ITEM SI\n" +
                                "    ON SI.ITEM_ID = SD.ITEM_ID\n" +
                                 "INNER JOIN ASSET_LOCATION ASL\n" +
                               "ON SD.LOCATION_ID = ASL.LOCATION_ID\n" +
                            //" INNER JOIN ASSET_STOCK_LOCATION ASL\n" +
                            //"    ON SD.LOCATION_ID = ASL.LOCATION_ID\n" +
                                " INNER JOIN STOCK_GROUP AG\n" +
                                "    ON SI.GROUP_ID = AG.GROUP_ID\n" +
                                "INNER JOIN UOM UM\n" +
                                "ON SI.UNIT_ID = UM.UOM_ID\n" +
                            //" INNER JOIN ASSET_STOCK_UNITOFMEASURE UM\n" +
                            //"    ON SI.UNIT_ID = UM.UNIT_ID\n" +
                            //" INNER JOIN STOCK_CATEGORY SC\n" +
                            //"    ON SI.CATEGORY_ID = SC.CATEGORY_ID\n" +
                                " WHERE SM.PROJECT_ID IN (?PROJECT_ID) AND TRANS_TYPE = 0 \n" +
                                "    AND SALES_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                "    ORDER BY SM.SALES_DATE ASC";
                        break;
                    }

                case ReportSQLCommand.Stock.stockUtilizeRegister:
                    {
                        query = "SELECT SMS.SALES_ID,\n" +
                                "       SALES_DATE    AS STOCK_DATE,\n" +
                                "       CUSTOMER_NAME AS NAME,\n" +
                                "       NET_PAY       AS AMOUNT,\n" +
                                "       GROUP_NAME,\n" +
                                "       SI.NAME          AS ITEM_NAME,\n" +
                                "       UNIT_PRICE    AS RATE,\n" +
                                "       ASL.LOCATION AS LOCATION_NAME,\n" +
                                "       SYMBOL,\n" +
                                "       SSD.QUANTITY\n" +
                                "  FROM STOCK_MASTER_SOLD_UTILIZED SMS\n" +
                                " INNER JOIN STOCK_SOLD_UTILIZED_DETAILS AS SSD\n" +
                                "    ON SMS.SALES_ID = SSD.SALES_ID\n" +
                            //" INNER JOIN ASSET_STOCK_LOCATION SL\n" +
                            //"    ON SSD.LOCATION_ID = SL.LOCATION_ID\n" +
                                "INNER JOIN ASSET_LOCATION ASL\n" +
                                    "ON SSD.LOCATION_ID = ASL.LOCATION_ID\n" +
                                " INNER JOIN STOCK_ITEM SI\n" +
                                "    ON SSD.ITEM_ID = SI.ITEM_ID\n" +
                                " INNER JOIN STOCK_GROUP SG\n" +
                                "    ON SG.GROUP_ID = SI.GROUP_ID\n" +
                            //"INNER JOIN ASSET_STOCK_UNITOFMEASURE UM\n" +
                            //"    ON SI.UNIT_ID = UM.UNIT_ID\n" +
                                "INNER JOIN UOM UM\n" +
                                    "ON SI.UNIT_ID = UM.UOM_ID\n" +
                                " WHERE TRANS_TYPE = 1\n" +
                                "   AND PROJECT_ID IN (?PROJECT_ID)\n" +
                                "   AND SALES_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                " GROUP BY SALES_DATE, SMS.SALES_ID";
                        break;
                    }
                case ReportSQLCommand.Stock.ChartofStock:
                    {
                        query = @"SELECT ITEM_ID, SI.NAME AS ASSET_ITEM, SI.GROUP_ID,SG.GROUP_NAME AS PARENT_CLASS, SU.SYMBOL, QUANTITY, RATE,REORDER,
                                        VALUE FROM STOCK_ITEM SI
                                        LEFT JOIN STOCK_GROUP SG ON SI.GROUP_ID = SG.GROUP_ID LEFT JOIN
                                        UOM SU ON SU.UOM_ID =SI.UNIT_ID ORDER BY SG.GROUP_NAME, SI.NAME";
                        break;
                    }
            }
            return query;
        }
    }


    #region AuditLog
    public class ReportAuditLog
    {
        public string GetAuditLogSQL(ReportSQLCommand.AuditReports queryId)
        {
            string query = string.Empty;
            switch (queryId)
            {
                case ReportSQLCommand.AuditReports.VoucherStatistics:
                    {
                        //IFNULL(VM.NO_CREATED,0) - (IFNULL(VM.NO_MODIFIED, 0) + IFNULL(VM.NO_DELETED, 0)) AS NO_CREATED
                        query = "SELECT MV.VOUCHER_ID, MV.VOUCHER_NAME, MV.VOUCHER_TYPE, IFNULL(VM.NO_CREATED,0) AS NO_CREATED,\n" +
                                "IFNULL(VM.NO_MODIFIED, 0) AS NO_MODIFIED, IFNULL(VM.NO_DELETED, 0) AS NO_DELETED\n" +
                                "FROM MASTER_VOUCHER MV\n" +
                                "LEFT JOIN (SELECT VM.VOUCHER_DEFINITION_ID, COUNT(*) AS NO_CREATED, \n" +
                                   "SUM(IF((VM.STATUS=1 AND VM.MODIFIED_BY >0 AND VM.MODIFIED_BY_NAME IS NOT NULL AND VM.MODIFIED_BY_NAME <>'' AND VM.MODIFIED_ON IS NOT NULL),1,0)) NO_MODIFIED, SUM(IF(VM.STATUS=0, 1, 0)) AS NO_DELETED\n" +
                                   "FROM VOUCHER_MASTER_TRANS VM\n" +
                                   "LEFT JOIN USER_INFO UC ON UC.USER_ID = VM.CREATED_BY\n" +
                                   "LEFT JOIN USER_INFO UM ON UM.USER_ID = VM.MODIFIED_BY\n" +
                                   "WHERE PROJECT_ID IN (?PROJECT_ID) AND VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                   "  {AND (UC.FIRSTNAME = ?USER_NAME OR UM.FIRSTNAME = ?USER_NAME OR VM.CREATED_BY_NAME = ?USER_NAME AND VM.MODIFIED_BY = ?USER_NAME)}\n" +
                                   "GROUP BY VM.VOUCHER_DEFINITION_ID) as VM\n" +
                                "ON VM.VOUCHER_DEFINITION_ID = MV.VOUCHER_ID";
                        break;
                    }
                case ReportSQLCommand.AuditReports.VoucherAuditLog:
                    {
                        query = "SELECT VM.VOUCHER_ID, MP.PROJECT_ID, VM.VOUCHER_DATE, " +
                                 "CASE WHEN VM.STATUS = 0 THEN VM.PREVIOUS_VOUCHER_NO ELSE VM.VOUCHER_NO END AS VOUCHER_NO,  VM.VOUCHER_SUB_TYPE,\n" +
                                 "      IF(RCPYCN.NARRATION IS NULL OR RCPYCN.NARRATION='', VM.NARRATION, RCPYCN.NARRATION) AS NARRATION,\n" +
                                 "      RCPYCN.LEDGER_NAME AS LEDGER_NAME, CASHBANK.LEDGER_NAME AS CASH_BANK, CASHBANK.CHEQUE_NO,\n" +
                                 "      CONCAT(MP.PROJECT, CONCAT(' - ', MD.DIVISION)) AS 'PROJECT',\n" +
                                 "      IF(VM.VOUCHER_TYPE = 'PY', CASHBANK.AMOUNT, IF(VM.VOUCHER_TYPE = 'JN', RCPYCN.AMOUNT,0)) AS DEBIT,\n" +
                                 "      IF(VM.VOUCHER_TYPE = 'RC' OR VM.VOUCHER_TYPE = 'CN', CASHBANK.AMOUNT,0) AS CREDIT, CASHBANK.AMOUNT AS AMOUNT,\n" +
                                 "      CASE VM.VOUCHER_TYPE WHEN 'RC' THEN 'Receipt' WHEN 'PY' THEN 'Payment' WHEN 'CN' THEN 'Contra' ELSE 'JOURNAL' END AS VOUCHERTYPE,\n" +
                                 "      IF(VM.VOUCHER_DEFINITION_ID<=4, CASE VM.VOUCHER_TYPE\n" +
                                 "        WHEN 'RC' THEN 'Receipt' WHEN 'PY' THEN 'Payment' WHEN 'CN' THEN 'Contra' ELSE 'Journal' END, MV.VOUCHER_NAME) AS VOUCHER_TYPE,\n" +
                                 "        VM.VOUCHER_DEFINITION_ID, NAME_ADDRESS,\n" +
                                 "        VM.CREATED_ON,\n" +
                                 "        IF((VM.STATUS=1 AND VM.MODIFIED_BY >0 AND VM.MODIFIED_BY_NAME IS NOT NULL AND VM.MODIFIED_BY_NAME <>'' AND VM.MODIFIED_ON IS NOT NULL), VM.MODIFIED_ON, NULL) AS MODIFIED_ON,\n" +
                                 " IF(CREATED_BY_NAME IS NULL OR CREATED_BY_NAME = '', IF(UC.USER_ID IS NULL, '', UC.FIRSTNAME), VM.CREATED_BY_NAME) AS CREATED_BY_NAME,\n" +
                                 " IF(VM.MODIFIED_BY_NAME IS NULL OR VM.MODIFIED_BY_NAME = '', IF(UM.USER_ID IS NULL, '', UM.FIRSTNAME), VM.MODIFIED_BY_NAME) AS MODIFIED_BY_NAME,\n" +
                                 "CASE WHEN VM.STATUS=0 THEN 'Deleted'\n" +
                                 "  WHEN (VM.STATUS=1 AND VM.MODIFIED_BY >0 AND VM.MODIFIED_BY_NAME IS NOT NULL AND VM.MODIFIED_BY_NAME <>'' AND VM.MODIFIED_ON IS NOT NULL) THEN 'Modified' ELSE 'Created' END AS AUDIT_ACTION,\n" +
                                 "  IF(VM.IS_AUDITOR_MODIFIED = 1, 'Yes', 'No') as AUDITOR_TRACK,\n" +
                                 "IF(VM.VOUCHER_TYPE = 'JN','" + DrillDownType.LEDGER_JOURNAL_VOUCHER + "', '" + DrillDownType.LEDGER_CASHBANK_VOUCHER + "') as PARTICULAR_TYPE,\n" +
                                 " IFNULL(RCPYCN.GST, 0) AS GST, IFNULL(RCPYCN.CGST, 0) AS CGST, IFNULL(RCPYCN.SGST, 0) AS SGST,\n" +
                                 " CONCAT(CONCAT(VM.GST_VENDOR_INVOICE_NO, CONCAT( ' - ' , DATE(VM.GST_VENDOR_INVOICE_DATE))), CONCAT(' - ', ASV.VENDOR)) AS VENDOR_GST_INVOICE, \n" +
                                 "VM.CLIENT_CODE, IFNULL(VM.GST_VENDOR_ID,0) AS GST_VENDOR_ID, IF(VM.AUTHORIZATION_STATUS=1, 'Yes', 'No') AS AUTHORIZATION_STATUS\n" +
                                 "FROM VOUCHER_MASTER_TRANS AS VM\n" +
                                 "INNER JOIN MASTER_PROJECT AS MP ON VM.PROJECT_ID = MP.PROJECT_ID\n" +
                                 "INNER JOIN MASTER_DIVISION AS MD ON MP.DIVISION_ID = MD.DIVISION_ID\n" +
                            //"\n"+
                                 "LEFT JOIN MASTER_VOUCHER AS MV ON MV.VOUCHER_ID = VM.VOUCHER_DEFINITION_ID\n" +
                                 "LEFT JOIN (SELECT T.VOUCHER_ID, T.LEDGER_NAME, T.NARRATION, SUM(IF(T.TRANS_MODE='DR', T.AMOUNT,0)) AS AMOUNT,\n" +
                                  "             SUM(T.GST) AS GST, SUM(T.CGST) AS CGST, SUM(T.SGST) AS SGST\n" +
                                  "             FROM (SELECT VT.VOUCHER_ID,\n" +
                                  "                          CASE WHEN ML.LEDGER_SUB_TYPE = 'BK' THEN CONCAT(CONCAT(ML.LEDGER_NAME, ' - '), CONCAT(MB.BANK, ' - '), MB.BRANCH)\n" +
                                  "                            ELSE ML.LEDGER_NAME END AS LEDGER_NAME, VT.TRANS_MODE, VT.AMOUNT, VT.GST, VT.CGST, VT.SGST, VT.NARRATION\n" +
                                  "                     FROM VOUCHER_TRANS VT\n" +
                                  "                     INNER JOIN VOUCHER_MASTER_TRANS VM ON VT.VOUCHER_ID = VM.VOUCHER_ID\n" +
                                  "                     LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                  "                     LEFT JOIN MASTER_LEDGER_GROUP MLG ON MLG.GROUP_ID = ML.GROUP_ID\n" +
                                  "                     LEFT JOIN MASTER_BANK_ACCOUNT MBA ON MBA.LEDGER_ID = ML.LEDGER_ID\n" +
                                  "                     LEFT JOIN MASTER_BANK MB ON MB.BANK_ID = MBA.BANK_ID\n" +
                                  "                     WHERE VM.PROJECT_ID IN (?PROJECT_ID) AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                  "                      AND IF(VM.VOUCHER_TYPE = 'CN', VT.TRANS_MODE = 'CR', ML.GROUP_ID NOT IN (12, 13))\n" +
                                  "                    ORDER BY VT.VOUCHER_ID, VT.SEQUENCE_NO) AS T\n" +
                                  "            GROUP BY T.VOUCHER_ID) AS RCPYCN ON RCPYCN.VOUCHER_ID = VM.VOUCHER_ID\n" +
                                  "\n" +
                                  "LEFT JOIN (SELECT T.VOUCHER_ID, T.LEDGER_NAME, SUM(T.AMOUNT) AS AMOUNT, T.CHEQUE_NO, T.TRANS_MODE\n" +
                                  "             FROM (SELECT VT.VOUCHER_ID,\n" +
                                  "                          CASE WHEN ML.LEDGER_SUB_TYPE = 'BK' THEN CONCAT(CONCAT(ML.LEDGER_NAME, ' - '), CONCAT(MB.BANK, ' - '), MB.BRANCH)\n" +
                                  "                             ELSE ML.LEDGER_NAME END AS LEDGER_NAME,\n" +
                                  "                          VT.AMOUNT AS AMOUNT, VT.CHEQUE_NO, TRANS_MODE\n" +
                                  "                    FROM VOUCHER_TRANS VT\n" +
                                  "                    INNER JOIN VOUCHER_MASTER_TRANS VM ON VT.VOUCHER_ID = VM.VOUCHER_ID\n" +
                                  "                    LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                  "                    LEFT JOIN MASTER_LEDGER_GROUP MLG ON MLG.GROUP_ID = ML.GROUP_ID\n" +
                                  "                    LEFT JOIN MASTER_BANK_ACCOUNT MBA ON MBA.LEDGER_ID = ML.LEDGER_ID\n" +
                                  "                    LEFT JOIN MASTER_BANK MB ON MB.BANK_ID = MBA.BANK_ID\n" +
                                  "                    WHERE VM.PROJECT_ID IN (?PROJECT_ID) AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                  "                      AND IF(VM.VOUCHER_TYPE = 'CN', VT.TRANS_MODE = 'DR', ML.GROUP_ID IN (12, 13))\n" +
                                  "                    ORDER BY VT.VOUCHER_ID, VT.SEQUENCE_NO) AS T\n" +
                                  "            GROUP BY T.VOUCHER_ID) AS CASHBANK ON CASHBANK.VOUCHER_ID = VM.VOUCHER_ID\n" +
                                  "\n" +
                                 "LEFT JOIN USER_INFO UC ON UC.USER_ID = VM.CREATED_BY\n" +
                                 "LEFT JOIN USER_INFO UM ON UM.USER_ID = VM.MODIFIED_BY\n" +
                                 "LEFT JOIN ASSET_STOCK_VENDOR ASV ON ASV.VENDOR_ID = VM.GST_VENDOR_ID\n" +
                                 "WHERE VM.PROJECT_ID IN (?PROJECT_ID) AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO {AND VM.VOUCHER_DEFINITION_ID IN (?VOUCHER_DEFINITION_ID)}\n" +
                                 "ORDER BY VM.VOUCHER_DATE, LENGTH(VM.VOUCHER_NO), VM.VOUCHER_NO ASC, VM.VOUCHER_ID";

                        break;
                    }
                case ReportSQLCommand.AuditReports.AuditedVouchers:
                    {
                        query = "SELECT VM.VOUCHER_ID, MP.PROJECT_ID, VM.VOUCHER_DATE,\n" +
                                  "  CASE WHEN VM.STATUS = 0 THEN VM.PREVIOUS_VOUCHER_NO ELSE VM.VOUCHER_NO END AS VOUCHER_NO, VM.VOUCHER_SUB_TYPE,\n" +
                                  "      IF(RCPYCN.NARRATION IS NULL OR RCPYCN.NARRATION='', VM.NARRATION, RCPYCN.NARRATION) AS NARRATION,\n" +
                                  "      RCPYCN.LEDGER_NAME AS LEDGER_NAME, CASHBANK.LEDGER_NAME AS CASH_BANK, CASHBANK.CHEQUE_NO,\n" +
                                  "      CONCAT(MP.PROJECT, CONCAT(' - ', MD.DIVISION)) AS 'PROJECT',\n" +
                                  "      IF(VM.VOUCHER_TYPE = 'PY', CASHBANK.AMOUNT, IF(VM.VOUCHER_TYPE = 'JN', RCPYCN.AMOUNT,0)) AS DEBIT,\n" +
                                  "      IF(VM.VOUCHER_TYPE = 'RC' OR VM.VOUCHER_TYPE = 'CN', CASHBANK.AMOUNT,0) AS CREDIT,\n" +
                                  "      CASE VM.VOUCHER_TYPE WHEN 'RC' THEN 'Receipt' WHEN 'PY' THEN 'Payment' WHEN 'CN' THEN 'Contra' ELSE 'JOURNAL' END AS VOUCHERTYPE,\n" +
                                  "      IF(VM.VOUCHER_DEFINITION_ID<=4, CASE VM.VOUCHER_TYPE\n" +
                                  "        WHEN 'RC' THEN 'Receipt' WHEN 'PY' THEN 'Payment' WHEN 'CN' THEN 'Contra' ELSE 'Journal' END, MV.VOUCHER_NAME) AS VOUCHER_TYPE,\n" +
                                  "        VM.VOUCHER_DEFINITION_ID, NAME_ADDRESS, VM.CREATED_ON, VM.MODIFIED_ON,\n" +
                                  " IF(CREATED_BY_NAME IS NULL OR CREATED_BY_NAME = '', IF(UC.USER_ID IS NULL, '', UC.FIRSTNAME), VM.CREATED_BY_NAME) AS CREATED_BY_NAME,\n" +
                                  " IF(VM.MODIFIED_BY_NAME IS NULL OR VM.MODIFIED_BY_NAME = '', IF(UM.USER_ID IS NULL, '', UM.FIRSTNAME), VM.MODIFIED_BY_NAME) AS MODIFIED_BY_NAME,\n" +
                                  "CASE WHEN VM.STATUS=0 THEN 'Deleted' WHEN VM.MODIFIED_BY>0 THEN 'Modified' ELSE 'Created' END AS ACTION,\n" +
                                  "IF(VM.IS_AUDITOR_MODIFIED = 1 OR VMA.VOUCHER_ID IS NOT NULL, 'Yes', 'No') as AUDITOR_TRACK, VMA.TRACK_AUDITOR_TRACK,\n" +
                                  " \n" +
                                  "IFNULL(VMA.VOUCHER_ID, 0) AS TRACK_VOUCHER_ID, VMA.AUDIT_ACTION AS AUDIT_ACTION, VMA.NUMBER_OF_REVISIONS,\n" +
                                  "VMA.PROJECT AS TRACK_PROJECT, VMA.VOUCHER_DATE AS TRACK_VOUCHER_DATE, VMA.VOUCHER_NO AS TRACK_VOUCHER_NO,\n" +
                                  "VMA.VOUCHER_TYPE AS TRACK_VOUCHER_TYPE, VMA.AMOUNT AS TRACK_AMOUNT, VMA.PREVIOUS_AMOUNT AS TRACK_PREVIOUS_AMOUNT,\n" +
                                  "VMA.MODIFIED_ON AS TRACK_MODIFIED_ON, VMA.MODIFIED_BY_NAME AS TRACK_MODIFIED_BY_NAME,\n" +
                                  "VMA.PREVIOUS_MODIFIED_BY_NAME AS TRACK_PREVIOUS_MODIFIED_BY_NAME,\n" +
                                  "IF(VM.VOUCHER_TYPE = 'JN','" + DrillDownType.LEDGER_JOURNAL_VOUCHER + "', '" + DrillDownType.LEDGER_CASHBANK_VOUCHER + "') as PARTICULAR_TYPE\n" +
                                  "FROM VOUCHER_MASTER_TRANS AS VM\n" +
                                  "INNER JOIN MASTER_PROJECT AS MP ON VM.PROJECT_ID = MP.PROJECT_ID\n" +
                                  "INNER JOIN MASTER_DIVISION AS MD ON MP.DIVISION_ID = MD.DIVISION_ID\n" +
                                  "\n" +
                                  "LEFT JOIN (SELECT VAL.VOUCHER_ID, VAL.VOUCHER_DATE, VAL.VOUCHER_NO, VAL.VOUCHER_SUB_TYPE,\n" +
                                  "        CASE VAL.VOUCHER_TYPE WHEN 'RC' THEN 'Receipt'\n" +
                                  "        WHEN 'PY' THEN 'Payment' WHEN 'CN' THEN 'Contra' ELSE 'JOURNAL' END AS VOUCHER_TYPE,\n" +
                                  "        VAL.PROJECT_NAME AS PROJECT,\n" +
                                  "        IFNULL(VAL.AMOUNT,0) AS AMOUNT, IFNULL(VAL.PREVIOUS_AMOUNT,0) AS PREVIOUS_AMOUNT,\n" +
                                  "        VAL.MODIFIED_ON AS MODIFIED_ON,\n" +
                                  "        VAL.MODIFIED_BY_NAME AS MODIFIED_BY_NAME,\n" +
                                  "        VAL.PREVIOUS_MODIFIED_BY_NAME AS PREVIOUS_MODIFIED_BY_NAME,\n" +
                                  "        VAL.ACTION AS AUDIT_ACTION, VAL.NUMBER_OF_REVISIONS, VAL.IS_AUDITOR_MODIFIED, IF(VAL.IS_AUDITOR_MODIFIED = 1, 'Yes', 'No') as TRACK_AUDITOR_TRACK\n" +
                                  "        FROM VOUCHER_MASTER_AUDIT_LOG AS VAL) AS VMA ON VMA.VOUCHER_ID = VM.VOUCHER_ID\n" +
                                  "\n" +
                                  "LEFT JOIN MASTER_VOUCHER AS MV ON MV.VOUCHER_ID = VM.VOUCHER_DEFINITION_ID\n" +
                                  "LEFT JOIN (SELECT T.VOUCHER_ID, T.LEDGER_NAME, T.NARRATION, SUM(IF(T.TRANS_MODE='DR', T.AMOUNT, 0)) AS AMOUNT\n" +
                                   "             FROM (SELECT VT.VOUCHER_ID,\n" +
                                   "                          CASE WHEN ML.LEDGER_SUB_TYPE = 'BK' THEN CONCAT(CONCAT(ML.LEDGER_NAME, ' - '), CONCAT(MB.BANK, ' - '), MB.BRANCH)\n" +
                                   "                            ELSE ML.LEDGER_NAME END AS LEDGER_NAME, VT.TRANS_MODE, VT.AMOUNT, VT.NARRATION\n" +
                                   "                     FROM VOUCHER_TRANS VT\n" +
                                   "                     INNER JOIN VOUCHER_MASTER_TRANS VM ON VT.VOUCHER_ID = VM.VOUCHER_ID\n" +
                                   "                     LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                   "                     LEFT JOIN MASTER_LEDGER_GROUP MLG ON MLG.GROUP_ID = ML.GROUP_ID\n" +
                                   "                     LEFT JOIN MASTER_BANK_ACCOUNT MBA ON MBA.LEDGER_ID = ML.LEDGER_ID\n" +
                                   "                     LEFT JOIN MASTER_BANK MB ON MB.BANK_ID = MBA.BANK_ID\n" +
                                   "                     WHERE VM.PROJECT_ID IN (?PROJECT_ID) AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" + //(VM.CREATED_BY = ?USER_ID OR VM.MODIFIED_BY =?USER_ID) AND 
                                   "                      AND IF(VM.VOUCHER_TYPE = 'CN', VT.TRANS_MODE = 'CR', ML.GROUP_ID NOT IN (12, 13))\n" +
                                   "                    ORDER BY VT.VOUCHER_ID, VT.SEQUENCE_NO) AS T\n" +
                                   "            GROUP BY T.VOUCHER_ID) AS RCPYCN ON RCPYCN.VOUCHER_ID = VM.VOUCHER_ID\n" +
                                   "\n" +
                                   "LEFT JOIN (SELECT T.VOUCHER_ID, T.LEDGER_NAME, SUM(T.AMOUNT) AS AMOUNT, T.CHEQUE_NO, T.TRANS_MODE\n" +
                                   "             FROM (SELECT VT.VOUCHER_ID,\n" +
                                   "                          CASE WHEN ML.LEDGER_SUB_TYPE = 'BK' THEN CONCAT(CONCAT(ML.LEDGER_NAME, ' - '), CONCAT(MB.BANK, ' - '), MB.BRANCH)\n" +
                                   "                             ELSE ML.LEDGER_NAME END AS LEDGER_NAME,\n" +
                                   "                          VT.AMOUNT AS AMOUNT, VT.CHEQUE_NO, TRANS_MODE\n" +
                                   "                    FROM VOUCHER_TRANS VT\n" +
                                   "                    INNER JOIN VOUCHER_MASTER_TRANS VM ON VT.VOUCHER_ID = VM.VOUCHER_ID\n" +
                                   "                    LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                   "                    LEFT JOIN MASTER_LEDGER_GROUP MLG ON MLG.GROUP_ID = ML.GROUP_ID\n" +
                                   "                    LEFT JOIN MASTER_BANK_ACCOUNT MBA ON MBA.LEDGER_ID = ML.LEDGER_ID\n" +
                                   "                    LEFT JOIN MASTER_BANK MB ON MB.BANK_ID = MBA.BANK_ID\n" +
                                   "                    WHERE VM.PROJECT_ID IN (?PROJECT_ID) AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" + //(VM.CREATED_BY = ?USER_ID OR VM.MODIFIED_BY =?USER_ID) AND 
                                   "                      AND IF(VM.VOUCHER_TYPE = 'CN', VT.TRANS_MODE = 'DR', ML.GROUP_ID IN (12, 13))\n" +
                                   "                    ORDER BY VT.VOUCHER_ID, VT.SEQUENCE_NO) AS T\n" +
                                   "            GROUP BY T.VOUCHER_ID) AS CASHBANK ON CASHBANK.VOUCHER_ID = VM.VOUCHER_ID\n" +
                                   "\n" +
                                  "LEFT JOIN USER_INFO UC ON UC.USER_ID = VM.CREATED_BY\n" +
                                  "LEFT JOIN USER_INFO UM ON UM.USER_ID = VM.MODIFIED_BY\n" +
                                  "WHERE (VM.IS_AUDITOR_MODIFIED = 1 OR VM.CREATED_BY = ?USER_ID OR VM.MODIFIED_BY =?USER_ID) AND VM.PROJECT_ID IN (?PROJECT_ID) AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                  "ORDER BY VM.VOUCHER_DATE, LENGTH(VM.VOUCHER_NO), VM.VOUCHER_NO ASC, VM.VOUCHER_ID";
                        break;
                    }
                case ReportSQLCommand.AuditReports.AuditedVouchersTrackChanges:
                    {
                        query = "SELECT VM.VOUCHER_ID, MP.PROJECT_ID, VM.VOUCHER_DATE,\n" +
                                  "      CASE WHEN VM.STATUS = 0 THEN VM.PREVIOUS_VOUCHER_NO ELSE VM.VOUCHER_NO END AS VOUCHER_NO, VM.VOUCHER_SUB_TYPE,\n" +
                                  "      IF(RCPYCN.NARRATION IS NULL OR RCPYCN.NARRATION='', VM.NARRATION, RCPYCN.NARRATION) AS NARRATION,\n" +
                                  "      RCPYCN.LEDGER_NAME AS LEDGER_NAME, CASHBANK.LEDGER_NAME AS CASH_BANK, CASHBANK.CHEQUE_NO,\n" +
                                  "      CONCAT(MP.PROJECT, CONCAT(' - ', MD.DIVISION)) AS 'PROJECT',\n" +
                                  "      IF(VM.VOUCHER_TYPE = 'PY', CASHBANK.AMOUNT, IF(VM.VOUCHER_TYPE = 'JN', RCPYCN.AMOUNT,0)) AS DEBIT,\n" +
                                  "      IF(VM.VOUCHER_TYPE = 'RC' OR VM.VOUCHER_TYPE = 'CN', CASHBANK.AMOUNT,0) AS CREDIT,\n" +
                                  "      CASE VM.VOUCHER_TYPE WHEN 'RC' THEN 'Receipt' WHEN 'PY' THEN 'Payment' WHEN 'CN' THEN 'Contra' ELSE 'JOURNAL' END AS VOUCHERTYPE,\n" +
                                  "      IF(VM.VOUCHER_DEFINITION_ID<=4, CASE VM.VOUCHER_TYPE\n" +
                                  "        WHEN 'RC' THEN 'Receipt' WHEN 'PY' THEN 'Payment' WHEN 'CN' THEN 'Contra' ELSE 'Journal' END, MV.VOUCHER_NAME) AS VOUCHER_TYPE,\n" +
                                  "        VM.VOUCHER_DEFINITION_ID, NAME_ADDRESS, VM.CREATED_ON, VM.MODIFIED_ON,\n" +
                                  " IF(CREATED_BY_NAME IS NULL OR CREATED_BY_NAME = '', IF(UC.USER_ID IS NULL, '', UC.FIRSTNAME), VM.CREATED_BY_NAME) AS CREATED_BY_NAME,\n" +
                                  " IF(VM.MODIFIED_BY_NAME IS NULL OR VM.MODIFIED_BY_NAME = '', IF(UM.USER_ID IS NULL, '', UM.FIRSTNAME), VM.MODIFIED_BY_NAME) AS MODIFIED_BY_NAME,\n" +
                                  "CASE WHEN VM.STATUS=0 THEN 'Deleted' WHEN VM.MODIFIED_BY>0 THEN 'Modified' ELSE 'Created' END AS ACTION,\n" +
                                  "IF(VM.IS_AUDITOR_MODIFIED = 1, 'Yes', 'No') as AUDITOR_TRACK, VMA.TRACK_AUDITOR_TRACK,\n" +
                                  "IF(VM.VOUCHER_TYPE = 'JN','" + DrillDownType.LEDGER_JOURNAL_VOUCHER + "', '" + DrillDownType.LEDGER_CASHBANK_VOUCHER + "') as PARTICULAR_TYPE,\n" +
                                  " \n" +
                                  "IFNULL(VMA.VOUCHER_ID, 0) AS TRACK_VOUCHER_ID, VMA.AUDIT_ACTION AS AUDIT_ACTION, VMA.NUMBER_OF_REVISIONS,\n" +
                                  "VMA.PROJECT AS TRACK_PROJECT, VMA.VOUCHER_DATE AS TRACK_VOUCHER_DATE, VMA.VOUCHER_NO AS TRACK_VOUCHER_NO,\n" +
                                  "VMA.VOUCHER_TYPE AS TRACK_VOUCHER_TYPE, VMA.AMOUNT AS TRACK_AMOUNT, VMA.PREVIOUS_AMOUNT AS TRACK_PREVIOUS_AMOUNT,\n" +
                                  "VMA.MODIFIED_ON AS TRACK_MODIFIED_ON, VMA.MODIFIED_BY_NAME AS TRACK_MODIFIED_BY_NAME,\n" +
                                  "VMA.PREVIOUS_MODIFIED_BY_NAME AS TRACK_PREVIOUS_MODIFIED_BY_NAME\n" +
                                  "FROM VOUCHER_MASTER_TRANS AS VM\n" +
                                  "INNER JOIN MASTER_PROJECT AS MP ON VM.PROJECT_ID = MP.PROJECT_ID\n" +
                                  "INNER JOIN MASTER_DIVISION AS MD ON MP.DIVISION_ID = MD.DIVISION_ID\n" +
                            //"INNER JOIN VOUCHER_MASTER_AUDIT_LOG VMAL ON VMAL.VOUCHER_ID = VM.VOUCHER_ID AND VMAL.IS_AUDITOR_MODIFIED =0\n" +
                                  "\n" +
                                  "INNER JOIN (SELECT VAL.VOUCHER_ID, VAL.VOUCHER_DATE, VAL.VOUCHER_NO, VAL.VOUCHER_SUB_TYPE,\n" +
                                  "        CASE VAL.VOUCHER_TYPE WHEN 'RC' THEN 'Receipt'\n" +
                                  "        WHEN 'PY' THEN 'Payment' WHEN 'CN' THEN 'Contra' ELSE 'JOURNAL' END AS VOUCHER_TYPE,\n" +
                                  "        VAL.PROJECT_NAME AS PROJECT,\n" +
                                  "        IFNULL(VAL.AMOUNT,0) AS AMOUNT, IFNULL(VAL.PREVIOUS_AMOUNT,0) AS PREVIOUS_AMOUNT,\n" +
                                  "        VAL.MODIFIED_ON AS MODIFIED_ON,\n" +
                                  "        VAL.MODIFIED_BY_NAME AS MODIFIED_BY_NAME,\n" +
                                  "        VAL.PREVIOUS_MODIFIED_BY_NAME AS PREVIOUS_MODIFIED_BY_NAME,\n" +
                                  "        VAL.ACTION AS AUDIT_ACTION, VAL.NUMBER_OF_REVISIONS, VAL.IS_AUDITOR_MODIFIED, IF(VAL.IS_AUDITOR_MODIFIED = 1, 'Yes', 'No') as TRACK_AUDITOR_TRACK\n" +
                                  "        FROM VOUCHER_MASTER_AUDIT_LOG AS VAL) AS VMA ON VMA.VOUCHER_ID = VM.VOUCHER_ID\n" +
                                  "\n" +
                                  "LEFT JOIN MASTER_VOUCHER AS MV ON MV.VOUCHER_ID = VM.VOUCHER_DEFINITION_ID\n" +
                                  "LEFT JOIN (SELECT T.VOUCHER_ID, T.LEDGER_NAME, T.NARRATION, SUM(IF(T.TRANS_MODE='DR', T.AMOUNT, 0)) AS AMOUNT\n" +
                                   "             FROM (SELECT VT.VOUCHER_ID,\n" +
                                   "                          CASE WHEN ML.LEDGER_SUB_TYPE = 'BK' THEN CONCAT(CONCAT(ML.LEDGER_NAME, ' - '), CONCAT(MB.BANK, ' - '), MB.BRANCH)\n" +
                                   "                            ELSE ML.LEDGER_NAME END AS LEDGER_NAME, VT.TRANS_MODE, VT.AMOUNT, VT.NARRATION\n" +
                                   "                     FROM VOUCHER_TRANS VT\n" +
                                   "                     INNER JOIN VOUCHER_MASTER_TRANS VM ON VT.VOUCHER_ID = VM.VOUCHER_ID\n" +
                                   "                     LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                   "                     LEFT JOIN MASTER_LEDGER_GROUP MLG ON MLG.GROUP_ID = ML.GROUP_ID\n" +
                                   "                     LEFT JOIN MASTER_BANK_ACCOUNT MBA ON MBA.LEDGER_ID = ML.LEDGER_ID\n" +
                                   "                     LEFT JOIN MASTER_BANK MB ON MB.BANK_ID = MBA.BANK_ID\n" +
                                   "                     WHERE VM.IS_AUDITOR_MODIFIED IN(?IS_AUDITOR_MODIFIED) AND VM.PROJECT_ID IN (?PROJECT_ID) AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                   "                      AND IF(VM.VOUCHER_TYPE = 'CN', VT.TRANS_MODE = 'CR', ML.GROUP_ID NOT IN (12, 13))\n" +
                                   "                    ORDER BY VT.VOUCHER_ID, VT.SEQUENCE_NO) AS T\n" +
                                   "            GROUP BY T.VOUCHER_ID) AS RCPYCN ON RCPYCN.VOUCHER_ID = VM.VOUCHER_ID\n" +
                                   "\n" +
                                   "LEFT JOIN (SELECT T.VOUCHER_ID, T.LEDGER_NAME, SUM(T.AMOUNT) AS AMOUNT, T.CHEQUE_NO, T.TRANS_MODE\n" +
                                   "             FROM (SELECT VT.VOUCHER_ID,\n" +
                                   "                          CASE WHEN ML.LEDGER_SUB_TYPE = 'BK' THEN CONCAT(CONCAT(ML.LEDGER_NAME, ' - '), CONCAT(MB.BANK, ' - '), MB.BRANCH)\n" +
                                   "                             ELSE ML.LEDGER_NAME END AS LEDGER_NAME,\n" +
                                   "                          VT.AMOUNT AS AMOUNT, VT.CHEQUE_NO, TRANS_MODE\n" +
                                   "                    FROM VOUCHER_TRANS VT\n" +
                                   "                    INNER JOIN VOUCHER_MASTER_TRANS VM ON VT.VOUCHER_ID = VM.VOUCHER_ID\n" +
                                   "                    LEFT JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID\n" +
                                   "                    LEFT JOIN MASTER_LEDGER_GROUP MLG ON MLG.GROUP_ID = ML.GROUP_ID\n" +
                                   "                    LEFT JOIN MASTER_BANK_ACCOUNT MBA ON MBA.LEDGER_ID = ML.LEDGER_ID\n" +
                                   "                    LEFT JOIN MASTER_BANK MB ON MB.BANK_ID = MBA.BANK_ID\n" +
                                   "                    WHERE VM.IS_AUDITOR_MODIFIED IN (?IS_AUDITOR_MODIFIED) AND VM.PROJECT_ID IN (?PROJECT_ID) AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                   "                      AND IF(VM.VOUCHER_TYPE = 'CN', VT.TRANS_MODE = 'DR', ML.GROUP_ID IN (12, 13))\n" +
                                   "                    ORDER BY VT.VOUCHER_ID, VT.SEQUENCE_NO) AS T\n" +
                                   "            GROUP BY T.VOUCHER_ID) AS CASHBANK ON CASHBANK.VOUCHER_ID = VM.VOUCHER_ID\n" +
                                   "\n" +
                                  "LEFT JOIN USER_INFO UC ON UC.USER_ID = VM.CREATED_BY\n" +
                                  "LEFT JOIN USER_INFO UM ON UM.USER_ID = VM.MODIFIED_BY\n" +
                                  "WHERE VM.IS_AUDITOR_MODIFIED IN (?IS_AUDITOR_MODIFIED) AND VM.PROJECT_ID IN (?PROJECT_ID) AND VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                  "ORDER BY VM.VOUCHER_DATE, LENGTH(VM.VOUCHER_NO), VM.VOUCHER_NO ASC, VM.VOUCHER_ID;";

                        break;

                    }

            }
            return query;
        }
    }

    public class GeneralateReports
    {
        public string GetGeneralateSQL(ReportSQLCommand.GeneralateReports queryId)
        {
            string query = string.Empty;
            switch (queryId)
            {
                case ReportSQLCommand.GeneralateReports.GeneralatePatrimonial:
                    {
                        query = "SELECT IF(CB.GROUP_ID=13,0,1) AS SORT_ID, CB.GROUP_ID, CB.LEDGER_ID, CB.BANK, CB.LEDGER_NAME, SUM(CB.AMOUNT_OP) AS AMOUNT_OP, SUM(CB.AMOUNT_CL) AS AMOUNT_CL,CB.DATE_CLOSED\n" +
                             "FROM\n" +
                             "(SELECT ML.GROUP_ID, ML.LEDGER_ID, CASE WHEN ML.GROUP_ID = 12 THEN CONCAT(MB.BANK, CONCAT(' -', MB.BRANCH)) ELSE '' END AS BANK, ML.LEDGER_NAME,\n" +
                             "ABS(SUM(CASE WHEN LB2.TRANS_MODE = 'DR' THEN LB2.AMOUNT ELSE - LB2.AMOUNT END)) AS AMOUNT_OP, 0 AS AMOUNT_CL ,ML.DATE_CLOSED\n" +
                             "FROM MASTER_LEDGER AS ML\n" +
                             "LEFT JOIN MASTER_BANK_ACCOUNT AS MBA ON ML.LEDGER_ID = MBA.LEDGER_ID\n" +
                             "LEFT JOIN MASTER_BANK AS MB  ON MBA.BANK_ID = MB.BANK_ID\n" +
                             "INNER JOIN\n" +
                             "(SELECT LB.BALANCE_DATE, LB.PROJECT_ID, LB.LEDGER_ID, LB.AMOUNT, LB.TRANS_MODE,LB.BRANCH_ID\n" +
                             "  FROM LEDGER_BALANCE AS LB\n" +
                             "  LEFT JOIN (SELECT LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID, MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
                             "        FROM LEDGER_BALANCE LBA\n" +
                             "        WHERE 1 = 1  AND LBA.BALANCE_DATE < ?DATE_FROM\n" +
                             "        GROUP BY LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB1 ON LB.BRANCH_ID = LB1.BRANCH_ID AND LB.PROJECT_ID = LB1.PROJECT_ID AND LB.LEDGER_ID = LB1.LEDGER_ID\n" +
                             "         WHERE LB.PROJECT_ID IN (?PROJECT_ID) AND LB.BALANCE_DATE = LB1.BAL_DATE) LB2\n" +
                             "  ON ML.LEDGER_ID = LB2.LEDGER_ID AND IF(ML.GROUP_ID =12, MBA.BRANCH_ID = LB2.BRANCH_ID, MBA.BRANCH_ID IS NULL)\n" +
                             "WHERE 1 = 1  AND ML.GROUP_ID IN (12, 13) GROUP BY ML.LEDGER_ID\n" +
                             "UNION ALL\n" +
                             "SELECT ML.GROUP_ID, ML.LEDGER_ID, CASE WHEN ML.GROUP_ID = 12 THEN CONCAT(MB.BANK, CONCAT(' -', MB.BRANCH)) ELSE '' END AS BANK, ML.LEDGER_NAME,\n" +
                             "0 AS AMOUNT_OP, ABS(SUM(CASE WHEN LB2.TRANS_MODE = 'DR' THEN LB2.AMOUNT ELSE - LB2.AMOUNT END)) AS AMOUNT_CL , ML.DATE_CLOSED\n" +
                             "FROM MASTER_LEDGER AS ML\n" +
                             "LEFT JOIN MASTER_BANK_ACCOUNT AS MBA ON ML.LEDGER_ID = MBA.LEDGER_ID\n" +
                             "LEFT JOIN MASTER_BANK AS MB  ON MBA.BANK_ID = MB.BANK_ID\n" +
                             "INNER JOIN\n" +
                             "(SELECT LB.BALANCE_DATE, LB.PROJECT_ID, LB.LEDGER_ID, LB.AMOUNT, LB.TRANS_MODE,LB.BRANCH_ID\n" +
                             "  FROM LEDGER_BALANCE AS LB\n" +
                             "  LEFT JOIN (SELECT LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID, MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
                             "        FROM LEDGER_BALANCE LBA\n" +
                             "        WHERE 1 = 1  AND LBA.BALANCE_DATE <= ?DATE_TO\n" +
                             "        GROUP BY LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB1 ON LB.BRANCH_ID = LB1.BRANCH_ID AND LB.PROJECT_ID = LB1.PROJECT_ID AND LB.LEDGER_ID = LB1.LEDGER_ID\n" +
                             "         WHERE LB.PROJECT_ID IN (?PROJECT_ID) AND LB.BALANCE_DATE = LB1.BAL_DATE) LB2\n" +
                             " ON ML.LEDGER_ID = LB2.LEDGER_ID AND IF(ML.GROUP_ID =12, MBA.BRANCH_ID = LB2.BRANCH_ID, MBA.BRANCH_ID IS NULL)\n" +
                             "WHERE 1 = 1  AND ML.GROUP_ID IN (12, 13) GROUP BY ML.LEDGER_ID) AS CB WHERE (CB.DATE_CLOSED IS NULL || CB.DATE_CLOSED >= ?DATE_FROM) GROUP BY CB.LEDGER_ID\n" +
                             "UNION ALL\n" + //For FD A/c BALANCE
                             "SELECT 2 AS SORT_ID, FDBAL.GROUP_ID, FDBAL.FD_ACCOUNT_ID, FDBAL.BANK, FDBAL.LEDGER_NAME,\n" +
                             "SUM(FDBAL.AMOUNT_OP) AS AMOUNT_OP, SUM(FDBAL.AMOUNT_CL) AS AMOUNT_CL , FDBAL.DATE_CLOSED\n" +
                             "FROM\n" +
                             "(SELECT 14 AS GROUP_ID, FDA.FD_ACCOUNT_ID, FDA.FD_ACCOUNT_NUMBER AS 'LEDGER_NAME',\n" +
                            //"CONCAT(MBK.BANK, IF(MBK.BRANCH IS NULL OR MBK.BRANCH = '', '', CONCAT(' - ', MBK.BRANCH))  ) AS BANK,\n" +
                             "'Fixed Deposit' AS BANK,\n" +
                             "FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                             "IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) +\n" +
                             "IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                             "IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) AS AMOUNT_OP, 0 AMOUNT_CL , MLG.DATE_CLOSED\n" +
                             "FROM FD_ACCOUNT AS FDA\n" +
                             "LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                             "     SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                             "     SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT, SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                             "     FROM FD_RENEWAL WHERE STATUS = 1 AND RENEWAL_DATE < DATE_SUB(?DATE_FROM, INTERVAL 1 DAY)\n" +
                             "     GROUP BY FD_ACCOUNT_ID) AS FDRO ON FDA.FD_ACCOUNT_ID = FDRO.FD_ACCOUNT_ID\n" +
                             "LEFT JOIN (SELECT FD_ACCOUNT_ID, SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                             "     SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                             "     SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                             "     FROM FD_RENEWAL WHERE STATUS = 1 AND RENEWAL_DATE BETWEEN DATE_SUB(?DATE_FROM, INTERVAL 1 DAY) AND DATE_SUB(?DATE_FROM, INTERVAL 1 DAY)\n" +
                             "     GROUP BY FD_ACCOUNT_ID) AS FDR ON FDA.FD_ACCOUNT_ID = FDR.FD_ACCOUNT_ID\n" +
                             "LEFT JOIN MASTER_BANK AS MBK ON FDA.BANK_ID = MBK.BANK_ID\n" +
                             "LEFT JOIN MASTER_LEDGER MLG ON FDA.LEDGER_ID = MLG.LEDGER_ID\n" +
                             "WHERE FDA.STATUS = 1 AND FDA.INVESTMENT_DATE <= DATE_SUB(?DATE_FROM, INTERVAL 1 DAY)\n" +
                             "AND FDA.PROJECT_ID IN (?PROJECT_ID)\n" +
                             "AND FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) - IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) != 0\n" +
                             "UNION ALL\n" +
                             "SELECT 14 AS GROUP_ID, FDA.FD_ACCOUNT_ID, FDA.FD_ACCOUNT_NUMBER AS 'LEDGER_NAME',\n" +
                            //"CONCAT(MBK.BANK, IF(MBK.BRANCH IS NULL OR MBK.BRANCH = '', '', CONCAT(' - ', MBK.BRANCH))  ) AS BANK,\n" +
                             "'Fixed Deposit' AS BANK, 0 AS AMOUNT_OP,\n" +
                             "FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                             "IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) +\n" +
                             "IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                             "IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) AS AMOUNT_CL ,MLG.DATE_CLOSED\n" +
                             "FROM FD_ACCOUNT AS FDA\n" +
                             "LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                             "     SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                             "     SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT, SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                             "     FROM FD_RENEWAL WHERE STATUS = 1 AND RENEWAL_DATE < ?DATE_TO\n" +
                             "     GROUP BY FD_ACCOUNT_ID) AS FDRO ON FDA.FD_ACCOUNT_ID = FDRO.FD_ACCOUNT_ID\n" +
                             "LEFT JOIN (SELECT FD_ACCOUNT_ID, SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                             "     SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                             "     SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                             "     FROM FD_RENEWAL WHERE STATUS = 1 AND RENEWAL_DATE BETWEEN ?DATE_TO AND ?DATE_TO\n" +
                             "     GROUP BY FD_ACCOUNT_ID) AS FDR ON FDA.FD_ACCOUNT_ID = FDR.FD_ACCOUNT_ID\n" +
                             "LEFT JOIN MASTER_BANK AS MBK ON FDA.BANK_ID = MBK.BANK_ID\n" +
                             "LEFT JOIN MASTER_LEDGER MLG ON FDA.LEDGER_ID = MLG.LEDGER_ID\n" +
                             "WHERE FDA.STATUS = 1 AND FDA.INVESTMENT_DATE <= ?DATE_TO\n" +
                             "AND FDA.PROJECT_ID IN (?PROJECT_ID)\n" +
                             "AND FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) - IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) != 0) FDBAL WHERE (FDBAL.DATE_CLOSED IS NULL || FDBAL.DATE_CLOSED >= ?DATE_FROM) GROUP BY FDBAL.FD_ACCOUNT_ID;";


                        //query = "SELECT IF(CB.GROUP_ID=13,0,1) AS SORT_ID, CB.GROUP_ID, CB.LEDGER_ID, CB.BANK, CB.LEDGER_NAME, SUM(CB.AMOUNT_OP) AS AMOUNT_OP, SUM(CB.AMOUNT_CL) AS AMOUNT_CL\n" +
                        //     "FROM\n" +
                        //     "(SELECT ML.GROUP_ID, ML.LEDGER_ID, CASE WHEN ML.GROUP_ID = 12 THEN CONCAT(MB.BANK, CONCAT(' -', MB.BRANCH)) ELSE '' END AS BANK, ML.LEDGER_NAME,\n" +
                        //     "ABS(SUM(CASE WHEN LB2.TRANS_MODE = 'DR' THEN LB2.AMOUNT ELSE - LB2.AMOUNT END)) AS AMOUNT_OP, 0 AS AMOUNT_CL\n" +
                        //     "FROM MASTER_LEDGER AS ML\n" +
                        //     "LEFT JOIN MASTER_BANK_ACCOUNT AS MBA ON ML.LEDGER_ID = MBA.LEDGER_ID AND MBA.BRANCH_ID IN (?BRANCH_OFFICE_ID)\n" +
                        //     "LEFT JOIN MASTER_BANK AS MB  ON MBA.BANK_ID = MB.BANK_ID\n" +
                        //     "INNER JOIN\n" +
                        //     "(SELECT LB.BALANCE_DATE, LB.PROJECT_ID, LB.LEDGER_ID, LB.AMOUNT, LB.TRANS_MODE,LB.BRANCH_ID\n" +
                        //     "  FROM LEDGER_BALANCE AS LB\n" +
                        //     "  LEFT JOIN (SELECT LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID, MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
                        //     "        FROM LEDGER_BALANCE LBA\n" +
                        //     "        WHERE 1 = 1  AND LBA.BALANCE_DATE < ?DATE_FROM AND LBA.BRANCH_ID IN (?BRANCH_OFFICE_ID)\n" +
                        //     "        GROUP BY LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB1 ON LB.BRANCH_ID = LB1.BRANCH_ID AND LB.PROJECT_ID = LB1.PROJECT_ID AND LB.LEDGER_ID = LB1.LEDGER_ID\n" +
                        //     "         WHERE LB.PROJECT_ID IN (?PROJECT_ID) AND LB.BALANCE_DATE = LB1.BAL_DATE) LB2\n" +
                        //     "  ON ML.LEDGER_ID = LB2.LEDGER_ID AND IF(ML.GROUP_ID =12, MBA.BRANCH_ID = LB2.BRANCH_ID, MBA.BRANCH_ID IS NULL)\n" +
                        //     "WHERE 1 = 1  AND ML.GROUP_ID IN (12, 13)  AND LB2.BRANCH_ID IN (?BRANCH_OFFICE_ID) GROUP BY ML.LEDGER_ID\n" +
                        //     "UNION ALL\n" +
                        //     "SELECT ML.GROUP_ID, ML.LEDGER_ID, CASE WHEN ML.GROUP_ID = 12 THEN CONCAT(MB.BANK, CONCAT(' -', MB.BRANCH)) ELSE '' END AS BANK, ML.LEDGER_NAME,\n" +
                        //     "0 AS AMOUNT_OP, ABS(SUM(CASE WHEN LB2.TRANS_MODE = 'DR' THEN LB2.AMOUNT ELSE - LB2.AMOUNT END)) AS AMOUNT_CL\n" +
                        //     "FROM MASTER_LEDGER AS ML\n" +
                        //     "LEFT JOIN MASTER_BANK_ACCOUNT AS MBA ON ML.LEDGER_ID = MBA.LEDGER_ID AND MBA.BRANCH_ID IN (?BRANCH_OFFICE_ID)\n" +
                        //     "LEFT JOIN MASTER_BANK AS MB  ON MBA.BANK_ID = MB.BANK_ID\n" +
                        //     "INNER JOIN\n" +
                        //     "(SELECT LB.BALANCE_DATE, LB.PROJECT_ID, LB.LEDGER_ID, LB.AMOUNT, LB.TRANS_MODE,LB.BRANCH_ID\n" +
                        //     "  FROM LEDGER_BALANCE AS LB\n" +
                        //     "  LEFT JOIN (SELECT LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID, MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
                        //     "        FROM LEDGER_BALANCE LBA\n" +
                        //     "        WHERE 1 = 1  AND LBA.BALANCE_DATE <= ?DATE_TO AND LBA.BRANCH_ID IN (?BRANCH_OFFICE_ID)\n" +
                        //     "        GROUP BY LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB1 ON LB.BRANCH_ID = LB1.BRANCH_ID AND LB.PROJECT_ID = LB1.PROJECT_ID AND LB.LEDGER_ID = LB1.LEDGER_ID\n" +
                        //     "         WHERE LB.PROJECT_ID IN (?PROJECT_ID) AND LB.BALANCE_DATE = LB1.BAL_DATE) LB2\n" +
                        //     " ON ML.LEDGER_ID = LB2.LEDGER_ID AND IF(ML.GROUP_ID =12, MBA.BRANCH_ID = LB2.BRANCH_ID, MBA.BRANCH_ID IS NULL)\n" +
                        //     "WHERE 1 = 1  AND ML.GROUP_ID IN (12, 13)  AND LB2.BRANCH_ID IN (?BRANCH_OFFICE_ID) GROUP BY ML.LEDGER_ID) AS CB GROUP BY CB.LEDGER_ID\n" +
                        //     "UNION ALL\n" + //For FD A/c BALANCE
                        //     "SELECT 2 AS SORT_ID, FDBAL.GROUP_ID, FDBAL.FD_ACCOUNT_ID, FDBAL.BANK, FDBAL.LEDGER_NAME,\n" +
                        //     "SUM(FDBAL.AMOUNT_OP) AS AMOUNT_OP, SUM(FDBAL.AMOUNT_CL) AS AMOUNT_CL\n" +
                        //     "FROM\n" +
                        //     "(SELECT 14 AS GROUP_ID, FDA.FD_ACCOUNT_ID, FDA.FD_ACCOUNT_NUMBER AS 'LEDGER_NAME',\n" +
                        //    //"CONCAT(MBK.BANK, IF(MBK.BRANCH IS NULL OR MBK.BRANCH = '', '', CONCAT(' - ', MBK.BRANCH))  ) AS BANK,\n" +
                        //     "'Fixed Deposit' AS BANK,\n" +
                        //     "FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                        //     "IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) +\n" +
                        //     "IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                        //     "IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) AS AMOUNT_OP, 0 AMOUNT_CL\n" +
                        //     "FROM FD_ACCOUNT AS FDA\n" +
                        //     "LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                        //     "     SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                        //     "     SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT, SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                        //     "     FROM FD_RENEWAL WHERE STATUS = 1 AND BRANCH_ID IN (?BRANCH_OFFICE_ID) AND RENEWAL_DATE < DATE_SUB(?DATE_FROM, INTERVAL 1 DAY)\n" +
                        //     "     GROUP BY FD_ACCOUNT_ID) AS FDRO ON FDA.FD_ACCOUNT_ID = FDRO.FD_ACCOUNT_ID\n" +
                        //     "LEFT JOIN (SELECT FD_ACCOUNT_ID, SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                        //     "     SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                        //     "     SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                        //     "     FROM FD_RENEWAL WHERE STATUS = 1 AND BRANCH_ID IN (?BRANCH_OFFICE_ID) AND RENEWAL_DATE BETWEEN DATE_SUB(?DATE_FROM, INTERVAL 1 DAY) AND DATE_SUB(?DATE_FROM, INTERVAL 1 DAY)\n" +
                        //     "     GROUP BY FD_ACCOUNT_ID) AS FDR ON FDA.FD_ACCOUNT_ID = FDR.FD_ACCOUNT_ID\n" +
                        //     "LEFT JOIN MASTER_BANK AS MBK ON FDA.BANK_ID = MBK.BANK_ID\n" +
                        //     "LEFT JOIN MASTER_LEDGER MLG ON FDA.LEDGER_ID = MLG.LEDGER_ID\n" +
                        //     "WHERE FDA.STATUS = 1 AND FDA.INVESTMENT_DATE <= DATE_SUB(?DATE_FROM, INTERVAL 1 DAY)\n" +
                        //     "AND FDA.PROJECT_ID IN (?PROJECT_ID) AND FDA.BRANCH_ID IN (?BRANCH_OFFICE_ID)\n" +
                        //     "AND FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) - IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) != 0\n" +
                        //     "UNION ALL\n" +
                        //     "SELECT 14 AS GROUP_ID, FDA.FD_ACCOUNT_ID, FDA.FD_ACCOUNT_NUMBER AS 'LEDGER_NAME',\n" +
                        //    //"CONCAT(MBK.BANK, IF(MBK.BRANCH IS NULL OR MBK.BRANCH = '', '', CONCAT(' - ', MBK.BRANCH))  ) AS BANK,\n" +
                        //     "'Fixed Deposit' AS BANK, 0 AS AMOUNT_OP,\n" +
                        //     "FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                        //     "IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) +\n" +
                        //     "IFNULL(FDR.ACCUMULATED_INTEREST_AMOUNT, 0) -\n" +
                        //     "IFNULL(FDR.WITHDRAWAL_AMOUNT, 0) AS AMOUNT_CL\n" +
                        //     "FROM FD_ACCOUNT AS FDA\n" +
                        //     "LEFT JOIN (SELECT FD_ACCOUNT_ID,\n" +
                        //     "     SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                        //     "     SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT, SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                        //     "     FROM FD_RENEWAL WHERE STATUS = 1 AND BRANCH_ID IN (?BRANCH_OFFICE_ID) AND RENEWAL_DATE < ?DATE_TO\n" +
                        //     "     GROUP BY FD_ACCOUNT_ID) AS FDRO ON FDA.FD_ACCOUNT_ID = FDRO.FD_ACCOUNT_ID\n" +
                        //     "LEFT JOIN (SELECT FD_ACCOUNT_ID, SUM(IF(RENEWAL_TYPE = 'ACI', 0, INTEREST_AMOUNT)) AS INTEREST_AMOUNT,\n" +
                        //     "     SUM(IF(RENEWAL_TYPE = 'ACI', INTEREST_AMOUNT, 0)) AS ACCUMULATED_INTEREST_AMOUNT,\n" +
                        //     "     SUM(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT\n" +
                        //     "     FROM FD_RENEWAL WHERE STATUS = 1 AND BRANCH_ID IN (?BRANCH_OFFICE_ID) AND RENEWAL_DATE BETWEEN ?DATE_TO AND ?DATE_TO\n" +
                        //     "     GROUP BY FD_ACCOUNT_ID) AS FDR ON FDA.FD_ACCOUNT_ID = FDR.FD_ACCOUNT_ID\n" +
                        //     "LEFT JOIN MASTER_BANK AS MBK ON FDA.BANK_ID = MBK.BANK_ID\n" +
                        //     "LEFT JOIN MASTER_LEDGER MLG ON FDA.LEDGER_ID = MLG.LEDGER_ID\n" +
                        //     "WHERE FDA.STATUS = 1 AND FDA.INVESTMENT_DATE <= ?DATE_TO\n" +
                        //     "AND FDA.PROJECT_ID IN (?PROJECT_ID) AND FDA.BRANCH_ID IN (?BRANCH_OFFICE_ID)\n" +
                        //     "AND FDA.AMOUNT + IFNULL(FDRO.ACCUMULATED_INTEREST_AMOUNT, 0) - IFNULL(FDRO.WITHDRAWAL_AMOUNT, 0) != 0) FDBAL GROUP BY FDBAL.FD_ACCOUNT_ID;";
                        break;
                    }
                case ReportSQLCommand.GeneralateReports.GeneralateActivityIncomeExpenseFA:
                    {
                        query = "SELECT CL.CON_LEDGER_ID,\n" +
                      "       CL.CON_PARENT_LEDGER_ID,\n" +
                      "       CL1.CON_PARENT_LEDGER_ID AS CON_MAIN_PARENT_ID,\n" +
                      "       CL1.CON_LEDGER_NAME AS MASTER_NAME,\n" +
                      "       CL.CON_LEDGER_NAME,\n" +
                      "       ML.LEDGER_ID,\n" +
                      "       ML.LEDGER_CODE,\n" +
                      "       ML.LEDGER_NAME,\n" +
                      "       IF(SUM(IE.AMOUNT) >0,SUM(IE.AMOUNT),0) AS NXTRECEIPT,\n" +
                      "       IF(SUM(IE.AMOUNT) <0,ABS(SUM(IE.AMOUNT)),0) AS NXTPAYMENT\n" +
                      "  FROM PORTAL_CONGREGATION_LEDGER AS CL\n" +
                      " INNER JOIN CONGREGATION_LEDGER_MAP CLM\n" +
                      "   ON CLM.CON_LEDGER_ID = CL.CON_LEDGER_ID\n" +
                      " INNER JOIN PORTAL_CONGREGATION_LEDGER AS CL1\n" +
                      "   ON CL1.CON_LEDGER_ID = CL.CON_PARENT_LEDGER_ID\n" +
                      "   INNER JOIN MASTER_LEDGER ML\n" +
                      "   ON ML.LEDGER_ID = CLM.LEDGER_ID AND CL.CON_LEDGER_CODE IN ('G','G1','G2','H','H1','H2','I','I1','I2','L','L1','L2')\n" +
                      " LEFT JOIN (SELECT MP.CUSTOMERID,\n" +
                      "                    ML.LEDGER_ID,\n" +
                      "                    ML.LEDGER_NAME,\n" +
                      "                    (CASE\n" +
                      "                      WHEN (SUM(CASE\n" +
                      "                                  WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                      "                                   IFNULL(LB2.AMOUNT, 0)\n" +
                      "                                  ELSE\n" +
                      "                                   -IFNULL(LB2.AMOUNT, 0)\n" +
                      "                                END)) >= 0 THEN\n" +
                      "                       - (SUM(CASE\n" +
                      "                                WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                      "                                 IFNULL(LB2.AMOUNT, 0)\n" +
                      "                                ELSE\n" +
                      "                                 -IFNULL(LB2.AMOUNT, 0)\n" +
                      "                              END))\n" +
                      "                      ELSE\n" +
                      "                       ABS(SUM(CASE\n" +
                      "                                 WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                      "                                  IFNULL(LB2.AMOUNT, 0)\n" +
                      "                                 ELSE\n" +
                      "                                  -IFNULL(LB2.AMOUNT, 0)\n" +
                      "                               END))\n" +
                      "                    END) AS AMOUNT,\n" +
                      "                    SUM(CASE\n" +
                      "                          WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                      "                           LB2.AMOUNT\n" +
                      "                          ELSE\n" +
                      "                           0\n" +
                      "                        END) AS AMOUNT_DR,\n" +
                      "                    SUM(CASE\n" +
                      "                          WHEN LB2.TRANS_MODE = 'CR' THEN\n" +
                      "                           LB2.AMOUNT\n" +
                      "                          ELSE\n" +
                      "                           0\n" +
                      "                        END) AS AMOUNT_CR,\n" +
                      "                    CASE\n" +
                      "                      WHEN (SUM(CASE\n" +
                      "                                  WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                      "                                   LB2.AMOUNT\n" +
                      "                                  ELSE\n" +
                      "                                   -LB2.AMOUNT\n" +
                      "                                END) >= 0) THEN\n" +
                      "                       'DR'\n" +
                      "                      ELSE\n" +
                      "                       'CR'\n" +
                      "                    END AS TRANS_MODE\n" +
                      "               FROM MASTER_LEDGER AS ML\n" +
                      "              INNER JOIN MASTER_LEDGER_GROUP AS LG\n" +
                      "                 ON ML.GROUP_ID = LG.GROUP_ID\n" +
                      "              INNER JOIN MASTER_PROJECT AS MP\n" +
                      "                 ON MP.PROJECT_ID IN (?PROJECT_ID)\n" +
                      "              INNER JOIN PROJECT_LEDGER AS PL\n" +
                      "                 ON PL.PROJECT_ID = MP.PROJECT_ID\n" +
                      "                AND PL.LEDGER_ID = ML.LEDGER_ID\n" +
                      "              INNER JOIN (SELECT LB.BALANCE_DATE,\n" +
                      "                                LB1.CUSTOMERID,\n" +
                      "                                LB.PROJECT_ID,\n" +
                      "                                LB.LEDGER_ID,\n" +
                      "                                LB.AMOUNT,\n" +
                      "                                LB.TRANS_MODE\n" +
                      "                           FROM LEDGER_BALANCE AS LB\n" +
                      "                          INNER JOIN (SELECT P.CUSTOMERID,\n" +
                      "                                            LBA.PROJECT_ID,\n" +
                      "                                            LBA.LEDGER_ID,\n" +
                      "                                            MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
                      "                                       FROM LEDGER_BALANCE LBA\n" +
                      "                                      INNER JOIN MASTER_PROJECT P\n" +
                      "                                         ON P.PROJECT_ID = LBA.PROJECT_ID\n" +
                      "                                      WHERE 1 = 1\n" +
                      "                                        AND LBA.BALANCE_DATE <=\n" +
                      "                                            ?DATE_TO\n" +
                      "                                      GROUP BY P.CUSTOMERID,\n" +
                      "                                               LBA.PROJECT_ID,\n" +
                      "                                               LBA.LEDGER_ID) AS LB1\n" +
                      "                             ON LB.PROJECT_ID = LB1.PROJECT_ID\n" +
                      "                            AND LB.LEDGER_ID = LB1.LEDGER_ID\n" +
                      "                          WHERE { LB1.CUSTOMERID IN (?LEGAL_ENTITY_ID) AND } LB.BALANCE_DATE = LB1.BAL_DATE) LB2 \n" +
                      "                 ON ML.LEDGER_ID = LB2.LEDGER_ID\n" +
                      "                AND MP.CUSTOMERID = LB2.CUSTOMERID\n" +
                      "                AND PL.PROJECT_ID = LB2.PROJECT_ID\n" +
                      "              WHERE 1 = 1\n" +
                      "                AND LG.GROUP_ID NOT IN (12, 13, 14)\n" +
                      "                AND LG.NATURE_ID IN (1, 2,3,4)\n" +
                      "              GROUP BY ML.LEDGER_ID\n" +
                      "             UNION ALL\n" +
                      "             SELECT MP.CUSTOMERID,\n" +
                      "                    ML.LEDGER_ID,\n" +
                      "                    ML.LEDGER_NAME,\n" +
                      "                    - (CASE\n" +
                      "                        WHEN (SUM(CASE\n" +
                      "                                    WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                      "                                     IFNULL(LB2.AMOUNT, 0)\n" +
                      "                                    ELSE\n" +
                      "                                     -IFNULL(LB2.AMOUNT, 0)\n" +
                      "                                  END)) >= 0 THEN\n" +
                      "                         - (SUM(CASE\n" +
                      "                                  WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                      "                                   IFNULL(LB2.AMOUNT, 0)\n" +
                      "                                  ELSE\n" +
                      "                                   -IFNULL(LB2.AMOUNT, 0)\n" +
                      "                                END))\n" +
                      "                        ELSE\n" +
                      "                         ABS(SUM(CASE\n" +
                      "                                   WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                      "                                    IFNULL(LB2.AMOUNT, 0)\n" +
                      "                                   ELSE\n" +
                      "                                    -IFNULL(LB2.AMOUNT, 0)\n" +
                      "                                 END))\n" +
                      "                      END) AS AMOUNT,\n" +
                      "                    -SUM(CASE\n" +
                      "                           WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                      "                            LB2.AMOUNT\n" +
                      "                           ELSE\n" +
                      "                            0\n" +
                      "                         END) AS AMOUNT_DR,\n" +
                      "                    -SUM(CASE\n" +
                      "                           WHEN LB2.TRANS_MODE = 'CR' THEN\n" +
                      "                            LB2.AMOUNT\n" +
                      "                           ELSE\n" +
                      "                            0\n" +
                      "                         END) AS AMOUNT_CR,\n" +
                      "                    CASE\n" +
                      "                      WHEN (SUM(CASE\n" +
                      "                                  WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                      "                                   LB2.AMOUNT\n" +
                      "                                  ELSE\n" +
                      "                                   -LB2.AMOUNT\n" +
                      "                                END) >= 0) THEN\n" +
                      "                       'DR'\n" +
                      "                      ELSE\n" +
                      "                       'CR'\n" +
                      "                    END AS TRANS_MODE\n" +
                      "               FROM MASTER_LEDGER AS ML\n" +
                      "              INNER JOIN MASTER_LEDGER_GROUP AS LG\n" +
                      "                 ON ML.GROUP_ID = LG.GROUP_ID\n" +
                      "              INNER JOIN MASTER_PROJECT AS MP\n" +
                      "                 ON MP.PROJECT_ID IN (?PROJECT_ID)\n" +
                      "              INNER JOIN PROJECT_LEDGER AS PL\n" +
                      "                 ON PL.PROJECT_ID = MP.PROJECT_ID\n" +
                      "                AND PL.LEDGER_ID = ML.LEDGER_ID\n" +
                      "              INNER JOIN (SELECT LB.BALANCE_DATE,\n" +
                      "                                 LB1.CUSTOMERID,\n" +
                      "                                 LB.PROJECT_ID,\n" +
                      "                                 LB.LEDGER_ID,\n" +
                      "                                 LB.AMOUNT,\n" +
                      "                                 LB.TRANS_MODE\n" +
                      "                            FROM LEDGER_BALANCE AS LB\n" +
                      "                           INNER JOIN (SELECT P.CUSTOMERID,\n" +
                      "                                             LBA.PROJECT_ID,\n" +
                      "                                             LBA.LEDGER_ID,\n" +
                      "                                             MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
                      "                                        FROM LEDGER_BALANCE LBA\n" +
                      "                                       INNER JOIN MASTER_PROJECT P\n" +
                      "                                          ON P.PROJECT_ID = LBA.PROJECT_ID\n" +
                      "                                       WHERE 1 = 1\n" +
                      "                                         AND LBA.BALANCE_DATE <\n" +
                      "                                             ?DATE_FROM\n" +
                      "                                       GROUP BY P.CUSTOMERID,\n" +
                      "                                                LBA.PROJECT_ID,\n" +
                      "                                                LBA.LEDGER_ID) AS LB1\n" +
                      "                              ON LB.PROJECT_ID = LB1.PROJECT_ID\n" +
                      "                             AND LB.LEDGER_ID = LB1.LEDGER_ID\n" +
                      "                           WHERE { LB1.CUSTOMERID IN (?LEGAL_ENTITY_ID) AND }   LB.BALANCE_DATE = LB1.BAL_DATE) LB2 \n" +
                      "                 ON ML.LEDGER_ID = LB2.LEDGER_ID\n" +
                      "                AND MP.CUSTOMERID = LB2.CUSTOMERID\n" +
                      "                AND PL.PROJECT_ID = LB2.PROJECT_ID\n" +
                      "              WHERE 1 = 1\n" +
                      "                AND LG.GROUP_ID NOT IN (12, 13, 14)\n" +
                      "                AND LG.NATURE_ID IN (1, 2,3,4)\n" +
                      "              GROUP BY MP.CUSTOMERID, ML.LEDGER_ID) AS IE\n" +
                      "    ON IE.LEDGER_ID = CLM.LEDGER_ID AND CL.CON_LEDGER_CODE IN ('G','G1','G2','H','H1','H2','I','I1','I2','L','L1','L2')\n" +
                      " GROUP BY CL.CON_LEDGER_ID, ML.LEDGER_ID ORDER BY LENGTH(ML.LEDGER_CODE), ML.LEDGER_CODE;";

                        //  query = "SELECT CL.CON_LEDGER_ID,\n" +
                        //"       CL.CON_PARENT_LEDGER_ID,\n" +
                        //"       CL1.CON_PARENT_LEDGER_ID AS CON_MAIN_PARENT_ID,\n" +
                        //"       CL1.CON_LEDGER_NAME AS MASTER_NAME,\n" +
                        //"       CL.CON_LEDGER_NAME,\n" +
                        //"       ML.LEDGER_ID,\n" +
                        //"       ML.LEDGER_CODE,\n" +
                        //"       ML.LEDGER_NAME,\n" +
                        //"       IF(SUM(IE.AMOUNT) >0,SUM(IE.AMOUNT),0) AS NXTRECEIPT,\n" +
                        //"       IF(SUM(IE.AMOUNT) <0,ABS(SUM(IE.AMOUNT)),0) AS NXTPAYMENT\n" +
                        //"  FROM CONGREGATION_LEDGER AS CL\n" +
                        //" INNER JOIN CONGREGATION_LEDGER_MAP CLM\n" +
                        //"   ON CLM.CON_LEDGER_ID = CL.CON_LEDGER_ID\n" +
                        //" INNER JOIN CONGREGATION_LEDGER AS CL1\n" +
                        //"   ON CL1.CON_LEDGER_ID = CL.CON_PARENT_LEDGER_ID\n" +
                        //"   INNER JOIN MASTER_LEDGER ML\n" +
                        //"   ON ML.LEDGER_ID = CLM.LEDGER_ID AND CL.CON_LEDGER_CODE IN ('G','G1','G2','H','H1','H2','I','I1','I2','L','L1','L2')\n" +
                        //" LEFT JOIN (SELECT MP.CUSTOMERID,\n" +
                        //"                    ML.LEDGER_ID,\n" +
                        //"                    ML.LEDGER_NAME,\n" +
                        //"                    (CASE\n" +
                        //"                      WHEN (SUM(CASE\n" +
                        //"                                  WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                        //"                                   IFNULL(LB2.AMOUNT, 0)\n" +
                        //"                                  ELSE\n" +
                        //"                                   -IFNULL(LB2.AMOUNT, 0)\n" +
                        //"                                END)) >= 0 THEN\n" +
                        //"                       - (SUM(CASE\n" +
                        //"                                WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                        //"                                 IFNULL(LB2.AMOUNT, 0)\n" +
                        //"                                ELSE\n" +
                        //"                                 -IFNULL(LB2.AMOUNT, 0)\n" +
                        //"                              END))\n" +
                        //"                      ELSE\n" +
                        //"                       ABS(SUM(CASE\n" +
                        //"                                 WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                        //"                                  IFNULL(LB2.AMOUNT, 0)\n" +
                        //"                                 ELSE\n" +
                        //"                                  -IFNULL(LB2.AMOUNT, 0)\n" +
                        //"                               END))\n" +
                        //"                    END) AS AMOUNT,\n" +
                        //"                    SUM(CASE\n" +
                        //"                          WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                        //"                           LB2.AMOUNT\n" +
                        //"                          ELSE\n" +
                        //"                           0\n" +
                        //"                        END) AS AMOUNT_DR,\n" +
                        //"                    SUM(CASE\n" +
                        //"                          WHEN LB2.TRANS_MODE = 'CR' THEN\n" +
                        //"                           LB2.AMOUNT\n" +
                        //"                          ELSE\n" +
                        //"                           0\n" +
                        //"                        END) AS AMOUNT_CR,\n" +
                        //"                    CASE\n" +
                        //"                      WHEN (SUM(CASE\n" +
                        //"                                  WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                        //"                                   LB2.AMOUNT\n" +
                        //"                                  ELSE\n" +
                        //"                                   -LB2.AMOUNT\n" +
                        //"                                END) >= 0) THEN\n" +
                        //"                       'DR'\n" +
                        //"                      ELSE\n" +
                        //"                       'CR'\n" +
                        //"                    END AS TRANS_MODE\n" +
                        //"               FROM MASTER_LEDGER AS ML\n" +
                        //"              INNER JOIN MASTER_LEDGER_GROUP AS LG\n" +
                        //"                 ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        //"              INNER JOIN MASTER_PROJECT AS MP\n" +
                        //"                 ON MP.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //"              INNER JOIN PROJECT_LEDGER AS PL\n" +
                        //"                 ON PL.PROJECT_ID = MP.PROJECT_ID\n" +
                        //"                AND PL.LEDGER_ID = ML.LEDGER_ID\n" +
                        //"              INNER JOIN (SELECT LB.BALANCE_DATE,\n" +
                        //"                                LB1.CUSTOMERID,\n" +
                        //"                                LB.PROJECT_ID,\n" +
                        //"                                LB.LEDGER_ID,\n" +
                        //"                                LB.AMOUNT,\n" +
                        //"                                LB.TRANS_MODE\n" +
                        //"                           FROM LEDGER_BALANCE AS LB\n" +
                        //"                          INNER JOIN (SELECT P.CUSTOMERID,\n" +
                        //"                                            LBA.PROJECT_ID,\n" +
                        //"                                            LBA.LEDGER_ID,\n" +
                        //"                                            MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
                        //"                                       FROM LEDGER_BALANCE LBA\n" +
                        //"                                      INNER JOIN MASTER_PROJECT P\n" +
                        //"                                         ON P.PROJECT_ID = LBA.PROJECT_ID\n" +
                        //"                                      WHERE 1 = 1\n" +
                        //"                                        AND LBA.BALANCE_DATE <=\n" +
                        //"                                            ?DATE_TO\n" +
                        //"                                      GROUP BY P.CUSTOMERID,\n" +
                        //"                                               LBA.PROJECT_ID,\n" +
                        //"                                               LBA.LEDGER_ID) AS LB1\n" +
                        //"                             ON LB.PROJECT_ID = LB1.PROJECT_ID\n" +
                        //"                            AND LB.LEDGER_ID = LB1.LEDGER_ID\n" +
                        //"                          WHERE { LB1.CUSTOMERID IN (?LEGAL_ENTITY_ID) AND } LB.BALANCE_DATE = LB1.BAL_DATE) LB2 \n" +
                        //"                 ON ML.LEDGER_ID = LB2.LEDGER_ID\n" +
                        //"                AND MP.CUSTOMERID = LB2.CUSTOMERID\n" +
                        //"                AND PL.PROJECT_ID = LB2.PROJECT_ID\n" +
                        //"              WHERE 1 = 1\n" +
                        //"                AND LG.GROUP_ID NOT IN (12, 13, 14)\n" +
                        //"                AND LG.NATURE_ID IN (1, 2,3,4)\n" +
                        //"              GROUP BY ML.LEDGER_ID\n" +
                        //"             UNION ALL\n" +
                        //"             SELECT MP.CUSTOMERID,\n" +
                        //"                    ML.LEDGER_ID,\n" +
                        //"                    ML.LEDGER_NAME,\n" +
                        //"                    - (CASE\n" +
                        //"                        WHEN (SUM(CASE\n" +
                        //"                                    WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                        //"                                     IFNULL(LB2.AMOUNT, 0)\n" +
                        //"                                    ELSE\n" +
                        //"                                     -IFNULL(LB2.AMOUNT, 0)\n" +
                        //"                                  END)) >= 0 THEN\n" +
                        //"                         - (SUM(CASE\n" +
                        //"                                  WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                        //"                                   IFNULL(LB2.AMOUNT, 0)\n" +
                        //"                                  ELSE\n" +
                        //"                                   -IFNULL(LB2.AMOUNT, 0)\n" +
                        //"                                END))\n" +
                        //"                        ELSE\n" +
                        //"                         ABS(SUM(CASE\n" +
                        //"                                   WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                        //"                                    IFNULL(LB2.AMOUNT, 0)\n" +
                        //"                                   ELSE\n" +
                        //"                                    -IFNULL(LB2.AMOUNT, 0)\n" +
                        //"                                 END))\n" +
                        //"                      END) AS AMOUNT,\n" +
                        //"                    -SUM(CASE\n" +
                        //"                           WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                        //"                            LB2.AMOUNT\n" +
                        //"                           ELSE\n" +
                        //"                            0\n" +
                        //"                         END) AS AMOUNT_DR,\n" +
                        //"                    -SUM(CASE\n" +
                        //"                           WHEN LB2.TRANS_MODE = 'CR' THEN\n" +
                        //"                            LB2.AMOUNT\n" +
                        //"                           ELSE\n" +
                        //"                            0\n" +
                        //"                         END) AS AMOUNT_CR,\n" +
                        //"                    CASE\n" +
                        //"                      WHEN (SUM(CASE\n" +
                        //"                                  WHEN LB2.TRANS_MODE = 'DR' THEN\n" +
                        //"                                   LB2.AMOUNT\n" +
                        //"                                  ELSE\n" +
                        //"                                   -LB2.AMOUNT\n" +
                        //"                                END) >= 0) THEN\n" +
                        //"                       'DR'\n" +
                        //"                      ELSE\n" +
                        //"                       'CR'\n" +
                        //"                    END AS TRANS_MODE\n" +
                        //"               FROM MASTER_LEDGER AS ML\n" +
                        //"              INNER JOIN MASTER_LEDGER_GROUP AS LG\n" +
                        //"                 ON ML.GROUP_ID = LG.GROUP_ID\n" +
                        //"              INNER JOIN MASTER_PROJECT AS MP\n" +
                        //"                 ON MP.PROJECT_ID IN (?PROJECT_ID)\n" +
                        //"              INNER JOIN PROJECT_LEDGER AS PL\n" +
                        //"                 ON PL.PROJECT_ID = MP.PROJECT_ID\n" +
                        //"                AND PL.LEDGER_ID = ML.LEDGER_ID\n" +
                        //"              INNER JOIN (SELECT LB.BALANCE_DATE,\n" +
                        //"                                 LB1.CUSTOMERID,\n" +
                        //"                                 LB.PROJECT_ID,\n" +
                        //"                                 LB.LEDGER_ID,\n" +
                        //"                                 LB.AMOUNT,\n" +
                        //"                                 LB.TRANS_MODE\n" +
                        //"                            FROM LEDGER_BALANCE AS LB\n" +
                        //"                           INNER JOIN (SELECT P.CUSTOMERID,\n" +
                        //"                                             LBA.PROJECT_ID,\n" +
                        //"                                             LBA.LEDGER_ID,\n" +
                        //"                                             MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
                        //"                                        FROM LEDGER_BALANCE LBA\n" +
                        //"                                       INNER JOIN MASTER_PROJECT P\n" +
                        //"                                          ON P.PROJECT_ID = LBA.PROJECT_ID\n" +
                        //"                                       WHERE 1 = 1\n" +
                        //"                                         AND LBA.BALANCE_DATE <\n" +
                        //"                                             ?DATE_FROM\n" +
                        //"                                       GROUP BY P.CUSTOMERID,\n" +
                        //"                                                LBA.PROJECT_ID,\n" +
                        //"                                                LBA.LEDGER_ID) AS LB1\n" +
                        //"                              ON LB.PROJECT_ID = LB1.PROJECT_ID\n" +
                        //"                             AND LB.LEDGER_ID = LB1.LEDGER_ID\n" +
                        //"                           WHERE { LB1.CUSTOMERID IN (?LEGAL_ENTITY_ID) AND }   LB.BALANCE_DATE = LB1.BAL_DATE) LB2 \n" +
                        //"                 ON ML.LEDGER_ID = LB2.LEDGER_ID\n" +
                        //"                AND MP.CUSTOMERID = LB2.CUSTOMERID\n" +
                        //"                AND PL.PROJECT_ID = LB2.PROJECT_ID\n" +
                        //"              WHERE 1 = 1\n" +
                        //"                AND LG.GROUP_ID NOT IN (12, 13, 14)\n" +
                        //"                AND LG.NATURE_ID IN (1, 2,3,4)\n" +
                        //"              GROUP BY MP.CUSTOMERID, ML.LEDGER_ID) AS IE\n" +
                        //"    ON IE.LEDGER_ID = CLM.LEDGER_ID AND CL.CON_LEDGER_CODE IN ('G','G1','G2','H','H1','H2','I','I1','I2','L','L1','L2')\n" +
                        //" GROUP BY CL.CON_LEDGER_ID, ML.LEDGER_ID ORDER BY LENGTH(ML.LEDGER_CODE), ML.LEDGER_CODE;";

                        break;
                    }
                case ReportSQLCommand.GeneralateReports.GeneralateActivityGSTLedgerIncomeExpense:
                    {
                        query = @"SELECT VT.LEDGER_ID , SUM(IF(VT.TRANS_MODE = 'CR', VT.AMOUNT, 0)) AS INCOME," +
                                                      "SUM(IF(VT.TRANS_MODE = 'DR', VT.AMOUNT, 0)) AS EXPENSE\n" +
                                                      "FROM VOUCHER_MASTER_TRANS VM\n" +
                                                      "INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VM.VOUCHER_ID AND VT.BRANCH_ID = VM.BRANCH_ID AND VT.LOCATION_ID = VM.LOCATION_ID\n" +
                                                      "AND VT.LEDGER_ID IN (?GST)\n" +
                                                      "WHERE VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                                                      "AND VM.PROJECT_ID IN (?PROJECT_ID) AND VM.STATUS=1\n" +
                                                      "GROUP BY VT.LEDGER_ID";

                        //query = @"SELECT VT.LEDGER_ID , SUM(IF(VT.TRANS_MODE = 'CR', VT.AMOUNT, 0)) AS INCOME," +
                        //                              "SUM(IF(VT.TRANS_MODE = 'DR', VT.AMOUNT, 0)) AS EXPENSE\n" +
                        //                              "FROM VOUCHER_MASTER_TRANS VM\n" +
                        //                              "INNER JOIN VOUCHER_TRANS VT ON VT.VOUCHER_ID = VM.VOUCHER_ID AND VT.BRANCH_ID = VM.BRANCH_ID AND VT.LOCATION_ID = VM.LOCATION_ID\n" +
                        //                              "AND VT.BRANCH_ID IN (?BRANCH_OFFICE_ID) AND VT.LEDGER_ID IN (2244, 2245, 2246)\n" +
                        //                              "WHERE VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO\n" +
                        //                              "AND VM.PROJECT_ID IN (?PROJECT_ID) AND VM.BRANCH_ID IN (?BRANCH_OFFICE_ID) AND VM.STATUS=1\n" +
                        //                              "GROUP BY VT.LEDGER_ID";
                        break;
                    }
                case ReportSQLCommand.GeneralateReports.GeneralateActivityIncomeExpense:
                    {
                        query = @"SELECT CL1.CON_LEDGER_CODE,CL.CON_LEDGER_CODE AS LEDGER_CODE, CL.CON_LEDGER_NAME AS CON_LEDGER_NAME,
                                  CL1.CON_LEDGER_NAME AS MASTER_NAME,
                                  CL2.CON_LEDGER_NAME AS MASTER_PARENT,
                                  IF((AMOUNT_ACTUAL) >0,(AMOUNT_ACTUAL),0) AS NXTRECEIPT,
                                  IF((AMOUNT_ACTUAL) <0,ABS((AMOUNT_ACTUAL)),0) AS NXTPAYMENT,
                                  IFNULL(AMOUNT_ACTUAL, 0) AS AMOUNT_ACTUAL
                                  FROM PORTAL_CONGREGATION_LEDGER AS CL
                                  LEFT JOIN PORTAL_CONGREGATION_LEDGER AS CL1
                                  ON CL1.CON_LEDGER_ID = CL.CON_PARENT_LEDGER_ID
                                  LEFT JOIN PORTAL_CONGREGATION_LEDGER AS CL2
                                  ON CL2.CON_LEDGER_ID = CL1.CON_PARENT_LEDGER_ID
                                  LEFT JOIN (SELECT CLM.CON_LEDGER_ID, SUM(AMOUNT_ACTUAL) AS AMOUNT_ACTUAL
                                FROM (SELECT ML.LEDGER_NAME, VT.LEDGER_ID, HML.HEADOFFICE_LEDGER_ID,MHL.LEDGER_NAME AS HO_LEDGER, SUM(IF(VT.TRANS_MODE = 'DR', -VT.AMOUNT, VT.AMOUNT)) AS AMOUNT_ACTUAL
                                      FROM VOUCHER_MASTER_TRANS VM
                                      INNER JOIN VOUCHER_TRANS VT ON VM.VOUCHER_ID = VT.VOUCHER_ID AND VM.BRANCH_ID = VT.BRANCH_ID and VM.LOCATION_ID  = VT.LOCATION_ID
                                      INNER JOIN MASTER_LEDGER ML on ML.LEDGER_ID = VT.LEDGER_ID
                                      INNER JOIN HEADOFFICE_MAPPED_LEDGER HML ON HML.LEDGER_ID = ML.LEDGER_ID
                                      INNER JOIN MASTER_HEADOFFICE_LEDGER MHL on MHL.HEADOFFICE_LEDGER_ID = HML.HEADOFFICE_LEDGER_ID
                                      WHERE  VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND VM.PROJECT_ID IN (?PROJECT_ID) AND VM.STATUS=1
                                GROUP BY VT.LEDGER_ID) BAL
                                LEFT JOIN PORTAL_CONGREGATION_LEDGER_MAP CLM
                                ON CLM.LEDGER_ID = BAL.HEADOFFICE_LEDGER_ID
                                GROUP BY CLM.CON_LEDGER_ID) AS GEN_BAL
                                ON GEN_BAL.CON_LEDGER_ID = CL.CON_LEDGER_ID
                                WHERE (CL1.CON_LEDGER_NAME <> CL2.CON_LEDGER_NAME OR CL1.CON_LEDGER_CODE = 'E')
                                ORDER BY LENGTH(CL.CON_LEDGER_CODE), CL.CON_LEDGER_CODE";

                        //                        query = @"SELECT CL1.CON_LEDGER_CODE,CL.CON_LEDGER_CODE AS LEDGER_CODE, CL.CON_LEDGER_NAME AS CON_LEDGER_NAME,
                        //                                  CL1.CON_LEDGER_NAME AS MASTER_NAME,
                        //                                  CL2.CON_LEDGER_NAME AS MASTER_PARENT,
                        //                                  IF((AMOUNT_ACTUAL) >0,(AMOUNT_ACTUAL),0) AS NXTRECEIPT,
                        //                                  IF((AMOUNT_ACTUAL) <0,ABS((AMOUNT_ACTUAL)),0) AS NXTPAYMENT,
                        //                                  IFNULL(AMOUNT_ACTUAL, 0) AS AMOUNT_ACTUAL
                        //                                  FROM PORTAL_CONGREGATION_LEDGER AS CL
                        //                                  LEFT JOIN PORTAL_CONGREGATION_LEDGER AS CL1
                        //                                  ON CL1.CON_LEDGER_ID = CL.CON_PARENT_LEDGER_ID
                        //                                  LEFT JOIN PORTAL_CONGREGATION_LEDGER AS CL2
                        //                                  ON CL2.CON_LEDGER_ID = CL1.CON_PARENT_LEDGER_ID
                        //                                  LEFT JOIN (SELECT CLM.CON_LEDGER_ID, SUM(AMOUNT_ACTUAL) AS AMOUNT_ACTUAL
                        //                                FROM ( SELECT ML.LEDGER_NAME, VT.LEDGER_ID, SUM(IF(VT.TRANS_MODE = 'DR', -VT.AMOUNT, VT.AMOUNT)) AS AMOUNT_ACTUAL
                        //                                FROM VOUCHER_MASTER_TRANS VM
                        //                                INNER JOIN VOUCHER_TRANS VT ON VM.VOUCHER_ID = VT.VOUCHER_ID AND VM.BRANCH_ID = VT.BRANCH_ID and VM.LOCATION_ID  = VT.LOCATION_ID
                        //                                INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID
                        //                                WHERE  VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND VM.PROJECT_ID IN (?PROJECT_ID) AND VM.STATUS=1
                        //                                GROUP BY VT.LEDGER_ID) BAL
                        //                                LEFT JOIN PORTAL_CONGREGATION_LEDGER_MAP CLM
                        //                                ON CLM.LEDGER_ID = BAL.LEDGER_ID
                        //                                GROUP BY CLM.CON_LEDGER_ID) AS GEN_BAL
                        //                                ON GEN_BAL.CON_LEDGER_ID = CL.CON_LEDGER_ID
                        //                                WHERE (CL1.CON_LEDGER_NAME <> CL2.CON_LEDGER_NAME OR CL1.CON_LEDGER_CODE = 'E')
                        //                                ORDER BY LENGTH(CL.CON_LEDGER_CODE), CL.CON_LEDGER_CODE";

                        //                        query = @"SELECT CL1.CON_LEDGER_CODE,CL.CON_LEDGER_CODE AS LEDGER_CODE, CL.CON_LEDGER_NAME AS CON_LEDGER_NAME,
                        //                                  CL1.CON_LEDGER_NAME AS MASTER_NAME,
                        //                                  CL2.CON_LEDGER_NAME AS MASTER_PARENT,
                        //                                  IF((AMOUNT_ACTUAL) >0,(AMOUNT_ACTUAL),0) AS NXTRECEIPT,
                        //                                  IF((AMOUNT_ACTUAL) <0,ABS((AMOUNT_ACTUAL)),0) AS NXTPAYMENT,
                        //                                  IFNULL(AMOUNT_ACTUAL, 0) AS AMOUNT_ACTUAL
                        //                                  FROM CONGREGATION_LEDGER AS CL
                        //                                  LEFT JOIN CONGREGATION_LEDGER AS CL1
                        //                                  ON CL1.CON_LEDGER_ID = CL.CON_PARENT_LEDGER_ID
                        //                                  LEFT JOIN CONGREGATION_LEDGER AS CL2
                        //                                  ON CL2.CON_LEDGER_ID = CL1.CON_PARENT_LEDGER_ID
                        //                                  LEFT JOIN (SELECT CLM.CON_LEDGER_ID, SUM(AMOUNT_ACTUAL) AS AMOUNT_ACTUAL
                        //                                FROM ( SELECT ML.LEDGER_NAME, VT.LEDGER_ID, SUM(IF(VT.TRANS_MODE = 'DR', -VT.AMOUNT, VT.AMOUNT)) AS AMOUNT_ACTUAL
                        //                                FROM VOUCHER_MASTER_TRANS VM
                        //                                INNER JOIN VOUCHER_TRANS VT ON VM.VOUCHER_ID = VT.VOUCHER_ID AND VM.BRANCH_ID = VT.BRANCH_ID and VM.LOCATION_ID  = VT.LOCATION_ID
                        //                                INNER JOIN MASTER_LEDGER ML ON ML.LEDGER_ID = VT.LEDGER_ID
                        //                                WHERE  VM.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO AND VM.PROJECT_ID IN (?PROJECT_ID) AND VM.BRANCH_ID IN (?BRANCH_OFFICE_ID) AND VM.STATUS=1
                        //                                GROUP BY VT.LEDGER_ID) BAL
                        //                                LEFT JOIN CONGREGATION_LEDGER_MAP CLM
                        //                                ON CLM.LEDGER_ID = BAL.LEDGER_ID
                        //                                GROUP BY CLM.CON_LEDGER_ID) AS GEN_BAL
                        //                                ON GEN_BAL.CON_LEDGER_ID = CL.CON_LEDGER_ID
                        //                                WHERE (CL1.CON_LEDGER_NAME <> CL2.CON_LEDGER_NAME OR CL1.CON_LEDGER_CODE = 'E')
                        //                                ORDER BY LENGTH(CL.CON_LEDGER_CODE), CL.CON_LEDGER_CODE";

                        break;
                    }
            }
            return query;
        }
    }

    #endregion
    #endregion
}

/*query = "SELECT "+
           "ML.LEDGER_CODE AS LEDGER_CODE, "+
           "ML.LEDGER_NAME AS LEDGER_NAME, "+
           "LG.LEDGER_GROUP AS LEDGER_GROUP, "+
           "SUM(VT.AMOUNT) AS TOTAL, "+
           "GT.AMOUNT AS PROGRESS, "+
           "MT.VOUCHER_DATE "+
           "FROM VOUCHER_TRANS VT "+
           "LEFT JOIN VOUCHER_MASTER_TRANS MT "+
           "ON VT.VOUCHER_ID = MT.VOUCHER_ID "+
           "LEFT JOIN MASTER_PROJECT MP "+
           "ON MP.PROJECT_ID = MT.PROJECT_ID "+
           "LEFT JOIN MASTER_LEDGER ML "+
           "ON ML.LEDGER_ID = VT.LEDGER_ID "+
           "LEFT JOIN MASTER_LEDGER_GROUP LG "+
           "ON LG.GROUP_ID = ML.GROUP_ID "+
           "LEFT JOIN MASTER_DIVISION MD "+
           "ON MD.DIVISION_ID = MP.DIVISION_ID "+
           "JOIN (SELECT ML.LEDGER_ID, SUM(VT.AMOUNT) AS AMOUNT "+
           "FROM VOUCHER_TRANS VT "+
           "LEFT JOIN VOUCHER_MASTER_TRANS MT "+
           "ON VT.VOUCHER_ID = MT.VOUCHER_ID "+
           "LEFT JOIN MASTER_PROJECT MP "+
           "ON MP.PROJECT_ID = MT.PROJECT_ID "+
           "LEFT JOIN MASTER_LEDGER ML "+
           "ON ML.LEDGER_ID = VT.LEDGER_ID "+
           "LEFT JOIN MASTER_LEDGER_GROUP LG "+
           "ON LG.GROUP_ID = ML.GROUP_ID "+
           "WHERE FIND_IN_SET(MT.PROJECT_ID, ?PROJECT) "+
           "AND MT.VOUCHER_TYPE =?VOUCHER_TYPE " +
           "AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO "+
           "GROUP BY VT.LEDGER_ID) AS GT "+
           "ON ML.LEDGER_ID = GT.LEDGER_ID "+
           "WHERE FIND_IN_SET(MT.PROJECT_ID,?PROJECT) "+
           "AND MT.VOUCHER_TYPE=?VOUCHER_TYPE "+
           "AND MT.VOUCHER_DATE BETWEEN ?BEGIN_FROM  AND ?DATE_TO "+
           "GROUP BY VT.LEDGER_ID";*/

/*case ReportSQLCommand.Report.MultiAbstract:
{
    query = "SELECT " +
            "MP.PROJECT AS PROJECT_NAME, " +
            "ML.LEDGER_CODE AS LEDGER_CODE," +
            "ML.LEDGER_NAME AS LEDGER_NAME, " +
            "MD.DIVISION, " +
            "LG.LEDGER_GROUP AS GROUP_NAME, " +
            "SUM(VT.AMOUNT) AS TOTAL, " +
            "GT.AMOUNT AS PROGRESS, " +
            "MT.VOUCHER_DATE " +
            "FROM VOUCHER_TRANS VT " +
            "LEFT JOIN VOUCHER_MASTER_TRANS MT " +
            "ON VT.VOUCHER_ID = MT.VOUCHER_ID " +
            "LEFT JOIN MASTER_PROJECT MP " +
            "ON MP.PROJECT_ID = MT.PROJECT_ID " +
            "LEFT JOIN MASTER_LEDGER ML " +
            "ON ML.LEDGER_ID = VT.LEDGER_ID " +
            "LEFT JOIN MASTER_LEDGER_GROUP LG " +
            "ON LG.GROUP_ID = ML.GROUP_ID " +
            "LEFT JOIN MASTER_DIVISION MD " +
            "ON MD.DIVISION_ID = MP.DIVISION_ID " +
            "JOIN (SELECT ML.LEDGER_ID, SUM(VT.AMOUNT) AS AMOUNT " +
            "FROM VOUCHER_TRANS VT " +
            "LEFT JOIN VOUCHER_MASTER_TRANS MT " +
            "ON VT.VOUCHER_ID = MT.VOUCHER_ID " +
            "LEFT JOIN MASTER_PROJECT MP " +
            "ON MP.PROJECT_ID = MT.PROJECT_ID " +
            "LEFT JOIN MASTER_LEDGER ML " +
            "ON ML.LEDGER_ID = VT.LEDGER_ID " +
            "LEFT JOIN MASTER_LEDGER_GROUP LG " +
            "ON LG.GROUP_ID = ML.GROUP_ID " +
            "WHERE FIND_IN_SET(MT.PROJECT_ID, ?PROJECT) " +
            "AND MT.VOUCHER_TYPE = ?VOUCHER_TYPE " +
            "AND MT.VOUCHER_DATE BETWEEN ?DATE_FROM AND ?DATE_TO " +
            "GROUP BY VT.LEDGER_ID) AS GT " +
            "ON ML.LEDGER_ID = GT.LEDGER_ID " +
            "WHERE FIND_IN_SET(MT.PROJECT_ID,?PROJECT) " +
           "AND MT.VOUCHER_TYPE = ?VOUCHER_TYPE " +
            "AND MT.VOUCHER_DATE BETWEEN ?BEGIN_FROM  AND ?DATE_TO " +
            "GROUP BY VT.LEDGER_ID";
    break;
}*/

//case ReportSQLCommand.FinalAccounts.GeneralateReportAnnualStatementAccounts:
//                    {
//                        //#1. instead of calculating balances for date range from transaction, we take from ledger balance closing balance for date to and opening balance for date from and subtract it.
//                        //#2. //For Asset and Liability ledgers lets add Opening Balance based on its values debit or credit side
//                              //For IE ledgers, If report date from is books begin date, let us add Opening Balance based on its values debit or credit side

//                        query = "SELECT LG.NATURE_ID, ML.GROUP_ID, ML.LEDGER_ID, IFNULL(ML.IS_DEPRECIATION_LEDGER, 0) AS IS_DEPRECIATION_LEDGER, BCL.CON_LEDGER_CODE,\n" +
//                                    "ML.LEDGER_CODE, ML.LEDGER_NAME,\n" +
//                                    "(IFNULL(CY_LBCL.AMOUNT,0) - IFNULL(CY_LBOP.AMOUNT,0))  + \n" +
//                                    "    IF((LG.NATURE_ID IN (" + (int)Natures.Assert + ", " + (int)Natures.Libilities + ") OR ?BEGIN_FROM = ?DATE_FROM), IFNULL(CY_LBOP.AMOUNT, 0), 0) AS CURRENT_YEAR_BALANCE, \n" +
//                                    "(IFNULL(PY_LBCL.AMOUNT,0) - IFNULL(PY_LBOP.AMOUNT,0)) + \n" +
//                                    "    IF((LG.NATURE_ID IN (" + (int)Natures.Assert + ", " + (int)Natures.Libilities + ") OR ?BEGIN_FROM = DATE_ADD(?DATE_FROM, INTERVAL -1 YEAR)), IFNULL(PY_LBOP.AMOUNT, 0), 0) AS PREVIOUS_YEAR_BALANCE, \n" +
//                                    "IF(ML.GROUP_ID =13, 0, IF(ML.GROUP_ID =12, 1, IF(ML.GROUP_ID = 14, 2, 3)) ) AS IS_CASH_BANK_FD_ORDER, \n" +
//                                    "IFNULL(CY_LBOP.AMOUNT, 0) AS OP_AMOUNT, IFNULL(PY_LBOP.AMOUNT, 0) AS OP_AMOUNT_PREVIOUS \n" +
//                                    "FROM MASTER_LEDGER AS ML\n" +
//                                    "INNER JOIN MASTER_LEDGER_GROUP AS LG ON ML.GROUP_ID = LG.GROUP_ID\n" +
//                                    "INNER JOIN BRANCH_CONGREGATION_LEDGER_MAP BCLG ON BCLG.LEDGER_ID = ML.LEDGER_ID\n" +
//                                    "INNER JOIN BRANCH_CONGREGATION_LEDGER BCL ON BCL.CON_LEDGER_ID = BCLG.CON_LEDGER_ID\n" +
//                                    "LEFT JOIN (SELECT LB.LEDGER_ID, SUM(CASE WHEN LB.TRANS_MODE = 'DR' THEN IFNULL(LB.AMOUNT,0) ELSE - IFNULL(LB.AMOUNT,0) END) AS AMOUNT\n" +
//                                    "        FROM LEDGER_BALANCE AS LB\n" +
//                                    "        LEFT JOIN (SELECT LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID, MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
//                                    "                    FROM LEDGER_BALANCE LBA\n" +
//                                    "                    WHERE 1 = 1 AND LBA.BALANCE_DATE <= ?DATE_TO AND LBA.PROJECT_ID IN (?PROJECT_ID)\n" +
//                                    "                    GROUP BY LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB1 ON LB1.BRANCH_ID = LB.BRANCH_ID \n" +
//                                    "                       AND LB1.PROJECT_ID = LB.PROJECT_ID AND LB1.LEDGER_ID = LB.LEDGER_ID\n" +
//                                    "        WHERE LB.BRANCH_ID IN (0) AND LB.PROJECT_ID IN (?PROJECT_ID) AND LB.BALANCE_DATE = LB1.BAL_DATE GROUP BY LB.LEDGER_ID) AS CY_LBCL ON \n" +
//                                    "        CY_LBCL.LEDGER_ID = ML.LEDGER_ID\n" +
//                                    "LEFT JOIN (SELECT LB.LEDGER_ID, SUM(CASE WHEN LB.TRANS_MODE = 'DR' THEN IFNULL(LB.AMOUNT,0) ELSE - IFNULL(LB.AMOUNT,0) END) AS AMOUNT\n" +
//                                    "        FROM LEDGER_BALANCE AS LB\n" +
//                                    "        LEFT JOIN (SELECT LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID, MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
//                                    "                    FROM LEDGER_BALANCE LBA\n" +
//                                    "                    WHERE 1 = 1 AND LBA.BALANCE_DATE < ?DATE_FROM AND LBA.PROJECT_ID IN (?PROJECT_ID)\n" +
//                                    "                    GROUP BY LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB1 ON LB1.BRANCH_ID = LB.BRANCH_ID\n" +
//                                    "                        AND LB1.PROJECT_ID = LB.PROJECT_ID AND LB1.LEDGER_ID = LB.LEDGER_ID\n" +
//                                    "        WHERE LB.BRANCH_ID IN (0) AND LB.PROJECT_ID IN (?PROJECT_ID) AND LB.BALANCE_DATE = LB1.BAL_DATE GROUP BY LB.LEDGER_ID) AS CY_LBOP ON \n" +
//                                    "        CY_LBOP.LEDGER_ID = ML.LEDGER_ID\n" +
//                                    "LEFT JOIN (SELECT LB.LEDGER_ID, SUM(CASE WHEN LB.TRANS_MODE = 'DR' THEN IFNULL(LB.AMOUNT,0) ELSE - IFNULL(LB.AMOUNT,0) END) AS AMOUNT\n" +
//                                    "        FROM LEDGER_BALANCE AS LB\n" +
//                                    "        LEFT JOIN (SELECT LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID, MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
//                                    "                    FROM LEDGER_BALANCE LBA\n" +
//                                    "                    WHERE 1 = 1 AND LBA.BALANCE_DATE <= DATE_ADD(?DATE_TO, INTERVAL -1 YEAR) AND LBA.PROJECT_ID IN (?PROJECT_ID)\n" +
//                                    "                    GROUP BY LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB1 ON LB1.BRANCH_ID = LB.BRANCH_ID \n" +
//                                    "                       AND LB1.PROJECT_ID = LB.PROJECT_ID AND LB1.LEDGER_ID = LB.LEDGER_ID\n" +
//                                    "        WHERE LB.BRANCH_ID IN (0) AND LB.PROJECT_ID IN (?PROJECT_ID) AND LB.BALANCE_DATE = LB1.BAL_DATE GROUP BY LB.LEDGER_ID) AS PY_LBCL ON \n" +
//                                    "        PY_LBCL.LEDGER_ID = ML.LEDGER_ID\n" +
//                                    "LEFT JOIN (SELECT LB.LEDGER_ID, SUM(CASE WHEN LB.TRANS_MODE = 'DR' THEN IFNULL(LB.AMOUNT,0) ELSE - IFNULL(LB.AMOUNT,0) END) AS AMOUNT\n" +
//                                    "        FROM LEDGER_BALANCE AS LB\n" +
//                                    "        LEFT JOIN (SELECT LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID, MAX(LBA.BALANCE_DATE) AS BAL_DATE\n" +
//                                    "                    FROM LEDGER_BALANCE LBA\n" +
//                                    "                    WHERE 1 = 1 AND LBA.BALANCE_DATE < DATE_ADD(?DATE_FROM, INTERVAL -1 YEAR) AND LBA.PROJECT_ID IN (?PROJECT_ID)\n" +
//                                    "                    GROUP BY LBA.BRANCH_ID, LBA.PROJECT_ID, LBA.LEDGER_ID) AS LB1 ON LB1.BRANCH_ID = LB.BRANCH_ID\n" +
//                                    "                        AND LB1.PROJECT_ID = LB.PROJECT_ID AND LB1.LEDGER_ID = LB.LEDGER_ID\n" +
//                                    "        WHERE LB.BRANCH_ID IN (0) AND LB.PROJECT_ID IN (?PROJECT_ID) AND LB.BALANCE_DATE = LB1.BAL_DATE GROUP BY LB.LEDGER_ID) AS PY_LBOP ON \n" +
//                                    "        PY_LBOP.LEDGER_ID = ML.LEDGER_ID";
//                                    // "WHERE LG.NATURE_ID IN (?NATURE_ID) OR ML.IS_DEPRECIATION_LEDGER = 1";
//                        break;
//                    }